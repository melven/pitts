[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22910371587968 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22910340122624 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22910227966080 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22910196500736 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22910026639744 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22909995174400 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22909825313408 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22909793848064 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22909623987072 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22909592521728 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22909422660736 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22909391195392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22909221334400 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22909189869056 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22909020008064 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22910307862272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22910301271808 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 18.6156
singular values (new):
1585.26 1584.97 1584.71 1584.51 1584.26  1583.8 1583.63 1583.55 1583.48 1583.42 1583.28 1583.14 1583.02 1582.83 1582.49 1582.33 1582.31 1582.23 1581.95 1581.64 1581.61 1581.56 1581.46 1581.25 1581.07 1581.04  1580.9 1580.85 1580.69 1580.59 1580.41 1580.31 1580.11 1580.06 1579.95 1579.86 1579.64 1579.45 1579.36  1579.2 1578.98 1578.82 1578.58 1578.35 1578.23  1578.1 1577.92 1577.72 1577.49 1576.91
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500000, cols: 50, reductionFactor: 37, colBlockingSize: 12)	 18.6152   	 200       	 413.786   	 0         	 32.232    	 12.8378   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 7500000, cols: 50)                                                                              	 0.235765  	 1         	 0         	 0         	 12.7245   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 18.6152   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.235765  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.000156079	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 2.298e-06 	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22734786008960 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22734671177728 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22734639712384 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22734536960256 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22734505494912 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22734335633920 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22734304168576 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22734134307584 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22734102842240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22733932981248 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22733901515904 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22733731654912 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22733700189568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22733530328576 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22733498863232 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22734753748736 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22734747158272 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 32.939
singular values (new):
 1123.7 1123.39 1123.22 1122.94 1122.81 1122.62 1122.56 1122.41 1122.26 1122.13 1121.95 1121.82 1121.79 1121.74 1121.45 1121.38 1121.35 1121.25 1121.08 1121.01  1120.9 1120.78 1120.73 1120.53 1120.51 1120.32 1120.26 1120.15 1120.05 1119.98 1119.89 1119.76 1119.72 1119.64 1119.49 1119.38  1119.3 1119.23  1119.2 1119.04 1118.84 1118.79 1118.72 1118.66  1118.6 1118.56 1118.43 1118.22 1118.16 1117.99 1117.95 1117.86  1117.8  1117.7 1117.59 1117.55 1117.44 1117.39 1117.27 1117.21 1117.13 1117.01 1116.96 1116.76 1116.69  1116.6 1116.47  1116.4 1116.31 1116.28 1116.07 1116.01  1115.9 1115.87 1115.64 1115.61 1115.49 1115.34 1115.29 1115.24 1115.14 1115.04 1114.88 1114.79 1114.77 1114.69 1114.53 1114.33  1114.3  1114.2 1113.91 1113.81 1113.66  1113.6 1113.49 1113.26 1113.23 1112.89 1112.76 1112.37
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750000, cols: 100, reductionFactor: 37, colBlockingSize: 12)	 32.9385   	 200       	 467.702   	 0         	 18.2163   	 25.675    
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 3750000, cols: 100)                                                                              	 0.242735  	 1         	 0         	 0         	 12.3592   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 32.9385   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.242735  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.000306537	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 1.7334e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22416382826368 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22416351361024 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22416239618176 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22416208152832 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22416038291840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22416006826496 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22415836965504 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22415805500160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22415635639168 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22415604173824 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22415434312832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22415402847488 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22415232986496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22415201521152 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22415031660160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22416319100672 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22416312510208 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 47.4693
singular values (new):
919.628 919.515   919.4 919.142 919.025 918.728 918.655  918.56 918.388  918.21 918.171 918.023 917.968 917.872 917.772 917.567 917.471 917.341 917.269   917.2 917.163 917.037 916.939 916.782 916.692 916.606 916.591 916.548 916.489 916.402  916.34 916.169   916.1 916.066 916.001 915.936 915.819 915.795  915.67 915.514 915.428 915.359 915.211 915.162 915.142 915.085 914.957 914.915 914.835 914.782 914.727 914.671 914.595 914.499   914.4  914.37 914.302 914.185 914.117 914.029  913.98 913.949 913.747 913.729 913.671  913.54 913.492 913.435 913.307 913.278 913.171 912.989 912.977 912.918 912.871 912.773 912.744 912.652 912.596 912.501 912.498  912.35 912.303 912.235 912.144 912.133 912.062  911.98 911.901 911.837 911.695 911.626 911.597 911.508 911.452 911.353 911.289  911.24 911.167 911.102 910.968 910.889  910.79 910.732 910.692 910.662 910.574 910.473 910.455 910.409 910.315 910.228 910.114 910.049 909.917 909.899 909.721 909.607 909.507 909.474 909.428 909.297  909.19 909.181 909.088 908.952  908.88 908.813 908.706 908.601 908.528 908.423 908.262 908.245  908.13 908.106 907.986 907.822 907.796  907.61 907.474 907.444 907.424 907.354 907.129 906.931 906.705 906.532 906.354 905.993
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500000, cols: 150, reductionFactor: 37, colBlockingSize: 12)	 47.4687   	 200       	 486.808   	 0         	 12.6407   	 38.5112   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 2500000, cols: 150)                                                                              	 0.243785  	 1         	 0         	 0         	 12.3059   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 47.4687   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.243785  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.000504973	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 1.9111e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22424930363264 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22424829552640 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22424798087296 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22424695335168 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22424663869824 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22424494008832 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22424462543488 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22424292682496 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22424261217152 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22424091356160 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22424059890816 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22423890029824 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22423858564480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22423688703488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22423657238144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22424766625536 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22424631289600 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 61.3606
singular values (new):
798.233 798.122 797.854 797.726 797.608 797.522 797.455 797.391 797.312 797.245 796.981 796.912 796.865 796.813  796.68 796.642 796.404 796.333 796.311 796.177  796.08  796.02 795.997 795.887 795.817 795.725 795.623 795.598 795.461   795.4 795.305 795.216 795.103 795.056 794.952  794.89 794.818 794.759 794.615 794.531 794.522 794.413 794.296 794.256 794.218 794.123 794.096 794.036 793.962 793.903 793.776 793.757 793.654 793.569 793.496 793.451 793.429   793.3 793.278 793.237 793.134 793.037 792.988  792.93 792.844 792.791 792.636 792.613 792.557  792.47 792.406 792.346 792.278 792.206 792.106 792.049 791.993 791.991 791.852 791.798  791.77 791.665 791.617 791.569 791.536  791.46 791.439 791.295  791.24  791.18 791.149 791.062 790.911 790.843 790.809 790.783 790.723 790.707 790.672 790.512 790.459 790.439 790.406 790.362 790.165 790.143 790.088 789.999 789.943 789.921  789.88 789.805  789.71 789.695 789.631 789.585 789.549 789.485 789.356 789.327 789.253 789.174 789.049 788.994  788.95 788.842 788.794 788.739 788.713 788.621  788.56 788.509 788.436 788.393 788.225 788.208 788.143 788.059 787.978 787.961 787.886 787.807 787.749 787.701 787.585 787.541 787.537 787.339 787.258 787.224 787.136 787.101 786.985 786.948 786.856 786.811 786.747 786.724 786.618 786.524 786.374 786.336 786.315 786.203 786.182  786.15 786.044 786.017 785.964 785.927 785.721 785.695 785.668  785.58  785.53  785.41 785.365 785.242 785.161 785.031  784.99 784.883 784.753 784.671 784.575  784.43  784.38 784.301 784.209 783.974 783.915 783.869 783.812 783.663  783.47 783.358 783.221  783.02 782.813 782.407
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1875000, cols: 200, reductionFactor: 30, colBlockingSize: 12)	 61.3601   	 200       	 505.215   	 0         	 9.77939   	 51.6612   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1875000, cols: 200)                                                                              	 0.250394  	 1         	 0         	 0         	 11.9811   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 61.3601   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.250394  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.00066437	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 2.1462e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22527557105536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22527439005696 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22527407540352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22527304788224 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22527273322880 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22527103461888 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22527071996544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22526902135552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22526870670208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22526700809216 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22526669343872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22526499482880 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22526468017536 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22526298156544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22526266691200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22527524845312 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22527518254848 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 75.4471
singular values (new):
716.265 715.977   715.7 715.567 715.352 715.222 715.149 714.948 714.926 714.814 714.776 714.571 714.486 714.392 714.359 714.181 714.121 713.944 713.937 713.856 713.833 713.732 713.551 713.537 713.393 713.326 713.231 713.177 713.033 712.929 712.919 712.871 712.794 712.752  712.73 712.619 712.513 712.448 712.303 712.272 712.212 712.179 712.103 712.067 711.966 711.908 711.839 711.763 711.695 711.611 711.588 711.539 711.424 711.358  711.22 711.133 711.056 711.031 710.973 710.889 710.874 710.838 710.772 710.734 710.607 710.522 710.475 710.464 710.307 710.283 710.275 710.172 710.109 710.101 709.982 709.959 709.873 709.786  709.76 709.716 709.597 709.516 709.471 709.468 709.359 709.347 709.267 709.204 709.178 709.127 708.998 708.944 708.884 708.845 708.767 708.749 708.692 708.633 708.608 708.565 708.515 708.459 708.336 708.306 708.257 708.222  708.11 707.996 707.955 707.864 707.828 707.766 707.742 707.698  707.61 707.604 707.508 707.461 707.422 707.351 707.284 707.253  707.19 707.105 707.051  707.04  707.02 706.946 706.897 706.867 706.693 706.656 706.572 706.558 706.498 706.458 706.414  706.35 706.295 706.226 706.222 706.102 706.076 706.027 706.014 705.913 705.852 705.788 705.767 705.673 705.623 705.536 705.522 705.491 705.384 705.346 705.289 705.176  705.15 705.076 705.017 704.958 704.906 704.808  704.74 704.672 704.586   704.5 704.491 704.442 704.417 704.336 704.307  704.25 704.165 704.081 704.037 703.962 703.931 703.804 703.745 703.702 703.694 703.604 703.515 703.484 703.383 703.353 703.247 703.175 703.128 703.054 702.985 702.938 702.851 702.835 702.737  702.73 702.597 702.559 702.479 702.468 702.436 702.316 702.246 702.208 702.107 702.046 702.013 701.911  701.82 701.777 701.745 701.683  701.59 701.549 701.452 701.365 701.253 701.107  701.05 701.007 700.941  700.91 700.783 700.711 700.608 700.533 700.494  700.41 700.375 700.369 700.197 700.112 699.964 699.936 699.792 699.729 699.659  699.47 699.412 699.286 699.236 699.098 698.991 698.782 698.715 698.474 698.412 698.119
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1500000, cols: 250, reductionFactor: 24, colBlockingSize: 12)	 75.4465   	 200       	 517.751   	 0         	 7.95398   	 65.0933   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1500000, cols: 250)                                                                              	 0.254691  	 1         	 0         	 0         	 11.779    	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 75.4465   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.254691  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.000793879	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 2.2119e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22887171684224 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22887140218880 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22887108753536 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22886874081536 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22886842616192 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22886739864064 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22886708398720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22886538537728 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22886507072384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22886337211392 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22886305746048 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22886135885056 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22886104419712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22885934558720 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22885903093376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22886811154176 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22886675547904 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 89.4335
singular values (new):
655.448 654.965 654.743 654.618 654.477 654.414 654.338  654.23 654.086 654.037 653.899 653.743 653.672 653.656  653.55 653.401 653.384 653.274 653.168 653.104 653.013 652.983 652.908 652.829 652.749 652.672 652.539 652.486 652.471 652.412 652.286 652.255 652.232 652.003 651.996  651.96 651.812 651.802 651.734 651.604 651.543 651.513 651.436 651.368 651.292 651.262 651.195 651.122 651.088 651.034 650.971 650.876 650.849  650.78 650.731 650.705 650.613 650.544 650.524 650.446 650.408 650.372 650.302 650.171 650.123 650.106 650.066 649.949 649.878 649.865 649.825 649.795 649.643 649.605 649.563 649.526 649.437 649.386 649.313 649.261 649.198 649.112 649.079 649.034 648.956  648.89 648.867 648.776 648.728 648.648 648.556 648.495  648.42 648.387 648.358 648.303 648.295 648.203 648.126 648.104 648.054 647.916 647.899 647.859 647.815 647.735 647.721 647.685 647.595 647.487 647.451 647.431 647.381 647.292 647.262 647.142 647.106 647.069 647.023 646.965 646.938 646.879 646.841 646.737 646.708 646.634 646.567 646.536 646.526  646.45 646.421   646.4 646.326 646.277 646.243 646.226 646.143  646.06 646.019 646.001 645.954 645.905 645.855 645.809 645.711 645.684  645.64 645.565 645.527 645.505 645.457 645.419  645.35  645.32 645.233 645.198 645.173  645.09 645.053 644.986 644.924 644.874 644.853 644.787 644.771 644.672 644.596 644.568 644.516 644.485 644.418 644.396 644.321 644.234 644.218 644.131 644.083 644.012 643.973 643.942 643.871  643.79  643.78 643.713 643.689 643.616 643.585 643.547 643.478 643.385 643.356 643.324 643.271 643.195 643.158 643.118 643.087 643.027  642.94 642.932 642.822 642.767 642.725 642.686 642.633 642.581 642.509 642.374 642.354 642.311 642.216 642.153 642.111 642.093 641.999 641.965 641.937 641.847 641.836 641.686 641.663 641.606 641.546 641.523 641.432 641.422 641.334 641.296 641.237 641.183 641.117 641.095 641.035 640.985 640.891 640.852 640.803 640.729 640.681  640.65 640.615 640.553 640.482 640.439 640.368 640.325 640.274 640.186 640.149 640.035 639.944 639.888  639.82 639.727 639.686 639.603 639.534 639.474 639.447 639.383 639.303  639.23 639.179 639.126 639.053 639.038 639.011 638.895 638.825 638.774 638.686 638.573 638.502 638.413 638.404 638.323 638.104 638.011 637.946 637.877 637.823 637.722 637.653 637.522 637.459 637.403 637.264 637.174 637.058 637.039 636.899 636.833 636.648 636.583 636.516 636.332 636.166 636.114 635.765 635.644
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1250000, cols: 300, reductionFactor: 20, colBlockingSize: 12)	 89.4329   	 200       	 528.329   	 0         	 6.71055   	 78.7311   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1250000, cols: 300)                                                                              	 0.252046  	 1         	 0         	 0         	 11.9026   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 89.4329   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.252046  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.000951718	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 1.964e-05 	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22723910227840 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22723799541760 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22723768076416 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22723665324288 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22723633858944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22723463997952 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22723432532608 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22723262671616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22723231206272 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22723061345280 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22723029879936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22722860018944 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22722828553600 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22722658692608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22722627227264 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22723877967616 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22723871377152 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 107.218
singular values (new):
607.975 607.808 607.788 607.699  607.53 607.491 607.365 607.299 607.126 606.984 606.953 606.806 606.678  606.56 606.493 606.446 606.369  606.28 606.204 606.112 606.042 605.941 605.928  605.87 605.783 605.676 605.615 605.538 605.437 605.369 605.305 605.243 605.095  605.05 605.011 604.969 604.823 604.808 604.797  604.67 604.632 604.595 604.544 604.487 604.405 604.317 604.261 604.187 604.086 604.054 604.005 603.892 603.826   603.8 603.754 603.707 603.649 603.604 603.579 603.498 603.432 603.318 603.271 603.184 603.113 603.043  603.02 602.976 602.963 602.865 602.853  602.79 602.732  602.71  602.68 602.572 602.557 602.507 602.463  602.43  602.39 602.322 602.291 602.207 602.154 602.108 602.052 602.018 601.928 601.886 601.781 601.744 601.722 601.644 601.616 601.562 601.488 601.415 601.363 601.323 601.311 601.233 601.199 601.064 601.048     601 600.942 600.865 600.812 600.785 600.732 600.681 600.645 600.577 600.546  600.52 600.489 600.414 600.378 600.325 600.302 600.285 600.149 600.134 600.096 600.019 599.972 599.882 599.811 599.774 599.755 599.709 599.675 599.644 599.566 599.493 599.423 599.415 599.365 599.326 599.272 599.214 599.127  599.12 599.068  598.97 598.954 598.918 598.842 598.814 598.738 598.698 598.629 598.568 598.531 598.475 598.428 598.343 598.307 598.292  598.23 598.198 598.169 598.124 598.123 598.075 597.993 597.955 597.879 597.841 597.762 597.729 597.646  597.61  597.57 597.497 597.441 597.403 597.349 597.319 597.287 597.233 597.161 597.138 597.076 597.028  596.97 596.923 596.917 596.887 596.808  596.74 596.723 596.653 596.597 596.558 596.501 596.418 596.345 596.337  596.28 596.247 596.189  596.14 596.094 596.083 596.043 596.003 595.963 595.917 595.822 595.773 595.721  595.71 595.643 595.622 595.546 595.454 595.355 595.312 595.254 595.242 595.208 595.191 595.112 595.065 595.031  594.97 594.939 594.897 594.872 594.823 594.774 594.683 594.648 594.598 594.562  594.53  594.44 594.431 594.313 594.291 594.268 594.229 594.201 594.161 594.066 594.027 593.973 593.924 593.863 593.833 593.731  593.72 593.636 593.587 593.535 593.493 593.438  593.38 593.306 593.273 593.269 593.178 593.137 593.086 593.003 592.924 592.844 592.815 592.777 592.763 592.646 592.605 592.549  592.52  592.49 592.413  592.37 592.352 592.237 592.182 592.158 592.111  592.05     592 591.917 591.885 591.845 591.728  591.71  591.62 591.574  591.51 591.421 591.397 591.303 591.262 591.238 591.128  591.11 591.019 590.992 590.885 590.834 590.736 590.693 590.657 590.592 590.551 590.472 590.399 590.335 590.292 590.214 590.142 590.113  590.01 589.998 589.806 589.739 589.711 589.634 589.503 589.474 589.461 589.334 589.223 589.198 589.158 589.084 589.063 588.937 588.764 588.682 588.586 588.539 588.453  588.32  588.26 588.162 588.049 588.002 587.877 587.784 587.571 587.565 587.454 587.229 586.863
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1071428, cols: 350, reductionFactor: 17, colBlockingSize: 12)	 107.217   	 200       	 518.464   	 0         	 5.59795   	 92.6168   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1071428, cols: 350)                                                                              	 0.258386  	 1         	 0         	 0         	 11.6105   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 107.217   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.258386  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.0011126 	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 2.0754e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22950054516608 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22950023051264 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22949991585920 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22949755087104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22949723621760 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22949620869632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22949589404288 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22949419543296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22949388077952 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22949218216960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22949186751616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22949016890624 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22948985425280 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22948815564288 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22948784098944 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22949959325440 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22949557942016 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 123.411
singular values (new):
 570.48 570.125 569.947  569.78 569.674 569.544 569.426 569.338 569.246 569.177 568.971 568.956 568.873 568.839 568.783 568.693 568.627 568.412 568.315 568.307 568.259 568.175 568.152 567.976 567.905 567.851 567.785 567.721 567.703 567.664  567.61 567.498 567.494 567.373 567.337  567.26 567.211 567.141 567.107 567.065  566.89 566.844 566.799 566.692 566.659 566.556 566.457  566.43 566.374 566.345 566.318 566.265 566.214  566.16 566.099 566.045 565.929 565.892 565.833 565.807 565.741 565.647 565.575 565.537 565.509 565.409 565.379 565.336 565.332 565.226 565.201 565.079 565.049 565.015 564.966 564.913 564.824  564.81  564.74 564.649 564.628 564.593 564.589 564.511  564.47 564.434 564.396 564.329 564.279 564.241 564.169 564.134 564.019 563.974 563.941 563.878 563.852 563.806 563.727 563.694 563.619 563.566 563.528 563.491  563.48 563.413 563.355 563.269 563.215 563.173 563.135 563.009 563.004 562.963 562.933  562.89  562.85  562.78 562.747 562.694 562.654 562.613 562.577 562.564 562.492 562.413 562.361 562.272 562.247 562.217 562.152 562.144 562.078 562.011 561.977 561.939 561.883 561.868 561.811 561.762 561.734 561.642 561.593  561.57 561.512 561.477 561.433  561.38 561.336 561.297  561.25 561.215 561.137 561.123 561.084 561.028 560.964 560.953 560.883 560.857 560.798 560.744 560.663 560.605 560.559 560.531 560.493 560.425 560.392 560.357 560.328 560.242 560.181 560.153 560.123  560.08 560.013 559.981 559.972 559.927 559.905 559.844 559.791 559.758 559.685 559.601 559.575 559.508 559.501 559.428 559.346 559.312 559.261 559.189 559.167 559.153 559.131 559.049 558.995 558.944 558.931 558.883 558.843 558.798  558.77 558.752 558.643 558.634 558.565 558.554 558.469 558.426 558.364 558.315 558.266 558.221 558.187 558.151 558.094 558.052 558.027 557.979  557.93 557.914 557.865 557.834 557.799  557.76 557.658 557.611 557.561 557.539  557.51 557.483 557.393 557.354 557.327 557.274 557.213 557.117 557.111  557.07 557.027 556.986 556.918 556.847 556.821 556.778 556.773 556.734 556.624 556.566 556.556 556.508 556.457 556.404 556.358 556.318 556.266  556.22 556.174 556.119 556.072 556.064 556.023 556.011 555.891 555.834 555.814 555.756 555.714 555.675 555.622 555.596 555.517 555.461  555.44 555.348 555.316   555.3  555.24 555.207 555.193 555.133 555.115 555.037 554.974 554.953 554.914 554.877 554.816 554.721 554.648 554.589 554.533 554.482 554.439 554.373  554.36 554.355 554.294 554.257 554.211 554.141 554.095 554.049 553.984 553.952 553.924 553.855 553.763 553.754 553.742 553.649 553.631  553.54 553.516 553.416 553.382 553.341 553.299  553.24 553.193 553.114 553.103 553.024 552.994 552.942  552.87  552.82 552.711 552.662 552.578 552.549 552.527 552.446  552.39 552.376 552.292 552.275 552.212 552.109 552.039 552.026 551.959 551.946  551.83 551.784 551.771 551.706 551.644 551.585 551.514 551.464 551.296 551.264 551.179 551.134 551.082 550.995 550.929 550.913 550.843 550.787 550.757 550.658 550.547 550.494 550.424 550.369 550.281 550.221 550.173 550.154 550.051 549.974  549.92 549.867 549.809 549.778 549.618 549.547 549.478 549.328 549.305  549.18 549.134 549.049  548.97 548.889 548.815 548.774  548.71 548.624 548.409 548.343 548.175 547.915 547.786 547.735
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 937500, cols: 400, reductionFactor: 15, colBlockingSize: 12)	 123.41    	 200       	 518.596   	 0         	 4.86391   	 106.621   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 937500, cols: 400)                                                                              	 0.260157  	 1         	 0         	 0         	 11.5315   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 123.41    	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.260157  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.00117648	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 2.597e-05 	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22981612689280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22981497579520 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22981466114176 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22981363362048 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22981331896704 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22981162035712 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22981130570368 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22980960709376 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22980929244032 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22980759383040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22980727917696 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22980558056704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22980526591360 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22980356730368 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22980325265024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22981580429056 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22981573838592 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 144.179
singular values (new):
539.016 538.713 538.602 538.444  538.41 538.221 538.181 538.098 537.992 537.935 537.808 537.782  537.61 537.579 537.453 537.383 537.258 537.217 537.164 537.097 537.058 536.994 536.949 536.833 536.781 536.665 536.548 536.482 536.445 536.354 536.325 536.284 536.211 536.153 536.118 535.981 535.959 535.885 535.857  535.83 535.734 535.711 535.561 535.511 535.479 535.462 535.404 535.261 535.241 535.169 535.128 535.039 535.019 534.973 534.932 534.849 534.814 534.748 534.674 534.639 534.585 534.496 534.428 534.375 534.335 534.283 534.228  534.17 534.102 534.072 534.008 533.964 533.903 533.874 533.858 533.749 533.669  533.65 533.617 533.551 533.498 533.482 533.442 533.373 533.351 533.317 533.218 533.142 533.134 533.037 533.036  532.95  532.91 532.848 532.793 532.724 532.692 532.662 532.576 532.516 532.464 532.426 532.397 532.342 532.305 532.251 532.213 532.184 532.162 532.075 532.053 532.018 531.949   531.9 531.865 531.817 531.744  531.68 531.614 531.575 531.538  531.52  531.43 531.399 531.378 531.345 531.324 531.271 531.251 531.202 531.164 531.082  531.06 530.971 530.945 530.903 530.851 530.771 530.715 530.698 530.648 530.613  530.53  530.52 530.494  530.48 530.383 530.325 530.294  530.26 530.193 530.169 530.056 530.054  530.01 529.996 529.925 529.895 529.866 529.812 529.774 529.752 529.711 529.666 529.631 529.588 529.503 529.461 529.421 529.413 529.368 529.289 529.285 529.245 529.202 529.151 529.124 529.031     529 528.964 528.859 528.847 528.828 528.749 528.728 528.642 528.602 528.584 528.565 528.482 528.445 528.398 528.363 528.321 528.283 528.275 528.235 528.185 528.116 528.082 528.021     528 527.962 527.929 527.882 527.842 527.804 527.779  527.74 527.671  527.63 527.567 527.545 527.442 527.435 527.404 527.373 527.315 527.301 527.261  527.23 527.145   527.1  527.06 526.994 526.957 526.928 526.862 526.823 526.809 526.746 526.711 526.664 526.638 526.593 526.551 526.509 526.458 526.435 526.417  526.35 526.271 526.249 526.197 526.163 526.131 526.096 526.033 526.001  525.98 525.962 525.847 525.819 525.769 525.753  525.68 525.651 525.634 525.574 525.538 525.428 525.381  525.35 525.328  525.29 525.267 525.215 525.169 525.122 525.098 525.054 525.014 524.976 524.951 524.925 524.832 524.813  524.77 524.696 524.628 524.586 524.572 524.537 524.458  524.43 524.417 524.326 524.277 524.267 524.235 524.207 524.177 524.107 524.098 524.057 524.006 523.982 523.907 523.871 523.816 523.755 523.713 523.642 523.621 523.584 523.548 523.512 523.466 523.392 523.361 523.315 523.273 523.218 523.166 523.151 523.105 523.045 523.027 522.962 522.946  522.92 522.846 522.819  522.78 522.713 522.682 522.574 522.543 522.519 522.459 522.425 522.395 522.356 522.304 522.198 522.182 522.146 522.053 522.036 522.004 521.937 521.844 521.781 521.751 521.706 521.664 521.619 521.574 521.567 521.534 521.457 521.386 521.356 521.312 521.279 521.229 521.156 521.123 521.037 520.976 520.947 520.888 520.855 520.821 520.753  520.69 520.668 520.621 520.549 520.545  520.49 520.463 520.366 520.298  520.25 520.173 520.121 520.102 520.087 520.048 519.969 519.883 519.859  519.83 519.742 519.716 519.635 519.608 519.506 519.466 519.421 519.407 519.332 519.268 519.254 519.132 519.082 518.989 518.975  518.95 518.849 518.765 518.713  518.63 518.604 518.526 518.489 518.443  518.39 518.349 518.279 518.218 518.178 518.146 518.045  517.96 517.915 517.874 517.768 517.732 517.613 517.585 517.455  517.35 517.343 517.287 517.218 517.117 517.076 517.018 516.881 516.808  516.71 516.637 516.602 516.524 516.456 516.363  516.35 516.244 516.133 516.039 515.944 515.823 515.656 515.525 515.402 515.331 515.229 514.805
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 833333, cols: 450, reductionFactor: 13, colBlockingSize: 12)	 144.178   	 200       	 504.184   	 0         	 4.16377   	 121.088   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 833333, cols: 450)                                                                              	 0.260956  	 1         	 0         	 0         	 11.4962   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 144.178   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.260956  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.00151374	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 2.368e-05 	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22813746354048 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22813714888704 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22813591201920 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22813559736576 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22813389875584 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22813358410240 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22813188549248 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22813157083904 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22812987222912 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22812955757568 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22812785896576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22812754431232 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22812584570240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22812553104896 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22812383243904 -> hwthread 31 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22813682628352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22813676037888 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 16
PITTS: SIMD implementation: avx512
wtime: 174.385
singular values (new):
512.764 512.536 512.417 512.275 512.016 511.865 511.766 511.659 511.523 511.456 511.386 511.332 511.293 511.221 511.156 511.035 510.988 510.955 510.894 510.791 510.772   510.7  510.62  510.59 510.484 510.425 510.289 510.248 510.147 510.072  510.05 510.044 509.821 509.809 509.731 509.628 509.615 509.562  509.49 509.436 509.372 509.308 509.271 509.228 509.198 509.082 509.028 508.963 508.927 508.825 508.783 508.721 508.702 508.664 508.606 508.552  508.51 508.411 508.365 508.299 508.258 508.241 508.192 508.141 508.071 508.034 508.006 507.943 507.877 507.827 507.781 507.709 507.656 507.597 507.536 507.489 507.426 507.402 507.364 507.328  507.27 507.221 507.192 507.123 507.104 507.047 506.998 506.939 506.904 506.861 506.791 506.715 506.684 506.618 506.566 506.536 506.464 506.442 506.371 506.365 506.316 506.276 506.237 506.188 506.093  506.07 505.967 505.921 505.872 505.852 505.767 505.735 505.701 505.684  505.63 505.573  505.55 505.482 505.458 505.401 505.348  505.32 505.255 505.188  505.15 505.122 505.058 504.985 504.951 504.916 504.888 504.838 504.812 504.754  504.71 504.648 504.609 504.571 504.556 504.516 504.467 504.438 504.417 504.372 504.327 504.256 504.248 504.183  504.13 504.094 504.059 503.976 503.956 503.939 503.894 503.862 503.821 503.801 503.719 503.655 503.644 503.616 503.563 503.498 503.479 503.424 503.365 503.324 503.296 503.238 503.211 503.126 503.071 503.066 503.042 502.996 502.961 502.934 502.929 502.827  502.81 502.788 502.745 502.729  502.65 502.568 502.552 502.489 502.448 502.423 502.331 502.273 502.264  502.23 502.208 502.144  502.09 502.015 502.005 501.969 501.969 501.919 501.913  501.82 501.802 501.734 501.712 501.638 501.617 501.591 501.561 501.455 501.447 501.417 501.368 501.326  501.24 501.231 501.207 501.141 501.121 501.102 501.046  501.03 501.003 500.953 500.885 500.834 500.804  500.74 500.725 500.664 500.641 500.611 500.574  500.55 500.494 500.445 500.388 500.332 500.311 500.294  500.24 500.184 500.159 500.132  500.09 500.036 500.007 499.976  499.94 499.885 499.836 499.826 499.798 499.772 499.713 499.671 499.642 499.596 499.569 499.544 499.478  499.45 499.415 499.346 499.287 499.237 499.211 499.163 499.128 499.074  499.04 499.002 498.989 498.957 498.909  498.88 498.861 498.829  498.72 498.684 498.668 498.635 498.542 498.531 498.477  498.46 498.421 498.384 498.345 498.313 498.284 498.245  498.14  498.13 498.066 498.035 497.992 497.958 497.914 497.892 497.864 497.777 497.718 497.695 497.676 497.609 497.592 497.558 497.544  497.51  497.46 497.407 497.335 497.323 497.251 497.199 497.167 497.127 497.057 497.049 497.034 496.955 496.883 496.862  496.85 496.831 496.781 496.738 496.684 496.679 496.611 496.582 496.525 496.504 496.428 496.412 496.375 496.341 496.288 496.254 496.229 496.163 496.129 496.079 496.025 495.967  495.94 495.896 495.837 495.819 495.797 495.763 495.722 495.655 495.627 495.528 495.488 495.408 495.382 495.312  495.29 495.242 495.204  495.16 495.107 495.037 494.995 494.951 494.944 494.876 494.873 494.798 494.795 494.762 494.721 494.657 494.617 494.571  494.51 494.453 494.409 494.363 494.315 494.263  494.25 494.185 494.166 494.109 494.107 494.045 493.995  493.98 493.909 493.867 493.847 493.787 493.767 493.689 493.653 493.608 493.556 493.508 493.447 493.387 493.356 493.309 493.273 493.214 493.159 493.153 493.067 493.001 492.964  492.92 492.869 492.835 492.811 492.734 492.694 492.651 492.577 492.536 492.468 492.424 492.407 492.385 492.318 492.193 492.156 492.065  492.05 491.987 491.936 491.917 491.803 491.773 491.743 491.674 491.606 491.596 491.578 491.439 491.408 491.343  491.33 491.242 491.223 491.122 491.062 491.018 490.987 490.942 490.877 490.863 490.798 490.682  490.59 490.542 490.465 490.456 490.382  490.32 490.226 490.194 490.127 490.088 490.038 489.922 489.871 489.814  489.74 489.687 489.643 489.557 489.514 489.459 489.394 489.369 489.268 489.127  489.09 489.063  489.03 488.938 488.807 488.706 488.635 488.552 488.477 488.416 488.338 488.198 488.107 487.938 487.896 487.685 487.622 487.455
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 750000, cols: 500, reductionFactor: 12, colBlockingSize: 12)	 174.385   	 200       	 465.924   	 0         	 3.44296   	 135.326   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 750000, cols: 500)                                                                              	 0.258942  	 1         	 0         	 0         	 11.5856   	 0         
Timing statistics:
function                                                                                                                      	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]  	 174.385   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                      	 0.258942  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]	 0.00152597	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]              	 2.5143e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
