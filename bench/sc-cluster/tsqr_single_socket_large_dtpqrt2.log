[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140661949036416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140661940639744 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140661932243072 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140661722441984 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140661714045312 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140661705648640 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140661697251968 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140661688855296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140661680458624 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140661672061952 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140661185571968 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140661177175296 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140661168778624 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140661160381952 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140661151985280 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140661143590656 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140661135197952 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 67.3672
singular values (new):
1585.13  1584.7 1584.39 1584.15 1583.94 1583.84 1583.72 1583.58 1583.33 1583.13 1583.01 1582.88 1582.81 1582.62 1582.37 1582.35 1582.25 1582.12 1581.96 1581.85 1581.74 1581.61 1581.47  1581.4 1581.28 1581.02 1580.96 1580.76 1580.73 1580.48 1580.38 1580.28 1580.21 1579.94 1579.82 1579.78 1579.72 1579.63 1579.39 1579.19 1579.15  1578.9 1578.77 1578.63 1578.36 1578.19 1577.88 1577.73 1577.56 1577.32
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500000, cols: 50, reductionFactor: 37, colBlockingSize: 12)	 67.3664   	 200       	 114.34    	 0         	 8.90658   	 12.8378   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 7500000, cols: 50)                                                                              	 0.258173  	 1         	 0         	 0         	 11.6201   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 67.3664   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.258173  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.000188331	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 2.761e-06 	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140492523075456 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140492514678784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140492506282112 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140492497885440 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140492489488768 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140492138342912 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140492129946240 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140492121549568 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140492113152896 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140492104756224 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140492096359552 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140492087962880 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140491601472896 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140491593076224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140491584679552 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140491576284928 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140491567892224 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 128.685
singular values (new):
1123.42 1123.08 1122.95 1122.87  1122.7 1122.53 1122.44 1122.25 1122.13 1121.99  1121.9 1121.72  1121.6 1121.47 1121.28 1121.26 1121.14 1121.08 1120.96 1120.83 1120.78 1120.74 1120.64 1120.54  1120.4  1120.3 1120.23 1120.15 1120.03 1119.95 1119.79 1119.72 1119.66 1119.55 1119.42 1119.33 1119.21 1119.19  1119.1 1119.02 1118.89 1118.85 1118.75 1118.66 1118.56  1118.5 1118.37 1118.17 1118.15 1118.07 1118.04  1117.9 1117.78 1117.73 1117.71  1117.5 1117.42 1117.33 1117.24 1117.17 1117.07 1117.04 1116.94 1116.88 1116.81 1116.64 1116.58 1116.53 1116.33 1116.27 1116.21 1116.09 1116.06 1115.88 1115.82  1115.7 1115.65 1115.56 1115.46 1115.29 1115.27    1115 1114.94 1114.87 1114.72 1114.68  1114.6 1114.49 1114.35 1114.02 1113.98 1113.83 1113.75 1113.67 1113.51 1113.45 1113.25 1113.11 1112.91 1112.58
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750000, cols: 100, reductionFactor: 37, colBlockingSize: 12)	 128.684   	 200       	 119.715   	 0         	 4.6627    	 25.675    
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 3750000, cols: 100)                                                                              	 0.258646  	 1         	 0         	 0         	 11.5989   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 128.684   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.258646  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.000309135	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 6.38e-06  	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140031614359424 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140031605962752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140031597566080 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140031589169408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140031580772736 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140031234664960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140031226268288 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140031217871616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140031209474944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140031201078272 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140031192681600 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140031184284928 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140030697794944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140030689398272 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140030681001600 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140030672606976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140030664214272 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 195.652
singular values (new):
919.656  919.37 919.076 918.907 918.856 918.708 918.589 918.512 918.371   918.3 918.217 918.067 917.956 917.771 917.601 917.561 917.541 917.435 917.368 917.272 917.225 917.142 917.009 916.949 916.779  916.71 916.545 916.496 916.407 916.382 916.291  916.23 916.188 916.117 915.947 915.908 915.811  915.72 915.639 915.544 915.532 915.503 915.388 915.352 915.266 915.131 914.963 914.938 914.908 914.826 914.724 914.623 914.582  914.49 914.415 914.394 914.238 914.163  914.16 914.139 914.056 914.035 913.888 913.825 913.766 913.627  913.56 913.493 913.415 913.393 913.286 913.121 913.067 912.983 912.922 912.838 912.758 912.689 912.599 912.549  912.52 912.467 912.354 912.275 912.245 912.162 912.038 911.934 911.905 911.762 911.756 911.572 911.527 911.465 911.463 911.346 911.298  911.19 911.141 911.103 911.009 910.908 910.792 910.739 910.629 910.594 910.497 910.409 910.293  910.25 910.123 910.055 909.965 909.943 909.859 909.769 909.712 909.598 909.508 909.425 909.283  909.25 909.148  909.04 909.034 909.009 908.848 908.702 908.676 908.544 908.496 908.335 908.316 908.184 907.965 907.958 907.734 907.659 907.585 907.495 907.372 907.232 907.185 907.126 906.957 906.814 906.387 906.278 906.263 905.984
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500000, cols: 150, reductionFactor: 37, colBlockingSize: 12)	 195.651   	 200       	 118.109   	 0         	 3.06687   	 38.5112   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 2500000, cols: 150)                                                                              	 0.259343  	 1         	 0         	 0         	 11.5677   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 195.651   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.259343  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.000505213	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 1.9639e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140512526423936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140512518027264 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140512509630592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140512501233920 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140512492837248 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140512484440576 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140512136784512 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140512128387840 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140512119991168 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140512111594496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140512103197824 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140512094801152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140512086404480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140511532805632 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140511524408960 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140511516014336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140511507621632 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 265.099
singular values (new):
798.512 798.343 798.313 797.885 797.871 797.655 797.556 797.496 797.383 797.254  797.19 796.984 796.835 796.787 796.698 796.672  796.46 796.358 796.258 796.143 796.069 795.986   795.9 795.775 795.715 795.606 795.537 795.446 795.334   795.3 795.224  795.17 795.109 794.976 794.892 794.835 794.737 794.634 794.629 794.521  794.49 794.399 794.353   794.3 794.182 794.145 794.075 794.018 793.977 793.797 793.749 793.673 793.621 793.518 793.488 793.347 793.303  793.24 793.205  793.15 793.121 793.025 792.995  792.93 792.876   792.8 792.746 792.679 792.595 792.495  792.37 792.348 792.322 792.276 792.222 792.142 792.092 792.074 792.021 791.915 791.826 791.723 791.612 791.593 791.532 791.442  791.41  791.36 791.317 791.261 791.146  791.02 790.975 790.944 790.882 790.874 790.735 790.639  790.62 790.558 790.522 790.437 790.404 790.339 790.248 790.193 790.115 790.042 789.946 789.859 789.827 789.797 789.712 789.596 789.519 789.487 789.447 789.356 789.319 789.247 789.234 789.169 789.118 789.002 788.928 788.876 788.811 788.757 788.746  788.67 788.529 788.476 788.464  788.43 788.302 788.248 788.189  788.15 788.102 788.022  787.94 787.901 787.698 787.688 787.607 787.542 787.484 787.462  787.28 787.262 787.223 787.173 787.113 787.074 786.967 786.887 786.784 786.695 786.635 786.613 786.563 786.451 786.376 786.309 786.275 786.227  786.15 786.141 786.054 785.955 785.884 785.768 785.597 785.524 785.492 785.389 785.273 785.233  785.15 785.118 785.011 784.891 784.879 784.672 784.652 784.534 784.409 784.363 784.348 784.227 784.092 783.895 783.817 783.718 783.681 783.421 783.324 783.099  782.93 782.861
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1875000, cols: 200, reductionFactor: 30, colBlockingSize: 12)	 265.098   	 200       	 116.938   	 0         	 2.26355   	 51.6612   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1875000, cols: 200)                                                                              	 0.259792  	 1         	 0         	 0         	 11.5477   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 265.098   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.259792  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.000686821	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 1.8261e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140144961533824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140144953137152 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140144944740480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140144936343808 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140144927947136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140144581536256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140144573139584 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140144564742912 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140144556346240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140144547949568 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140144539552896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140144531156224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140144044666240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140144036269568 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140144027872896 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140144019478272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140144011085568 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 345.389
singular values (new):
716.129  716.06 715.704 715.422 715.205 715.161 715.024 714.871 714.817  714.64 714.517 714.502 714.362 714.194 714.118 714.083 713.964 713.931 713.835 713.779 713.673 713.573 713.483 713.446  713.35 713.254 713.192 713.115 713.052 713.019  712.95 712.769 712.758 712.675 712.652 712.532 712.453 712.429  712.35 712.291  712.22  712.21  712.07 711.967 711.943 711.884 711.809 711.728 711.673 711.622 711.511 711.454  711.42 711.332 711.244 711.199 711.176 711.136 711.093 711.021 710.968 710.927 710.822 710.682 710.668 710.595 710.461 710.421 710.374 710.296 710.244 710.241 710.157 710.121 710.053 710.008 709.945  709.83   709.8 709.724 709.658 709.578 709.524 709.424 709.365 709.338 709.317 709.216 709.174 709.108 709.068 709.013 708.919 708.864 708.793 708.732 708.695 708.686 708.614 708.563 708.511 708.406 708.338 708.317 708.272 708.201  708.15 708.096 708.032 708.012 707.934  707.84 707.811  707.69 707.651 707.616 707.569 707.548 707.504 707.429 707.407 707.293 707.197 707.143 707.088 707.057 706.989 706.894 706.854 706.815 706.757  706.74 706.711 706.576 706.542 706.486 706.453 706.425 706.345 706.273  706.18 706.139  706.11 705.992 705.916  705.88 705.849 705.793 705.689 705.647 705.613 705.609 705.488 705.419 705.379 705.303 705.276 705.241  705.23  705.13 705.064 704.968 704.939  704.88 704.869 704.794  704.74 704.635 704.599 704.514  704.47 704.438 704.411  704.32 704.253 704.214  704.18 704.157 703.939 703.937 703.898 703.852   703.8 703.705 703.678 703.611 703.537 703.441 703.436 703.357 703.302 703.241 703.182 703.156 703.054 702.955 702.909 702.828 702.716 702.698 702.641 702.548 702.516 702.493 702.339 702.314 702.193 702.131 702.093 701.997 701.965 701.826 701.762 701.707 701.643 701.589   701.5  701.41 701.353 701.318 701.204 701.148 701.108 700.991 700.908 700.848 700.837 700.647 700.565 700.467 700.422 700.322 700.252  700.17 700.042 699.996 699.947 699.787 699.702 699.637 699.611 699.459 699.359 699.283 699.068 698.898 698.864 698.625 698.582 697.976
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1500000, cols: 250, reductionFactor: 24, colBlockingSize: 12)	 345.388   	 200       	 113.097   	 0         	 1.73747   	 65.0933   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1500000, cols: 250)                                                                              	 0.262003  	 1         	 0         	 0         	 11.4503   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 345.388   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.262003  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.000789486	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 2.0069e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140080150734720 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140080142338048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140080133941376 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140080125544704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140080117148032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140080108751360 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140080100354688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140079620156160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140079611759488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140079603362816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140079594966144 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140079586569472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140079578172800 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140079569776128 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140079083286144 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140079074891520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140079066498816 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 442.159
singular values (new):
655.347 654.895 654.834 654.709 654.545 654.452  654.19 654.123  654.08 653.879 653.826 653.748 653.682 653.565 653.509 653.399 653.371  653.25 653.186 653.139 653.008 652.949 652.864 652.768 652.716 652.654 652.462  652.43 652.374 652.314 652.257 652.182 652.133  652.01 651.933 651.921 651.914 651.861  651.79 651.678 651.569 651.554 651.462 651.375 651.341 651.265 651.248 651.183 651.157 651.063 651.045  650.98 650.953 650.863 650.811  650.74 650.679 650.569 650.509 650.502 650.419 650.253 650.218 650.173 650.125 650.094 650.068 649.951 649.911 649.841 649.742 649.709 649.582 649.559 649.532 649.505 649.446 649.304 649.287 649.266  649.17 649.133 649.068 648.996 648.977 648.923 648.781 648.748 648.735 648.699 648.671 648.615 648.528 648.436 648.405 648.354 648.274 648.255 648.169 648.156 648.102 648.087 647.974 647.878 647.853 647.784 647.772 647.699 647.646 647.621 647.587 647.512 647.427 647.368 647.297 647.255 647.199  647.11  647.08 647.025 646.951 646.907 646.856 646.833 646.799 646.727 646.649 646.578 646.537 646.492 646.452 646.427 646.384 646.358 646.246 646.201 646.151 646.123 646.088 646.019 646.008 645.963 645.899 645.842  645.82  645.77 645.724 645.611 645.586 645.562 645.477 645.389 645.351 645.268 645.197 645.185 645.152 645.074 645.011  644.94 644.897 644.864 644.827 644.721 644.694 644.613 644.574 644.535 644.475  644.45 644.363 644.287 644.273 644.223 644.196 644.151 644.109 644.034 643.931   643.9 643.857 643.796 643.757 643.726 643.677 643.617 643.515 643.445 643.408 643.344 643.295 643.285 643.238 643.202 643.115 643.082 643.019 643.003  642.89 642.814  642.79 642.783 642.752 642.627 642.565 642.557 642.519 642.465 642.419 642.365 642.317 642.292 642.228 642.136 642.103 642.044 641.982 641.975 641.939 641.893 641.742  641.73 641.671 641.593 641.544 641.478 641.414 641.365 641.326 641.315 641.248 641.168 641.126 641.054 640.961   640.9 640.851 640.807 640.725 640.691 640.593 640.541 640.494 640.367  640.32 640.261 640.158 640.082 640.076 640.022 639.954  639.88  639.81 639.772  639.73  639.66 639.571 639.519 639.446 639.414 639.374 639.246  639.23 639.181 639.018 638.905 638.807 638.781 638.691 638.652 638.592  638.58 638.452 638.348 638.311 638.258 638.165 638.058 638.005 637.971 637.911 637.829 637.712 637.647 637.569 637.444  637.34 637.119 637.038 636.985 636.738 636.655  636.58 636.483 636.438 636.332 636.294 636.066 635.929 635.299
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1250000, cols: 300, reductionFactor: 20, colBlockingSize: 12)	 442.159   	 200       	 106.862   	 0         	 1.3573    	 78.7311   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1250000, cols: 300)                                                                              	 0.259248  	 1         	 0         	 0         	 11.5719   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 442.159   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.259248  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.000915704	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 1.9156e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140215469819776 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140215461423104 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140215381387392 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140215372990720 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140215364594048 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140215356197376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140215347800704 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140215339404032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140215331007360 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140214777408512 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140214769011840 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140214760615168 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140214752218496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140214743821824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140214735425152 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140214727030528 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140214240540416 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 584.457
singular values (new):
608.215 607.929 607.731 607.611 607.423 607.316 607.245 607.178 606.895 606.879 606.794  606.72 606.672 606.578 606.394 606.348 606.325 606.186 606.165 606.046 605.997 605.905 605.808 605.788 605.652  605.56 605.513 605.427 605.403 605.263 605.247 605.205  605.15 605.094 605.044 605.002 604.943 604.876 604.833 604.745  604.63 604.601 604.516 604.477 604.341 604.338 604.263  604.16 604.126 604.048 603.998 603.955 603.893  603.85 603.752 603.739 603.653 603.625 603.583 603.492 603.447 603.422 603.355 603.296 603.281 603.209 603.102  603.04  602.99 602.909 602.873 602.821 602.787 602.742 602.662 602.579 602.571 602.482 602.462 602.414 602.323 602.305 602.285 602.227 602.186 602.085  602.07 602.016 601.999 601.948 601.848 601.797  601.75 601.651 601.638 601.569 601.508 601.455 601.415 601.334 601.325 601.249 601.182 601.102 601.055  600.99 600.916   600.9 600.847 600.795 600.782 600.693 600.623  600.59  600.57 600.504 600.487 600.439   600.4 600.293 600.266 600.228 600.161 600.127 600.115 599.988 599.978 599.945 599.911 599.859 599.793  599.76 599.712 599.603 599.588 599.468 599.394 599.348 599.293 599.243 599.237  599.16 599.111 599.075 599.063 599.027 598.964 598.881 598.812 598.788 598.746 598.686 598.644 598.627 598.547 598.496  598.43 598.405 598.346  598.31 598.285 598.223 598.199 598.105 598.059 598.028 597.987 597.922  597.91 597.819 597.794 597.769 597.669 597.658 597.589 597.548 597.502 597.457 597.395 597.378 597.318 597.287 597.219 597.174 597.137 597.094 597.044  597.02 596.948 596.912 596.836 596.808 596.785 596.758 596.656 596.594 596.585 596.491 596.451 596.384 596.354 596.286 596.277  596.25 596.173 596.128 596.086 596.036 595.948 595.883 595.872 595.825 595.807 595.724 595.703 595.635 595.561 595.518 595.481 595.428 595.406  595.35 595.286  595.26  595.23 595.153 595.085  595.06 595.013 594.988 594.971 594.849  594.78 594.743 594.724  594.67 594.619 594.518  594.49 594.456 594.401 594.328 594.269  594.26 594.252 594.181 594.105 594.044 594.019 593.965  593.89 593.853 593.842 593.755 593.712 593.629  593.56 593.484 593.425 593.387 593.308  593.28 593.211 593.144 593.115 593.076 593.036  592.98  592.87 592.838   592.8 592.772 592.689 592.654 592.546 592.501 592.464 592.441 592.371 592.293 592.171 592.135 592.073 592.031 591.957  591.92 591.871 591.776 591.741 591.661 591.612 591.545 591.511 591.442 591.427 591.352 591.276 591.219 591.111 591.095 591.047 590.998 590.943 590.888 590.819  590.77 590.762 590.657  590.58 590.552 590.484 590.468 590.345 590.308 590.217 590.122 590.088 590.034 589.947 589.921 589.805 589.763 589.663 589.585   589.5 589.462 589.368 589.313 589.255 589.207 589.178 588.987 588.914 588.811 588.739 588.645 588.563 588.434 588.404 588.355 588.255 588.024 587.907 587.828 587.761 587.549 587.416 587.344 587.319 587.029
Performance statistics:
function                                                                                                                                                                                        	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1071428, cols: 350, reductionFactor: 17, colBlockingSize: 12)	 584.457   	 200       	 95.1109   	 0         	 1.02693   	 92.6168   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1071428, cols: 350)                                                                              	 0.259156  	 1         	 0         	 0         	 11.576    	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 584.457   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.259156  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.00105569	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 2.1779e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140654020142976 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140653937813504 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140653929416832 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140653921020160 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140653912623488 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140653904226816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140653895830144 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140653887433472 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140653400943488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140653392546816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140653384150144 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140653375753472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140653367356800 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140653358960128 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140653350563456 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140652864075520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140652855682816 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 712.688
singular values (new):
570.516 570.454 570.036 569.901 569.751 569.626 569.488 569.429 569.286 569.189 569.071  569.04 568.869 568.844 568.746 568.732 568.619 568.584 568.523 568.292 568.245 568.193 568.136 568.036 567.957 567.904 567.871 567.805 567.787 567.678 567.574 567.517 567.431 567.328 567.316 567.233 567.192 567.162 567.069 566.998 566.935  566.81 566.793 566.689 566.635 566.572 566.497 566.454 566.412 566.324 566.309 566.256 566.189 566.116 566.092 566.041 565.933 565.871 565.818   565.8 565.712 565.655  565.65  565.59 565.539 565.486 565.363 565.283 565.234 565.217 565.167 565.113 565.059 564.985 564.885 564.867  564.83 564.807 564.729 564.676 564.655 564.594 564.538 564.498 564.469 564.421 564.335 564.326 564.293 564.266  564.23  564.08 564.009 563.975 563.954 563.886 563.867  563.83 563.793 563.736 563.645 563.613  563.56  563.49 563.441 563.417 563.384 563.331 563.274 563.192 563.184 563.119 563.051 563.011 562.955 562.892 562.824 562.779 562.721  562.68 562.659 562.591 562.559 562.523 562.454 562.377 562.364  562.32 562.261 562.227 562.144 562.114 562.052 562.026 561.992 561.944 561.909 561.865 561.827 561.789 561.752 561.712 561.661 561.595 561.539 561.512 561.457 561.381 561.345 561.311 561.267 561.213 561.158 561.147 561.094 561.038  560.99 560.923 560.911 560.847  560.83 560.758 560.685 560.624 560.558 560.526 560.468 560.401 560.358 560.297 560.259 560.234 560.231 560.195 560.136 560.074 560.041 560.011 559.972 559.934 559.905 559.861 559.825   559.8 559.772 559.692 559.613 559.575  559.57 559.509 559.469 559.386 559.324 559.299 559.238 559.211 559.163 559.143 559.074 559.017 558.975 558.959  558.91 558.855 558.809 558.775 558.745 558.729 558.676 558.618 558.541 558.516 558.472 558.409 558.386 558.349 558.267 558.205 558.162 558.156 558.093 558.049 558.019 557.895 557.875 557.855 557.771 557.726 557.674 557.629 557.564 557.537  557.52 557.452 557.381 557.344 557.315 557.279 557.244 557.203  557.08 557.045 557.027 556.985 556.942 556.878 556.836 556.811 556.783 556.726 556.694 556.665 556.589 556.558 556.475 556.443 556.389 556.356 556.345  556.28  556.21 556.195  556.17 556.102 556.053 556.032 555.988 555.941 555.854 555.821 555.745 555.723 555.689 555.627  555.62 555.515 555.416 555.365  555.36 555.272 555.259 555.168 555.155 555.123 555.077 555.062 555.013 554.952 554.911 554.895 554.808 554.758 554.702 554.682 554.619 554.572 554.516 554.465 554.446 554.413 554.358 554.274 554.242 554.196 554.051 554.046 553.996 553.967 553.936  553.82 553.738  553.73 553.658 553.627  553.57 553.535  553.52 553.483 553.441 553.359  553.32 553.302 553.249 553.168 553.155 553.131 553.014 552.988 552.949 552.864 552.809 552.764 552.687  552.62 552.579 552.528 552.497 552.372 552.298 552.273 552.204 552.122 552.085 552.047 552.019 551.935 551.874 551.814 551.764 551.583 551.545 551.501 551.458 551.405 551.375 551.334 551.262 551.167 551.119 551.058 550.981 550.898 550.871 550.814 550.788 550.718  550.64 550.598 550.502 550.437  550.37 550.349 550.263 550.178 550.134 550.076 549.951 549.894 549.759  549.74 549.717 549.707 549.631 549.546  549.37 549.193 549.108 549.093 549.026 548.928 548.882 548.771  548.68 548.496 548.425 548.336 548.169 547.939  547.91 547.705
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 937500, cols: 400, reductionFactor: 15, colBlockingSize: 12)	 712.688   	 200       	 89.8009   	 0         	 0.842243  	 106.621   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 937500, cols: 400)                                                                              	 0.257507  	 1         	 0         	 0         	 11.6502   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 712.688   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.257507  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.00150304	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 1.8989e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 139792709175168 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 139792700778496 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 139792692381824 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 139792683985152 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 139792675588480 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 139792327109120 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 139792318712448 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 139792310315776 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 139792301919104 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 139792293522432 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 139792285125760 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 139792276729088 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 139791790239104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 139791781842432 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 139791773445760 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 139791765051136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 139791756658432 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 940.739
singular values (new):
539.268 538.922 538.826 538.723 538.599 538.398 538.389 538.072 538.033 537.928 537.837 537.762 537.684 537.629 537.517 537.476 537.394 537.369 537.243 537.124 537.061 536.937 536.835  536.81  536.73 536.678 536.562 536.535 536.471 536.458 536.392 536.324 536.241 536.174 536.133 536.096 535.999  535.97 535.887 535.876 535.772 535.727 535.709 535.598 535.503 535.474 535.423 535.359 535.302  535.27 535.128 535.093 535.051 534.972 534.924 534.849 534.832  534.76 534.709 534.616 534.587 534.476 534.457 534.387 534.355 534.261  534.22 534.199 534.154 534.117 534.054 533.997 533.903 533.885  533.79 533.725 533.699 533.684 533.626 533.579 533.534 533.446  533.44 533.363 533.297 533.263 533.209 533.124 533.091 533.052 533.018 532.982 532.968 532.891 532.822 532.752 532.679 532.631 532.611 532.565 532.519 532.461 532.431 532.386 532.334 532.284 532.265 532.221 532.176 532.105 532.055 531.961 531.931  531.86 531.837 531.823  531.78 531.728 531.712 531.645 531.618 531.547  531.54 531.433 531.392 531.326 531.298 531.208 531.168 531.151  531.09 531.074 531.043 531.019  530.96 530.932 530.806 530.782 530.732 530.689 530.651 530.625 530.567 530.549 530.447 530.418 530.409 530.357 530.325 530.284 530.259 530.186  530.13 530.093 530.038 530.007 529.992 529.957 529.883  529.85 529.799 529.718 529.702 529.665 529.607 529.565 529.528 529.456 529.383 529.376  529.36 529.338 529.288 529.183  529.13 529.068 529.051 529.018 528.997  528.93 528.886 528.881 528.794 528.765 528.744 528.674 528.647 528.582 528.558 528.543 528.497 528.457 528.409 528.331 528.286 528.238 528.202 528.136 528.098 528.093 528.025 527.988 527.959 527.916 527.876  527.86 527.775 527.752 527.688 527.646 527.583 527.578  527.55 527.476 527.468 527.438 527.413 527.319 527.278 527.234 527.179 527.167 527.113 527.063 527.017 526.997 526.979 526.903 526.879 526.812 526.737  526.72  526.69 526.646 526.539  526.51 526.484 526.453 526.419 526.357 526.328  526.28 526.241 526.232 526.149 526.103 526.054  526.05 525.989 525.925 525.886 525.878 525.825 525.799 525.764  525.73 525.687 525.673 525.577 525.533 525.527 525.474 525.407 525.399 525.358 525.266  525.25 525.169 525.145 525.131 525.124 525.053 525.012  524.96 524.907 524.872 524.822 524.767 524.757  524.71 524.687 524.632 524.566 524.489 524.452 524.428 524.408 524.369 524.268 524.206 524.191 524.151 524.107 524.061 524.018 523.954  523.89 523.849 523.824 523.801  523.74 523.708 523.643 523.618  523.56 523.531 523.468 523.432 523.348 523.304 523.282  523.23 523.188 523.167 523.155 523.126 523.096 523.047 522.977 522.916 522.862 522.829 522.755 522.743 522.661 522.638 522.584 522.559 522.441 522.435 522.355 522.313 522.251 522.195 522.171 522.074 522.029  521.99 521.969 521.948 521.931 521.844 521.817 521.777 521.736 521.701 521.653 521.627 521.571  521.53 521.474 521.417 521.372 521.357 521.317 521.217 521.184 521.148 521.077 521.056 520.966 520.922 520.889 520.795  520.76 520.708 520.674 520.641 520.578 520.549 520.522 520.464 520.411 520.332 520.264 520.233 520.174 520.122 520.079 520.008 519.946 519.879 519.802 519.753 519.697 519.642 519.623 519.567 519.555 519.488 519.464 519.369 519.313 519.231 519.214 519.121 519.105 519.044  518.99 518.953 518.883 518.811 518.746 518.721 518.658 518.599 518.557 518.481  518.46 518.422 518.289 518.233 518.218 518.172 518.066 518.034 518.009 517.864 517.757 517.714 517.701 517.579 517.555 517.457  517.38 517.326 517.289  517.22 517.134 517.043 516.971 516.944  516.85 516.814 516.723 516.555 516.532 516.484 516.341 516.234 516.056  515.92 515.898 515.861 515.725 515.672 515.607 515.477 515.329  515.11
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 833333, cols: 450, reductionFactor: 13, colBlockingSize: 12)	 940.738   	 200       	 77.2715   	 0         	 0.638141  	 121.088   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 833333, cols: 450)                                                                              	 0.258811  	 1         	 0         	 0         	 11.5915   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 940.738   	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.258811  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.00179772	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 2.4467e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 16
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->17  [0m[1;34m1->18  [0m[1;34m2->19  [0m[1;34m3->20  [0m[1;34m4->21  [0m[1;34m5->22  [0m[1;34m6->23  [0m[1;34m7->24  [0m[1;34m8->25  [0m[1;34m9->26  [0m[1;34m10->27  [0m[1;34m11->28  [0m[1;34m12->29  [0m[1;34m13->30  [0m[1;34m14->31  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140434652428160 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 140434644031488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 140434635634816 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 140434424719616 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 140434416322944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 140434407926272 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 140434399529600 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 140434391132928 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 140434382736256 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 140434374339584 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 140433887849600 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 140433879452928 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 140433871056256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 140433862659584 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 140433854262912 -> hwthread 31 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140433845868288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 140433837475584 -> hwthread 17 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
wtime: 1179.2
singular values (new):
512.657 512.623 512.523 512.287 512.139  511.98  511.85 511.748 511.736 511.605 511.551 511.424 511.326 511.266 511.198 511.171  510.97 510.909 510.803 510.792 510.699 510.647 510.588 510.555 510.483  510.31 510.301 510.149 510.087 510.008 509.966 509.943 509.835 509.803 509.772 509.688 509.657 509.595 509.562 509.485 509.457 509.403 509.337 509.248 509.175   509.1  509.06 509.024 508.942  508.87 508.829 508.767 508.716 508.641 508.609 508.584 508.523  508.44 508.363  508.34  508.26 508.214 508.152 508.051 508.018 507.976 507.946 507.927 507.879  507.83 507.776 507.709 507.633 507.565 507.542 507.516 507.481 507.416 507.356 507.336 507.308 507.245 507.228 507.143 507.118 507.005 506.964 506.904 506.781 506.776 506.759 506.728 506.679  506.63 506.569 506.532  506.48 506.464 506.426 506.323  506.28 506.256 506.229 506.202  506.17 506.088 506.012 505.962 505.937 505.891 505.824  505.77 505.723 505.684  505.63  505.59 505.565 505.545  505.45 505.444 505.383 505.368 505.315 505.275 505.249 505.176 505.163 505.098 505.075 505.025 504.974 504.932 504.891 504.877 504.829 504.693 504.638   504.6  504.56 504.516 504.455 504.448 504.412 504.331  504.31 504.276 504.266 504.203  504.11 504.079  504.06 504.022 503.969 503.933 503.883 503.822 503.809 503.759 503.709 503.685 503.628 503.598 503.559  503.48 503.431   503.4  503.35 503.328 503.286 503.255 503.231 503.178 503.142 503.121  503.08 503.054 502.986 502.933 502.891 502.812 502.758 502.744 502.716 502.648 502.609 502.605 502.533 502.476 502.445 502.405 502.354 502.283 502.215 502.169 502.108 502.084 502.079 502.035 501.963 501.913  501.88 501.865 501.814 501.786  501.76 501.735 501.663 501.594 501.544 501.523 501.495 501.469 501.425 501.406 501.364 501.347 501.274 501.254 501.192  501.13  501.09 501.036 500.986 500.952 500.896 500.856 500.839  500.81 500.755 500.751 500.724 500.664  500.62 500.568 500.527 500.506  500.47 500.423 500.409 500.374  500.34 500.265  500.25 500.198 500.183 500.129 500.095 500.041 500.033 499.956 499.911 499.894 499.821 499.805 499.767 499.709 499.681 499.661 499.624 499.585 499.555 499.483 499.445 499.412 499.371  499.34 499.333 499.279 499.266 499.232 499.192 499.092 499.047 499.033 499.003 498.953 498.943 498.898  498.78 498.758 498.728 498.705 498.683 498.629 498.601  498.49 498.432 498.377 498.352 498.341 498.298 498.268 498.224 498.195 498.137 498.114 498.074 498.057 498.008 497.966 497.922 497.898 497.817 497.774  497.75 497.685 497.645 497.606 497.574 497.573 497.493 497.458 497.359 497.328 497.294 497.223 497.208 497.174  497.13 497.127 497.025 496.998 496.984  496.95 496.882 496.845  496.84 496.804 496.758  496.69  496.65 496.617 496.543 496.515 496.511 496.472 496.404 496.367 496.306 496.253 496.233 496.214 496.194 496.145 496.109 496.084 496.058 495.946 495.896 495.875 495.827 495.779 495.715 495.691 495.669 495.658 495.581 495.537 495.498 495.449   495.4 495.349 495.305  495.28 495.225 495.202 495.143 495.069 495.009 494.987 494.958 494.948 494.882 494.835 494.769 494.756 494.701 494.669 494.637 494.601  494.57 494.518 494.454 494.399 494.369 494.346 494.325 494.215 494.128 494.116 494.077 494.012 493.995 493.902 493.853 493.812 493.772 493.746 493.679  493.63 493.568 493.543 493.467 493.433 493.401  493.36 493.316 493.296  493.21 493.205 493.169 493.036 493.017  492.96 492.908 492.863 492.808 492.802  492.75 492.671  492.64 492.585  492.55 492.474 492.448 492.383 492.358 492.277 492.239 492.172 492.099 492.057 492.027 492.006 491.958 491.891 491.823   491.8 491.748 491.698  491.64 491.619 491.543 491.468  491.43 491.389  491.35 491.312 491.257 491.211 491.101 491.045 491.011 490.965 490.941 490.879 490.739 490.667 490.585 490.547 490.508 490.421 490.363 490.307 490.268 490.168 490.113 490.086 489.969 489.922 489.893 489.835 489.763 489.694 489.673 489.549 489.514 489.405 489.365 489.291 489.258  489.21  489.17 488.993 488.909 488.827 488.792 488.692 488.607 488.593 488.319 488.302 488.171 488.138 488.009 487.937 487.808 487.605  487.52 487.381
Performance statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 750000, cols: 500, reductionFactor: 12, colBlockingSize: 12)	 1179.2    	 200       	 68.9027   	 0         	 0.509159  	 135.326   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 750000, cols: 500)                                                                              	 0.257781  	 1         	 0         	 0         	 11.6378   	 0         
Timing statistics:
function                                                                                                                    	 time [s]  	 #calls    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]	 1179.2    	 200       
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                    	 0.257781  	 1         
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]          	 0.00203801	 1         
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                  	 2.7987e-05	 1         
INFO: You are running LIKWID in a cpuset with 16 CPUs. Taking given IDs as logical ID in cpuset
