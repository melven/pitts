[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22841640884096 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22841441380352 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22841240053888 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22841038727424 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22840837400960 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22840636074496 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22840434748032 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22840233421568 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22840032095104 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22839830768640 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22839629442176 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22839428115712 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22839226789248 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22839025462784 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22838824136320 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22838622809856 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22838421483392 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22838220156928 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22838018830464 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22837817504000 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22837616177536 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22837414851072 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22837213524608 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22837012198144 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22836810871680 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22836609545216 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22836408218752 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22836206892288 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22836005565824 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22835804239360 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22835602912896 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22835401586432 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22835200255872 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22834998929408 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22834797602944 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22834596276480 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22834394950016 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22834193623552 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22833992297088 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22833790970624 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22833589644160 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22833388317696 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22833186991232 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22832985664768 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22832784338304 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22832583011840 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22832381685376 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22832180358912 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22831979032448 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22831777705984 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22831576379520 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22831375053056 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22831173726592 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22830972400128 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22830771073664 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22830569747200 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22830368420736 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22830167094272 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22829965767808 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22829764441344 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22829563114880 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22829361788416 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22829160461952 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22841535223552 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22841528633088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 50, r2: 1, n: 1, n_right: 1, m: 1, r1: 2) 	 0.00369658	 1000      	 0.0541041 	 0         	 0.328953  	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 1, xn: 50, m: 2, rA: 1, r: 1)                             	 0.00299696	 1000      	 0.0667344 	 0         	 0.405745  	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 1, xn: 1, m: 1, rA: 2, r: 50)                             	 0.00294486	 1000      	 0.0679149 	 0         	 0.412923  	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 1, m: 100, rA: 2, r: 1)                           	 0.00292769	 1000      	 6.83132   	 0         	 27.8718   	 0.245098  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 50, n_right: 1, m: 50, r1: 2)	 0.00104561	 1000      	 19.1275   	 0         	 78.0403   	 0.245098  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 1, n_right: 50, m: 1, r1: 1) 	 0.000249894	 1000      	 0.800339  	 0         	 4.86606   	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 50, cols: 1)                                                                                                                                                                         	 3.1551e-05	 2         	 0         	 0         	 0.0253558 	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0101185 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.00886951	 3000      
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.00550225	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.00499209	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000213877	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000131244	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.1551e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.919e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.27e-05  	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.164e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23033800443776 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23033574057984 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23033372731520 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23033171405056 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23032970078592 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23032768752128 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23032567425664 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23032366099200 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23032164772736 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23031963446272 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23031762119808 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23031560793344 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23031359466880 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23031158140416 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23030956813952 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23030755487488 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23030554161024 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23030352834560 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23030151508096 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23029950181632 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23029748855168 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23029547528704 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23029346202240 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23029144875776 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23028943549312 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23028742222848 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23028540896384 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23028339569920 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23028138243456 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23027936916992 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23027735590528 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23027534264064 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23027332933504 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23027131607040 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23026930280576 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23026728954112 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23026527627648 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23026326301184 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23026124974720 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23025923648256 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23025722321792 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23025520995328 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23025319668864 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23025118342400 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23024917015936 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23024715689472 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23024514363008 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23024313036544 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23024111710080 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23023910383616 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23023709057152 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23023507730688 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23023306404224 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23023105077760 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23022903751296 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23022702424832 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23022501098368 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23022299771904 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23022098445440 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23021897118976 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23021695792512 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23021494466048 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23021293139584 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23033694783232 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23033688192768 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 100, r2: 1, n: 2, n_right: 1, m: 2, r1: 2)	 0.00658028	 1000      	 0.243151  	 0         	 0.739178  	 0.328947  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2, r2: 2, n: 50, n_right: 2, m: 50, r1: 2)	 0.00610737	 1000      	 13.0989   	 0         	 14.1469   	 0.925926  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 2, m: 100, rA: 2, r: 2)                           	 0.00371943	 1000      	 21.5087   	 0         	 23.2293   	 0.925926  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 2, xn: 50, m: 4, rA: 1, r: 2)                             	 0.00305216	 1000      	 0.524218  	 0         	 1.59362   	 0.328947  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 2, xn: 2, m: 2, rA: 2, r: 50)                             	 0.00303856	 1000      	 0.526565  	 0         	 1.60076   	 0.328947  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 2, n_right: 100, m: 2, r1: 1)	 0.000685502	 1000      	 2.33406   	 0         	 7.09553   	 0.328947  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 200, cols: 1)                                                                                                                                                                        	 2.7771e-05	 2         	 0         	 0         	 0.115228  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0138662 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0133731 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0110271 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.00981016	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000210424	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000103333	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.8381e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8441e-05	 1000      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 2.7771e-05	 2         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.046e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23293669615488 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23293486688256 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23293285361792 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23293084035328 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23292882708864 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23292681382400 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23292480055936 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23292278729472 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23292077403008 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23291876076544 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23291674750080 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23291473423616 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23291272097152 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23291070770688 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23290869444224 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23290668117760 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23290466791296 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23290265464832 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23290064138368 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23289862811904 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23289661485440 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23289460158976 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23289258832512 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23289057506048 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23288856179584 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23288654853120 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23288453526656 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23288252200192 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23288050873728 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23287849547264 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23287648220800 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23287446894336 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23287245563776 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23287044237312 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23286842910848 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23286641584384 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23286440257920 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23286238931456 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23286037604992 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23285836278528 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23285634952064 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23285433625600 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23285232299136 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23285030972672 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23284829646208 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23284628319744 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23284426993280 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23284225666816 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23284024340352 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23283823013888 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23283621687424 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23283420360960 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23283219034496 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23283017708032 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23282816381568 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23282615055104 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23282413728640 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23282212402176 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23282011075712 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23281809749248 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23281608422784 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23281407096320 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23281205769856 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23293563954944 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23293557364480 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 150, r2: 1, n: 3, n_right: 1, m: 3, r1: 2)	 0.0198559 	 1000      	 0.271959  	 0         	 0.55117   	 0.493421  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3, r2: 2, n: 50, n_right: 3, m: 50, r1: 2)	 0.00909394	 1000      	 19.7934   	 0         	 10.3805   	 1.90678   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 3, m: 100, rA: 2, r: 3)                           	 0.00603167	 1000      	 29.8425   	 0         	 15.6507   	 1.90678   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 3, xn: 3, m: 3, rA: 2, r: 50)                             	 0.00292491	 1000      	 1.84621   	 0         	 3.74166   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 3, xn: 50, m: 6, rA: 1, r: 3)                             	 0.00282034	 1000      	 1.91466   	 0         	 3.88038   	 0.493421  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 3, n_right: 150, m: 3, r1: 1)	 0.000891142	 1000      	 6.05964   	 0         	 12.2809   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 450, cols: 1)                                                                                                                                                                        	 3.272e-05 	 2         	 0         	 0         	 0.220049  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0303375 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.029841  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0130721 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0117769 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000220295	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000105633	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.5121e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.272e-05 	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8492e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4991e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22660986517376 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22660784318464 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22660582992000 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22660381665536 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22660180339072 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22659979012608 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22659777686144 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22659576359680 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22659375033216 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22659173706752 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22658972380288 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22658771053824 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22658569727360 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22658368400896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22658167074432 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22657965747968 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22657764421504 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22657563095040 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22657361768576 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22657160442112 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22656959115648 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22656757789184 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22656556462720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22656355136256 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22656153809792 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22655952483328 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22655751156864 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22655549830400 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22655348503936 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22655147177472 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22654945851008 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22654744524544 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22654543193984 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22654341867520 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22654140541056 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22653939214592 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22653737888128 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22653536561664 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22653335235200 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22653133908736 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22652932582272 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22652731255808 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22652529929344 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22652328602880 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22652127276416 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22651925949952 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22651724623488 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22651523297024 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22651321970560 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22651120644096 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22650919317632 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22650717991168 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22650516664704 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22650315338240 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22650114011776 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22649912685312 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22649711358848 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22649510032384 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22649308705920 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22649107379456 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22648906052992 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22648704726528 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22648503400064 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22660880856832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22660874266368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4, r2: 2, n: 50, n_right: 4, m: 50, r1: 2)	 0.0107294 	 1000      	 29.8246   	 0         	 9.84211   	 3.0303    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 4, m: 100, rA: 2, r: 4)                           	 0.00926613	 1000      	 34.5344   	 0         	 11.3963   	 3.0303    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 200, r2: 1, n: 4, n_right: 1, m: 4, r1: 2)	 0.00798721	 1000      	 1.60256   	 0         	 2.43589   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 4, xn: 4, m: 4, rA: 2, r: 50)                             	 0.00293927	 1000      	 4.35482   	 0         	 6.61932   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 4, xn: 50, m: 8, rA: 1, r: 4)                             	 0.00292316	 1000      	 4.37883   	 0         	 6.65582   	 0.657895  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 4, n_right: 200, m: 4, r1: 1)	 0.000809771	 1000      	 15.8069   	 0         	 24.0265   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 800, cols: 1)                                                                                                                                                                        	 3.5011e-05	 2         	 0         	 0         	 0.365599  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0200611 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0195264 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0163549 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0151286 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000229406	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000139484	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.9231e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.5011e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.861e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.155e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23180157642624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23179938490368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23179737163904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23179535837440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23179334510976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23179133184512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23178931858048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23178730531584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23178529205120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23178327878656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23178126552192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23177925225728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23177723899264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23177522572800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23177321246336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23177119919872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23176918593408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23176717266944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23176515940480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23176314614016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23176113287552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23175911961088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23175710634624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23175509308160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23175307981696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23175106655232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23174905328768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23174704002304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23174502675840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23174301349376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23174100022912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23173898696448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23173697365888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23173496039424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23173294712960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23173093386496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23172892060032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23172690733568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23172489407104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23172288080640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23172086754176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23171885427712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23171684101248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23171482774784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23171281448320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23171080121856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23170878795392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23170677468928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23170476142464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23170274816000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23170073489536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23169872163072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23169670836608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23169469510144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23169268183680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23169066857216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23168865530752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23168664204288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23168462877824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23168261551360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23168060224896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23167858898432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23167657571968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23180051982080 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23180045391616 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 5, r2: 2, n: 50, n_right: 5, m: 50, r1: 2)	 0.0210247 	 1000      	 23.7815   	 0         	 5.70756   	 4.16667   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 5, m: 100, rA: 2, r: 5)                           	 0.0139402 	 1000      	 35.8675   	 0         	 8.6082    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 250, r2: 1, n: 5, n_right: 1, m: 5, r1: 2)	 0.00800408	 1000      	 3.12341   	 0         	 3.79806   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 5, xn: 50, m: 10, rA: 1, r: 5)                            	 0.00303704	 1000      	 8.2317    	 0         	 10.0097   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 5, xn: 5, m: 5, rA: 2, r: 50)                             	 0.00297606	 1000      	 8.40036   	 0         	 10.2148   	 0.822368  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 5, n_right: 250, m: 5, r1: 1)	 0.00177171	 1000      	 14.1107   	 0         	 17.1586   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1250, cols: 1)                                                                                                                                                                       	 0.000109144	 2         	 0         	 0         	 0.183244  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0313539 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0308005 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0212032 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0199533 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000231346	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000110453	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000109144	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.3501e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8291e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.119e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23081402697600 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23081221351424 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23081020024960 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23080818698496 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23080617372032 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23080416045568 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23080214719104 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23080013392640 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23079812066176 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23079610739712 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23079409413248 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23079208086784 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23079006760320 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23078805433856 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23078604107392 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23078402780928 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23078201454464 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23078000128000 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23077798801536 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23077597475072 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23077396148608 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23077194822144 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23076993495680 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23076792169216 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23076590842752 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23076389516288 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23076188189824 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23075986863360 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23075785536896 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23075584210432 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23075382883968 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23075181557504 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23074980226944 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23074778900480 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23074577574016 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23074376247552 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23074174921088 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23073973594624 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23073772268160 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23073570941696 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23073369615232 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23073168288768 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23072966962304 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23072765635840 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23072564309376 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23072362982912 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23072161656448 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23071960329984 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23071759003520 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23071557677056 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23071356350592 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23071155024128 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23070953697664 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23070752371200 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23070551044736 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23070349718272 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23070148391808 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23069947065344 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23069745738880 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23069544412416 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23069343085952 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23069141759488 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23068940433024 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23081297037056 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23081116489472 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 6, r2: 2, n: 50, n_right: 6, m: 50, r1: 2)	 0.0255353 	 1000      	 28.1963   	 0         	 5.38862   	 5.23256   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 6, m: 100, rA: 2, r: 6)                           	 0.0190181 	 1000      	 37.8587   	 0         	 7.23522   	 5.23256   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 300, r2: 1, n: 6, n_right: 1, m: 6, r1: 2)	 0.00858556	 1000      	 5.03171   	 0         	 5.0988    	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 6, xn: 6, m: 6, rA: 2, r: 50)                             	 0.00329001	 1000      	 13.1307   	 0         	 13.3057   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 6, xn: 50, m: 12, rA: 1, r: 6)                            	 0.00289847	 1000      	 14.9044   	 0         	 15.1032   	 0.986842  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 6, n_right: 300, m: 6, r1: 1)	 0.00234039	 1000      	 18.4584   	 0         	 18.7046   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1800, cols: 1)                                                                                                                                                                       	 7.4402e-05	 2         	 0         	 0         	 0.387086  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0370214 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0364612 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0263909 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0252066 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000229269	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000128493	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 7.4402e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.2371e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8571e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1511e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23168815642496 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23168597092352 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23168395765888 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23168194439424 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23167993112960 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23167791786496 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23167590460032 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23167389133568 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23167187807104 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23166986480640 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23166785154176 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23166583827712 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23166382501248 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23166181174784 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23165979848320 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23165778521856 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23165577195392 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23165375868928 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23165174542464 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23164973216000 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23164771889536 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23164570563072 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23164369236608 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23164167910144 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23163966583680 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23163765257216 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23163563930752 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23163362604288 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23163161277824 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23162959951360 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23162758624896 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23162557298432 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23162355967872 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23162154641408 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23161953314944 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23161751988480 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23161550662016 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23161349335552 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23161148009088 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23160946682624 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23160745356160 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23160544029696 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23160342703232 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23160141376768 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23159940050304 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23159738723840 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23159537397376 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23159336070912 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23159134744448 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23158933417984 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23158732091520 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23158530765056 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23158329438592 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23158128112128 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23157926785664 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23157725459200 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23157524132736 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23157322806272 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23157121479808 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23156920153344 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23156718826880 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23156517500416 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23156316173952 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23168709981952 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23168703391488 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 7, m: 100, rA: 2, r: 7)                           	 0.0258208 	 1000      	 37.9539   	 0         	 6.13459   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 7, r2: 2, n: 50, n_right: 7, m: 50, r1: 2)	 0.0257925 	 1000      	 37.9955   	 0         	 6.14132   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 350, r2: 1, n: 7, n_right: 1, m: 7, r1: 2)	 0.00912054	 1000      	 7.52149   	 0         	 6.53295   	 1.15132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 7, n_right: 350, m: 7, r1: 1)	 0.003413  	 1000      	 20.0996   	 0         	 17.4579   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 7, xn: 7, m: 7, rA: 2, r: 50)                             	 0.00315547	 1000      	 21.74     	 0         	 18.8828   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 7, xn: 50, m: 14, rA: 1, r: 7)                            	 0.00300518	 1000      	 22.8272   	 0         	 19.8271   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 2450, cols: 1)                                                                                                                                                                       	 0.000154885	 2         	 0         	 0         	 0.253091  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0389675 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.038326  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0332351 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0319815 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000252938	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000154885	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000107043	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.3061e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8201e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.178e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23291173152640 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23290936551424 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23290735224960 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23290533898496 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23290332572032 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23290131245568 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23289929919104 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23289728592640 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23289527266176 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23289325939712 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23289124613248 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23288923286784 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23288721960320 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23288520633856 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23288319307392 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23288117980928 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23287916654464 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23287715328000 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23287514001536 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23287312675072 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23287111348608 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23286910022144 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23286708695680 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23286507369216 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23286306042752 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23286104716288 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23285903389824 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23285702063360 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23285500736896 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23285299410432 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23285098083968 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23284896757504 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23284695426944 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23284494100480 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23284292774016 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23284091447552 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23283890121088 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23283688794624 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23283487468160 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23283286141696 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23283084815232 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23282883488768 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23282682162304 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23282480835840 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23282279509376 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23282078182912 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23281876856448 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23281675529984 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23281474203520 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23281272877056 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23281071550592 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23280870224128 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23280668897664 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23280467571200 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23280266244736 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23280064918272 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23279863591808 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23279662265344 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23279460938880 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23279259612416 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23279058285952 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23278856959488 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23278655633024 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23291067492096 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23291060901632 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 8, m: 100, rA: 2, r: 8)                           	 0.0339969 	 1000      	 37.6505   	 0         	 5.3652    	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 8, r2: 2, n: 50, n_right: 8, m: 50, r1: 2)	 0.0295689 	 1000      	 43.2887   	 0         	 6.16864   	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 400, r2: 1, n: 8, n_right: 1, m: 8, r1: 2)	 0.010051  	 1000      	 10.188    	 0         	 7.74291   	 1.31579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 8, n_right: 400, m: 8, r1: 1)	 0.00377442	 1000      	 27.13     	 0         	 20.6188   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 8, xn: 8, m: 8, rA: 2, r: 50)                             	 0.00356958	 1000      	 28.6869   	 0         	 21.802    	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 8, xn: 50, m: 16, rA: 1, r: 8)                            	 0.00312241	 1000      	 32.7952   	 0         	 24.9243   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 3200, cols: 1)                                                                                                                                                                       	 0.000197165	 2         	 0         	 0         	 0.259681  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0441423 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0433943 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0419544 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0406889 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000239575	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000197165	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000177645	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8582e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.0701e-05	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.838e-05 	 1         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22512805529472 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22512607946752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22512406620288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22512205293824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22512003967360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22511802640896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22511601314432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22511399987968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22511198661504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22510997335040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22510796008576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22510594682112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22510393355648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22510192029184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22509990702720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22509789376256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22509588049792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22509386723328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22509185396864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22508984070400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22508782743936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22508581417472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22508380091008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22508178764544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22507977438080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22507776111616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22507574785152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22507373458688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22507172132224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22506970805760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22506769479296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22506568152832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22506366822272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22506165495808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22505964169344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22505762842880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22505561516416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22505360189952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22505158863488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22504957537024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22504756210560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22504554884096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22504353557632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22504152231168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22503950904704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22503749578240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22503548251776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22503346925312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22503145598848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22502944272384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22502742945920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22502541619456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22502340292992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22502138966528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22501937640064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22501736313600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22501534987136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22501333660672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22501132334208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22500931007744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22500729681280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22500528354816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22500327028352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22512699868928 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22512693278464 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 9, r2: 2, n: 50, n_right: 9, m: 50, r1: 2)	 0.120778  	 1000      	 13.413    	 0         	 1.73541   	 7.72901   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 9, n_right: 450, m: 9, r1: 1)	 0.0439652 	 1000      	 3.31626   	 0         	 2.24032   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 9, m: 100, rA: 2, r: 9)                           	 0.0352839 	 1000      	 45.9134   	 0         	 5.94039   	 7.72901   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 450, r2: 1, n: 9, n_right: 1, m: 9, r1: 2)	 0.0254968 	 1000      	 5.71837   	 0         	 3.86307   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 9, xn: 50, m: 18, rA: 1, r: 9)                            	 0.00804793	 1000      	 18.1165   	 0         	 12.2387   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 9, xn: 9, m: 9, rA: 2, r: 50)                             	 0.00513001	 1000      	 28.421    	 0         	 19.2      	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 4050, cols: 1)                                                                                                                                                                       	 0.000160844	 2         	 0         	 0         	 0.402875  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.191224  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.19024   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0497672 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0484618 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00032094	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000160844	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000107533	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.7373e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8423e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2021e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22989197227904 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22989013772288 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22988812445824 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22988611119360 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22988409792896 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22988208466432 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22988007139968 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22987805813504 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22987604487040 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22987403160576 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22987201834112 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22987000507648 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22986799181184 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22986597854720 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22986396528256 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22986195201792 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22985993875328 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22985792548864 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22985591222400 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22985389895936 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22985188569472 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22984987243008 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22984785916544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22984584590080 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22984383263616 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22984181937152 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22983980610688 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22983779284224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22983577957760 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22983376631296 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22983175304832 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22982973978368 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22982772647808 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22982571321344 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22982369994880 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22982168668416 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22981967341952 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22981766015488 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22981564689024 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22981363362560 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22981162036096 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22980960709632 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22980759383168 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22980558056704 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22980356730240 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22980155403776 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22979954077312 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22979752750848 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22979551424384 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22979350097920 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22979148771456 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22978947444992 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22978746118528 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22978544792064 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22978343465600 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22978142139136 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22977940812672 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22977739486208 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22977538159744 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22977336833280 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22977135506816 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22976934180352 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22976732853888 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22989091567360 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22989084976896 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 10, r2: 2, n: 50, n_right: 10, m: 50, r1: 2)	 0.0457536 	 1000      	 43.7124   	 0         	 5.24549   	 8.33333   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 10, m: 100, rA: 2, r: 10)                           	 0.0335027 	 1000      	 59.6967   	 0         	 7.16361   	 8.33333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 500, r2: 1, n: 10, n_right: 1, m: 10, r1: 2)	 0.0138655 	 1000      	 14.4243   	 0         	 8.76997   	 1.64474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 10, n_right: 500, m: 10, r1: 1)	 0.00672941	 1000      	 29.7203   	 0         	 18.0699   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 10, xn: 10, m: 10, rA: 2, r: 50)                            	 0.00480263	 1000      	 41.6438   	 0         	 25.3194   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 10, xn: 50, m: 20, rA: 1, r: 10)                            	 0.00441871	 1000      	 45.2621   	 0         	 27.5194   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 5000, cols: 1)                                                                                                                                                                         	 0.000247017	 2         	 0         	 0         	 0.323864  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0673805 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0663485 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0439795 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.042724  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000284417	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000247017	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000107653	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.857e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.775e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1881e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23284057679744 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23283823011840 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23283621685376 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23283420358912 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23283219032448 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23283017705984 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23282816379520 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23282615053056 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23282413726592 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23282212400128 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23282011073664 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23281809747200 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23281608420736 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23281407094272 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23281205767808 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23281004441344 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23280803114880 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23280601788416 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23280400461952 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23280199135488 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23279997809024 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23279796482560 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23279595156096 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23279393829632 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23279192503168 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23278991176704 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23278789850240 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23278588523776 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23278387197312 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23278185870848 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23277984544384 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23277783217920 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23277581887360 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23277380560896 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23277179234432 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23276977907968 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23276776581504 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23276575255040 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23276373928576 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23276172602112 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23275971275648 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23275769949184 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23275568622720 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23275367296256 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23275165969792 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23274964643328 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23274763316864 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23274561990400 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23274360663936 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23274159337472 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23273958011008 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23273756684544 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23273555358080 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23273354031616 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23273152705152 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23272951378688 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23272750052224 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23272548725760 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23272347399296 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23272146072832 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23271944746368 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23271743419904 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23271542093440 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23283952019200 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23283945428736 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 11, r2: 2, n: 50, n_right: 11, m: 50, r1: 2)	 0.0551    	 1000      	 43.9201   	 0         	 4.96552   	 8.84503   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 11, m: 100, rA: 2, r: 11)                           	 0.0381725 	 1000      	 63.3964   	 0         	 7.16747   	 8.84503   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 550, r2: 1, n: 11, n_right: 1, m: 11, r1: 2)	 0.0154297 	 1000      	 17.2525   	 0         	 9.53591   	 1.80921   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 11, n_right: 550, m: 11, r1: 1)	 0.0074437 	 1000      	 35.7618   	 0         	 19.7665   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 11, xn: 11, m: 11, rA: 2, r: 50)                            	 0.00655375	 1000      	 40.618    	 0         	 22.4507   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 11, xn: 50, m: 22, rA: 1, r: 11)                            	 0.00493681	 1000      	 53.9215   	 0         	 29.8039   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 6050, cols: 1)                                                                                                                                                                         	 0.000229157	 2         	 0         	 0         	 0.422418  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0790404 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0779734 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0512233 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.049663  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000276305	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000229157	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000108733	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.861e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.911e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.42e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22677568673664 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22677360207872 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22677158881408 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22676957554944 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22676756228480 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22676554902016 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22676353575552 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22676152249088 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22675950922624 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22675749596160 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22675548269696 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22675346943232 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22675145616768 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22674944290304 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22674742963840 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22674541637376 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22674340310912 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22674138984448 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22673937657984 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22673736331520 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22673535005056 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22673333678592 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22673132352128 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22672931025664 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22672729699200 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22672528372736 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22672327046272 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22672125719808 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22671924393344 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22671723066880 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22671521740416 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22671320413952 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22671119083392 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22670917756928 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22670716430464 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22670515104000 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22670313777536 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22670112451072 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22669911124608 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22669709798144 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22669508471680 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22669307145216 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22669105818752 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22668904492288 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22668703165824 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22668501839360 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22668300512896 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22668099186432 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22667897859968 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22667696533504 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22667495207040 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22667293880576 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22667092554112 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22666891227648 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22666689901184 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22666488574720 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22666287248256 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22666085921792 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22665884595328 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22665683268864 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22665481942400 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22665280615936 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22665079289472 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22677463013120 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22677456422656 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 12, r2: 2, n: 50, n_right: 12, m: 50, r1: 2)	 0.0691097 	 1000      	 41.6729   	 0         	 4.49141   	 9.27835   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 12, m: 100, rA: 2, r: 12)                           	 0.0392289 	 1000      	 73.4153   	 0         	 7.91254   	 9.27835   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 600, r2: 1, n: 12, n_right: 1, m: 12, r1: 2)	 0.0167378 	 1000      	 20.6479   	 0         	 10.4616   	 1.97368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 12, n_right: 600, m: 12, r1: 1)	 0.00815485	 1000      	 42.3797   	 0         	 21.4724   	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 12, xn: 12, m: 12, rA: 2, r: 50)                            	 0.00766112	 1000      	 45.1109   	 0         	 22.8562   	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 12, xn: 50, m: 24, rA: 1, r: 12)                            	 0.00606213	 1000      	 57.0097   	 0         	 28.8849   	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 7200, cols: 1)                                                                                                                                                                         	 0.000201726	 2         	 0         	 0         	 0.571072  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0950624 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0940023 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0544914 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0529521 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000269646	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000201726	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000109903	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8432e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.9341e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.088e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22481100928896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22480865454080 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22480664127616 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22480462801152 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22480261474688 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22480060148224 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22479858821760 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22479657495296 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22479456168832 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22479254842368 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22479053515904 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22478852189440 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22478650862976 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22478449536512 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22478248210048 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22478046883584 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22477845557120 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22477644230656 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22477442904192 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22477241577728 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22477040251264 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22476838924800 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22476637598336 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22476436271872 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22476234945408 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22476033618944 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22475832292480 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22475630966016 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22475429639552 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22475228313088 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22475026986624 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22474825660160 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22474624329600 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22474423003136 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22474221676672 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22474020350208 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22473819023744 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22473617697280 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22473416370816 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22473215044352 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22473013717888 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22472812391424 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22472611064960 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22472409738496 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22472208412032 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22472007085568 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22471805759104 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22471604432640 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22471403106176 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22471201779712 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22471000453248 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22470799126784 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22470597800320 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22470396473856 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22470195147392 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22469993820928 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22469792494464 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22469591168000 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22469389841536 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22469188515072 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22468987188608 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22468785862144 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22468584535680 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22480995268352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22480988677888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 13, r2: 2, n: 50, n_right: 13, m: 50, r1: 2)	 0.0716659 	 1000      	 47.1633   	 0         	 4.88935   	 9.64612   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 13, m: 100, rA: 2, r: 13)                           	 0.0420743 	 1000      	 80.3341   	 0         	 8.32813   	 9.64612   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 650, r2: 1, n: 13, n_right: 1, m: 13, r1: 2)	 0.0175183 	 1000      	 25.0823   	 0         	 11.7308   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 13, xn: 13, m: 13, rA: 2, r: 50)                            	 0.00963106	 1000      	 45.6232   	 0         	 21.3376   	 2.13816   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 13, n_right: 650, m: 13, r1: 1)	 0.0086329 	 1000      	 50.8983   	 0         	 23.8048   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 13, xn: 50, m: 26, rA: 1, r: 13)                            	 0.00770457	 1000      	 57.0311   	 0         	 26.673    	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 8450, cols: 1)                                                                                                                                                                         	 0.000198635	 2         	 0         	 0         	 0.680645  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0987924 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0978172 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0607477 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0594099 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000295601	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000198635	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000143585	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0111e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8221e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.165e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22968481433472 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22968277133312 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22968075806848 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22967874480384 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22967673153920 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22967471827456 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22967270500992 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22967069174528 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22966867848064 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22966666521600 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22966465195136 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22966263868672 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22966062542208 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22965861215744 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22965659889280 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22965458562816 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22965257236352 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22965055909888 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22964854583424 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22964653256960 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22964451930496 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22964250604032 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22964049277568 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22963847951104 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22963646624640 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22963445298176 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22963243971712 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22963042645248 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22962841318784 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22962639992320 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22962438665856 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22962237339392 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22962036008832 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22961834682368 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22961633355904 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22961432029440 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22961230702976 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22961029376512 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22960828050048 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22960626723584 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22960425397120 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22960224070656 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22960022744192 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22959821417728 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22959620091264 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22959418764800 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22959217438336 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22959016111872 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22958814785408 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22958613458944 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22958412132480 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22958210806016 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22958009479552 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22957808153088 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22957606826624 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22957405500160 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22957204173696 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22957002847232 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22956801520768 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22956600194304 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22956398867840 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22956197541376 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22955996214912 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22968375772928 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22968369182464 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 14, r2: 2, n: 50, n_right: 14, m: 50, r1: 2)	 0.074395  	 1000      	 52.6917   	 0         	 5.29068   	 9.95935   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 14, m: 100, rA: 2, r: 14)                           	 0.0415959 	 1000      	 94.2402   	 0         	 9.46248   	 9.95935   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 700, r2: 1, n: 14, n_right: 1, m: 14, r1: 2)	 0.018824  	 1000      	 29.1542   	 0         	 12.6613   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 14, xn: 14, m: 14, rA: 2, r: 50)                            	 0.00985514	 1000      	 55.6867   	 0         	 24.1839   	 2.30263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 14, n_right: 700, m: 14, r1: 1)	 0.00915176	 1000      	 59.9666   	 0         	 26.0427   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 14, xn: 50, m: 28, rA: 1, r: 14)                            	 0.00716413	 1000      	 76.6038   	 0         	 33.2679   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 9800, cols: 1)                                                                                                                                                                         	 0.000210266	 2         	 0         	 0         	 0.745722  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.103418  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.102371  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0599769 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0586151 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000308561	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000210266	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000112183	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.819e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.729e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.267e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23235184617344 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23234967758848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23234766432384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23234565105920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23234363779456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23234162452992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23233961126528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23233759800064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23233558473600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23233357147136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23233155820672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23232954494208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23232753167744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23232551841280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23232350514816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23232149188352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23231947861888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23231746535424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23231545208960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23231343882496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23231142556032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23230941229568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23230739903104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23230538576640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23230337250176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23230135923712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23229934597248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23229733270784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23229531944320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23229330617856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23229129291392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23228927964928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23228726634368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23228525307904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23228323981440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23228122654976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23227921328512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23227720002048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23227518675584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23227317349120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23227116022656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23226914696192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23226713369728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23226512043264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23226310716800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23226109390336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23225908063872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23225706737408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23225505410944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23225304084480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23225102758016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23224901431552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23224700105088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23224498778624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23224297452160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23224096125696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23223894799232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23223693472768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23223492146304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23223290819840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23223089493376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23222888166912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23222686840448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23235078956800 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23235072366336 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 15, r2: 2, n: 50, n_right: 15, m: 50, r1: 2)	 0.0960172 	 1000      	 46.8666   	 0         	 4.58251   	 10.2273   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 15, m: 100, rA: 2, r: 15)                           	 0.0425051 	 1000      	 105.87    	 0         	 10.3517   	 10.2273   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 750, r2: 1, n: 15, n_right: 1, m: 15, r1: 2)	 0.0208126 	 1000      	 32.4323   	 0         	 13.1459   	 2.46711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 15, n_right: 750, m: 15, r1: 1)	 0.010951  	 1000      	 61.6382   	 0         	 24.984    	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 15, xn: 15, m: 15, rA: 2, r: 50)                            	 0.0105955 	 1000      	 63.7064   	 0         	 25.8223   	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 15, xn: 50, m: 30, rA: 1, r: 15)                            	 0.00780899	 1000      	 86.4388   	 0         	 35.0365   	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 11250, cols: 1)                                                                                                                                                                        	 0.000248287	 2         	 0         	 0         	 0.724967  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.128815  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.127781  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.062304  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0609096 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000295887	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000248287	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000107994	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8273e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2391e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.144e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23173342779264 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23173160495104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23172959168640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23172757842176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23172556515712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23172355189248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23172153862784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23171952536320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23171751209856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23171549883392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23171348556928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23171147230464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23170945904000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23170744577536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23170543251072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23170341924608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23170140598144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23169939271680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23169737945216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23169536618752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23169335292288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23169133965824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23168932639360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23168731312896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23168529986432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23168328659968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23168127333504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23167926007040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23167724680576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23167523354112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23167322027648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23167120701184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23166919370624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23166718044160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23166516717696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23166315391232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23166114064768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23165912738304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23165711411840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23165510085376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23165308758912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23165107432448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23164906105984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23164704779520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23164503453056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23164302126592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23164100800128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23163899473664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23163698147200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23163496820736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23163295494272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23163094167808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23162892841344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23162691514880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23162490188416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23162288861952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23162087535488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23161886209024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23161684882560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23161483556096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23161282229632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23161080903168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23160879576704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23173237118720 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23173230528256 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 16, r2: 2, n: 50, n_right: 16, m: 50, r1: 2)	 0.0900305 	 1000      	 56.8696   	 0         	 5.43816   	 10.4575   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 16, m: 100, rA: 2, r: 16)                           	 0.0532161 	 1000      	 96.2115   	 0         	 9.20022   	 10.4575   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 800, r2: 1, n: 16, n_right: 1, m: 16, r1: 2)	 0.0217073 	 1000      	 37.7385   	 0         	 14.3406   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 16, xn: 16, m: 16, rA: 2, r: 50)                            	 0.0117487 	 1000      	 69.727    	 0         	 26.4963   	 2.63158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 16, n_right: 800, m: 16, r1: 1)	 0.0106421 	 1000      	 76.977    	 0         	 29.2513   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 16, xn: 50, m: 32, rA: 1, r: 16)                            	 0.00803519	 1000      	 101.951   	 0         	 38.7416   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 12800, cols: 1)                                                                                                                                                                        	 0.000228867	 2         	 0         	 0         	 0.894843  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.123454  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.12238   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0743844 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.073     	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000326037	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000228867	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000134564	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8502e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.764e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.11e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23160786028416 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23160611137536 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23160409811072 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23160208484608 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23160007158144 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23159805831680 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23159604505216 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23159403178752 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23159201852288 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23159000525824 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23158799199360 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23158597872896 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23158396546432 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23158195219968 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23157993893504 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23157792567040 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23157591240576 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23157389914112 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23157188587648 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23156987261184 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23156785934720 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23156584608256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23156383281792 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23156181955328 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23155980628864 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23155779302400 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23155577975936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23155376649472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23155175323008 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23154973996544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23154772670080 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23154571343616 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23154370013056 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23154168686592 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23153967360128 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23153766033664 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23153564707200 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23153363380736 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23153162054272 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23152960727808 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23152759401344 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23152558074880 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23152356748416 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23152155421952 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23151954095488 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23151752769024 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23151551442560 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23151350116096 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23151148789632 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23150947463168 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23150746136704 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23150544810240 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23150343483776 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23150142157312 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23149940830848 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23149739504384 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23149538177920 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23149336851456 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23149135524992 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23148934198528 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23148732872064 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23148531545600 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23148330219136 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23160680367872 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23160501786368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 17, r2: 2, n: 50, n_right: 17, m: 50, r1: 2)	 0.124223  	 1000      	 46.5293   	 0         	 4.36635   	 10.6563   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 17, m: 100, rA: 2, r: 17)                           	 0.0478879 	 1000      	 120.698   	 0         	 11.3264   	 10.6563   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 850, r2: 1, n: 17, n_right: 1, m: 17, r1: 2)	 0.0236278 	 1000      	 41.5865   	 0         	 14.8733   	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 17, xn: 17, m: 17, rA: 2, r: 50)                            	 0.0162592 	 1000      	 60.4336   	 0         	 21.6139   	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 17, xn: 50, m: 34, rA: 1, r: 17)                            	 0.0116895 	 1000      	 84.0585   	 0         	 30.0633   	 2.79605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 17, n_right: 850, m: 17, r1: 1)	 0.0107547 	 1000      	 91.3651   	 0         	 32.6765   	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 14450, cols: 1)                                                                                                                                                                        	 0.000193756	 2         	 0         	 0         	 1.19325   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.159636  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.158605  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.077483  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0758366 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000354512	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000193756	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000113673	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8842e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.5351e-05	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2451e-05	 1         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22412602062720 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22412414412800 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22412213086336 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22412011759872 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22411810433408 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22411609106944 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22411407780480 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22411206454016 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22411005127552 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22410803801088 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22410602474624 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22410401148160 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22410199821696 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22409998495232 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22409797168768 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22409595842304 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22409394515840 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22409193189376 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22408991862912 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22408790536448 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22408589209984 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22408387883520 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22408186557056 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22407985230592 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22407783904128 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22407582577664 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22407381251200 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22407179924736 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22406978598272 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22406777271808 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22406575945344 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22406374618880 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22406173288320 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22405971961856 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22405770635392 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22405569308928 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22405367982464 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22405166656000 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22404965329536 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22404764003072 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22404562676608 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22404361350144 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22404160023680 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22403958697216 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22403757370752 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22403556044288 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22403354717824 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22403153391360 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22402952064896 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22402750738432 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22402549411968 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22402348085504 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22402146759040 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22401945432576 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22401744106112 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22401542779648 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22401341453184 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22401140126720 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22400938800256 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22400737473792 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22400536147328 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22400334820864 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22400133494400 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22412496402176 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22412489811712 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 18, r2: 2, n: 50, n_right: 18, m: 50, r1: 2)	 0.158115  	 1000      	 40.9828   	 0         	 3.78459   	 10.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 18, m: 100, rA: 2, r: 18)                           	 0.0466399 	 1000      	 138.937   	 0         	 12.8302   	 10.8289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 900, r2: 1, n: 18, n_right: 1, m: 18, r1: 2)	 0.0247974 	 1000      	 47.0371   	 0         	 15.8881   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 18, xn: 18, m: 18, rA: 2, r: 50)                            	 0.0164204 	 1000      	 71.0336   	 0         	 23.9936   	 2.96053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 18, n_right: 900, m: 18, r1: 1)	 0.0122538 	 1000      	 95.1867   	 0         	 32.1519   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 18, xn: 50, m: 36, rA: 1, r: 18)                            	 0.0119891 	 1000      	 97.2881   	 0         	 32.8617   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 16200, cols: 1)                                                                                                                                                                        	 0.000195616	 2         	 0         	 0         	 1.32504   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.196201  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.195166  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0766824 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0750495 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000291769	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000195616	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000115673	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.938e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.812e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.016e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22896665208704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22896470648832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22896269322368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22896067995904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22895866669440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22895665342976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22895464016512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22895262690048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22895061363584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22894860037120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22894658710656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22894457384192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22894256057728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22894054731264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22893853404800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22893652078336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22893450751872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22893249425408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22893048098944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22892846772480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22892645446016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22892444119552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22892242793088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22892041466624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22891840140160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22891638813696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22891437487232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22891236160768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22891034834304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22890833507840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22890632181376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22890430854912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22890229524352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22890028197888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22889826871424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22889625544960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22889424218496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22889222892032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22889021565568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22888820239104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22888618912640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22888417586176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22888216259712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22888014933248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22887813606784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22887612280320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22887410953856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22887209627392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22887008300928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22886806974464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22886605648000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22886404321536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22886202995072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22886001668608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22885800342144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22885599015680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22885397689216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22885196362752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22884995036288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22884793709824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22884592383360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22884391056896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22884189730432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22896559548160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22896552957696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 19, r2: 2, n: 50, n_right: 19, m: 50, r1: 2)	 0.143046  	 1000      	 50.4734   	 0         	 4.59713   	 10.9793   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 19, m: 100, rA: 2, r: 19)                           	 0.0462192 	 1000      	 156.212   	 0         	 14.2279   	 10.9793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 950, r2: 1, n: 19, n_right: 1, m: 19, r1: 2)	 0.0266314 	 1000      	 51.5106   	 0         	 16.4834   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 19, xn: 19, m: 19, rA: 2, r: 50)                            	 0.0175797 	 1000      	 78.0331   	 0         	 24.9706   	 3.125     
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 19, n_right: 950, m: 19, r1: 1)	 0.0130669 	 1000      	 104.983   	 0         	 33.5945   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 19, xn: 50, m: 38, rA: 1, r: 19)                            	 0.01226   	 1000      	 111.892   	 0         	 35.8055   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 18050, cols: 1)                                                                                                                                                                        	 0.000200316	 2         	 0         	 0         	 1.44172   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.183997  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.182744  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0775824 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0760589 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000291296	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000200316	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000125103	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8492e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.736e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.0941e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23058225203072 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23058001684480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23057800358016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23057599031552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23057397705088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23057196378624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23056995052160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23056793725696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23056592399232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23056391072768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23056189746304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23055988419840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23055787093376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23055585766912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23055384440448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23055183113984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23054981787520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23054780461056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23054579134592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23054377808128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23054176481664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23053975155200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23053773828736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23053572502272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23053371175808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23053169849344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23052968522880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23052767196416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23052565869952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23052364543488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23052163217024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23051961890560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23051760560000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23051559233536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23051357907072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23051156580608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23050955254144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23050753927680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23050552601216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23050351274752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23050149948288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23049948621824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23049747295360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23049545968896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23049344642432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23049143315968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23048941989504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23048740663040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23048539336576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23048338010112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23048136683648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23047935357184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23047734030720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23047532704256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23047331377792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23047130051328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23046928724864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23046727398400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23046526071936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23046324745472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23046123419008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23045922092544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23045720766080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23058119542528 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23058112952064 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 20, r2: 2, n: 50, n_right: 20, m: 50, r1: 2) 	 0.143234  	 1000      	 55.8528   	 0         	 5.02675   	 11.1111   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 20, m: 100, rA: 2, r: 20)                            	 0.0504461 	 1000      	 158.585   	 0         	 14.2727   	 11.1111   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1000, r2: 1, n: 20, n_right: 1, m: 20, r1: 2)	 0.0299603 	 1000      	 53.404    	 0         	 16.2348   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 20, xn: 20, m: 20, rA: 2, r: 50)                             	 0.0211001 	 1000      	 75.829    	 0         	 23.052    	 3.28947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 20, n_right: 1000, m: 20, r1: 1)	 0.0163203 	 1000      	 98.0372   	 0         	 29.8033   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 20, xn: 50, m: 40, rA: 1, r: 20)                             	 0.0149788 	 1000      	 106.817   	 0         	 32.4725   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 20000, cols: 1)                                                                                                                                                                         	 0.000179325	 2         	 0         	 0         	 1.78447   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.190726  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.189514  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0880023 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.086525  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000313108	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000179325	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000149274	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8405e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.7731e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3671e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23386621691776 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23386432464896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23386231138432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23386029811968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23385828485504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23385627159040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23385425832576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23385224506112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23385023179648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23384821853184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23384620526720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23384419200256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23384217873792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23384016547328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23383815220864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23383613894400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23383412567936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23383211241472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23383009915008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23382808588544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23382607262080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23382405935616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23382204609152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23382003282688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23381801956224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23381600629760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23381399303296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23381197976832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23380996650368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23380795323904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23380593997440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23380392670976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23380191340416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23379990013952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23379788687488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23379587361024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23379386034560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23379184708096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23378983381632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23378782055168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23378580728704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23378379402240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23378178075776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23377976749312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23377775422848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23377574096384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23377372769920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23377171443456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23376970116992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23376768790528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23376567464064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23376366137600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23376164811136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23375963484672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23375762158208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23375560831744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23375359505280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23375158178816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23374956852352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23374755525888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23374554199424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23374352872960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23374151546496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23386516031232 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23386509440768 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 21, r2: 2, n: 50, n_right: 21, m: 50, r1: 2) 	 0.154002  	 1000      	 57.2721   	 0         	 5.10124   	 11.2271   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 21, m: 100, rA: 2, r: 21)                            	 0.0505852 	 1000      	 174.359   	 0         	 15.5302   	 11.2271   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1050, r2: 1, n: 21, n_right: 1, m: 21, r1: 2)	 0.0408357 	 1000      	 45.3574   	 0         	 13.132    	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 21, xn: 21, m: 21, rA: 2, r: 50)                             	 0.019752  	 1000      	 93.7728   	 0         	 27.1495   	 3.45395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 21, n_right: 1050, m: 21, r1: 1)	 0.0156295 	 1000      	 118.507   	 0         	 34.3105   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 21, xn: 50, m: 42, rA: 1, r: 21)                             	 0.0153076 	 1000      	 120.998   	 0         	 35.0319   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 22050, cols: 1)                                                                                                                                                                         	 0.000188065	 2         	 0         	 0         	 1.87595   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.211766  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.210467  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0871026 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0856448 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000294835	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000188065	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000127184	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8341e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.927e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.116e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23432569489280 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23432334927872 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23432133601408 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23431932274944 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23431730948480 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23431529622016 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23431328295552 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23431126969088 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23430925642624 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23430724316160 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23430522989696 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23430321663232 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23430120336768 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23429919010304 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23429717683840 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23429516357376 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23429315030912 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23429113704448 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23428912377984 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23428711051520 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23428509725056 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23428308398592 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23428107072128 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23427905745664 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23427704419200 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23427503092736 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23427301766272 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23427100439808 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23426899113344 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23426697786880 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23426496460416 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23426295133952 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23426093803392 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23425892476928 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23425691150464 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23425489824000 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23425288497536 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23425087171072 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23424885844608 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23424684518144 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23424483191680 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23424281865216 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23424080538752 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23423879212288 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23423677885824 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23423476559360 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23423275232896 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23423073906432 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23422872579968 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23422671253504 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23422469927040 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23422268600576 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23422067274112 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23421865947648 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23421664621184 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23421463294720 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23421261968256 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23421060641792 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23420859315328 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23420657988864 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23420456662400 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23420255335936 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23420054009472 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23432463828736 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23432457238272 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 22, r2: 2, n: 50, n_right: 22, m: 50, r1: 2) 	 0.201961  	 1000      	 47.93     	 0         	 4.23052   	 11.3296   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 22, m: 100, rA: 2, r: 22)                            	 0.0547842 	 1000      	 176.693   	 0         	 15.5957   	 11.3296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1100, r2: 1, n: 22, n_right: 1, m: 22, r1: 2)	 0.0294851 	 1000      	 72.2263   	 0         	 19.9607   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 22, xn: 22, m: 22, rA: 2, r: 50)                             	 0.0249475 	 1000      	 85.3634   	 0         	 23.5913   	 3.61842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 22, n_right: 1100, m: 22, r1: 1)	 0.0182218 	 1000      	 116.871   	 0         	 32.2989   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 22, xn: 50, m: 44, rA: 1, r: 22)                             	 0.0180107 	 1000      	 118.241   	 0         	 32.6775   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 24200, cols: 1)                                                                                                                                                                         	 0.000175145	 2         	 0         	 0         	 2.21074   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.250916  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.249668  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0996386 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0977423 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000360088	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000175145	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000150515	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.968e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.936e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.139e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22747308246912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22747086317568 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22746884991104 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22746683664640 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22746482338176 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22746281011712 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22746079685248 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22745878358784 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22745677032320 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22745475705856 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22745274379392 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22745073052928 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22744871726464 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22744670400000 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22744469073536 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22744267747072 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22744066420608 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22743865094144 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22743663767680 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22743462441216 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22743261114752 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22743059788288 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22742858461824 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22742657135360 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22742455808896 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22742254482432 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22742053155968 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22741851829504 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22741650503040 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22741449176576 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22741247850112 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22741046523648 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22740845193088 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22740643866624 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22740442540160 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22740241213696 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22740039887232 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22739838560768 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22739637234304 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22739435907840 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22739234581376 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22739033254912 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22738831928448 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22738630601984 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22738429275520 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22738227949056 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22738026622592 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22737825296128 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22737623969664 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22737422643200 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22737221316736 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22737019990272 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22736818663808 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22736617337344 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22736416010880 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22736214684416 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22736013357952 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22735812031488 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22735610705024 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22735409378560 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22735208052096 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22735006725632 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22734805399168 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22747202586368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22747195995904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 23, r2: 2, n: 50, n_right: 23, m: 50, r1: 2) 	 0.250956  	 1000      	 42.1588   	 0         	 3.69149   	 11.4206   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 23, m: 100, rA: 2, r: 23)                            	 0.060795  	 1000      	 174.028   	 0         	 15.2381   	 11.4206   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 23, xn: 23, m: 23, rA: 2, r: 50)                             	 0.0469135 	 1000      	 51.87     	 0         	 13.7117   	 3.78289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1150, r2: 1, n: 23, n_right: 1, m: 23, r1: 2)	 0.0354785 	 1000      	 68.588    	 0         	 18.1311   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 23, xn: 50, m: 46, rA: 1, r: 23)                             	 0.0332207 	 1000      	 73.2495   	 0         	 19.3634   	 3.78289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 23, n_right: 1150, m: 23, r1: 1)	 0.0206111 	 1000      	 118.062   	 0         	 31.2095   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 26450, cols: 1)                                                                                                                                                                         	 0.000176215	 2         	 0         	 0         	 2.40161   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.30833   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.307045  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.142679  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.140929  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000304732	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000176215	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000132234	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8512e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2011e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.127e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22664766666624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22664542414848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22664341088384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22664139761920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22663938435456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22663737108992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22663535782528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22663334456064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22663133129600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22662931803136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22662730476672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22662529150208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22662327823744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22662126497280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22661925170816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22661723844352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22661522517888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22661321191424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22661119864960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22660918538496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22660717212032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22660515885568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22660314559104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22660113232640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22659911906176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22659710579712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22659509253248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22659307926784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22659106600320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22658905273856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22658703947392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22658502620928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22658301290368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22658099963904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22657898637440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22657697310976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22657495984512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22657294658048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22657093331584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22656892005120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22656690678656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22656489352192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22656288025728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22656086699264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22655885372800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22655684046336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22655482719872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22655281393408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22655080066944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22654878740480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22654677414016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22654476087552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22654274761088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22654073434624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22653872108160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22653670781696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22653469455232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22653268128768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22653066802304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22652865475840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22652664149376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22652462822912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22652261496448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22664661006080 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22664654415616 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 24, r2: 2, n: 50, n_right: 24, m: 50, r1: 2) 	 0.269202  	 1000      	 42.7931   	 0         	 3.72062   	 11.5016   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 24, m: 100, rA: 2, r: 24)                            	 0.0566946 	 1000      	 203.194   	 0         	 17.6666   	 11.5016   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1200, r2: 1, n: 24, n_right: 1, m: 24, r1: 2)	 0.0369783 	 1000      	 74.7682   	 0         	 18.9413   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 24, xn: 24, m: 24, rA: 2, r: 50)                             	 0.0235199 	 1000      	 117.552   	 0         	 29.7798   	 3.94737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 24, n_right: 1200, m: 24, r1: 1)	 0.020712  	 1000      	 133.488   	 0         	 33.8169   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 24, xn: 50, m: 48, rA: 1, r: 24)                             	 0.0172839 	 1000      	 159.964   	 0         	 40.5242   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 28800, cols: 1)                                                                                                                                                                         	 0.000164845	 2         	 0         	 0         	 2.79535   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.328156  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.326893  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0988938 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0974983 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000293988	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000164845	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000150424	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.85e-05  	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.13e-05  	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.474e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23423001831296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23422805469184 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23422604142720 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23422402816256 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23422201489792 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23422000163328 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23421798836864 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23421597510400 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23421396183936 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23421194857472 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23420993531008 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23420792204544 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23420590878080 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23420389551616 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23420188225152 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23419986898688 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23419785572224 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23419584245760 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23419382919296 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23419181592832 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23418980266368 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23418778939904 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23418577613440 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23418376286976 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23418174960512 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23417973634048 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23417772307584 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23417570981120 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23417369654656 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23417168328192 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23416967001728 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23416765675264 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23416564344704 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23416363018240 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23416161691776 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23415960365312 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23415759038848 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23415557712384 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23415356385920 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23415155059456 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23414953732992 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23414752406528 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23414551080064 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23414349753600 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23414148427136 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23413947100672 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23413745774208 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23413544447744 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23413343121280 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23413141794816 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23412940468352 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23412739141888 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23412537815424 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23412336488960 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23412135162496 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23411933836032 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23411732509568 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23411531183104 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23411329856640 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23411128530176 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23410927203712 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23410725877248 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23410524550784 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23422896170752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23422889580288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 25, r2: 2, n: 50, n_right: 25, m: 50, r1: 2) 	 0.245871  	 1000      	 50.8397   	 0         	 4.39255   	 11.5741   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 25, m: 100, rA: 2, r: 25)                            	 0.066928  	 1000      	 186.768   	 0         	 16.1367   	 11.5741   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1250, r2: 1, n: 25, n_right: 1, m: 25, r1: 2)	 0.030215  	 1000      	 103.426   	 0         	 25.1531   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 25, xn: 25, m: 25, rA: 2, r: 50)                             	 0.0255817 	 1000      	 122.157   	 0         	 29.7087   	 4.11184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 25, n_right: 1250, m: 25, r1: 1)	 0.0229577 	 1000      	 136.12    	 0         	 33.1043   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 25, xn: 50, m: 50, rA: 1, r: 25)                             	 0.0222113 	 1000      	 140.694   	 0         	 34.2168   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 31250, cols: 1)                                                                                                                                                                         	 0.000134374	 2         	 0         	 0         	 3.72096   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.300432  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.299043  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.116357  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.114721  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000321713	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000134374	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000127183	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.841e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2121e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1621e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23422509512576 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23422335707136 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23422134380672 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23421933054208 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23421731727744 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23421530401280 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23421329074816 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23421127748352 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23420926421888 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23420725095424 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23420523768960 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23420322442496 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23420121116032 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23419919789568 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23419718463104 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23419517136640 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23419315810176 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23419114483712 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23418913157248 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23418711830784 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23418510504320 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23418309177856 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23418107851392 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23417906524928 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23417705198464 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23417503872000 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23417302545536 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23417101219072 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23416899892608 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23416698566144 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23416497239680 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23416295913216 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23416094582656 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23415893256192 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23415691929728 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23415490603264 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23415289276800 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23415087950336 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23414886623872 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23414685297408 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23414483970944 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23414282644480 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23414081318016 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23413879991552 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23413678665088 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23413477338624 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23413276012160 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23413074685696 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23412873359232 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23412672032768 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23412470706304 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23412269379840 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23412068053376 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23411866726912 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23411665400448 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23411464073984 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23411262747520 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23411061421056 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23410860094592 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23410658768128 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23410457441664 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23410256115200 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23410054788736 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23422230845184 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23422225311488 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 26, r2: 2, n: 50, n_right: 26, m: 50, r1: 2) 	 0.248606  	 1000      	 54.3833   	 0         	 4.67246   	 11.6391   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 26, m: 100, rA: 2, r: 26)                            	 0.0605605 	 1000      	 223.248   	 0         	 19.1808   	 11.6391   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1300, r2: 1, n: 26, n_right: 1, m: 26, r1: 2)	 0.0447573 	 1000      	 78.5391   	 0         	 18.3661   	 4.27632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 26, n_right: 1300, m: 26, r1: 1)	 0.022996  	 1000      	 152.861   	 0         	 35.746    	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 26, xn: 26, m: 26, rA: 2, r: 50)                             	 0.0222232 	 1000      	 158.177   	 0         	 36.9891   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 26, xn: 50, m: 52, rA: 1, r: 26)                             	 0.0205318 	 1000      	 171.207   	 0         	 40.0361   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 33800, cols: 1)                                                                                                                                                                         	 0.000145334	 2         	 0         	 0         	 3.72108   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.317759  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.316359  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.104757  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.103316  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000321339	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000145334	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000136033	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.825e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.299e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1281e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22839733778304 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22839495223296 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22839293896832 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22839092570368 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22838891243904 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22838689917440 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22838488590976 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22838287264512 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22838085938048 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22837884611584 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22837683285120 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22837481958656 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22837280632192 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22837079305728 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22836877979264 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22836676652800 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22836475326336 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22836273999872 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22836072673408 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22835871346944 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22835670020480 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22835468694016 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22835267367552 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22835066041088 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22834864714624 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22834663388160 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22834462061696 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22834260735232 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22834059408768 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22833858082304 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22833656755840 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22833455429376 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22833254098816 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22833052772352 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22832851445888 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22832650119424 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22832448792960 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22832247466496 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22832046140032 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22831844813568 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22831643487104 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22831442160640 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22831240834176 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22831039507712 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22830838181248 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22830636854784 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22830435528320 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22830234201856 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22830032875392 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22829831548928 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22829630222464 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22829428896000 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22829227569536 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22829026243072 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22828824916608 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22828623590144 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22828422263680 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22828220937216 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22828019610752 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22827818284288 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22827616957824 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22827415631360 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22827214304896 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22839628117760 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22839621527296 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 27, r2: 2, n: 50, n_right: 27, m: 50, r1: 2) 	 0.229691  	 1000      	 63.4765   	 0         	 5.42641   	 11.6977   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 27, m: 100, rA: 2, r: 27)                            	 0.0648585 	 1000      	 224.797   	 0         	 19.2172   	 11.6977   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1350, r2: 1, n: 27, n_right: 1, m: 27, r1: 2)	 0.0296095 	 1000      	 132.951   	 0         	 29.9385   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 27, xn: 27, m: 27, rA: 2, r: 50)                             	 0.0217014 	 1000      	 181.398   	 0         	 40.8482   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 27, xn: 50, m: 54, rA: 1, r: 27)                             	 0.021379  	 1000      	 184.134   	 0         	 41.4642   	 4.44079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 27, n_right: 1350, m: 27, r1: 1)	 0.017573  	 1000      	 224.015   	 0         	 50.4448   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 36450, cols: 1)                                                                                                                                                                         	 0.000141334	 2         	 0         	 0         	 4.1264    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.278377  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.276874  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.10944   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.107939  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000324297	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000141334	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000134384	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.822e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.7981e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2561e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22508267841408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22508044544000 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22507843217536 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22507641891072 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22507440564608 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22507239238144 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22507037911680 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22506836585216 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22506635258752 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22506433932288 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22506232605824 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22506031279360 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22505829952896 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22505628626432 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22505427299968 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22505225973504 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22505024647040 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22504823320576 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22504621994112 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22504420667648 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22504219341184 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22504018014720 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22503816688256 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22503615361792 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22503414035328 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22503212708864 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22503011382400 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22502810055936 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22502608729472 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22502407403008 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22502206076544 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22502004750080 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22501803419520 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22501602093056 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22501400766592 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22501199440128 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22500998113664 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22500796787200 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22500595460736 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22500394134272 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22500192807808 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22499991481344 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22499790154880 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22499588828416 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22499387501952 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22499186175488 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22498984849024 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22498783522560 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22498582196096 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22498380869632 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22498179543168 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22497978216704 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22497776890240 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22497575563776 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22497374237312 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22497172910848 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22496971584384 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22496770257920 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22496568931456 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22496367604992 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22496166278528 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22495964952064 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22495763625600 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22508162180864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22508155590400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 28, r2: 2, n: 50, n_right: 28, m: 50, r1: 2) 	 0.233706  	 1000      	 67.0927   	 0         	 5.70973   	 11.7506   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 28, m: 100, rA: 2, r: 28)                            	 0.0644604 	 1000      	 243.25    	 0         	 20.7011   	 11.7506   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1400, r2: 1, n: 28, n_right: 1, m: 28, r1: 2)	 0.033681  	 1000      	 130.353   	 0         	 28.3051   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 28, xn: 28, m: 28, rA: 2, r: 50)                             	 0.0236539 	 1000      	 185.61    	 0         	 40.3039   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 28, xn: 50, m: 56, rA: 1, r: 28)                             	 0.020674  	 1000      	 212.363   	 0         	 46.1131   	 4.60526   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 28, n_right: 1400, m: 28, r1: 1)	 0.0196973 	 1000      	 222.894   	 0         	 48.3998   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 39200, cols: 1)                                                                                                                                                                         	 0.000138594	 2         	 0         	 0         	 4.52545   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.288383  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.287085  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.110138  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.108788  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000307078	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000169385	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000138594	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8641e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.102e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.269e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23276460013440 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23276239710208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23276038383744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23275837057280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23275635730816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23275434404352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23275233077888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23275031751424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23274830424960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23274629098496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23274427772032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23274226445568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23274025119104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23273823792640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23273622466176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23273421139712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23273219813248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23273018486784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23272817160320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23272615833856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23272414507392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23272213180928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23272011854464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23271810528000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23271609201536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23271407875072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23271206548608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23271005222144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23270803895680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23270602569216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23270401242752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23270199916288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23269998585728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23269797259264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23269595932800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23269394606336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23269193279872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23268991953408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23268790626944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23268589300480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23268387974016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23268186647552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23267985321088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23267783994624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23267582668160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23267381341696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23267180015232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23266978688768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23266777362304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23266576035840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23266374709376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23266173382912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23265972056448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23265770729984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23265569403520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23265368077056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23265166750592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23264965424128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23264764097664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23264562771200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23264361444736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23264160118272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23263958791808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23276354352896 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23276347762432 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 29, r2: 2, n: 50, n_right: 29, m: 50, r1: 2) 	 0.252206  	 1000      	 66.6915   	 0         	 5.65252   	 11.7985   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 29, m: 100, rA: 2, r: 29)                            	 0.0658521 	 1000      	 255.421   	 0         	 21.6485   	 11.7985   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1450, r2: 1, n: 29, n_right: 1, m: 29, r1: 2)	 0.0347641 	 1000      	 140.311   	 0         	 29.417    	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 29, xn: 29, m: 29, rA: 2, r: 50)                             	 0.0253528 	 1000      	 192.397   	 0         	 40.337    	 4.76974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 29, n_right: 1450, m: 29, r1: 1)	 0.0234016 	 1000      	 208.439   	 0         	 43.7003   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 29, xn: 50, m: 58, rA: 1, r: 29)                             	 0.0225269 	 1000      	 216.532   	 0         	 45.3971   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 42050, cols: 1)                                                                                                                                                                         	 0.000116733	 2         	 0         	 0         	 5.76358   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.311716  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.310372  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.115366  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.113732  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000313892	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000189975	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000116733	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.879e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8861e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.285e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23062703277952 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23062497978368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23062296651904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23062095325440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23061893998976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23061692672512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23061491346048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23061290019584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23061088693120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23060887366656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23060686040192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23060484713728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23060283387264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23060082060800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23059880734336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23059679407872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23059478081408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23059276754944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23059075428480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23058874102016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23058672775552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23058471449088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23058270122624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23058068796160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23057867469696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23057666143232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23057464816768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23057263490304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23057062163840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23056860837376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23056659510912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23056458184448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23056256853888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23056055527424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23055854200960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23055652874496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23055451548032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23055250221568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23055048895104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23054847568640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23054646242176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23054444915712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23054243589248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23054042262784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23053840936320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23053639609856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23053438283392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23053236956928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23053035630464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23052834304000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23052632977536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23052431651072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23052230324608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23052028998144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23051827671680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23051626345216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23051425018752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23051223692288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23051022365824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23050821039360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23050619712896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23050418386432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23050217059968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23062597617408 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23062591026944 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 30, r2: 2, n: 50, n_right: 30, m: 50, r1: 2) 	 0.272865  	 1000      	 65.9668   	 0         	 5.57053   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 30, m: 100, rA: 2, r: 30)                            	 0.0663654 	 1000      	 271.226   	 0         	 22.9035   	 11.8421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1500, r2: 1, n: 30, n_right: 1, m: 30, r1: 2)	 0.0360569 	 1000      	 149.763   	 0         	 30.352    	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 30, xn: 30, m: 30, rA: 2, r: 50)                             	 0.0290031 	 1000      	 186.187   	 0         	 37.7339   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 30, xn: 50, m: 60, rA: 1, r: 30)                             	 0.0231232 	 1000      	 233.532   	 0         	 47.3291   	 4.93421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 30, n_right: 1500, m: 30, r1: 1)	 0.0221462 	 1000      	 243.834   	 0         	 49.417    	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 45000, cols: 1)                                                                                                                                                                         	 0.000137944	 2         	 0         	 0         	 5.21951   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.332476  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.331068  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.119978  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.118492  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000313288	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000140964	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000137944	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.1131e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.861e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.106e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22949633304448 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22949419542528 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22949218216064 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22949016889600 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22948815563136 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22948614236672 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22948412910208 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22948211583744 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22948010257280 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22947808930816 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22947607604352 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22947406277888 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22947204951424 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22947003624960 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22946802298496 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22946600972032 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22946399645568 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22946198319104 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22945996992640 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22945795666176 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22945594339712 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22945393013248 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22945191686784 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22944990360320 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22944789033856 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22944587707392 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22944386380928 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22944185054464 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22943983728000 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22943782401536 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22943581075072 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22943379748608 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22943178418048 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22942977091584 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22942775765120 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22942574438656 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22942373112192 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22942171785728 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22941970459264 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22941769132800 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22941567806336 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22941366479872 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22941165153408 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22940963826944 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22940762500480 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22940561174016 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22940359847552 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22940158521088 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22939957194624 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22939755868160 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22939554541696 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22939353215232 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22939151888768 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22938950562304 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22938749235840 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22938547909376 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22938346582912 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22938145256448 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22937943929984 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22937742603520 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22937541277056 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22937339950592 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22937138624128 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22949527643904 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22949521053440 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 31, r2: 2, n: 50, n_right: 31, m: 50, r1: 2) 	 0.284734  	 1000      	 67.5017   	 0         	 5.6811    	 11.8818   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 31, m: 100, rA: 2, r: 31)                            	 0.0735842 	 1000      	 261.197   	 0         	 21.983    	 11.8818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1550, r2: 1, n: 31, n_right: 1, m: 31, r1: 2)	 0.0355735 	 1000      	 167.49    	 0         	 32.8496   	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 31, xn: 31, m: 31, rA: 2, r: 50)                             	 0.0317079 	 1000      	 187.909   	 0         	 36.8544   	 5.09868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 31, n_right: 1550, m: 31, r1: 1)	 0.0257276 	 1000      	 231.588   	 0         	 45.4212   	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 31, xn: 50, m: 62, rA: 1, r: 31)                             	 0.0251155 	 1000      	 237.232   	 0         	 46.5281   	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 48050, cols: 1)                                                                                                                                                                         	 0.000149174	 2         	 0         	 0         	 5.15371   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.347494  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.346035  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.131823  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.130408  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00030116	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000153823	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000149174	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8493e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.7971e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.347e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22682138867584 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22681923610624 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22681722284160 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22681520957696 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22681319631232 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22681118304768 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22680916978304 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22680715651840 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22680514325376 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22680312998912 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22680111672448 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22679910345984 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22679709019520 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22679507693056 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22679306366592 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22679105040128 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22678903713664 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22678702387200 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22678501060736 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22678299734272 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22678098407808 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22677897081344 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22677695754880 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22677494428416 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22677293101952 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22677091775488 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22676890449024 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22676689122560 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22676487796096 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22676286469632 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22676085143168 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22675883816704 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22675682486144 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22675481159680 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22675279833216 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22675078506752 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22674877180288 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22674675853824 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22674474527360 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22674273200896 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22674071874432 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22673870547968 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22673669221504 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22673467895040 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22673266568576 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22673065242112 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22672863915648 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22672662589184 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22672461262720 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22672259936256 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22672058609792 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22671857283328 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22671655956864 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22671454630400 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22671253303936 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22671051977472 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22670850651008 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22670649324544 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22670447998080 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22670246671616 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22670045345152 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22669844018688 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22669642692224 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22682033207040 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22682026616576 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 32, r2: 2, n: 50, n_right: 32, m: 50, r1: 2) 	 0.294274  	 1000      	 69.595    	 0         	 5.83946   	 11.9181   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 32, m: 100, rA: 2, r: 32)                            	 0.0905227 	 1000      	 226.242   	 0         	 18.9831   	 11.9181   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1600, r2: 1, n: 32, n_right: 1, m: 32, r1: 2)	 0.0389276 	 1000      	 168.353   	 0         	 31.9871   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 32, xn: 32, m: 32, rA: 2, r: 50)                             	 0.0345993 	 1000      	 189.414   	 0         	 35.9887   	 5.26316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 32, n_right: 1600, m: 32, r1: 1)	 0.0292871 	 1000      	 223.771   	 0         	 42.5165   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 32, xn: 50, m: 64, rA: 1, r: 32)                             	 0.0272811 	 1000      	 240.225   	 0         	 45.6428   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 51200, cols: 1)                                                                                                                                                                         	 0.000142524	 2         	 0         	 0         	 5.7478    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.363621  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.362489  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.154052  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.152403  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000286262	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000145434	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000142524	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8381e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.0211e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.432e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23401972426624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23401800394752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23401599068288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23401397741824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23401196415360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23400995088896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23400793762432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23400592435968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23400391109504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23400189783040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23399988456576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23399787130112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23399585803648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23399384477184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23399183150720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23398981824256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23398780497792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23398579171328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23398377844864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23398176518400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23397975191936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23397773865472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23397572539008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23397371212544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23397169886080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23396968559616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23396767233152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23396565906688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23396364580224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23396163253760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23395961927296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23395760600832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23395559270272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23395357943808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23395156617344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23394955290880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23394753964416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23394552637952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23394351311488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23394149985024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23393948658560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23393747332096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23393546005632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23393344679168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23393143352704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23392942026240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23392740699776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23392539373312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23392338046848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23392136720384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23391935393920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23391734067456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23391532740992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23391331414528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23391130088064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23390928761600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23390727435136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23390526108672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23390324782208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23390123455744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23389922129280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23389720802816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23389519476352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23401694758656 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23401688188672 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 33, r2: 2, n: 50, n_right: 33, m: 50, r1: 2) 	 0.309791  	 1000      	 70.3054   	 0         	 5.88267   	 11.9513   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 33, m: 100, rA: 2, r: 33)                            	 0.0713568 	 1000      	 305.227   	 0         	 25.5393   	 11.9513   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1650, r2: 1, n: 33, n_right: 1, m: 33, r1: 2)	 0.0572213 	 1000      	 125.607   	 0         	 23.1421   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 33, xn: 33, m: 33, rA: 2, r: 50)                             	 0.038944  	 1000      	 184.557   	 0         	 34.0033   	 5.42763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 33, n_right: 1650, m: 33, r1: 1)	 0.0379199 	 1000      	 189.542   	 0         	 34.9216   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 33, xn: 50, m: 66, rA: 1, r: 33)                             	 0.0349334 	 1000      	 205.746   	 0         	 37.9071   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 54450, cols: 1)                                                                                                                                                                         	 0.000138954	 2         	 0         	 0         	 6.2697    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.40608   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.404932  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.146625  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.145234  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000308928	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000148654	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000138954	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.842e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3781e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.345e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22937019959168 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22936803076096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22936601749632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22936400423168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22936199096704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22935997770240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22935796443776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22935595117312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22935393790848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22935192464384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22934991137920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22934789811456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22934588484992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22934387158528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22934185832064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22933984505600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22933783179136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22933581852672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22933380526208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22933179199744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22932977873280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22932776546816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22932575220352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22932373893888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22932172567424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22931971240960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22931769914496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22931568588032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22931367261568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22931165935104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22930964608640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22930763282176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22930561951616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22930360625152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22930159298688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22929957972224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22929756645760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22929555319296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22929353992832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22929152666368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22928951339904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22928750013440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22928548686976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22928347360512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22928146034048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22927944707584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22927743381120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22927542054656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22927340728192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22927139401728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22926938075264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22926736748800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22926535422336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22926334095872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22926132769408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22925931442944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22925730116480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22925528790016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22925327463552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22925126137088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22924924810624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22924723484160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22924522157696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22936914298624 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22936907708160 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 34, r2: 2, n: 50, n_right: 34, m: 50, r1: 2) 	 0.35922   	 1000      	 64.3618   	 0         	 5.37165   	 11.9818   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 34, m: 100, rA: 2, r: 34)                            	 0.0822642 	 1000      	 281.046   	 0         	 23.4561   	 11.9818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1700, r2: 1, n: 34, n_right: 1, m: 34, r1: 2)	 0.0640909 	 1000      	 122.651   	 0         	 21.9328   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 34, xn: 34, m: 34, rA: 2, r: 50)                             	 0.0629717 	 1000      	 124.831   	 0         	 22.3227   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 34, xn: 50, m: 68, rA: 1, r: 34)                             	 0.0475076 	 1000      	 165.464   	 0         	 29.5889   	 5.59211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 34, n_right: 1700, m: 34, r1: 1)	 0.042522  	 1000      	 184.864   	 0         	 33.0581   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 57800, cols: 1)                                                                                                                                                                         	 0.000164585	 2         	 0         	 0         	 5.61898   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.467068  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.465832  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.194017  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.192744  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000325545	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000164585	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000159895	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8531e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.531e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.542e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23110367790976 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23110145271808 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23109943945344 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23109742618880 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23109541292416 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23109339965952 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23109138639488 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23108937313024 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23108735986560 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23108534660096 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23108333333632 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23108132007168 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23107930680704 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23107729354240 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23107528027776 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23107326701312 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23107125374848 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23106924048384 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23106722721920 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23106521395456 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23106320068992 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23106118742528 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23105917416064 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23105716089600 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23105514763136 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23105313436672 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23105112110208 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23104910783744 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23104709457280 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23104508130816 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23104306804352 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23104105477888 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23103904147328 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23103702820864 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23103501494400 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23103300167936 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23103098841472 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23102897515008 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23102696188544 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23102494862080 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23102293535616 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23102092209152 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23101890882688 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23101689556224 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23101488229760 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23101286903296 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23101085576832 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23100884250368 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23100682923904 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23100481597440 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23100280270976 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23100078944512 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23099877618048 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23099676291584 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23099474965120 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23099273638656 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23099072312192 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23098870985728 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23098669659264 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23098468332800 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23098267006336 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23098065679872 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23097864353408 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23110262130432 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23110255539968 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 35, r2: 2, n: 50, n_right: 35, m: 50, r1: 2) 	 0.268005  	 1000      	 91.416    	 0         	 7.61179   	 12.0098   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 35, m: 100, rA: 2, r: 35)                            	 0.0740916 	 1000      	 330.672   	 0         	 27.5335   	 12.0098   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1750, r2: 1, n: 35, n_right: 1, m: 35, r1: 2)	 0.0493489 	 1000      	 173.763   	 0         	 30.1851   	 5.75658   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 35, n_right: 1750, m: 35, r1: 1)	 0.0474927 	 1000      	 180.554   	 0         	 31.3648   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 35, xn: 35, m: 35, rA: 2, r: 50)                             	 0.0312316 	 1000      	 274.561   	 0         	 47.6952   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 35, xn: 50, m: 70, rA: 1, r: 35)                             	 0.0279649 	 1000      	 306.634   	 0         	 53.2667   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 61250, cols: 1)                                                                                                                                                                         	 0.000176885	 2         	 0         	 0         	 5.54032   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.366071  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.364847  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.134721  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.133288  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000352383	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000190995	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000176885	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8451e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2111e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3921e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22858875672448 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22858688358400 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22858487031936 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22858285705472 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22858084379008 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22857883052544 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22857681726080 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22857480399616 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22857279073152 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22857077746688 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22856876420224 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22856675093760 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22856473767296 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22856272440832 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22856071114368 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22855869787904 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22855668461440 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22855467134976 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22855265808512 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22855064482048 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22854863155584 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22854661829120 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22854460502656 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22854259176192 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22854057849728 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22853856523264 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22853655196800 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22853453870336 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22853252543872 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22853051217408 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22852849890944 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22852648564480 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22852447233920 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22852245907456 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22852044580992 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22851843254528 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22851641928064 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22851440601600 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22851239275136 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22851037948672 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22850836622208 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22850635295744 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22850433969280 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22850232642816 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22850031316352 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22849829989888 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22849628663424 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22849427336960 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22849226010496 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22849024684032 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22848823357568 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22848622031104 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22848420704640 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22848219378176 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22848018051712 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22847816725248 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22847615398784 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22847414072320 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22847212745856 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22847011419392 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22846810092928 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22846608766464 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22846407440000 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22858770011904 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22858763421440 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1800, r2: 1, n: 36, n_right: 1, m: 36, r1: 2)	 0.935103  	 1000      	 9.97879   	 0         	 1.68531   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 36, r2: 2, n: 50, n_right: 36, m: 50, r1: 2) 	 0.255484  	 1000      	 101.455   	 0         	 8.4295    	 12.0357   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 36, m: 100, rA: 2, r: 36)                            	 0.0747136 	 1000      	 346.925   	 0         	 28.8247   	 12.0357   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 36, n_right: 1800, m: 36, r1: 1)	 0.0328843 	 1000      	 283.758   	 0         	 47.9236   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 36, xn: 36, m: 36, rA: 2, r: 50)                             	 0.0316589 	 1000      	 294.741   	 0         	 49.7786   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 36, xn: 50, m: 72, rA: 1, r: 36)                             	 0.0276697 	 1000      	 337.236   	 0         	 56.9553   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 64800, cols: 1)                                                                                                                                                                         	 0.000165844	 2         	 0         	 0         	 6.25166   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.2653    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.22347   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.135577  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.134042  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00243074	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000170975	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000165844	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.5441e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.814e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.483e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22940363384704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22940158519296 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22939957192832 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22939755866368 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22939554539904 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22939353213440 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22939151886976 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22938950560512 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22938749234048 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22938547907584 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22938346581120 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22938145254656 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22937943928192 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22937742601728 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22937541275264 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22937339948800 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22937138622336 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22936937295872 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22936735969408 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22936534642944 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22936333316480 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22936131990016 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22935930663552 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22935729337088 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22935528010624 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22935326684160 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22935125357696 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22934924031232 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22934722704768 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22934521378304 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22934320051840 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22934118725376 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22933917394816 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22933716068352 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22933514741888 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22933313415424 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22933112088960 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22932910762496 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22932709436032 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22932508109568 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22932306783104 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22932105456640 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22931904130176 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22931702803712 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22931501477248 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22931300150784 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22931098824320 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22930897497856 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22930696171392 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22930494844928 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22930293518464 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22930092192000 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22929890865536 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22929689539072 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22929488212608 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22929286886144 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22929085559680 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22928884233216 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22928682906752 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22928481580288 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22928280253824 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22928078927360 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22927877600896 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22940257724160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22940251133696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1850, r2: 1, n: 37, n_right: 1, m: 37, r1: 2)	 0.847362  	 1000      	 11.9555   	 0         	 1.96457   	 6.08553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 37, r2: 2, n: 50, n_right: 37, m: 50, r1: 2) 	 0.310945  	 1000      	 88.0542   	 0         	 7.30162   	 12.0595   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 37, m: 100, rA: 2, r: 37)                            	 0.0717719 	 1000      	 381.486   	 0         	 31.6335   	 12.0595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 37, n_right: 1850, m: 37, r1: 1)	 0.0360593 	 1000      	 280.943   	 0         	 46.1658   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 37, xn: 37, m: 37, rA: 2, r: 50)                             	 0.0324172 	 1000      	 312.507   	 0         	 51.3525   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 37, xn: 50, m: 74, rA: 1, r: 37)                             	 0.0316659 	 1000      	 319.921   	 0         	 52.5708   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 68450, cols: 1)                                                                                                                                                                         	 0.000168655	 2         	 0         	 0         	 6.49373   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.24086   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.19437   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.137443  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.135855  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00317796	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000168655	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000163375	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.6822e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.82e-05  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.449e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22486284982144 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22486099945472 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22485898619008 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22485697292544 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22485495966080 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22485294639616 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22485093313152 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22484891986688 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22484690660224 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22484489333760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22484288007296 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22484086680832 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22483885354368 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22483684027904 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22483482701440 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22483281374976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22483080048512 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22482878722048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22482677395584 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22482476069120 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22482274742656 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22482073416192 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22481872089728 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22481670763264 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22481469436800 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22481268110336 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22481066783872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22480865457408 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22480664130944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22480462804480 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22480261478016 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22480060151552 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22479858820992 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22479657494528 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22479456168064 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22479254841600 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22479053515136 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22478852188672 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22478650862208 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22478449535744 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22478248209280 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22478046882816 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22477845556352 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22477644229888 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22477442903424 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22477241576960 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22477040250496 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22476838924032 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22476637597568 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22476436271104 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22476234944640 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22476033618176 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22475832291712 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22475630965248 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22475429638784 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22475228312320 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22475026985856 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22474825659392 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22474624332928 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22474423006464 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22474221680000 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22474020353536 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22473819027072 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22486179321600 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22486172731136 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1900, r2: 1, n: 38, n_right: 1, m: 38, r1: 2)	 0.860774  	 1000      	 12.7494   	 0         	 2.03991   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 38, r2: 2, n: 50, n_right: 38, m: 50, r1: 2) 	 0.305994  	 1000      	 94.381    	 0         	 7.81192   	 12.0817   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 38, m: 100, rA: 2, r: 38)                            	 0.0701892 	 1000      	 411.459   	 0         	 34.0565   	 12.0817   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 38, n_right: 1900, m: 38, r1: 1)	 0.0377227 	 1000      	 290.923   	 0         	 46.5476   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 38, xn: 50, m: 76, rA: 1, r: 38)                             	 0.0327789 	 1000      	 334.801   	 0         	 53.5682   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 38, xn: 38, m: 38, rA: 2, r: 50)                             	 0.0321977 	 1000      	 340.845   	 0         	 54.5351   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 72200, cols: 1)                                                                                                                                                                         	 0.000189585	 2         	 0         	 0         	 6.09331   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.25135   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.20449   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.136522  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.135166  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00318046	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000282518	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000189585	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.5792e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.844e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.779e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22462239938432 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22462007863296 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22461806536832 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22461605210368 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22461403883904 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22461202557440 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22461001230976 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22460799904512 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22460598578048 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22460397251584 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22460195925120 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22459994598656 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22459793272192 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22459591945728 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22459390619264 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22459189292800 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22458987966336 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22458786639872 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22458585313408 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22458383986944 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22458182660480 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22457981334016 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22457780007552 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22457578681088 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22457377354624 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22457176028160 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22456974701696 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22456773375232 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22456572048768 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22456370722304 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22456169395840 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22455968069376 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22455766738816 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22455565412352 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22455364085888 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22455162759424 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22454961432960 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22454760106496 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22454558780032 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22454357453568 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22454156127104 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22453954800640 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22453753474176 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22453552147712 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22453350821248 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22453149494784 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22452948168320 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22452746841856 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22452545515392 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22452344188928 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22452142862464 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22451941536000 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22451740209536 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22451538883072 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22451337556608 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22451136230144 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22450934903680 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22450733577216 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22450532250752 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22450330924288 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22450129597824 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22449928271360 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22449726944896 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22462134277888 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22462127687424 -> hwthread 1 - OK[0m[1;34m
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd: error: *** JOB 6999 ON be-amd01 CANCELLED AT 2023-10-13T10:17:02 ***
slurmstepd: error: *** STEP 6999.38 ON be-amd01 CANCELLED AT 2023-10-13T10:17:02 ***
