[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23014533969792 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23014313814016 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23014112487552 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23013911161088 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23013709834624 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23013508508160 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23013307181696 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23013105855232 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23012904528768 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23012703202304 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23012501875840 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23012300549376 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23012099222912 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23011897896448 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23011696569984 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23011495243520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23011293917056 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23011092590592 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23010891264128 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23010689937664 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23010488611200 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23010287284736 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23010085958272 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23009884631808 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23009683305344 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23009481978880 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23009280652416 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23009079325952 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23008877999488 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23008676673024 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23008475346560 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23008274020096 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23008072689536 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23007871363072 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23007670036608 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23007468710144 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23007267383680 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23007066057216 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23006864730752 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23006663404288 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23006462077824 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23006260751360 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23006059424896 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23005858098432 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23005656771968 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23005455445504 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23005254119040 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23005052792576 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23004851466112 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23004650139648 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23004448813184 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23004247486720 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23004046160256 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23003844833792 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23003643507328 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23003442180864 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23003240854400 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23003039527936 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23002838201472 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23002636875008 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23002435548544 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23002234222080 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23002032895616 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23014428309248 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23014421718784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 50, r2: 1, n: 1, n_right: 1, m: 1, r1: 2) 	 0.00329794	 1000      	 0.060644  	 0         	 0.368716  	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 1, xn: 50, m: 2, rA: 1, r: 1)                             	 0.00299965	 1000      	 0.0666745 	 0         	 0.405381  	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 1, m: 100, rA: 2, r: 1)                           	 0.00298028	 1000      	 6.71078   	 0         	 27.38     	 0.245098  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 1, xn: 1, m: 1, rA: 2, r: 50)                             	 0.00297624	 1000      	 0.0671988 	 0         	 0.408569  	 0.164474  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 50, n_right: 1, m: 50, r1: 2)	 0.00104629	 1000      	 19.1151   	 0         	 77.9898   	 0.245098  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 1, n_right: 50, m: 1, r1: 1) 	 0.000244841	 1000      	 0.816857  	 0         	 4.96649   	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 50, cols: 1)                                                                                                                                                                         	 3.7431e-05	 2         	 0         	 0         	 0.0213727 	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0101608 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.00895617	 3000      
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.00509951	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.00458907	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000216896	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000115294	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.7431e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8472e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2151e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.45e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22423952619392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22423755810816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22423554484352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22423353157888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22423151831424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22422950504960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22422749178496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22422547852032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22422346525568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22422145199104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22421943872640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22421742546176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22421541219712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22421339893248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22421138566784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22420937240320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22420735913856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22420534587392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22420333260928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22420131934464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22419930608000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22419729281536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22419527955072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22419326628608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22419125302144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22418923975680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22418722649216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22418521322752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22418319996288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22418118669824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22417917343360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22417716016896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22417514686336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22417313359872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22417112033408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22416910706944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22416709380480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22416508054016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22416306727552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22416105401088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22415904074624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22415702748160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22415501421696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22415300095232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22415098768768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22414897442304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22414696115840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22414494789376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22414293462912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22414092136448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22413890809984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22413689483520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22413488157056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22413286830592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22413085504128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22412884177664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22412682851200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22412481524736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22412280198272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22412078871808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22411877545344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22411676218880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22411474892416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22423846958848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22423840368384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 100, r2: 1, n: 2, n_right: 1, m: 2, r1: 2)	 0.00645795	 1000      	 0.247757  	 0         	 0.75318   	 0.328947  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2, r2: 2, n: 50, n_right: 2, m: 50, r1: 2)	 0.00612618	 1000      	 13.0587   	 0         	 14.1034   	 0.925926  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 2, m: 100, rA: 2, r: 2)                           	 0.00366087	 1000      	 21.8527   	 0         	 23.601    	 0.925926  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 2, xn: 2, m: 2, rA: 2, r: 50)                             	 0.00292283	 1000      	 0.547414  	 0         	 1.66414   	 0.328947  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 2, xn: 50, m: 4, rA: 1, r: 2)                             	 0.00291757	 1000      	 0.548401  	 0         	 1.66714   	 0.328947  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 2, n_right: 100, m: 2, r1: 1)	 0.000654705	 1000      	 2.44385   	 0         	 7.4293    	 0.328947  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 200, cols: 1)                                                                                                                                                                        	 3.1731e-05	 2         	 0         	 0         	 0.100848  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0137306 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0132388 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0107132 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.00950128	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000217233	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000124514	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.9462e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.1731e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8271e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.2e-06   	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23128756680576 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23128533100544 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23128331774080 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23128130447616 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23127929121152 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23127727794688 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23127526468224 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23127325141760 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23127123815296 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23126922488832 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23126721162368 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23126519835904 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23126318509440 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23126117182976 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23125915856512 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23125714530048 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23125513203584 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23125311877120 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23125110550656 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23124909224192 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23124707897728 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23124506571264 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23124305244800 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23124103918336 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23123902591872 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23123701265408 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23123499938944 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23123298612480 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23123097286016 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23122895959552 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23122694633088 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23122493306624 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23122291976064 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23122090649600 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23121889323136 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23121687996672 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23121486670208 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23121285343744 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23121084017280 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23120882690816 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23120681364352 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23120480037888 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23120278711424 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23120077384960 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23119876058496 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23119674732032 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23119473405568 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23119272079104 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23119070752640 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23118869426176 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23118668099712 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23118466773248 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23118265446784 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23118064120320 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23117862793856 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23117661467392 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23117460140928 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23117258814464 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23117057488000 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23116856161536 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23116654835072 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23116453508608 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23116252182144 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23128651020032 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23128644429568 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3, r2: 2, n: 50, n_right: 3, m: 50, r1: 2)	 0.00902317	 1000      	 19.9486   	 0         	 10.462    	 1.90678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 150, r2: 1, n: 3, n_right: 1, m: 3, r1: 2)	 0.00717224	 1000      	 0.752903  	 0         	 1.52588   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 3, m: 100, rA: 2, r: 3)                           	 0.00587425	 1000      	 30.6422   	 0         	 16.0701   	 1.90678   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 3, xn: 3, m: 3, rA: 2, r: 50)                             	 0.00292149	 1000      	 1.84837   	 0         	 3.74604   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 3, xn: 50, m: 6, rA: 1, r: 3)                             	 0.00290938	 1000      	 1.85606   	 0         	 3.76162   	 0.493421  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 3, n_right: 150, m: 3, r1: 1)	 0.000929373	 1000      	 5.81037   	 0         	 11.7757   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 450, cols: 1)                                                                                                                                                                        	 3.3712e-05	 2         	 0         	 0         	 0.213574  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0176319 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0171248 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.01302   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0117051 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000231137	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000103643	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.4161e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.3712e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8471e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.73e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23106172983168 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23105984522240 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23105783195776 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23105581869312 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23105380542848 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23105179216384 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23104977889920 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23104776563456 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23104575236992 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23104373910528 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23104172584064 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23103971257600 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23103769931136 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23103568604672 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23103367278208 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23103165951744 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23102964625280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23102763298816 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23102561972352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23102360645888 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23102159319424 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23101957992960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23101756666496 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23101555340032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23101354013568 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23101152687104 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23100951360640 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23100750034176 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23100548707712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23100347381248 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23100146054784 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23099944728320 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23099743397760 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23099542071296 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23099340744832 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23099139418368 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23098938091904 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23098736765440 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23098535438976 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23098334112512 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23098132786048 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23097931459584 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23097730133120 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23097528806656 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23097327480192 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23097126153728 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23096924827264 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23096723500800 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23096522174336 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23096320847872 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23096119521408 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23095918194944 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23095716868480 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23095515542016 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23095314215552 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23095112889088 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23094911562624 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23094710236160 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23094508909696 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23094307583232 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23094106256768 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23093904930304 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23093703603840 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23106067322624 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23106060732160 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4, r2: 2, n: 50, n_right: 4, m: 50, r1: 2)	 0.0106473 	 1000      	 30.0546   	 0         	 9.91801   	 3.0303    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 4, m: 100, rA: 2, r: 4)                           	 0.00925054	 1000      	 34.5926   	 0         	 11.4156   	 3.0303    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 200, r2: 1, n: 4, n_right: 1, m: 4, r1: 2)	 0.007329  	 1000      	 1.74649   	 0         	 2.65466   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 4, xn: 50, m: 8, rA: 1, r: 4)                             	 0.00298085	 1000      	 4.29408   	 0         	 6.527     	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 4, xn: 4, m: 4, rA: 2, r: 50)                             	 0.00295898	 1000      	 4.32581   	 0         	 6.57523   	 0.657895  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 4, n_right: 200, m: 4, r1: 1)	 0.000825153	 1000      	 15.5123   	 0         	 23.5787   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 800, cols: 1)                                                                                                                                                                        	 4.6531e-05	 2         	 0         	 0         	 0.275085  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0193162 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0188014 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0164345 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0151904 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000213471	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000101953	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.8942e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 4.6531e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8631e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2451e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22624550262656 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22624344205312 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22624142878848 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22623941552384 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22623740225920 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22623538899456 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22623337572992 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22623136246528 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22622934920064 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22622733593600 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22622532267136 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22622330940672 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22622129614208 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22621928287744 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22621726961280 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22621525634816 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22621324308352 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22621122981888 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22620921655424 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22620720328960 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22620519002496 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22620317676032 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22620116349568 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22619915023104 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22619713696640 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22619512370176 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22619311043712 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22619109717248 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22618908390784 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22618707064320 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22618505737856 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22618304411392 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22618103080832 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22617901754368 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22617700427904 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22617499101440 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22617297774976 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22617096448512 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22616895122048 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22616693795584 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22616492469120 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22616291142656 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22616089816192 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22615888489728 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22615687163264 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22615485836800 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22615284510336 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22615083183872 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22614881857408 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22614680530944 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22614479204480 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22614277878016 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22614076551552 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22613875225088 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22613673898624 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22613472572160 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22613271245696 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22613069919232 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22612868592768 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22612667266304 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22612465939840 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22612264613376 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22612063286912 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22624444602112 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22624438011648 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 5, r2: 2, n: 50, n_right: 5, m: 50, r1: 2)	 0.0208564 	 1000      	 23.9735   	 0         	 5.75364   	 4.16667   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 5, m: 100, rA: 2, r: 5)                           	 0.01384   	 1000      	 36.1273   	 0         	 8.67055   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 250, r2: 1, n: 5, n_right: 1, m: 5, r1: 2)	 0.00793   	 1000      	 3.15259   	 0         	 3.83355   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 5, xn: 5, m: 5, rA: 2, r: 50)                             	 0.0029919 	 1000      	 8.35589   	 0         	 10.1608   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 5, xn: 50, m: 10, rA: 1, r: 5)                            	 0.00298285	 1000      	 8.38125   	 0         	 10.1916   	 0.822368  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 5, n_right: 250, m: 5, r1: 1)	 0.0017984 	 1000      	 13.9013   	 0         	 16.9039   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1250, cols: 1)                                                                                                                                                                       	 0.000115294	 2         	 0         	 0         	 0.17347   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0311295 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0305848 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0210826 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0198147 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000238877	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000115294	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000102913	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.6002e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8734e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.065e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22455758583680 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22455565412352 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22455364085888 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22455162759424 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22454961432960 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22454760106496 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22454558780032 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22454357453568 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22454156127104 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22453954800640 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22453753474176 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22453552147712 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22453350821248 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22453149494784 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22452948168320 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22452746841856 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22452545515392 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22452344188928 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22452142862464 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22451941536000 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22451740209536 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22451538883072 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22451337556608 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22451136230144 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22450934903680 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22450733577216 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22450532250752 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22450330924288 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22450129597824 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22449928271360 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22449726944896 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22449525618432 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22449324287872 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22449122961408 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22448921634944 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22448720308480 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22448518982016 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22448317655552 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22448116329088 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22447915002624 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22447713676160 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22447512349696 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22447311023232 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22447109696768 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22446908370304 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22446707043840 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22446505717376 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22446304390912 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22446103064448 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22445901737984 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22445700411520 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22445499085056 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22445297758592 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22445096432128 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22444895105664 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22444693779200 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22444492452736 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22444291126272 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22444089799808 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22443888473344 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22443687146880 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22443485820416 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22443284493952 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22455652923136 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22455646332672 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 6, r2: 2, n: 50, n_right: 6, m: 50, r1: 2)	 0.0249752 	 1000      	 28.8286   	 0         	 5.50947   	 5.23256   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 300, r2: 1, n: 6, n_right: 1, m: 6, r1: 2)	 0.0197295 	 1000      	 2.18962   	 0         	 2.21881   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 6, m: 100, rA: 2, r: 6)                           	 0.0187124 	 1000      	 38.4771   	 0         	 7.35341   	 5.23256   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 6, xn: 6, m: 6, rA: 2, r: 50)                             	 0.00313477	 1000      	 13.7809   	 0         	 13.9646   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 6, xn: 50, m: 12, rA: 1, r: 6)                            	 0.00293239	 1000      	 14.732    	 0         	 14.9285   	 0.986842  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 6, n_right: 300, m: 6, r1: 1)	 0.00225849	 1000      	 19.1278   	 0         	 19.3828   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1800, cols: 1)                                                                                                                                                                       	 0.000154305	 2         	 0         	 0         	 0.186643  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0475261 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0469631 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0260394 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0247796 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000235516	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000154305	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000104893	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.2282e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.843e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.051e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22728966739840 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22728765597696 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22728564271232 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22728362944768 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22728161618304 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22727960291840 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22727758965376 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22727557638912 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22727356312448 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22727154985984 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22726953659520 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22726752333056 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22726551006592 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22726349680128 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22726148353664 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22725947027200 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22725745700736 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22725544374272 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22725343047808 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22725141721344 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22724940394880 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22724739068416 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22724537741952 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22724336415488 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22724135089024 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22723933762560 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22723732436096 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22723531109632 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22723329783168 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22723128456704 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22722927130240 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22722725803776 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22722524473216 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22722323146752 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22722121820288 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22721920493824 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22721719167360 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22721517840896 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22721316514432 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22721115187968 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22720913861504 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22720712535040 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22720511208576 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22720309882112 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22720108555648 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22719907229184 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22719705902720 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22719504576256 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22719303249792 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22719101923328 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22718900596864 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22718699270400 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22718497943936 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22718296617472 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22718095291008 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22717893964544 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22717692638080 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22717491311616 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22717289985152 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22717088658688 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22716887332224 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22716686005760 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22716484679296 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22728861079296 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22728854488832 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 7, r2: 2, n: 50, n_right: 7, m: 50, r1: 2)	 0.025801  	 1000      	 37.9831   	 0         	 6.1393    	 6.18687   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 7, m: 100, rA: 2, r: 7)                           	 0.0254516 	 1000      	 38.5045   	 0         	 6.22358   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 350, r2: 1, n: 7, n_right: 1, m: 7, r1: 2)	 0.00963704	 1000      	 7.11837   	 0         	 6.18281   	 1.15132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 7, n_right: 350, m: 7, r1: 1)	 0.00320768	 1000      	 21.3862   	 0         	 18.5754   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 7, xn: 7, m: 7, rA: 2, r: 50)                             	 0.00315266	 1000      	 21.7594   	 0         	 18.8996   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 7, xn: 50, m: 14, rA: 1, r: 7)                            	 0.00296057	 1000      	 23.1712   	 0         	 20.1259   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 2450, cols: 1)                                                                                                                                                                       	 0.000205017	 2         	 0         	 0         	 0.191204  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0393246 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0386457 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0327524 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0315648 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000250129	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000205017	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000117964	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.4571e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8501e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.123e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22575200188288 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22575019190272 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22574817863808 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22574616537344 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22574415210880 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22574213884416 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22574012557952 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22573811231488 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22573609905024 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22573408578560 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22573207252096 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22573005925632 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22572804599168 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22572603272704 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22572401946240 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22572200619776 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22571999293312 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22571797966848 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22571596640384 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22571395313920 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22571193987456 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22570992660992 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22570791334528 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22570590008064 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22570388681600 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22570187355136 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22569986028672 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22569784702208 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22569583375744 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22569382049280 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22569180722816 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22568979396352 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22568778065792 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22568576739328 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22568375412864 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22568174086400 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22567972759936 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22567771433472 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22567570107008 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22567368780544 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22567167454080 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22566966127616 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22566764801152 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22566563474688 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22566362148224 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22566160821760 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22565959495296 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22565758168832 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22565556842368 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22565355515904 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22565154189440 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22564952862976 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22564751536512 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22564550210048 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22564348883584 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22564147557120 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22563946230656 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22563744904192 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22563543577728 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22563342251264 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22563140924800 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22562939598336 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22562738271872 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22575094527744 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22574914328320 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 8, m: 100, rA: 2, r: 8)                           	 0.0330614 	 1000      	 38.7159   	 0         	 5.51701   	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 8, r2: 2, n: 50, n_right: 8, m: 50, r1: 2)	 0.0295876 	 1000      	 43.2613   	 0         	 6.16474   	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 400, r2: 1, n: 8, n_right: 1, m: 8, r1: 2)	 0.0095928 	 1000      	 10.6747   	 0         	 8.11275   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 8, xn: 50, m: 16, rA: 1, r: 8)                            	 0.00625337	 1000      	 16.3752   	 0         	 12.4451   	 1.31579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 8, n_right: 400, m: 8, r1: 1)	 0.00374271	 1000      	 27.3599   	 0         	 20.7935   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 8, xn: 8, m: 8, rA: 2, r: 50)                             	 0.00356082	 1000      	 28.7574   	 0         	 21.8556   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 3200, cols: 1)                                                                                                                                                                       	 0.000202847	 2         	 0         	 0         	 0.252407  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0441198 	 1000      
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0436825 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0429231 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0428755 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000247289	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000202847	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000104653	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.3301e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.832e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.153e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22825138141056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22824932599808 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22824731273344 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22824529946880 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22824328620416 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22824127293952 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22823925967488 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22823724641024 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22823523314560 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22823321988096 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22823120661632 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22822919335168 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22822718008704 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22822516682240 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22822315355776 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22822114029312 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22821912702848 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22821711376384 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22821510049920 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22821308723456 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22821107396992 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22820906070528 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22820704744064 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22820503417600 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22820302091136 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22820100764672 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22819899438208 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22819698111744 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22819496785280 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22819295458816 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22819094132352 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22818892805888 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22818691475328 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22818490148864 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22818288822400 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22818087495936 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22817886169472 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22817684843008 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22817483516544 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22817282190080 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22817080863616 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22816879537152 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22816678210688 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22816476884224 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22816275557760 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22816074231296 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22815872904832 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22815671578368 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22815470251904 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22815268925440 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22815067598976 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22814866272512 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22814664946048 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22814463619584 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22814262293120 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22814060966656 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22813859640192 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22813658313728 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22813456987264 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22813255660800 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22813054334336 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22812853007872 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22812651681408 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22825032480512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22825025890048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 9, r2: 2, n: 50, n_right: 9, m: 50, r1: 2)	 0.0948559 	 1000      	 17.0785   	 0         	 2.20967   	 7.72901   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 9, n_right: 450, m: 9, r1: 1)	 0.0383955 	 1000      	 3.79732   	 0         	 2.5653    	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 9, m: 100, rA: 2, r: 9)                           	 0.0346473 	 1000      	 46.7569   	 0         	 6.04954   	 7.72901   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 450, r2: 1, n: 9, n_right: 1, m: 9, r1: 2)	 0.0118782 	 1000      	 12.2746   	 0         	 8.29214   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 9, xn: 9, m: 9, rA: 2, r: 50)                             	 0.00442138	 1000      	 32.9761   	 0         	 22.2772   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 9, xn: 50, m: 18, rA: 1, r: 9)                            	 0.00344261	 1000      	 42.3516   	 0         	 28.6108   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 4050, cols: 1)                                                                                                                                                                       	 0.000202907	 2         	 0         	 0         	 0.319358  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.146119  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.14513   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0437853 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0425113 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000328958	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000202907	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000126604	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.8443e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8542e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 8.511e-06 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22801102182272 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22800907626496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22800706300032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22800504973568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22800303647104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22800102320640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22799900994176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22799699667712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22799498341248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22799297014784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22799095688320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22798894361856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22798693035392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22798491708928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22798290382464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22798089056000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22797887729536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22797686403072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22797485076608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22797283750144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22797082423680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22796881097216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22796679770752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22796478444288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22796277117824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22796075791360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22795874464896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22795673138432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22795471811968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22795270485504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22795069159040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22794867832576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22794666502016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22794465175552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22794263849088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22794062522624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22793861196160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22793659869696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22793458543232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22793257216768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22793055890304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22792854563840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22792653237376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22792451910912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22792250584448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22792049257984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22791847931520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22791646605056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22791445278592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22791243952128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22791042625664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22790841299200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22790639972736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22790438646272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22790237319808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22790035993344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22789834666880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22789633340416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22789432013952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22789230687488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22789029361024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22788828034560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22788626708096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22800996521728 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22800989931264 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 10, r2: 2, n: 50, n_right: 10, m: 50, r1: 2)	 0.0459591 	 1000      	 43.517    	 0         	 5.22203   	 8.33333   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 10, m: 100, rA: 2, r: 10)                           	 0.0340538 	 1000      	 58.7306   	 0         	 7.04767   	 8.33333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 500, r2: 1, n: 10, n_right: 1, m: 10, r1: 2)	 0.0135663 	 1000      	 14.7425   	 0         	 8.96341   	 1.64474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 10, n_right: 500, m: 10, r1: 1)	 0.00690695	 1000      	 28.9563   	 0         	 17.6054   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 10, xn: 10, m: 10, rA: 2, r: 50)                            	 0.00469678	 1000      	 42.5824   	 0         	 25.8901   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 10, xn: 50, m: 20, rA: 1, r: 10)                            	 0.0041419 	 1000      	 48.2871   	 0         	 29.3585   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 5000, cols: 1)                                                                                                                                                                         	 0.000226107	 2         	 0         	 0         	 0.353815  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0674274 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0664323 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0442182 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0428925 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000266907	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000226107	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000114874	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.823e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8811e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.015e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23176792713088 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23176583047168 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23176381720704 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23176180394240 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23175979067776 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23175777741312 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23175576414848 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23175375088384 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23175173761920 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23174972435456 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23174771108992 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23174569782528 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23174368456064 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23174167129600 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23173965803136 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23173764476672 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23173563150208 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23173361823744 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23173160497280 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23172959170816 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23172757844352 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23172556517888 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23172355191424 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23172153864960 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23171952538496 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23171751212032 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23171549885568 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23171348559104 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23171147232640 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23170945906176 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23170744579712 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23170543253248 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23170341922688 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23170140596224 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23169939269760 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23169737943296 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23169536616832 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23169335290368 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23169133963904 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23168932637440 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23168731310976 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23168529984512 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23168328658048 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23168127331584 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23167926005120 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23167724678656 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23167523352192 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23167322025728 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23167120699264 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23166919372800 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23166718046336 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23166516719872 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23166315393408 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23166114066944 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23165912740480 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23165711414016 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23165510087552 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23165308761088 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23165107434624 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23164906108160 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23164704781696 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23164503455232 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23164302128768 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23176687052544 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23176680462080 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 11, r2: 2, n: 50, n_right: 11, m: 50, r1: 2)	 0.0546983 	 1000      	 44.2427   	 0         	 5.00198   	 8.84503   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 11, m: 100, rA: 2, r: 11)                           	 0.0400639 	 1000      	 60.4035   	 0         	 6.82909   	 8.84503   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 550, r2: 1, n: 11, n_right: 1, m: 11, r1: 2)	 0.0147945 	 1000      	 17.9932   	 0         	 9.94531   	 1.80921   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 11, n_right: 550, m: 11, r1: 1)	 0.00724263	 1000      	 36.7546   	 0         	 20.3153   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 11, xn: 11, m: 11, rA: 2, r: 50)                            	 0.00632278	 1000      	 42.1017   	 0         	 23.2708   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 11, xn: 50, m: 22, rA: 1, r: 11)                            	 0.00519088	 1000      	 51.2822   	 0         	 28.3451   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 6050, cols: 1)                                                                                                                                                                         	 0.000241527	 2         	 0         	 0         	 0.400783  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0777876 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0767354 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0530172 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0515776 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00024411	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000241527	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000109584	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8451e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.9551e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 8.98e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23217240790912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23217049692160 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23216848365696 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23216647039232 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23216445712768 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23216244386304 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23216043059840 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23215841733376 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23215640406912 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23215439080448 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23215237753984 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23215036427520 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23214835101056 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23214633774592 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23214432448128 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23214231121664 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23214029795200 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23213828468736 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23213627142272 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23213425815808 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23213224489344 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23213023162880 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23212821836416 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23212620509952 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23212419183488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23212217857024 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23212016530560 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23211815204096 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23211613877632 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23211412551168 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23211211224704 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23211009898240 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23210808567680 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23210607241216 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23210405914752 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23210204588288 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23210003261824 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23209801935360 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23209600608896 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23209399282432 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23209197955968 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23208996629504 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23208795303040 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23208593976576 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23208392650112 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23208191323648 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23207989997184 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23207788670720 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23207587344256 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23207386017792 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23207184691328 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23206983364864 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23206782038400 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23206580711936 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23206379385472 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23206178059008 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23205976732544 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23205775406080 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23205574079616 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23205372753152 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23205171426688 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23204970100224 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23204768773760 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23217135130368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23217128539904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 12, r2: 2, n: 50, n_right: 12, m: 50, r1: 2)	 0.063942  	 1000      	 45.0408   	 0         	 4.8544    	 9.27835   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 12, m: 100, rA: 2, r: 12)                           	 0.0388505 	 1000      	 74.1303   	 0         	 7.98959   	 9.27835   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 600, r2: 1, n: 12, n_right: 1, m: 12, r1: 2)	 0.0165865 	 1000      	 20.8362   	 0         	 10.557    	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 12, xn: 12, m: 12, rA: 2, r: 50)                            	 0.00824642	 1000      	 41.9091   	 0         	 21.2339   	 1.97368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 12, n_right: 600, m: 12, r1: 1)	 0.00713284	 1000      	 48.4519   	 0         	 24.549    	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 12, xn: 50, m: 24, rA: 1, r: 12)                            	 0.00633764	 1000      	 54.5313   	 0         	 27.6292   	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 7200, cols: 1)                                                                                                                                                                         	 0.000230937	 2         	 0         	 0         	 0.498837  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0887239 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0876614 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0548953 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0534346 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000268467	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000230937	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000114814	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8311e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.6761e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.005e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23381231605632 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23380996646912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23380795320448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23380593993984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23380392667520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23380191341056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23379990014592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23379788688128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23379587361664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23379386035200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23379184708736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23378983382272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23378782055808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23378580729344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23378379402880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23378178076416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23377976749952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23377775423488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23377574097024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23377372770560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23377171444096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23376970117632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23376768791168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23376567464704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23376366138240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23376164811776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23375963485312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23375762158848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23375560832384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23375359505920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23375158179456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23374956852992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23374755522432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23374554195968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23374352869504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23374151543040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23373950216576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23373748890112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23373547563648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23373346237184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23373144910720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23372943584256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23372742257792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23372540931328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23372339604864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23372138278400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23371936951936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23371735625472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23371534299008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23371332972544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23371131646080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23370930319616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23370728993152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23370527666688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23370326340224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23370125013760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23369923687296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23369722360832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23369521034368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23369319707904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23369118381440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23368917054976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23368715728512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23381125945088 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23381119354624 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 13, r2: 2, n: 50, n_right: 13, m: 50, r1: 2)	 0.0677443 	 1000      	 49.8935   	 0         	 5.17239   	 9.64612   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 13, m: 100, rA: 2, r: 13)                           	 0.0423525 	 1000      	 79.8064   	 0         	 8.27342   	 9.64612   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 650, r2: 1, n: 13, n_right: 1, m: 13, r1: 2)	 0.0164827 	 1000      	 26.6583   	 0         	 12.4679   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 13, xn: 13, m: 13, rA: 2, r: 50)                            	 0.00953881	 1000      	 46.0644   	 0         	 21.544    	 2.13816   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 13, n_right: 650, m: 13, r1: 1)	 0.00816851	 1000      	 53.7919   	 0         	 25.1581   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 13, xn: 50, m: 26, rA: 1, r: 13)                            	 0.0078037 	 1000      	 56.3066   	 0         	 26.3342   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 8450, cols: 1)                                                                                                                                                                         	 0.000227317	 2         	 0         	 0         	 0.594764  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0933204 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0923955 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0610381 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.059695  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000272118	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000227317	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000122264	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.832e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2331e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.131e-06 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23166188828544 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23165979846656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23165778520192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23165577193728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23165375867264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23165174540800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23164973214336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23164771887872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23164570561408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23164369234944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23164167908480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23163966582016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23163765255552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23163563929088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23163362602624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23163161276160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23162959949696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23162758623232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23162557296768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23162355970304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23162154643840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23161953317376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23161751990912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23161550664448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23161349337984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23161148011520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23160946685056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23160745358592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23160544032128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23160342705664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23160141379200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23159940052736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23159738722176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23159537395712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23159336069248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23159134742784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23158933416320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23158732089856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23158530763392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23158329436928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23158128110464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23157926784000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23157725457536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23157524131072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23157322804608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23157121478144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23156920151680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23156718825216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23156517498752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23156316172288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23156114845824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23155913519360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23155712192896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23155510866432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23155309539968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23155108213504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23154906887040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23154705560576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23154504234112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23154302907648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23154101581184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23153900254720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23153698928256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23166083168000 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23166076577536 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 14, r2: 2, n: 50, n_right: 14, m: 50, r1: 2)	 0.0824737 	 1000      	 47.5303   	 0         	 4.77243   	 9.95935   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 14, m: 100, rA: 2, r: 14)                           	 0.0413303 	 1000      	 94.8457   	 0         	 9.52329   	 9.95935   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 700, r2: 1, n: 14, n_right: 1, m: 14, r1: 2)	 0.019353  	 1000      	 28.3574   	 0         	 12.3152   	 2.30263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 14, n_right: 700, m: 14, r1: 1)	 0.00988506	 1000      	 55.5181   	 0         	 24.1107   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 14, xn: 14, m: 14, rA: 2, r: 50)                            	 0.00944522	 1000      	 58.1035   	 0         	 25.2335   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 14, xn: 50, m: 28, rA: 1, r: 14)                            	 0.00725423	 1000      	 75.6524   	 0         	 32.8548   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 9800, cols: 1)                                                                                                                                                                         	 0.000205776	 2         	 0         	 0         	 0.761994  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.112699  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.111712  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0595534 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0580297 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000279551	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000205776	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000118383	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.816e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.034e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1751e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23089262294912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23089073088512 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23088871762048 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23088670435584 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23088469109120 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23088267782656 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23088066456192 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23087865129728 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23087663803264 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23087462476800 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23087261150336 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23087059823872 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23086858497408 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23086657170944 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23086455844480 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23086254518016 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23086053191552 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23085851865088 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23085650538624 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23085449212160 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23085247885696 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23085046559232 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23084845232768 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23084643906304 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23084442579840 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23084241253376 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23084039926912 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23083838600448 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23083637273984 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23083435947520 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23083234621056 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23083033294592 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23082831964032 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23082630637568 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23082429311104 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23082227984640 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23082026658176 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23081825331712 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23081624005248 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23081422678784 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23081221352320 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23081020025856 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23080818699392 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23080617372928 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23080416046464 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23080214720000 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23080013393536 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23079812067072 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23079610740608 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23079409414144 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23079208087680 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23079006761216 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23078805434752 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23078604108288 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23078402781824 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23078201455360 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23078000128896 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23077798802432 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23077597475968 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23077396149504 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23077194823040 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23076993496576 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23076792170112 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23089156634368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23089150043904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 15, r2: 2, n: 50, n_right: 15, m: 50, r1: 2)	 0.0874394 	 1000      	 51.4642   	 0         	 5.03206   	 10.2273   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 15, m: 100, rA: 2, r: 15)                           	 0.0446131 	 1000      	 100.867   	 0         	 9.86257   	 10.2273   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 750, r2: 1, n: 15, n_right: 1, m: 15, r1: 2)	 0.0200994 	 1000      	 33.583    	 0         	 13.6123   	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 15, xn: 15, m: 15, rA: 2, r: 50)                            	 0.011315  	 1000      	 59.6554   	 0         	 24.1803   	 2.46711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 15, n_right: 750, m: 15, r1: 1)	 0.0106444 	 1000      	 63.4137   	 0         	 25.7037   	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 15, xn: 50, m: 30, rA: 1, r: 15)                            	 0.0080777 	 1000      	 83.5634   	 0         	 33.871    	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 11250, cols: 1)                                                                                                                                                                        	 0.000203336	 2         	 0         	 0         	 0.885234  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.119196  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.118183  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0654683 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0640058 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00027989	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000203336	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000135345	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8141e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.162e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.001e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22823696062336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22823523313664 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22823321987200 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22823120660736 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22822919334272 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22822718007808 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22822516681344 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22822315354880 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22822114028416 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22821912701952 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22821711375488 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22821510049024 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22821308722560 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22821107396096 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22820906069632 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22820704743168 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22820503416704 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22820302090240 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22820100763776 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22819899437312 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22819698110848 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22819496784384 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22819295457920 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22819094131456 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22818892804992 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22818691478528 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22818490152064 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22818288825600 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22818087499136 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22817886172672 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22817684846208 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22817483519744 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22817282189184 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22817080862720 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22816879536256 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22816678209792 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22816476883328 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22816275556864 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22816074230400 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22815872903936 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22815671577472 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22815470251008 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22815268924544 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22815067598080 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22814866271616 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22814664945152 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22814463618688 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22814262292224 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22814060965760 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22813859639296 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22813658312832 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22813456986368 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22813255659904 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22813054333440 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22812853006976 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22812651680512 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22812450354048 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22812249027584 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22812047701120 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22811846374656 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22811645048192 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22811443721728 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22811242395264 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22823418414848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22823411824384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 16, r2: 2, n: 50, n_right: 16, m: 50, r1: 2)	 0.0947319 	 1000      	 54.0472   	 0         	 5.16827   	 10.4575   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 16, m: 100, rA: 2, r: 16)                           	 0.0576983 	 1000      	 88.7374   	 0         	 8.48552   	 10.4575   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 800, r2: 1, n: 16, n_right: 1, m: 16, r1: 2)	 0.02184   	 1000      	 37.5091   	 0         	 14.2535   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 16, xn: 16, m: 16, rA: 2, r: 50)                            	 0.0127307 	 1000      	 64.3483   	 0         	 24.4524   	 2.63158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 16, n_right: 800, m: 16, r1: 1)	 0.0115258 	 1000      	 71.0753   	 0         	 27.0086   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 16, xn: 50, m: 32, rA: 1, r: 16)                            	 0.00906703	 1000      	 90.3494   	 0         	 34.3328   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 12800, cols: 1)                                                                                                                                                                        	 0.000208667	 2         	 0         	 0         	 0.981468  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.129159  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.128098  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0808342 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0794961 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000326785	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000208667	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000141745	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8611e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.258e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.45e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23380932532096 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23380728211456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23380526884992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23380325558528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23380124232064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23379922905600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23379721579136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23379520252672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23379318926208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23379117599744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23378916273280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23378714946816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23378513620352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23378312293888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23378110967424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23377909640960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23377708314496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23377506988032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23377305661568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23377104335104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23376903008640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23376701682176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23376500355712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23376299029248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23376097702784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23375896376320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23375695049856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23375493723392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23375292396928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23375091070464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23374889744000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23374688417536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23374487086976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23374285760512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23374084434048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23373883107584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23373681781120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23373480454656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23373279128192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23373077801728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23372876475264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23372675148800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23372473822336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23372272495872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23372071169408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23371869842944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23371668516480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23371467190016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23371265863552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23371064537088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23370863210624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23370661884160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23370460557696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23370259231232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23370057904768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23369856578304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23369655251840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23369453925376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23369252598912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23369051272448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23368849945984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23368648619520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23368447293056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23380826871552 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23380820281088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 17, r2: 2, n: 50, n_right: 17, m: 50, r1: 2)	 0.10968   	 1000      	 52.6989   	 0         	 4.9453    	 10.6563   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 17, m: 100, rA: 2, r: 17)                           	 0.0440526 	 1000      	 131.207   	 0         	 12.3126   	 10.6563   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 850, r2: 1, n: 17, n_right: 1, m: 17, r1: 2)	 0.0235534 	 1000      	 41.7179   	 0         	 14.9203   	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 17, xn: 17, m: 17, rA: 2, r: 50)                            	 0.0122762 	 1000      	 80.0411   	 0         	 28.6265   	 2.79605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 17, n_right: 850, m: 17, r1: 1)	 0.0113553 	 1000      	 86.5322   	 0         	 30.948    	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 17, xn: 50, m: 34, rA: 1, r: 17)                            	 0.0106925 	 1000      	 91.896    	 0         	 32.8663   	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 14450, cols: 1)                                                                                                                                                                        	 0.000197017	 2         	 0         	 0         	 1.1735    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.145609  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.144589  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0684878 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0670213 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000331309	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000197017	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000124304	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8341e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8631e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.79e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23355173066624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23354958407680 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23354757081216 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23354555754752 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23354354428288 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23354153101824 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23353951775360 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23353750448896 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23353549122432 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23353347795968 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23353146469504 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23352945143040 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23352743816576 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23352542490112 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23352341163648 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23352139837184 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23351938510720 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23351737184256 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23351535857792 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23351334531328 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23351133204864 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23350931878400 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23350730551936 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23350529225472 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23350327899008 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23350126572544 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23349925246080 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23349723919616 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23349522593152 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23349321266688 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23349119940224 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23348918613760 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23348717283200 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23348515956736 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23348314630272 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23348113303808 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23347911977344 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23347710650880 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23347509324416 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23347307997952 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23347106671488 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23346905345024 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23346704018560 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23346502692096 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23346301365632 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23346100039168 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23345898712704 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23345697386240 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23345496059776 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23345294733312 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23345093406848 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23344892080384 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23344690753920 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23344489427456 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23344288100992 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23344086774528 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23343885448064 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23343684121600 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23343482795136 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23343281468672 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23343080142208 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23342878815744 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23342677489280 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23355067406080 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23355060815616 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 18, r2: 2, n: 50, n_right: 18, m: 50, r1: 2)	 0.132452  	 1000      	 48.9234   	 0         	 4.51786   	 10.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 18, m: 100, rA: 2, r: 18)                           	 0.0453318 	 1000      	 142.946   	 0         	 13.2005   	 10.8289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 900, r2: 1, n: 18, n_right: 1, m: 18, r1: 2)	 0.0241191 	 1000      	 48.3599   	 0         	 16.3349   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 18, xn: 18, m: 18, rA: 2, r: 50)                            	 0.0177323 	 1000      	 65.7783   	 0         	 22.2184   	 2.96053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 18, n_right: 900, m: 18, r1: 1)	 0.0121582 	 1000      	 95.9353   	 0         	 32.4048   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 18, xn: 50, m: 36, rA: 1, r: 18)                            	 0.0120885 	 1000      	 96.4888   	 0         	 32.5918   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 16200, cols: 1)                                                                                                                                                                        	 0.000212626	 2         	 0         	 0         	 1.21904   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.169937  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.168729  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0768228 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0751525 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000297511	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000212626	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000117914	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8472e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8071e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.2e-06   	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23350058866560 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23349858134016 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23349656807552 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23349455481088 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23349254154624 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23349052828160 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23348851501696 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23348650175232 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23348448848768 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23348247522304 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23348046195840 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23347844869376 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23347643542912 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23347442216448 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23347240889984 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23347039563520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23346838237056 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23346636910592 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23346435584128 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23346234257664 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23346032931200 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23345831604736 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23345630278272 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23345428951808 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23345227625344 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23345026298880 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23344824972416 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23344623645952 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23344422319488 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23344220993024 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23344019666560 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23343818340096 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23343617009536 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23343415683072 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23343214356608 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23343013030144 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23342811703680 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23342610377216 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23342409050752 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23342207724288 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23342006397824 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23341805071360 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23341603744896 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23341402418432 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23341201091968 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23340999765504 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23340798439040 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23340597112576 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23340395786112 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23340194459648 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23339993133184 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23339791806720 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23339590480256 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23339389153792 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23339187827328 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23338986500864 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23338785174400 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23338583847936 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23338382521472 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23338181195008 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23337979868544 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23337778542080 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23337577215616 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23349953206016 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23349946615552 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 19, r2: 2, n: 50, n_right: 19, m: 50, r1: 2)	 0.171743  	 1000      	 42.0397   	 0         	 3.82899   	 10.9793   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 19, m: 100, rA: 2, r: 19)                           	 0.0441226 	 1000      	 163.635   	 0         	 14.9039   	 10.9793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 950, r2: 1, n: 19, n_right: 1, m: 19, r1: 2)	 0.0283983 	 1000      	 48.3056   	 0         	 15.4578   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 19, xn: 19, m: 19, rA: 2, r: 50)                            	 0.0141126 	 1000      	 97.204    	 0         	 31.1053   	 3.125     
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 19, n_right: 950, m: 19, r1: 1)	 0.0126988 	 1000      	 108.026   	 0         	 34.5684   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 19, xn: 50, m: 38, rA: 1, r: 19)                            	 0.0115058 	 1000      	 119.227   	 0         	 38.1526   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 18050, cols: 1)                                                                                                                                                                        	 0.000237697	 2         	 0         	 0         	 1.21499   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.213913  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.21284   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0710155 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.069741  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000280768	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000237697	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000118213	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8381e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.969e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.501e-06 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23107030275968 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23106856937472 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23106655611008 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23106454284544 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23106252958080 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23106051631616 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23105850305152 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23105648978688 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23105447652224 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23105246325760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23105044999296 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23104843672832 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23104642346368 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23104441019904 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23104239693440 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23104038366976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23103837040512 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23103635714048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23103434387584 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23103233061120 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23103031734656 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23102830408192 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23102629081728 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23102427755264 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23102226428800 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23102025102336 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23101823775872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23101622449408 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23101421122944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23101219796480 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23101018470016 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23100817143552 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23100615812992 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23100414486528 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23100213160064 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23100011833600 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23099810507136 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23099609180672 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23099407854208 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23099206527744 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23099005201280 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23098803874816 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23098602548352 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23098401221888 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23098199895424 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23097998568960 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23097797242496 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23097595916032 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23097394589568 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23097193263104 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23096991936640 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23096790610176 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23096589283712 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23096387957248 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23096186630784 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23095985304320 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23095783977856 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23095582651392 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23095381324928 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23095179998464 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23094978672000 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23094777345536 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23094576019072 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23106752075520 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23106746042112 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 20, r2: 2, n: 50, n_right: 20, m: 50, r1: 2) 	 0.141665  	 1000      	 56.4714   	 0         	 5.08243   	 11.1111   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 20, m: 100, rA: 2, r: 20)                            	 0.0462912 	 1000      	 172.819   	 0         	 15.5537   	 11.1111   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1000, r2: 1, n: 20, n_right: 1, m: 20, r1: 2)	 0.0291806 	 1000      	 54.8309   	 0         	 16.6686   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 20, xn: 20, m: 20, rA: 2, r: 50)                             	 0.0181275 	 1000      	 88.2635   	 0         	 26.8321   	 3.28947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 20, n_right: 1000, m: 20, r1: 1)	 0.0136111 	 1000      	 117.551   	 0         	 35.7356   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 20, xn: 50, m: 40, rA: 1, r: 20)                             	 0.0129465 	 1000      	 123.586   	 0         	 37.5701   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 20000, cols: 1)                                                                                                                                                                         	 0.000196106	 2         	 0         	 0         	 1.63177   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.185702  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.184456  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0787872 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0773652 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000295296	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000196106	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000126583	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8511e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8991e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.024e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23147712272256 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23147524909056 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23147323582592 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23147122256128 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23146920929664 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23146719603200 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23146518276736 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23146316950272 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23146115623808 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23145914297344 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23145712970880 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23145511644416 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23145310317952 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23145108991488 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23144907665024 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23144706338560 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23144505012096 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23144303685632 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23144102359168 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23143901032704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23143699706240 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23143498379776 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23143297053312 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23143095726848 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23142894400384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23142693073920 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23142491747456 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23142290420992 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23142089094528 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23141887768064 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23141686441600 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23141485115136 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23141283784576 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23141082458112 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23140881131648 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23140679805184 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23140478478720 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23140277152256 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23140075825792 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23139874499328 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23139673172864 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23139471846400 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23139270519936 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23139069193472 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23138867867008 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23138666540544 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23138465214080 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23138263887616 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23138062561152 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23137861234688 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23137659908224 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23137458581760 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23137257255296 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23137055928832 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23136854602368 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23136653275904 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23136451949440 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23136250622976 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23136049296512 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23135847970048 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23135646643584 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23135445317120 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23135243990656 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23147606611712 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23147600021248 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 21, r2: 2, n: 50, n_right: 21, m: 50, r1: 2) 	 0.163421  	 1000      	 53.9711   	 0         	 4.80722   	 11.2271   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 21, m: 100, rA: 2, r: 21)                            	 0.0551037 	 1000      	 160.062   	 0         	 14.2568   	 11.2271   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1050, r2: 1, n: 21, n_right: 1, m: 21, r1: 2)	 0.0293409 	 1000      	 63.1268   	 0         	 18.2767   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 21, xn: 21, m: 21, rA: 2, r: 50)                             	 0.0228383 	 1000      	 81.1007   	 0         	 23.4806   	 3.45395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 21, n_right: 1050, m: 21, r1: 1)	 0.0174525 	 1000      	 106.128   	 0         	 30.7266   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 21, xn: 50, m: 42, rA: 1, r: 21)                             	 0.016847  	 1000      	 109.942   	 0         	 31.8309   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 22050, cols: 1)                                                                                                                                                                         	 0.000199846	 2         	 0         	 0         	 1.76536   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.211569  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.210214  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0962202 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.094789  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000318475	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000199846	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000121184	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.84e-05  	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3301e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.0191e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22682866722688 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22682661808128 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22682460481664 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22682259155200 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22682057828736 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22681856502272 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22681655175808 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22681453849344 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22681252522880 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22681051196416 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22680849869952 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22680648543488 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22680447217024 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22680245890560 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22680044564096 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22679843237632 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22679641911168 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22679440584704 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22679239258240 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22679037931776 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22678836605312 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22678635278848 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22678433952384 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22678232625920 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22678031299456 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22677829972992 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22677628646528 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22677427320064 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22677225993600 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22677024667136 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22676823340672 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22676622014208 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22676420683648 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22676219357184 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22676018030720 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22675816704256 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22675615377792 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22675414051328 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22675212724864 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22675011398400 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22674810071936 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22674608745472 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22674407419008 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22674206092544 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22674004766080 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22673803439616 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22673602113152 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22673400786688 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22673199460224 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22672998133760 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22672796807296 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22672595480832 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22672394154368 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22672192827904 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22671991501440 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22671790174976 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22671588848512 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22671387522048 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22671186195584 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22670984869120 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22670783542656 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22670582216192 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22670380889728 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22682761062144 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22682754471680 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 22, r2: 2, n: 50, n_right: 22, m: 50, r1: 2) 	 0.159495  	 1000      	 60.6916   	 0         	 5.35691   	 11.3296   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 22, m: 100, rA: 2, r: 22)                            	 0.0523071 	 1000      	 185.061   	 0         	 16.3343   	 11.3296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1100, r2: 1, n: 22, n_right: 1, m: 22, r1: 2)	 0.0272347 	 1000      	 78.1945   	 0         	 21.6101   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 22, xn: 22, m: 22, rA: 2, r: 50)                             	 0.0217016 	 1000      	 98.1309   	 0         	 27.1198   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 22, xn: 50, m: 44, rA: 1, r: 22)                             	 0.0167242 	 1000      	 127.336   	 0         	 35.1911   	 3.61842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 22, n_right: 1100, m: 22, r1: 1)	 0.0155835 	 1000      	 136.658   	 0         	 37.7672   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 24200, cols: 1)                                                                                                                                                                         	 0.000186416	 2         	 0         	 0         	 2.07707   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.203583  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.202313  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.092213  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.090733  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000364858	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000186416	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000131434	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8462e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.826e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2451e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22692722521984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22692526811136 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22692325484672 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22692124158208 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22691922831744 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22691721505280 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22691520178816 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22691318852352 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22691117525888 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22690916199424 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22690714872960 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22690513546496 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22690312220032 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22690110893568 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22689909567104 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22689708240640 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22689506914176 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22689305587712 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22689104261248 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22688902934784 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22688701608320 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22688500281856 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22688298955392 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22688097628928 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22687896302464 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22687694976000 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22687493649536 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22687292323072 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22687090996608 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22686889670144 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22686688343680 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22686487017216 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22686285686656 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22686084360192 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22685883033728 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22685681707264 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22685480380800 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22685279054336 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22685077727872 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22684876401408 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22684675074944 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22684473748480 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22684272422016 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22684071095552 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22683869769088 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22683668442624 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22683467116160 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22683265789696 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22683064463232 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22682863136768 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22682661810304 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22682460483840 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22682259157376 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22682057830912 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22681856504448 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22681655177984 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22681453851520 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22681252525056 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22681051198592 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22680849872128 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22680648545664 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22680447219200 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22680245892736 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22692616861440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22692610270976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 23, r2: 2, n: 50, n_right: 23, m: 50, r1: 2) 	 0.225793  	 1000      	 46.8571   	 0         	 4.10288   	 11.4206   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 23, m: 100, rA: 2, r: 23)                            	 0.0554263 	 1000      	 190.884   	 0         	 16.7141   	 11.4206   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1150, r2: 1, n: 23, n_right: 1, m: 23, r1: 2)	 0.0346147 	 1000      	 70.2997   	 0         	 18.5836   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 23, xn: 23, m: 23, rA: 2, r: 50)                             	 0.0223461 	 1000      	 108.896   	 0         	 28.7864   	 3.78289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 23, n_right: 1150, m: 23, r1: 1)	 0.0199693 	 1000      	 121.857   	 0         	 32.2126   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 23, xn: 50, m: 46, rA: 1, r: 23)                             	 0.0174793 	 1000      	 139.216   	 0         	 36.8015   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 26450, cols: 1)                                                                                                                                                                         	 0.000200427	 2         	 0         	 0         	 2.11149   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.281681  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.280377  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.096743  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0952517 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000294809	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000200427	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000122744	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.885e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.057e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.104e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22893717292928 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22893517858816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22893316532352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22893115205888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22892913879424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22892712552960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22892511226496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22892309900032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22892108573568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22891907247104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22891705920640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22891504594176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22891303267712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22891101941248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22890900614784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22890699288320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22890497961856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22890296635392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22890095308928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22889893982464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22889692656000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22889491329536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22889290003072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22889088676608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22888887350144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22888686023680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22888484697216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22888283370752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22888082044288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22887880717824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22887679391360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22887478064896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22887276734336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22887075407872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22886874081408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22886672754944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22886471428480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22886270102016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22886068775552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22885867449088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22885666122624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22885464796160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22885263469696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22885062143232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22884860816768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22884659490304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22884458163840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22884256837376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22884055510912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22883854184448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22883652857984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22883451531520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22883250205056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22883048878592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22882847552128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22882646225664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22882444899200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22882243572736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22882042246272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22881840919808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22881639593344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22881438266880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22881236940416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22893611632384 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22893605041920 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 24, r2: 2, n: 50, n_right: 24, m: 50, r1: 2) 	 0.172701  	 1000      	 66.7047   	 0         	 5.79961   	 11.5016   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 24, m: 100, rA: 2, r: 24)                            	 0.063471  	 1000      	 181.5     	 0         	 15.7804   	 11.5016   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1200, r2: 1, n: 24, n_right: 1, m: 24, r1: 2)	 0.0348771 	 1000      	 79.2727   	 0         	 20.0824   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 24, xn: 24, m: 24, rA: 2, r: 50)                             	 0.0266394 	 1000      	 103.786   	 0         	 26.2924   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 24, xn: 50, m: 48, rA: 1, r: 24)                             	 0.0194314 	 1000      	 142.285   	 0         	 36.0457   	 3.94737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 24, n_right: 1200, m: 24, r1: 1)	 0.0169248 	 1000      	 163.358   	 0         	 41.384    	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 28800, cols: 1)                                                                                                                                                                         	 0.000143854	 2         	 0         	 0         	 3.20325   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.225766  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.224503  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.111089  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.109542  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000288329	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000143854	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000125704	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8262e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.779e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.012e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22433295525760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22433083942912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22432882616448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22432681289984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22432479963520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22432278637056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22432077310592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22431875984128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22431674657664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22431473331200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22431272004736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22431070678272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22430869351808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22430668025344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22430466698880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22430265372416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22430064045952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22429862719488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22429661393024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22429460066560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22429258740096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22429057413632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22428856087168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22428654760704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22428453434240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22428252107776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22428050781312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22427849454848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22427648128384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22427446801920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22427245475456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22427044148992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22426842818432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22426641491968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22426440165504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22426238839040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22426037512576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22425836186112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22425634859648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22425433533184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22425232206720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22425030880256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22424829553792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22424628227328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22424426900864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22424225574400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22424024247936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22423822921472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22423621595008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22423420268544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22423218942080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22423017615616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22422816289152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22422614962688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22422413636224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22422212309760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22422010983296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22421809656832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22421608330368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22421407003904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22421205677440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22421004350976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22420803024512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22433189865216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22433183274752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 25, r2: 2, n: 50, n_right: 25, m: 50, r1: 2) 	 0.273505  	 1000      	 45.7031   	 0         	 3.94874   	 11.5741   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 25, m: 100, rA: 2, r: 25)                            	 0.0680168 	 1000      	 183.778   	 0         	 15.8784   	 11.5741   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 25, xn: 25, m: 25, rA: 2, r: 50)                             	 0.03833   	 1000      	 81.5288   	 0         	 19.8278   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 25, xn: 50, m: 50, rA: 1, r: 25)                             	 0.030101  	 1000      	 103.817   	 0         	 25.2483   	 4.11184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1250, r2: 1, n: 25, n_right: 1, m: 25, r1: 2)	 0.0296839 	 1000      	 105.276   	 0         	 25.6031   	 4.11184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 25, n_right: 1250, m: 25, r1: 1)	 0.0227295 	 1000      	 137.487   	 0         	 33.4368   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 31250, cols: 1)                                                                                                                                                                         	 0.000137644	 2         	 0         	 0         	 3.63256   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.327263  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.325918  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.138068  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.136448  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000331358	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000137644	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000133504	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8431e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.9591e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2191e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23306566891392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23306371590144 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23306170263680 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23305968937216 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23305767610752 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23305566284288 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23305364957824 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23305163631360 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23304962304896 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23304760978432 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23304559651968 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23304358325504 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23304156999040 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23303955672576 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23303754346112 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23303553019648 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23303351693184 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23303150366720 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23302949040256 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23302747713792 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23302546387328 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23302345060864 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23302143734400 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23301942407936 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23301741081472 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23301539755008 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23301338428544 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23301137102080 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23300935775616 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23300734449152 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23300533122688 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23300331796224 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23300130465664 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23299929139200 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23299727812736 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23299526486272 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23299325159808 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23299123833344 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23298922506880 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23298721180416 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23298519853952 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23298318527488 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23298117201024 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23297915874560 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23297714548096 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23297513221632 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23297311895168 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23297110568704 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23296909242240 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23296707915776 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23296506589312 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23296305262848 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23296103936384 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23295902609920 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23295701283456 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23295499956992 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23295298630528 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23295097304064 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23294895977600 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23294694651136 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23294493324672 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23294291998208 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23294090671744 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23306461230848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23306454640384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 26, r2: 2, n: 50, n_right: 26, m: 50, r1: 2) 	 0.274161  	 1000      	 49.3141   	 0         	 4.23693   	 11.6391   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 26, m: 100, rA: 2, r: 26)                            	 0.060461  	 1000      	 223.615   	 0         	 19.2124   	 11.6391   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1300, r2: 1, n: 26, n_right: 1, m: 26, r1: 2)	 0.0340529 	 1000      	 103.228   	 0         	 24.1394   	 4.27632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 26, n_right: 1300, m: 26, r1: 1)	 0.0257157 	 1000      	 136.695   	 0         	 31.9655   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 26, xn: 26, m: 26, rA: 2, r: 50)                             	 0.021881  	 1000      	 160.651   	 0         	 37.5676   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 26, xn: 50, m: 52, rA: 1, r: 26)                             	 0.019717  	 1000      	 178.283   	 0         	 41.6907   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 33800, cols: 1)                                                                                                                                                                         	 0.000140475	 2         	 0         	 0         	 3.8498    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.335299  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.33393   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.103712  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.102059  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000274027	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000140475	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000137875	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8231e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.281e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.118e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23102945253248 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23102763296768 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23102561970304 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23102360643840 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23102159317376 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23101957990912 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23101756664448 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23101555337984 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23101354011520 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23101152685056 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23100951358592 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23100750032128 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23100548705664 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23100347379200 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23100146052736 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23099944726272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23099743399808 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23099542073344 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23099340746880 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23099139420416 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23098938093952 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23098736767488 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23098535441024 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23098334114560 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23098132788096 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23097931461632 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23097730135168 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23097528808704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23097327482240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23097126155776 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23096924829312 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23096723502848 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23096522172288 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23096320845824 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23096119519360 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23095918192896 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23095716866432 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23095515539968 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23095314213504 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23095112887040 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23094911560576 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23094710234112 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23094508907648 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23094307581184 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23094106254720 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23093904928256 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23093703601792 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23093502275328 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23093300948864 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23093099622400 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23092898295936 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23092696969472 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23092495643008 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23092294316544 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23092092990080 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23091891663616 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23091690337152 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23091489010688 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23091287684224 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23091086357760 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23090885031296 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23090683704832 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23090482378368 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23102839592704 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23102833002240 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 27, r2: 2, n: 50, n_right: 27, m: 50, r1: 2) 	 0.226861  	 1000      	 64.2683   	 0         	 5.4941    	 11.6977   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 27, m: 100, rA: 2, r: 27)                            	 0.0602923 	 1000      	 241.822   	 0         	 20.6726   	 11.6977   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1350, r2: 1, n: 27, n_right: 1, m: 27, r1: 2)	 0.0328424 	 1000      	 119.863   	 0         	 26.9914   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 27, xn: 27, m: 27, rA: 2, r: 50)                             	 0.0224393 	 1000      	 175.433   	 0         	 39.505    	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 27, xn: 50, m: 54, rA: 1, r: 27)                             	 0.0222223 	 1000      	 177.146   	 0         	 39.8907   	 4.44079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 27, n_right: 1350, m: 27, r1: 1)	 0.0212224 	 1000      	 185.493   	 0         	 41.7703   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 36450, cols: 1)                                                                                                                                                                         	 0.000130915	 2         	 0         	 0         	 4.4548    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.282084  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.280926  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.106625  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.104954  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000311219	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000137444	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000130915	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8531e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.7631e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1861e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23229964056448 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23229733267456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23229531940992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23229330614528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23229129288064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23228927961600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23228726635136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23228525308672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23228323982208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23228122655744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23227921329280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23227720002816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23227518676352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23227317349888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23227116023424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23226914696960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23226713370496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23226512044032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23226310717568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23226109391104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23225908064640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23225706738176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23225505411712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23225304085248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23225102758784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23224901432320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23224700105856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23224498779392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23224297452928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23224096126464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23223894800000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23223693473536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23223492142976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23223290816512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23223089490048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23222888163584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23222686837120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23222485510656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23222284184192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23222082857728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23221881531264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23221680204800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23221478878336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23221277551872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23221076225408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23220874898944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23220673572480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23220472246016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23220270919552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23220069593088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23219868266624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23219666940160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23219465613696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23219264287232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23219062960768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23218861634304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23218660307840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23218458981376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23218257654912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23218056328448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23217855001984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23217653675520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23217452349056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23229858395904 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23229851805440 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 28, r2: 2, n: 50, n_right: 28, m: 50, r1: 2) 	 0.233242  	 1000      	 67.2263   	 0         	 5.7211    	 11.7506   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 28, m: 100, rA: 2, r: 28)                            	 0.0636833 	 1000      	 246.218   	 0         	 20.9537   	 11.7506   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1400, r2: 1, n: 28, n_right: 1, m: 28, r1: 2)	 0.0378177 	 1000      	 116.094   	 0         	 25.2089   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 28, xn: 28, m: 28, rA: 2, r: 50)                             	 0.0238172 	 1000      	 184.337   	 0         	 40.0276   	 4.60526   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 28, n_right: 1400, m: 28, r1: 1)	 0.0217878 	 1000      	 201.507   	 0         	 43.7558   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 28, xn: 50, m: 56, rA: 1, r: 28)                             	 0.0204236 	 1000      	 214.967   	 0         	 46.6786   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 39200, cols: 1)                                                                                                                                                                         	 0.000159165	 2         	 0         	 0         	 3.94056   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.29427   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.292847  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.109328  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.107924  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000359564	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000159165	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000136284	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8231e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.1551e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1361e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22563224393600 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22563006703616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22562805377152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22562604050688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22562402724224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22562201397760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22562000071296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22561798744832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22561597418368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22561396091904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22561194765440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22560993438976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22560792112512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22560590786048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22560389459584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22560188133120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22559986806656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22559785480192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22559584153728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22559382827264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22559181500800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22558980174336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22558778847872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22558577521408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22558376194944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22558174868480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22557973542016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22557772215552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22557570889088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22557369562624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22557168236160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22556966909696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22556765579136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22556564252672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22556362926208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22556161599744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22555960273280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22555758946816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22555557620352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22555356293888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22555154967424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22554953640960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22554752314496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22554550988032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22554349661568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22554148335104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22553947008640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22553745682176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22553544355712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22553343029248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22553141702784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22552940376320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22552739049856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22552537723392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22552336396928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22552135070464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22551933744000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22551732417536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22551531091072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22551329764608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22551128438144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22550927111680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22550725785216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22563118733056 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22563112142592 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 29, r2: 2, n: 50, n_right: 29, m: 50, r1: 2) 	 0.248935  	 1000      	 67.5679   	 0         	 5.7268    	 11.7985   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 29, m: 100, rA: 2, r: 29)                            	 0.0636317 	 1000      	 264.334   	 0         	 22.4039   	 11.7985   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1450, r2: 1, n: 29, n_right: 1, m: 29, r1: 2)	 0.0488214 	 1000      	 99.9111   	 0         	 20.9469   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 29, xn: 29, m: 29, rA: 2, r: 50)                             	 0.0253439 	 1000      	 192.465   	 0         	 40.3512   	 4.76974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 29, n_right: 1450, m: 29, r1: 1)	 0.0237787 	 1000      	 205.133   	 0         	 43.0073   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 29, xn: 50, m: 58, rA: 1, r: 29)                             	 0.0236722 	 1000      	 206.056   	 0         	 43.2007   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 42050, cols: 1)                                                                                                                                                                         	 0.000150435	 2         	 0         	 0         	 4.47236   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.322688  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.321535  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.113999  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.112648  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000316002	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000150435	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000146375	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.848e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.829e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.88e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22901442217856 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22901235378176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22901034051712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22900832725248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22900631398784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22900430072320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22900228745856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22900027419392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22899826092928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22899624766464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22899423440000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22899222113536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22899020787072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22898819460608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22898618134144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22898416807680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22898215481216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22898014154752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22897812828288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22897611501824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22897410175360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22897208848896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22897007522432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22896806195968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22896604869504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22896403543040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22896202216576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22896000890112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22895799563648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22895598237184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22895396910720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22895195584256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22894994253696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22894792927232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22894591600768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22894390274304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22894188947840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22893987621376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22893786294912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22893584968448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22893383641984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22893182315520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22892980989056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22892779662592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22892578336128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22892377009664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22892175683200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22891974356736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22891773030272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22891571703808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22891370377344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22891169050880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22890967724416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22890766397952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22890565071488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22890363745024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22890162418560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22889961092096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22889759765632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22889558439168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22889357112704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22889155786240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22888954459776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22901336557312 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22901329966848 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 30, r2: 2, n: 50, n_right: 30, m: 50, r1: 2) 	 0.280066  	 1000      	 64.2706   	 0         	 5.4273    	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 30, m: 100, rA: 2, r: 30)                            	 0.0673636 	 1000      	 267.207   	 0         	 22.5641   	 11.8421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1500, r2: 1, n: 30, n_right: 1, m: 30, r1: 2)	 0.051817  	 1000      	 104.213   	 0         	 21.1205   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 30, xn: 30, m: 30, rA: 2, r: 50)                             	 0.0300881 	 1000      	 179.473   	 0         	 36.3731   	 4.93421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 30, n_right: 1500, m: 30, r1: 1)	 0.0247758 	 1000      	 217.955   	 0         	 44.1721   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 30, xn: 50, m: 60, rA: 1, r: 30)                             	 0.0238683 	 1000      	 226.241   	 0         	 45.8515   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 45000, cols: 1)                                                                                                                                                                         	 0.000124834	 2         	 0         	 0         	 5.76766   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.358104  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.356659  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.122911  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.12132   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000316232	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000143035	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000124834	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.838e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.133e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.074e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22553193551744 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22553007482880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22552806156416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22552604829952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22552403503488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22552202177024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22552000850560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22551799524096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22551598197632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22551396871168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22551195544704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22550994218240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22550792891776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22550591565312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22550390238848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22550188912384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22549987585920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22549786259456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22549584932992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22549383606528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22549182280064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22548980953600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22548779627136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22548578300672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22548376974208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22548175647744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22547974321280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22547772994816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22547571668352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22547370341888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22547169015424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22546967688960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22546766358400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22546565031936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22546363705472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22546162379008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22545961052544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22545759726080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22545558399616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22545357073152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22545155746688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22544954420224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22544753093760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22544551767296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22544350440832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22544149114368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22543947787904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22543746461440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22543545134976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22543343808512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22543142482048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22542941155584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22542739829120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22542538502656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22542337176192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22542135849728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22541934523264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22541733196800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22541531870336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22541330543872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22541129217408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22540927890944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22540726564480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22553087891200 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22553081300736 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 31, r2: 2, n: 50, n_right: 31, m: 50, r1: 2) 	 0.28002   	 1000      	 68.6379   	 0         	 5.77673   	 11.8818   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 31, m: 100, rA: 2, r: 31)                            	 0.0680553 	 1000      	 282.417   	 0         	 23.7689   	 11.8818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1550, r2: 1, n: 31, n_right: 1, m: 31, r1: 2)	 0.0342307 	 1000      	 174.06    	 0         	 34.1383   	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 31, xn: 31, m: 31, rA: 2, r: 50)                             	 0.0306227 	 1000      	 194.568   	 0         	 38.1604   	 5.09868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 31, n_right: 1550, m: 31, r1: 1)	 0.0301325 	 1000      	 197.734   	 0         	 38.7813   	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 31, xn: 50, m: 62, rA: 1, r: 31)                             	 0.024703  	 1000      	 241.193   	 0         	 47.305    	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 48050, cols: 1)                                                                                                                                                                         	 0.000147195	 2         	 0         	 0         	 5.223     	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.345781  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.344383  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.124856  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.123381  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000313381	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000147195	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000142244	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.827e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8631e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.16e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23007994603392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23007804254208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23007602927744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23007401601280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23007200274816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23006998948352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23006797621888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23006596295424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23006394968960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23006193642496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23005992316032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23005790989568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23005589663104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23005388336640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23005187010176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23004985683712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23004784357248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23004583030784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23004381704320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23004180377856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23003979051392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23003777724928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23003576398464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23003375072000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23003173745536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23002972419072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23002771092608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23002569766144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23002368439680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23002167113216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23001965786752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23001764460288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23001563129728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23001361803264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23001160476800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23000959150336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23000757823872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23000556497408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23000355170944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23000153844480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22999952518016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22999751191552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22999549865088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22999348538624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22999147212160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22998945885696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22998744559232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22998543232768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22998341906304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22998140579840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22997939253376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22997737926912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22997536600448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22997335273984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22997133947520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22996932621056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22996731294592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22996529968128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22996328641664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22996127315200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22995925988736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22995724662272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22995523335808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23007888942848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23007882352384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 32, r2: 2, n: 50, n_right: 32, m: 50, r1: 2) 	 0.286283  	 1000      	 71.5377   	 0         	 6.00246   	 11.9181   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 32, m: 100, rA: 2, r: 32)                            	 0.0893883 	 1000      	 229.113   	 0         	 19.224    	 11.9181   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1600, r2: 1, n: 32, n_right: 1, m: 32, r1: 2)	 0.0380047 	 1000      	 172.442   	 0         	 32.764    	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 32, xn: 32, m: 32, rA: 2, r: 50)                             	 0.0339937 	 1000      	 192.788   	 0         	 36.6298   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 32, xn: 50, m: 64, rA: 1, r: 32)                             	 0.0269751 	 1000      	 242.95    	 0         	 46.1604   	 5.26316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 32, n_right: 1600, m: 32, r1: 1)	 0.0261092 	 1000      	 251.008   	 0         	 47.6915   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 51200, cols: 1)                                                                                                                                                                         	 0.000136274	 2         	 0         	 0         	 6.01142   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.351534  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.350397  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.151701  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.150357  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000276769	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000154365	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000136274	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8411e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.022e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.231e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23257816774528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23257583446016 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23257382119552 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23257180793088 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23256979466624 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23256778140160 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23256576813696 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23256375487232 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23256174160768 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23255972834304 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23255771507840 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23255570181376 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23255368854912 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23255167528448 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23254966201984 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23254764875520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23254563549056 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23254362222592 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23254160896128 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23253959569664 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23253758243200 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23253556916736 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23253355590272 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23253154263808 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23252952937344 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23252751610880 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23252550284416 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23252348957952 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23252147631488 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23251946305024 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23251744978560 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23251543652096 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23251342321536 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23251140995072 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23250939668608 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23250738342144 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23250537015680 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23250335689216 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23250134362752 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23249933036288 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23249731709824 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23249530383360 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23249329056896 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23249127730432 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23248926403968 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23248725077504 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23248523751040 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23248322424576 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23248121098112 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23247919771648 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23247718445184 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23247517118720 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23247315792256 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23247114465792 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23246913139328 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23246711812864 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23246510486400 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23246309159936 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23246107833472 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23245906507008 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23245705180544 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23245503854080 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23245302527616 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23257711113984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23257704523520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 33, r2: 2, n: 50, n_right: 33, m: 50, r1: 2) 	 0.25598   	 1000      	 85.0848   	 0         	 7.11931   	 11.9513   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 33, m: 100, rA: 2, r: 33)                            	 0.0723604 	 1000      	 300.993   	 0         	 25.185    	 11.9513   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1650, r2: 1, n: 33, n_right: 1, m: 33, r1: 2)	 0.0469486 	 1000      	 153.091   	 0         	 28.2058   	 5.42763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 33, n_right: 1650, m: 33, r1: 1)	 0.0407772 	 1000      	 176.26    	 0         	 32.4747   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 33, xn: 33, m: 33, rA: 2, r: 50)                             	 0.032428  	 1000      	 221.642   	 0         	 40.8358   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 33, xn: 50, m: 66, rA: 1, r: 33)                             	 0.02775   	 1000      	 259.006   	 0         	 47.7198   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 54450, cols: 1)                                                                                                                                                                         	 0.000144145	 2         	 0         	 0         	 6.04391   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.344832  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.343706  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.133914  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.132538  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000318811	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000149235	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000144145	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8431e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3481e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.177e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22827817756544 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22827616954368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22827415627904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22827214301440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22827012974976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22826811648512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22826610322048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22826408995584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22826207669120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22826006342656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22825805016192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22825603689728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22825402363264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22825201036800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22824999710336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22824798383872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22824597057408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22824395730944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22824194404480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22823993078016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22823791751552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22823590425088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22823389098624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22823187772160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22822986445696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22822785119232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22822583792768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22822382466304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22822181139840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22821979813376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22821778486912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22821577160448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22821375829888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22821174503424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22820973176960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22820771850496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22820570524032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22820369197568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22820167871104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22819966544640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22819765218176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22819563891712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22819362565248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22819161238784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22818959912320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22818758585856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22818557259392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22818355932928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22818154606464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22817953280000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22817751953536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22817550627072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22817349300608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22817147974144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22816946647680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22816745321216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22816543994752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22816342668288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22816141341824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22815940015360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22815738688896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22815537362432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22815336035968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22827712096000 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22827705505536 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 34, r2: 2, n: 50, n_right: 34, m: 50, r1: 2) 	 0.35203   	 1000      	 65.6762   	 0         	 5.48135   	 11.9818   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 34, m: 100, rA: 2, r: 34)                            	 0.0730866 	 1000      	 316.337   	 0         	 26.4016   	 11.9818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1700, r2: 1, n: 34, n_right: 1, m: 34, r1: 2)	 0.0645396 	 1000      	 121.798   	 0         	 21.7804   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 34, xn: 34, m: 34, rA: 2, r: 50)                             	 0.0582758 	 1000      	 134.89    	 0         	 24.1214   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 34, xn: 50, m: 68, rA: 1, r: 34)                             	 0.0470595 	 1000      	 167.039   	 0         	 29.8706   	 5.59211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 34, n_right: 1700, m: 34, r1: 1)	 0.0469003 	 1000      	 167.607   	 0         	 29.972    	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 57800, cols: 1)                                                                                                                                                                         	 0.000166205	 2         	 0         	 0         	 5.56421   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.464683  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.46347   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.179745  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.178422  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00031725	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000166205	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000152294	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8363e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.4211e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.1321e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22881005254528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22880767174656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22880565848192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22880364521728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22880163195264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22879961868800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22879760542336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22879559215872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22879357889408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22879156562944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22878955236480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22878753910016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22878552583552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22878351257088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22878149930624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22877948604160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22877747277696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22877545951232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22877344624768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22877143298304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22876941971840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22876740645376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22876539318912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22876337992448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22876136665984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22875935339520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22875734013056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22875532686592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22875331360128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22875130033664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22874928707200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22874727380736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22874526050176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22874324723712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22874123397248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22873922070784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22873720744320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22873519417856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22873318091392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22873116764928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22872915438464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22872714112000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22872512785536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22872311459072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22872110132608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22871908806144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22871707479680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22871506153216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22871304826752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22871103500288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22870902173824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22870700847360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22870499520896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22870298194432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22870096867968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22869895541504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22869694215040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22869492888576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22869291562112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22869090235648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22868888909184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22868687582720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22868486256256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22880899593984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22880893003520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 35, r2: 2, n: 50, n_right: 35, m: 50, r1: 2) 	 0.418067  	 1000      	 58.603    	 0         	 4.8796    	 12.0098   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 35, m: 100, rA: 2, r: 35)                            	 0.107309  	 1000      	 228.313   	 0         	 19.0106   	 12.0098   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 35, xn: 35, m: 35, rA: 2, r: 50)                             	 0.0535387 	 1000      	 160.165   	 0         	 27.8229   	 5.75658   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1750, r2: 1, n: 35, n_right: 1, m: 35, r1: 2)	 0.0509974 	 1000      	 168.146   	 0         	 29.2093   	 5.75658   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 35, n_right: 1750, m: 35, r1: 1)	 0.047076  	 1000      	 182.152   	 0         	 31.6424   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 35, xn: 50, m: 70, rA: 1, r: 35)                             	 0.0403479 	 1000      	 212.526   	 0         	 36.9189   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 61250, cols: 1)                                                                                                                                                                         	 0.000168785	 2         	 0         	 0         	 5.8062    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.517326  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.516141  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.202891  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.201195  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000325919	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000168785	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000155345	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8211e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3211e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4461e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22851518654336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22851306383360 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22851105056896 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22850903730432 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22850702403968 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22850501077504 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22850299751040 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22850098424576 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22849897098112 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22849695771648 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22849494445184 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22849293118720 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22849091792256 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22848890465792 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22848689139328 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22848487812864 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22848286486400 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22848085159936 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22847883833472 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22847682507008 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22847481180544 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22847279854080 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22847078527616 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22846877201152 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22846675874688 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22846474548224 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22846273221760 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22846071895296 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22845870568832 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22845669242368 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22845467915904 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22845266589440 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22845065258880 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22844863932416 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22844662605952 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22844461279488 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22844259953024 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22844058626560 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22843857300096 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22843655973632 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22843454647168 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22843253320704 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22843051994240 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22842850667776 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22842649341312 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22842448014848 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22842246688384 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22842045361920 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22841844035456 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22841642708992 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22841441382528 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22841240056064 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22841038729600 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22840837403136 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22840636076672 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22840434750208 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22840233423744 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22840032097280 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22839830770816 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22839629444352 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22839428117888 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22839226791424 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22839025464960 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22851412993792 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22851406403328 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1800, r2: 1, n: 36, n_right: 1, m: 36, r1: 2)	 0.77959   	 1000      	 11.9694   	 0         	 2.02149   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 36, r2: 2, n: 50, n_right: 36, m: 50, r1: 2) 	 0.248604  	 1000      	 104.262   	 0         	 8.66276   	 12.0357   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 36, m: 100, rA: 2, r: 36)                            	 0.0740532 	 1000      	 350.019   	 0         	 29.0818   	 12.0357   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 36, n_right: 1800, m: 36, r1: 1)	 0.0339141 	 1000      	 275.142   	 0         	 46.4684   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 36, xn: 36, m: 36, rA: 2, r: 50)                             	 0.0313681 	 1000      	 297.475   	 0         	 50.2402   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 36, xn: 50, m: 72, rA: 1, r: 36)                             	 0.027588  	 1000      	 338.234   	 0         	 57.124    	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 64800, cols: 1)                                                                                                                                                                         	 0.000157445	 2         	 0         	 0         	 6.58516   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.1017    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.06211   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.134484  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.133009  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0027668 	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000167836	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000157445	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.1022e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.838e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.305e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22378458269568 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22378256001024 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22378054674560 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22377853348096 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22377652021632 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22377450695168 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22377249368704 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22377048042240 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22376846715776 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22376645389312 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22376444062848 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22376242736384 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22376041409920 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22375840083456 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22375638756992 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22375437430528 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22375236104064 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22375034777600 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22374833451136 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22374632124672 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22374430798208 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22374229471744 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22374028145280 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22373826818816 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22373625492352 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22373424165888 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22373222839424 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22373021512960 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22372820186496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22372618860032 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22372417533568 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22372216207104 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22372014876544 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22371813550080 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22371612223616 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22371410897152 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22371209570688 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22371008244224 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22370806917760 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22370605591296 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22370404264832 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22370202938368 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22370001611904 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22369800285440 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22369598958976 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22369397632512 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22369196306048 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22368994979584 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22368793653120 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22368592326656 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22368391000192 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22368189673728 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22367988347264 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22367787020800 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22367585694336 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22367384367872 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22367183041408 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22366981714944 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22366780388480 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22366579062016 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22366377735552 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22366176409088 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22365975082624 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22378352609024 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22378346018560 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1850, r2: 1, n: 37, n_right: 1, m: 37, r1: 2)	 0.9382    	 1000      	 10.7979   	 0         	 1.77436   	 6.08553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 37, r2: 2, n: 50, n_right: 37, m: 50, r1: 2) 	 0.314596  	 1000      	 87.0324   	 0         	 7.21688   	 12.0595   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 37, m: 100, rA: 2, r: 37)                            	 0.0734368 	 1000      	 372.838   	 0         	 30.9164   	 12.0595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 37, n_right: 1850, m: 37, r1: 1)	 0.0374834 	 1000      	 270.269   	 0         	 44.4118   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 37, xn: 37, m: 37, rA: 2, r: 50)                             	 0.0329695 	 1000      	 307.272   	 0         	 50.4923   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 37, xn: 50, m: 74, rA: 1, r: 37)                             	 0.0311737 	 1000      	 324.973   	 0         	 53.401    	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 68450, cols: 1)                                                                                                                                                                         	 0.000171845	 2         	 0         	 0         	 6.37319   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.33278   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.29028   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.139176  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.13758   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00283716	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000171845	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000160135	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.2622e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8371e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.606e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23344032929664 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23343818336256 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23343617009792 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23343415683328 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23343214356864 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23343013030400 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23342811703936 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23342610377472 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23342409051008 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23342207724544 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23342006398080 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23341805071616 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23341603745152 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23341402418688 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23341201092224 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23340999765760 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23340798439296 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23340597112832 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23340395786368 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23340194459904 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23339993133440 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23339791806976 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23339590480512 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23339389154048 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23339187827584 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23338986501120 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23338785174656 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23338583848192 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23338382521728 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23338181195264 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23337979868800 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23337778542336 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23337577211776 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23337375885312 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23337174558848 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23336973232384 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23336771905920 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23336570579456 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23336369252992 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23336167926528 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23335966600064 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23335765273600 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23335563947136 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23335362620672 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23335161294208 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23334959967744 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23334758641280 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23334557314816 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23334355988352 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23334154661888 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23333953335424 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23333752008960 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23333550682496 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23333349356032 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23333148029568 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23332946703104 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23332745376640 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23332544050176 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23332342723712 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23332141397248 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23331940070784 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23331738744320 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23331537417856 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23343927269120 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23343920678656 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1900, r2: 1, n: 38, n_right: 1, m: 38, r1: 2)	 0.876962  	 1000      	 12.5141   	 0         	 2.00226   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 38, r2: 2, n: 50, n_right: 38, m: 50, r1: 2) 	 0.308152  	 1000      	 93.7198   	 0         	 7.7572    	 12.0817   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 38, m: 100, rA: 2, r: 38)                            	 0.0681999 	 1000      	 423.461   	 0         	 35.0499   	 12.0817   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 38, n_right: 1900, m: 38, r1: 1)	 0.0407987 	 1000      	 268.989   	 0         	 43.0383   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 38, xn: 50, m: 76, rA: 1, r: 38)                             	 0.0323323 	 1000      	 339.425   	 0         	 54.308    	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 38, xn: 38, m: 38, rA: 2, r: 50)                             	 0.031752  	 1000      	 345.628   	 0         	 55.3005   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 72200, cols: 1)                                                                                                                                                                         	 0.000171006	 2         	 0         	 0         	 6.75532   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.26876   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.22591   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.133535  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.132284  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00335417	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000171206	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000171006	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.2652e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 3.1001e-05	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.826e-05 	 1000      
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22952932472704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22952707876864 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22952506550400 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22952305223936 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22952103897472 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22951902571008 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22951701244544 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22951499918080 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22951298591616 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22951097265152 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22950895938688 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22950694612224 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22950493285760 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22950291959296 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22950090632832 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22949889306368 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22949687979904 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22949486653440 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22949285326976 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22949084000512 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22948882674048 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22948681347584 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22948480021120 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22948278694656 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22948077368192 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22947876041728 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22947674715264 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22947473388800 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22947272062336 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22947070735872 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22946869409408 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22946668082944 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22946466752384 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22946265425920 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22946064099456 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22945862772992 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22945661446528 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22945460120064 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22945258793600 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22945057467136 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22944856140672 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22944654814208 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22944453487744 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22944252161280 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22944050834816 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22943849508352 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22943648181888 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22943446855424 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22943245528960 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22943044202496 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22942842876032 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22942641549568 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22942440223104 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22942238896640 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22942037570176 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22941836243712 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22941634917248 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22941433590784 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22941232264320 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22941030937856 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22940829611392 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22940628284928 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22940426958464 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22952826812160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22952820221696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1950, r2: 1, n: 39, n_right: 1, m: 39, r1: 2)	 1.08458   	 1000      	 10.9386   	 0         	 1.7053    	 6.41447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 39, r2: 2, n: 50, n_right: 39, m: 50, r1: 2) 	 0.316005  	 1000      	 96.2643   	 0         	 7.9543    	 12.1022   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 39, m: 100, rA: 2, r: 39)                            	 0.0733438 	 1000      	 414.759   	 0         	 34.2715   	 12.1022   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 39, n_right: 1950, m: 39, r1: 1)	 0.0416034 	 1000      	 285.164   	 0         	 44.4563   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 39, xn: 39, m: 39, rA: 2, r: 50)                             	 0.0349125 	 1000      	 339.816   	 0         	 52.9764   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 39, xn: 50, m: 78, rA: 1, r: 39)                             	 0.0333779 	 1000      	 355.439   	 0         	 55.4121   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 76050, cols: 1)                                                                                                                                                                         	 0.000176445	 2         	 0         	 0         	 6.8962    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.48813   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.44219   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.14313   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.141634  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00271401	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000190737	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000176445	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.6332e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.854e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.244e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23035777038208 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23035587323904 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23035385997440 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23035184670976 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23034983344512 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23034782018048 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23034580691584 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23034379365120 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23034178038656 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23033976712192 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23033775385728 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23033574059264 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23033372732800 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23033171406336 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23032970079872 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23032768753408 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23032567426944 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23032366100480 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23032164774016 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23031963447552 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23031762121088 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23031560794624 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23031359468160 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23031158141696 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23030956815232 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23030755488768 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23030554162304 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23030352835840 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23030151509376 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23029950182912 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23029748856448 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23029547529984 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23029346199424 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23029144872960 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23028943546496 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23028742220032 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23028540893568 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23028339567104 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23028138240640 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23027936914176 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23027735587712 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23027534261248 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23027332934784 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23027131608320 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23026930281856 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23026728955392 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23026527628928 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23026326302464 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23026124976000 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23025923649536 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23025722323072 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23025520996608 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23025319670144 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23025118343680 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23024917017216 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23024715690752 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23024514364288 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23024313037824 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23024111711360 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23023910384896 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23023709058432 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23023507731968 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23023306405504 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23035671377664 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23035664787200 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2000, r2: 1, n: 40, n_right: 1, m: 40, r1: 2)	 0.989353  	 1000      	 12.9378   	 0         	 1.96654   	 6.57895   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 40, r2: 2, n: 50, n_right: 40, m: 50, r1: 2) 	 0.267085  	 1000      	 119.812   	 0         	 9.88451   	 12.1212   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 40, m: 100, rA: 2, r: 40)                            	 0.0729506 	 1000      	 438.653   	 0         	 36.1889   	 12.1212   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 40, n_right: 2000, m: 40, r1: 1)	 0.054551  	 1000      	 234.643   	 0         	 35.6657   	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 40, xn: 40, m: 40, rA: 2, r: 50)                             	 0.0378283 	 1000      	 338.371   	 0         	 51.4324   	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 40, xn: 50, m: 80, rA: 1, r: 40)                             	 0.0328798 	 1000      	 389.296   	 0         	 59.173    	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 80000, cols: 1)                                                                                                                                                                         	 0.000183666	 2         	 0         	 0         	 6.96917   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.35954   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.31099   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.145155  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.143659  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00265881	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000183666	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000172056	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.6861e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8341e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.352e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23016560859008 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23016327079936 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23016125753472 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23015924427008 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23015723100544 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23015521774080 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23015320447616 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23015119121152 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23014917794688 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23014716468224 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23014515141760 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23014313815296 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23014112488832 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23013911162368 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23013709835904 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23013508509440 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23013307182976 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23013105856512 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23012904530048 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23012703203584 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23012501877120 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23012300550656 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23012099224192 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23011897897728 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23011696571264 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23011495244800 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23011293918336 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23011092591872 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23010891265408 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23010689938944 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23010488612480 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23010287286016 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23010085955456 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23009884628992 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23009683302528 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23009481976064 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23009280649600 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23009079323136 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23008877996672 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23008676670208 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23008475343744 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23008274017280 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23008072690816 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23007871364352 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23007670037888 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23007468711424 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23007267384960 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23007066058496 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23006864732032 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23006663405568 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23006462079104 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23006260752640 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23006059426176 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23005858099712 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23005656773248 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23005455446784 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23005254120320 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23005052793856 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23004851467392 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23004650140928 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23004448814464 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23004247488000 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23004046161536 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23016455198464 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23016448608000 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2050, r2: 1, n: 41, n_right: 1, m: 41, r1: 2)	 0.989352  	 1000      	 13.9326   	 0         	 2.0661    	 6.74342   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 41, r2: 2, n: 50, n_right: 41, m: 50, r1: 2) 	 0.345275  	 1000      	 97.3715   	 0         	 8.02142   	 12.1389   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 41, m: 100, rA: 2, r: 41)                            	 0.0752744 	 1000      	 446.633   	 0         	 36.7934   	 12.1389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 41, n_right: 2050, m: 41, r1: 1)	 0.0398649 	 1000      	 345.773   	 0         	 51.2756   	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 41, xn: 41, m: 41, rA: 2, r: 50)                             	 0.0396679 	 1000      	 347.49    	 0         	 51.5302   	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 41, xn: 50, m: 82, rA: 1, r: 41)                             	 0.037007  	 1000      	 372.476   	 0         	 55.2355   	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 84050, cols: 1)                                                                                                                                                                         	 0.000205047	 2         	 0         	 0         	 6.5585    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.42704   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.37449   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.153206  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.151949  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00281723	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000214827	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000205047	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.5732e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.859e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.233e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23419543750528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23419315808256 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23419114481792 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23418913155328 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23418711828864 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23418510502400 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23418309175936 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23418107849472 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23417906523008 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23417705196544 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23417503870080 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23417302543616 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23417101217152 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23416899890688 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23416698564224 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23416497237760 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23416295911296 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23416094584832 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23415893258368 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23415691931904 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23415490605440 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23415289278976 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23415087952512 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23414886626048 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23414685299584 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23414483973120 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23414282646656 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23414081320192 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23413879993728 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23413678667264 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23413477340800 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23413276014336 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23413074683776 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23412873357312 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23412672030848 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23412470704384 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23412269377920 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23412068051456 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23411866724992 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23411665398528 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23411464072064 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23411262745600 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23411061419136 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23410860092672 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23410658766208 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23410457439744 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23410256113280 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23410054786816 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23409853460352 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23409652133888 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23409450807424 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23409249480960 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23409048154496 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23408846828032 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23408645501568 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23408444175104 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23408242848640 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23408041522176 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23407840195712 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23407638869248 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23407437542784 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23407236216320 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23407034889856 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23419438089984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23419431499520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2100, r2: 1, n: 42, n_right: 1, m: 42, r1: 2)	 0.994121  	 1000      	 14.9052   	 0         	 2.15771   	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 42, r2: 2, n: 50, n_right: 42, m: 50, r1: 2) 	 0.35107   	 1000      	 100.493   	 0         	 8.26729   	 12.1555   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 42, m: 100, rA: 2, r: 42)                            	 0.0771462 	 1000      	 457.314   	 0         	 37.6221   	 12.1555   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 42, n_right: 2100, m: 42, r1: 1)	 0.0426049 	 1000      	 347.791   	 0         	 50.3468   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 42, xn: 42, m: 42, rA: 2, r: 50)                             	 0.0390557 	 1000      	 379.397   	 0         	 54.9222   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 42, xn: 50, m: 84, rA: 1, r: 42)                             	 0.0359269 	 1000      	 412.437   	 0         	 59.7052   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 88200, cols: 1)                                                                                                                                                                         	 0.000204137	 2         	 0         	 0         	 6.913     	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.44072   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.3878    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.153415  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.152129  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0027918 	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000204137	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000174326	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.8262e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8503e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.391e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23309921245056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23309727033344 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23309525706880 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23309324380416 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23309123053952 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23308921727488 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23308720401024 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23308519074560 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23308317748096 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23308116421632 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23307915095168 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23307713768704 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23307512442240 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23307311115776 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23307109789312 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23306908462848 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23306707136384 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23306505809920 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23306304483456 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23306103156992 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23305901830528 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23305700504064 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23305499177600 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23305297851136 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23305096524672 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23304895198208 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23304693871744 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23304492545280 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23304291218816 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23304089892352 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23303888565888 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23303687239424 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23303485908864 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23303284582400 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23303083255936 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23302881929472 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23302680603008 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23302479276544 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23302277950080 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23302076623616 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23301875297152 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23301673970688 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23301472644224 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23301271317760 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23301069991296 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23300868664832 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23300667338368 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23300466011904 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23300264685440 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23300063358976 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23299862032512 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23299660706048 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23299459379584 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23299258053120 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23299056726656 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23298855400192 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23298654073728 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23298452747264 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23298251420800 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23298050094336 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23297848767872 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23297647441408 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23297446114944 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23309815584512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23309808994048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2150, r2: 1, n: 43, n_right: 1, m: 43, r1: 2)	 1.01009   	 1000      	 15.7426   	 0         	 2.22593   	 7.07237   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 43, r2: 2, n: 50, n_right: 43, m: 50, r1: 2) 	 0.374712  	 1000      	 98.689    	 0         	 8.10862   	 12.1709   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 43, m: 100, rA: 2, r: 43)                            	 0.0869619 	 1000      	 425.243   	 0         	 34.9394   	 12.1709   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 43, n_right: 2150, m: 43, r1: 1)	 0.0426689 	 1000      	 372.669   	 0         	 52.6937   	 7.07237   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 43, xn: 50, m: 86, rA: 1, r: 43)                             	 0.0393066 	 1000      	 404.548   	 0         	 57.2012   	 7.07237   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 43, xn: 43, m: 43, rA: 2, r: 50)                             	 0.037304  	 1000      	 426.265   	 0         	 60.2719   	 7.07237   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 92450, cols: 1)                                                                                                                                                                         	 0.000226517	 2         	 0         	 0         	 6.53019   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.48308   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.42747   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.165026  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.163573  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00261543	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000226517	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000191236	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.1682e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 3.7841e-05	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8221e-05	 1000      
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22721944008576 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22721719166976 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22721517840512 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22721316514048 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22721115187584 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22720913861120 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22720712534656 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22720511208192 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22720309881728 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22720108555264 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22719907228800 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22719705902336 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22719504575872 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22719303249408 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22719101922944 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22718900596480 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22718699270016 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22718497943552 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22718296617088 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22718095290624 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22717893964160 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22717692637696 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22717491311232 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22717289984768 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22717088658304 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22716887331840 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22716686005376 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22716484678912 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22716283352448 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22716082025984 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22715880699520 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22715679373056 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22715478042496 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22715276716032 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22715075389568 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22714874063104 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22714672736640 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22714471410176 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22714270083712 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22714068757248 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22713867430784 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22713666104320 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22713464777856 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22713263451392 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22713062124928 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22712860798464 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22712659472000 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22712458145536 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22712256819072 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22712055492608 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22711854166144 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22711652839680 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22711451513216 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22711250186752 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22711048860288 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22710847533824 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22710646207360 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22710444880896 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22710243554432 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22710042227968 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22709840901504 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22709639575040 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22709438248576 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22721838348032 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22721831757568 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2200, r2: 1, n: 44, n_right: 1, m: 44, r1: 2)	 1.03296   	 1000      	 16.4932   	 0         	 2.27906   	 7.23684   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 44, r2: 2, n: 50, n_right: 44, m: 50, r1: 2) 	 0.342073  	 1000      	 113.192   	 0         	 9.28926   	 12.1853   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 44, m: 100, rA: 2, r: 44)                            	 0.0755316 	 1000      	 512.633   	 0         	 42.0698   	 12.1853   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 44, n_right: 2200, m: 44, r1: 1)	 0.0442217 	 1000      	 385.259   	 0         	 53.2357   	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 44, xn: 44, m: 44, rA: 2, r: 50)                             	 0.0382271 	 1000      	 445.674   	 0         	 61.584    	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 44, xn: 50, m: 88, rA: 1, r: 44)                             	 0.0366971 	 1000      	 464.255   	 0         	 64.1516   	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 96800, cols: 1)                                                                                                                                                                         	 0.000204036	 2         	 0         	 0         	 7.59082   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.47745   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.41925   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.151833  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.150456  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00286651	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000204036	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000186886	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.5333e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.818e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3151e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23275538065280 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23275300186112 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23275098859648 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23274897533184 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23274696206720 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23274494880256 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23274293553792 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23274092227328 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23273890900864 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23273689574400 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23273488247936 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23273286921472 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23273085595008 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23272884268544 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23272682942080 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23272481615616 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23272280289152 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23272078962688 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23271877636224 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23271676309760 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23271474983296 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23271273656832 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23271072330368 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23270871003904 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23270669677440 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23270468350976 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23270267024512 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23270065698048 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23269864371584 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23269663045120 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23269461718656 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23269260392192 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23269059061632 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23268857735168 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23268656408704 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23268455082240 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23268253755776 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23268052429312 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23267851102848 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23267649776384 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23267448449920 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23267247123456 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23267045796992 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23266844470528 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23266643144064 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23266441817600 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23266240491136 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23266039164672 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23265837838208 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23265636511744 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23265435185280 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23265233858816 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23265032532352 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23264831205888 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23264629879424 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23264428552960 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23264227226496 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23264025900032 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23263824573568 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23263623247104 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23263421920640 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23263220594176 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23263019267712 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23275432404736 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23275425814272 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2250, r2: 1, n: 45, n_right: 1, m: 45, r1: 2)	 1.0872    	 1000      	 16.7633   	 0         	 2.26491   	 7.40132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 45, r2: 2, n: 50, n_right: 45, m: 50, r1: 2) 	 0.395232  	 1000      	 102.472   	 0         	 8.40014   	 12.1988   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 45, m: 100, rA: 2, r: 45)                            	 0.0770562 	 1000      	 525.59    	 0         	 43.0854   	 12.1988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 45, n_right: 2250, m: 45, r1: 1)	 0.04634   	 1000      	 393.289   	 0         	 53.1377   	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 45, xn: 50, m: 90, rA: 1, r: 45)                             	 0.0410857 	 1000      	 443.585   	 0         	 59.9332   	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 45, xn: 45, m: 45, rA: 2, r: 50)                             	 0.0391525 	 1000      	 465.487   	 0         	 62.8925   	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 101250, cols: 1)                                                                                                                                                                        	 0.000219707	 2         	 0         	 0         	 7.37346   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.58872   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.52877   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.158627  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.157294  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00271238	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000219707	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000197176	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.6591e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.835e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1561e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22854481495936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22854259173376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22854057846912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22853856520448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22853655193984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22853453867520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22853252541056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22853051214592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22852849888128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22852648561664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22852447235200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22852245908736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22852044582272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22851843255808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22851641929344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22851440602880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22851239276416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22851037949952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22850836623488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22850635297024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22850433970560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22850232644096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22850031317632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22849829991168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22849628664704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22849427338240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22849226011776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22849024685312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22848823358848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22848622032384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22848420705920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22848219379456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22848018048896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22847816722432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22847615395968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22847414069504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22847212743040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22847011416576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22846810090112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22846608763648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22846407437184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22846206110720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22846004784256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22845803457792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22845602131328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22845400804864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22845199478400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22844998151936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22844796825472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22844595499008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22844394172544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22844192846080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22843991519616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22843790193152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22843588866688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22843387540224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22843186213760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22842984887296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22842783560832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22842582234368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22842380907904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22842179581440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22841978254976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22854375835392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22854369244928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2300, r2: 1, n: 46, n_right: 1, m: 46, r1: 2)	 1.1932    	 1000      	 16.3151   	 0         	 2.15643   	 7.56579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 46, r2: 2, n: 50, n_right: 46, m: 50, r1: 2) 	 0.391098  	 1000      	 108.208   	 0         	 8.86121   	 12.2114   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 46, m: 100, rA: 2, r: 46)                            	 0.0775057 	 1000      	 546.024   	 0         	 44.7141   	 12.2114   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 46, n_right: 2300, m: 46, r1: 1)	 0.0484606 	 1000      	 401.712   	 0         	 53.0958   	 7.56579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 46, xn: 50, m: 92, rA: 1, r: 46)                             	 0.04049   	 1000      	 480.79    	 0         	 63.5479   	 7.56579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 46, xn: 46, m: 46, rA: 2, r: 50)                             	 0.0386542 	 1000      	 503.624   	 0         	 66.566    	 7.56579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 105800, cols: 1)                                                                                                                                                                        	 0.000209166	 2         	 0         	 0         	 8.09309   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.69806   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.63276   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.158074  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.15665   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00297587	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000232197	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000209166	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.6922e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8502e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.119e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23072600917888 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23072362981376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23072161654912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23071960328448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23071759001984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23071557675520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23071356349056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23071155022592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23070953696128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23070752369664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23070551043200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23070349716736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23070148390272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23069947063808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23069745737344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23069544410880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23069343084416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23069141757952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23068940431488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23068739105024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23068537778560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23068336452096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23068135125632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23067933799168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23067732472704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23067531146240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23067329819776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23067128493312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23066927166848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23066725840384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23066524513920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23066323187456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23066121856896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23065920530432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23065719203968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23065517877504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23065316551040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23065115224576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23064913898112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23064712571648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23064511245184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23064309918720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23064108592256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23063907265792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23063705939328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23063504612864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23063303286400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23063101959936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23062900633472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23062699307008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23062497980544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23062296654080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23062095327616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23061894001152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23061692674688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23061491348224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23061290021760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23061088695296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23060887368832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23060686042368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23060484715904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23060283389440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23060082062976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23072495257344 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23072488666880 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2350, r2: 1, n: 47, n_right: 1, m: 47, r1: 2)	 0.897357  	 1000      	 23.1397   	 0         	 2.99339   	 7.73026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 47, r2: 2, n: 50, n_right: 47, m: 50, r1: 2) 	 0.407931  	 1000      	 108.303   	 0         	 8.86032   	 12.2233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 47, m: 100, rA: 2, r: 47)                            	 0.0809292 	 1000      	 545.909   	 0         	 44.6612   	 12.2233   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 47, n_right: 2350, m: 47, r1: 1)	 0.0459603 	 1000      	 451.795   	 0         	 58.4449   	 7.73026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 47, xn: 50, m: 94, rA: 1, r: 47)                             	 0.0410311 	 1000      	 506.069   	 0         	 65.466    	 7.73026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 47, xn: 47, m: 47, rA: 2, r: 50)                             	 0.0399796 	 1000      	 519.38    	 0         	 67.1879   	 7.73026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 110450, cols: 1)                                                                                                                                                                        	 0.000238028	 2         	 0         	 0         	 7.42434   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.41744   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.35125   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.163533  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.16194   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00338433	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000238028	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000226078	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.1442e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.83e-05  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.292e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22573285541760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22573073033216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22572871706752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22572670380288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22572469053824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22572267727360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22572066400896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22571865074432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22571663747968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22571462421504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22571261095040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22571059768576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22570858442112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22570657115648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22570455789184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22570254462720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22570053136256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22569851809792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22569650483328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22569449156864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22569247830400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22569046503936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22568845177472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22568643851008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22568442524544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22568241198080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22568039871616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22567838545152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22567637218688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22567435892224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22567234565760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22567033239296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22566831908736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22566630582272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22566429255808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22566227929344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22566026602880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22565825276416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22565623949952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22565422623488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22565221297024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22565019970560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22564818644096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22564617317632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22564415991168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22564214664704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22564013338240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22563812011776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22563610685312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22563409358848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22563208032384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22563006705920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22562805379456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22562604052992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22562402726528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22562201400064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22562000073600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22561798747136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22561597420672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22561396094208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22561194767744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22560993441280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22560792114816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22573179881216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22573173290752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2400, r2: 1, n: 48, n_right: 1, m: 48, r1: 2)	 0.905121  	 1000      	 24.4369   	 0         	 3.09535   	 7.89474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 48, r2: 2, n: 50, n_right: 48, m: 50, r1: 2) 	 0.359116  	 1000      	 128.315   	 0         	 10.488    	 12.2345   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 48, m: 100, rA: 2, r: 48)                            	 0.0818386 	 1000      	 563.059   	 0         	 46.0223   	 12.2345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 48, n_right: 2400, m: 48, r1: 1)	 0.0464749 	 1000      	 475.922   	 0         	 60.2834   	 7.89474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 48, xn: 50, m: 96, rA: 1, r: 48)                             	 0.0431798 	 1000      	 512.24    	 0         	 64.8837   	 7.89474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 48, xn: 48, m: 48, rA: 2, r: 50)                             	 0.0419    	 1000      	 527.885   	 0         	 66.8654   	 7.89474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 115200, cols: 1)                                                                                                                                                                        	 0.000250598	 2         	 0         	 0         	 7.35521   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.38127   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.31071   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.168375  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.166918  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00294421	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000250598	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000214926	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.1502e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.848e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.25e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23267761190784 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23267582666752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23267381340288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23267180013824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23266978687360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23266777360896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23266576034432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23266374707968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23266173381504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23265972055040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23265770728576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23265569402112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23265368075648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23265166749184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23264965422720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23264764096256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23264562769792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23264361443328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23264160116864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23263958790400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23263757463936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23263556137472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23263354811008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23263153484544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23262952158080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23262750831616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23262549505152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23262348178688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23262146852224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23261945525760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23261744199296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23261542872832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23261341542272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23261140215808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23260938889344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23260737562880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23260536236416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23260334909952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23260133583488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23259932257024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23259730930560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23259529604096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23259328277632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23259126951168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23258925624704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23258724298240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23258522971776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23258321645312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23258120318848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23257918992384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23257717665920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23257516339456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23257315012992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23257113686528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23256912360064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23256711033600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23256509707136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23256308380672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23256107054208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23255905727744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23255704401280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23255503074816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23255301748352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23267655530240 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23267476928256 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 49, r2: 2, n: 50, n_right: 49, m: 50, r1: 2) 	 0.466428  	 1000      	 102.953   	 0         	 8.40773   	 12.245    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2450, r2: 1, n: 49, n_right: 1, m: 49, r1: 2)	 0.314935  	 1000      	 74.7131   	 0         	 9.27052   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 49, m: 100, rA: 2, r: 49)                            	 0.0835746 	 1000      	 574.576   	 0         	 46.9233   	 12.245    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 49, n_right: 2450, m: 49, r1: 1)	 0.0496213 	 1000      	 474.188   	 0         	 58.838    	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 49, xn: 49, m: 49, rA: 2, r: 50)                             	 0.0440984 	 1000      	 533.575   	 0         	 66.2069   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 49, xn: 50, m: 98, rA: 1, r: 49)                             	 0.0419161 	 1000      	 561.354   	 0         	 69.6538   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 120050, cols: 1)                                                                                                                                                                        	 0.000236078	 2         	 0         	 0         	 8.13629   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.901105  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.830984  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.171054  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.169589  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00302648	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000236078	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000222157	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.4272e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8243e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.253e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22769022965632 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22768829589504 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22768628263040 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22768426936576 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22768225610112 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22768024283648 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22767822957184 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22767621630720 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22767420304256 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22767218977792 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22767017651328 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22766816324864 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22766614998400 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22766413671936 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22766212345472 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22766011019008 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22765809692544 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22765608366080 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22765407039616 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22765205713152 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22765004386688 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22764803060224 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22764601733760 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22764400407296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22764199080832 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22763997754368 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22763796427904 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22763595101440 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22763393774976 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22763192448512 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22762991122048 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22762789795584 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22762588465024 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22762387138560 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22762185812096 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22761984485632 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22761783159168 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22761581832704 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22761380506240 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22761179179776 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22760977853312 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22760776526848 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22760575200384 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22760373873920 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22760172547456 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22759971220992 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22759769894528 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22759568568064 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22759367241600 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22759165915136 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22758964588672 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22758763262208 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22758561935744 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22758360609280 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22758159282816 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22757957956352 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22757756629888 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22757555303424 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22757353976960 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22757152650496 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22756951324032 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22756749997568 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22756548671104 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22768917305088 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22768910714624 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 50, r2: 2, n: 50, n_right: 50, m: 50, r1: 2) 	 0.471569  	 1000      	 106.029   	 0         	 8.65196   	 12.2549   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2500, r2: 1, n: 50, n_right: 1, m: 50, r1: 2)	 0.244619  	 1000      	 102.2     	 0         	 12.4275   	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 50, m: 100, rA: 2, r: 50)                            	 0.0906328 	 1000      	 551.677   	 0         	 45.0168   	 12.2549   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 50, n_right: 2500, m: 50, r1: 1)	 0.0498124 	 1000      	 501.883   	 0         	 61.0289   	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 50, m: 50, rA: 2, r: 50)                             	 0.0436888 	 1000      	 572.229   	 0         	 69.583    	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 50, m: 100, rA: 1, r: 50)                            	 0.0415796 	 1000      	 601.257   	 0         	 73.1128   	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 125000, cols: 1)                                                                                                                                                                        	 0.000228107	 2         	 0         	 0         	 8.76782   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.837733  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.766001  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.177219  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.175901  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00311014	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000228107	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000222568	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.3032e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8462e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.214e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23134996752256 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23134774224896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23134572898432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23134371571968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23134170245504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23133968919040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23133767592576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23133566266112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23133364939648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23133163613184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23132962286720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23132760960256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23132559633792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23132358307328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23132156980864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23131955654400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23131754327936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23131553001472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23131351675008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23131150348544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23130949022080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23130747695616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23130546369152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23130345042688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23130143716224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23129942389760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23129741063296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23129539736832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23129338410368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23129137083904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23128935757440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23128734430976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23128533100416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23128331773952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23128130447488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23127929121024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23127727794560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23127526468096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23127325141632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23127123815168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23126922488704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23126721162240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23126519835776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23126318509312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23126117182848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23125915856384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23125714529920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23125513203456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23125311876992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23125110550528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23124909224064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23124707897600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23124506571136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23124305244672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23124103918208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23123902591744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23123701265280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23123499938816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23123298612352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23123097285888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23122895959424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23122694632960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23122493306496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23134891091712 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23134884501248 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2550, r2: 1, n: 51, n_right: 1, m: 51, r1: 2)	 0.29031   	 1000      	 91.3858   	 0         	 10.8946   	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 51, m: 100, rA: 2, r: 51)                            	 0.0871841 	 1000      	 596.669   	 0         	 48.6511   	 12.2642   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 51, r2: 2, n: 50, n_right: 51, m: 50, r1: 2) 	 0.085567  	 1000      	 607.945   	 0         	 49.5705   	 12.2642   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 51, n_right: 2550, m: 51, r1: 1)	 0.0494473 	 1000      	 536.535   	 0         	 63.9634   	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 51, xn: 51, m: 51, rA: 2, r: 50)                             	 0.0460501 	 1000      	 576.116   	 0         	 68.6821   	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 51, xn: 50, m: 102, rA: 1, r: 51)                            	 0.0442444 	 1000      	 599.628   	 0         	 71.485    	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 130050, cols: 1)                                                                                                                                                                        	 0.000236228	 2         	 0         	 0         	 8.80844   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.500802  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.425324  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.178879  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.177479  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00318338	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000239658	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000236228	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.843e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.293e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.36e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22470814529408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22470597797888 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22470396471424 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22470195144960 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22469993818496 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22469792492032 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22469591165568 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22469389839104 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22469188512640 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22468987186176 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22468785859712 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22468584533248 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22468383206784 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22468181880320 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22467980553856 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22467779227392 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22467577900928 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22467376574464 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22467175248000 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22466973921536 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22466772595072 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22466571268608 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22466369942144 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22466168615680 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22465967289216 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22465765962752 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22465564636288 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22465363309824 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22465161983360 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22464960656896 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22464759330432 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22464558003968 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22464356673408 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22464155346944 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22463954020480 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22463752694016 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22463551367552 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22463350041088 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22463148714624 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22462947388160 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22462746061696 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22462544735232 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22462343408768 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22462142082304 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22461940755840 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22461739429376 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22461538102912 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22461336776448 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22461135449984 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22460934123520 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22460732797056 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22460531470592 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22460330144128 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22460128817664 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22459927491200 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22459726164736 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22459524838272 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22459323511808 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22459122185344 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22458920858880 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22458719532416 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22458518205952 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22458316879488 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22470708868864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22470702278400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2600, r2: 1, n: 52, n_right: 1, m: 52, r1: 2)	 0.228536  	 1000      	 123.051   	 0         	 14.3875   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 52, m: 100, rA: 2, r: 52)                            	 0.0896938 	 1000      	 602.94    	 0         	 49.1271   	 12.2731   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 52, r2: 2, n: 50, n_right: 52, m: 50, r1: 2) 	 0.0854775 	 1000      	 632.681   	 0         	 51.5504   	 12.2731   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 52, n_right: 2600, m: 52, r1: 1)	 0.0515383 	 1000      	 545.645   	 0         	 63.7985   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 52, xn: 52, m: 52, rA: 2, r: 50)                             	 0.0479011 	 1000      	 587.076   	 0         	 68.6428   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 52, xn: 50, m: 104, rA: 1, r: 52)                            	 0.0437385 	 1000      	 642.948   	 0         	 75.1755   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 135200, cols: 1)                                                                                                                                                                        	 0.000266419	 2         	 0         	 0         	 8.11954   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.442628  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.365551  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.182751  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.181333  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00305382	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000266419	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000240028	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8211e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.015e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.285e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22946721892224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22946533861376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22946332534912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22946131208448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22945929881984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22945728555520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22945527229056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22945325902592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22945124576128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22944923249664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22944721923200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22944520596736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22944319270272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22944117943808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22943916617344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22943715290880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22943513964416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22943312637952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22943111311488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22942909985024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22942708658560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22942507332096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22942306005632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22942104679168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22941903352704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22941702026240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22941500699776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22941299373312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22941098046848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22940896720384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22940695393920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22940494067456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22940292736896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22940091410432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22939890083968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22939688757504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22939487431040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22939286104576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22939084778112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22938883451648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22938682125184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22938480798720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22938279472256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22938078145792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22937876819328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22937675492864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22937474166400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22937272839936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22937071513472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22936870187008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22936668860544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22936467534080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22936266207616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22936064881152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22935863554688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22935662228224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22935460901760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22935259575296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22935058248832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22934856922368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22934655595904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22934454269440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22934252942976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22946616231680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22946609641216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2650, r2: 1, n: 53, n_right: 1, m: 53, r1: 2)	 0.239059  	 1000      	 124.553   	 0         	 14.2883   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 53, m: 100, rA: 2, r: 53)                            	 0.0907105 	 1000      	 619.333   	 0         	 50.4286   	 12.2814   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 53, r2: 2, n: 50, n_right: 53, m: 50, r1: 2) 	 0.0893478 	 1000      	 628.779   	 0         	 51.1977   	 12.2814   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 53, n_right: 2650, m: 53, r1: 1)	 0.0529006 	 1000      	 562.856   	 0         	 64.5692   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 53, xn: 50, m: 106, rA: 1, r: 53)                            	 0.0488217 	 1000      	 609.88    	 0         	 69.9636   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 53, xn: 53, m: 53, rA: 2, r: 50)                             	 0.0485907 	 1000      	 612.78    	 0         	 70.2963   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 140450, cols: 1)                                                                                                                                                                        	 0.000259617	 2         	 0         	 0         	 8.65583   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.460465  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.381307  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.189699  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.188123  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00285054	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000267789	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000259617	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8141e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.099e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.389e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22909619599232 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22909422659584 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22909221333120 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22909020006656 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22908818680192 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22908617353728 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22908416027264 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22908214700800 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22908013374336 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22907812047872 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22907610721408 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22907409394944 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22907208068480 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22907006742016 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22906805415552 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22906604089088 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22906402762624 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22906201436160 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22906000109696 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22905798783232 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22905597456768 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22905396130304 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22905194803840 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22904993477376 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22904792150912 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22904590824448 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22904389497984 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22904188171520 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22903986845056 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22903785518592 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22903584192128 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22903382865664 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22903181535104 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22902980208640 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22902778882176 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22902577555712 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22902376229248 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22902174902784 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22901973576320 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22901772249856 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22901570923392 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22901369596928 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22901168270464 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22900966944000 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22900765617536 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22900564291072 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22900362964608 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22900161638144 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22899960311680 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22899758985216 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22899557658752 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22899356332288 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22899155005824 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22898953679360 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22898752352896 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22898551026432 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22898349699968 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22898148373504 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22897947047040 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22897745720576 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22897544394112 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22897343067648 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22897141741184 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22909513938688 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22909507348224 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2700, r2: 1, n: 54, n_right: 1, m: 54, r1: 2)	 0.277531  	 1000      	 113.475   	 0         	 12.7764   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 54, m: 100, rA: 2, r: 54)                            	 0.112352  	 1000      	 519.082   	 0         	 42.2386   	 12.2893   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 54, r2: 2, n: 50, n_right: 54, m: 50, r1: 2) 	 0.091632  	 1000      	 636.459   	 0         	 51.7898   	 12.2893   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 54, n_right: 2700, m: 54, r1: 1)	 0.055335  	 1000      	 569.13    	 0         	 64.0798   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 54, xn: 54, m: 54, rA: 2, r: 50)                             	 0.0510422 	 1000      	 616.995   	 0         	 69.4691   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 54, xn: 50, m: 108, rA: 1, r: 54)                            	 0.0468096 	 1000      	 672.784   	 0         	 75.7505   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 145800, cols: 1)                                                                                                                                                                        	 0.000292209	 2         	 0         	 0         	 7.98333   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.506366  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.424498  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.211666  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.210204  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00307101	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000292209	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000237658	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.847e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2311e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.167e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22805622216576 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22805403920384 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22805202593920 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22805001267456 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22804799940992 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22804598614528 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22804397288064 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22804195961600 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22803994635136 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22803793308672 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22803591982208 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22803390655744 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22803189329280 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22802988002816 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22802786676352 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22802585349888 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22802384023424 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22802182696960 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22801981370496 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22801780044032 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22801578717568 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22801377391104 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22801176064640 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22800974738176 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22800773411712 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22800572085248 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22800370758784 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22800169432320 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22799968105856 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22799766779392 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22799565452928 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22799364126464 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22799162795904 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22798961469440 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22798760142976 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22798558816512 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22798357490048 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22798156163584 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22797954837120 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22797753510656 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22797552184192 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22797350857728 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22797149531264 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22796948204800 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22796746878336 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22796545551872 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22796344225408 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22796142898944 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22795941572480 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22795740246016 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22795538919552 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22795337593088 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22795136266624 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22794934940160 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22794733613696 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22794532287232 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22794330960768 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22794129634304 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22793928307840 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22793726981376 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22793525654912 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22793324328448 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22793123001984 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22805516556032 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22805509965568 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2750, r2: 1, n: 55, n_right: 1, m: 55, r1: 2)	 0.278376  	 1000      	 119.533   	 0         	 13.2138   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 55, m: 100, rA: 2, r: 55)                            	 0.108355  	 1000      	 558.348   	 0         	 45.4061   	 12.2967   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 55, r2: 2, n: 50, n_right: 55, m: 50, r1: 2) 	 0.0931791 	 1000      	 649.287   	 0         	 52.8015   	 12.2967   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 55, n_right: 2750, m: 55, r1: 1)	 0.0547132 	 1000      	 608.172   	 0         	 67.2306   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 55, xn: 55, m: 55, rA: 2, r: 50)                             	 0.0521814 	 1000      	 637.679   	 0         	 70.4925   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 55, xn: 50, m: 110, rA: 1, r: 55)                            	 0.0491674 	 1000      	 676.77    	 0         	 74.8139   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 151250, cols: 1)                                                                                                                                                                        	 0.000271919	 2         	 0         	 0         	 8.89971   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.511539  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.426268  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.211223  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.209704  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00297513	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000271919	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000261668	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8592e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.0881e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.237e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22916870621056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22916670416896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22916469090432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22916267763968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22916066437504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22915865111040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22915663784576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22915462458112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22915261131648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22915059805184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22914858478720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22914657152256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22914455825792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22914254499328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22914053172864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22913851846400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22913650519936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22913449193472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22913247867008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22913046540544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22912845214080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22912643887616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22912442561152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22912241234688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22912039908224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22911838581760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22911637255296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22911435928832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22911234602368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22911033275904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22910831949440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22910630622976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22910429292416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22910227965952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22910026639488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22909825313024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22909623986560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22909422660096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22909221333632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22909020007168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22908818680704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22908617354240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22908416027776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22908214701312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22908013374848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22907812048384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22907610721920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22907409395456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22907208068992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22907006742528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22906805416064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22906604089600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22906402763136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22906201436672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22906000110208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22905798783744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22905597457280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22905396130816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22905194804352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22904993477888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22904792151424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22904590824960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22904389498496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22916764960512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22916758370048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2800, r2: 1, n: 56, n_right: 1, m: 56, r1: 2)	 0.331809  	 1000      	 105.854   	 0         	 11.4927   	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 56, m: 100, rA: 2, r: 56)                            	 0.115733  	 1000      	 541.936   	 0         	 44.0462   	 12.3038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 56, r2: 2, n: 50, n_right: 56, m: 50, r1: 2) 	 0.0879519 	 1000      	 713.117   	 0         	 57.959    	 12.3038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 56, n_right: 2800, m: 56, r1: 1)	 0.0535532 	 1000      	 655.856   	 0         	 71.2072   	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 56, xn: 56, m: 56, rA: 2, r: 50)                             	 0.0530153 	 1000      	 662.511   	 0         	 71.9298   	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 56, xn: 50, m: 112, rA: 1, r: 56)                            	 0.0479386 	 1000      	 732.67    	 0         	 79.5471   	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 156800, cols: 1)                                                                                                                                                                        	 0.00030185	 2         	 0         	 0         	 8.31141   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.561776  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.473314  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.218036  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.216687  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00350299	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00030185	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000235498	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8273e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.938e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.45e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22945064535936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22944856139776 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22944654813312 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22944453486848 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22944252160384 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22944050833920 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22943849507456 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22943648180992 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22943446854528 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22943245528064 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22943044201600 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22942842875136 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22942641548672 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22942440222208 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22942238895744 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22942037569280 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22941836242816 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22941634916352 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22941433589888 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22941232263424 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22941030936960 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22940829610496 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22940628284032 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22940426957568 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22940225631104 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22940024304640 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22939822978176 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22939621651712 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22939420325248 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22939218998784 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22939017672320 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22938816345856 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22938615015296 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22938413688832 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22938212362368 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22938011035904 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22937809709440 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22937608382976 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22937407056512 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22937205730048 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22937004403584 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22936803077120 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22936601750656 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22936400424192 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22936199097728 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22935997771264 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22935796444800 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22935595118336 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22935393791872 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22935192465408 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22934991138944 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22934789812480 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22934588486016 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22934387159552 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22934185833088 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22933984506624 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22933783180160 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22933581853696 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22933380527232 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22933179200768 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22932977874304 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22932776547840 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22932575221376 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22944958875392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22944952284928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2850, r2: 1, n: 57, n_right: 1, m: 57, r1: 2)	 0.302023  	 1000      	 122.635   	 0         	 13.0811   	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 57, m: 100, rA: 2, r: 57)                            	 0.104153  	 1000      	 623.89    	 0         	 50.6793   	 12.3105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 57, r2: 2, n: 50, n_right: 57, m: 50, r1: 2) 	 0.097192  	 1000      	 668.573   	 0         	 54.309    	 12.3105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 57, xn: 50, m: 114, rA: 1, r: 57)                            	 0.0583896 	 1000      	 634.335   	 0         	 67.6625   	 9.375     
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 57, n_right: 2850, m: 57, r1: 1)	 0.0576578 	 1000      	 642.386   	 0         	 68.5212   	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 57, xn: 57, m: 57, rA: 2, r: 50)                             	 0.0544841 	 1000      	 679.806   	 0         	 72.5126   	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 162450, cols: 1)                                                                                                                                                                        	 0.000292  	 2         	 0         	 0         	 8.90137   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.550166  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.456872  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.218416  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.217027  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00351447	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.0003153 	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000292  	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8311e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2331e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5101e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22534142576512 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22533948565504 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22533747239040 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22533545912576 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22533344586112 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22533143259648 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22532941933184 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22532740606720 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22532539280256 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22532337953792 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22532136627328 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22531935300864 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22531733974400 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22531532647936 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22531331321472 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22531129995008 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22530928668544 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22530727342080 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22530526015616 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22530324689152 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22530123362688 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22529922036224 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22529720709760 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22529519383296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22529318056832 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22529116730368 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22528915403904 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22528714077440 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22528512750976 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22528311424512 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22528110098048 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22527908771584 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22527707441024 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22527506114560 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22527304788096 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22527103461632 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22526902135168 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22526700808704 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22526499482240 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22526298155776 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22526096829312 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22525895502848 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22525694176384 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22525492849920 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22525291523456 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22525090196992 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22524888870528 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22524687544064 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22524486217600 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22524284891136 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22524083564672 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22523882238208 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22523680911744 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22523479585280 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22523278258816 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22523076932352 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22522875605888 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22522674279424 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22522472952960 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22522271626496 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22522070300032 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22521868973568 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22521667647104 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22534036915968 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22534030325504 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2900, r2: 1, n: 58, n_right: 1, m: 58, r1: 2)	 0.309741  	 1000      	 125.984   	 0         	 13.2066   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 58, m: 100, rA: 2, r: 58)                            	 0.103159  	 1000      	 652.195   	 0         	 52.9511   	 12.3169   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 58, r2: 2, n: 50, n_right: 58, m: 50, r1: 2) 	 0.101985  	 1000      	 659.703   	 0         	 53.5607   	 12.3169   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 58, n_right: 2900, m: 58, r1: 1)	 0.0615493 	 1000      	 634.003   	 0         	 66.461    	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 58, xn: 58, m: 58, rA: 2, r: 50)                             	 0.0569509 	 1000      	 685.193   	 0         	 71.8271   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 58, xn: 50, m: 116, rA: 1, r: 58)                            	 0.0568527 	 1000      	 686.377   	 0         	 71.9512   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 168200, cols: 1)                                                                                                                                                                        	 0.00032902	 2         	 0         	 0         	 8.17944   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.568467  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.473276  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.218401  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.216963  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00323503	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00032902	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000257028	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.865e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.3341e-05	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.278e-05 	 1         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22400529012608 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22400334817280 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22400133490816 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22399932164352 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22399730837888 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22399529511424 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22399328184960 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22399126858496 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22398925532032 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22398724205568 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22398522879104 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22398321552640 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22398120226176 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22397918899712 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22397717573248 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22397516246784 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22397314920320 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22397113593856 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22396912267392 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22396710940928 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22396509614464 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22396308288000 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22396106961536 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22395905635072 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22395704308608 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22395502982144 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22395301655680 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22395100329216 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22394899002752 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22394697676288 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22394496349824 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22394295023360 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22394093692800 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22393892366336 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22393691039872 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22393489713408 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22393288386944 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22393087060480 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22392885734016 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22392684407552 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22392483081088 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22392281754624 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22392080428160 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22391879101696 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22391677775232 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22391476448768 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22391275122304 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22391073795840 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22390872469376 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22390671142912 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22390469816448 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22390268489984 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22390067163520 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22389865837056 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22389664510592 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22389463184128 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22389261857664 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22389060531200 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22388859204736 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22388657878272 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22388456551808 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22388255225344 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22388053898880 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22400423352064 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22400416761600 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2950, r2: 1, n: 59, n_right: 1, m: 59, r1: 2)	 0.276384  	 1000      	 148.619   	 0         	 15.3153   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 59, m: 100, rA: 2, r: 59)                            	 0.121636  	 1000      	 572.365   	 0         	 46.4469   	 12.323    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 59, r2: 2, n: 50, n_right: 59, m: 50, r1: 2) 	 0.109442  	 1000      	 636.136   	 0         	 51.6218   	 12.323    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 59, n_right: 2950, m: 59, r1: 1)	 0.0634246 	 1000      	 647.632   	 0         	 66.739    	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 59, xn: 50, m: 118, rA: 1, r: 59)                            	 0.0586776 	 1000      	 700.025   	 0         	 72.1382   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 59, xn: 59, m: 59, rA: 2, r: 50)                             	 0.0580019 	 1000      	 708.18    	 0         	 72.9785   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 174050, cols: 1)                                                                                                                                                                        	 0.00031249	 2         	 0         	 0         	 8.91165   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.54744   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.449251  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.239747  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.238315  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00324353	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00031249	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000293329	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8332e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.1451e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.436e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22524840974208 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22524620433408 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22524419106944 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22524217780480 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22524016454016 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22523815127552 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22523613801088 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22523412474624 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22523211148160 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22523009821696 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22522808495232 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22522607168768 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22522405842304 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22522204515840 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22522003189376 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22521801862912 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22521600536448 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22521399209984 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22521197883520 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22520996557056 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22520795230592 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22520593904128 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22520392577664 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22520191251200 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22519989924736 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22519788598272 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22519587271808 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22519385945344 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22519184618880 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22518983292416 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22518781965952 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22518580639488 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22518379308928 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22518177982464 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22517976656000 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22517775329536 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22517574003072 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22517372676608 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22517171350144 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22516970023680 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22516768697216 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22516567370752 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22516366044288 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22516164717824 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22515963391360 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22515762064896 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22515560738432 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22515359411968 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22515158085504 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22514956759040 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22514755432576 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22514554106112 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22514352779648 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22514151453184 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22513950126720 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22513748800256 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22513547473792 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22513346147328 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22513144820864 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22512943494400 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22512742167936 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22512540841472 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22512339515008 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22524735313664 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22524728723200 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3000, r2: 1, n: 60, n_right: 1, m: 60, r1: 2)	 0.300953  	 1000      	 143.544   	 0         	 14.5458   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 60, m: 100, rA: 2, r: 60)                            	 0.111476  	 1000      	 645.878   	 0         	 52.3879   	 12.3288   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 60, r2: 2, n: 50, n_right: 60, m: 50, r1: 2) 	 0.105102  	 1000      	 685.05    	 0         	 55.5652   	 12.3288   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 60, n_right: 3000, m: 60, r1: 1)	 0.0637238 	 1000      	 677.926   	 0         	 68.6965   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 60, xn: 50, m: 120, rA: 1, r: 60)                            	 0.0622259 	 1000      	 694.244   	 0         	 70.3501   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 60, xn: 60, m: 60, rA: 2, r: 50)                             	 0.0592739 	 1000      	 728.819   	 0         	 73.8537   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 180000, cols: 1)                                                                                                                                                                        	 0.000334431	 2         	 0         	 0         	 8.61164   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.571882  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.469778  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.234442  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.232976  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00315997	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000334431	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000276809	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8731e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2111e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2481e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22903028246400 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22902845990912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22902644664448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22902443337984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22902242011520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22902040685056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22901839358592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22901638032128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22901436705664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22901235379200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22901034052736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22900832726272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22900631399808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22900430073344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22900228746880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22900027420416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22899826093952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22899624767488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22899423441024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22899222114560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22899020788096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22898819461632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22898618135168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22898416808704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22898215482240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22898014155776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22897812829312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22897611502848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22897410176384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22897208849920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22897007523456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22896806196992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22896604866432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22896403539968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22896202213504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22896000887040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22895799560576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22895598234112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22895396907648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22895195581184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22894994254720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22894792928256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22894591601792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22894390275328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22894188948864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22893987622400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22893786295936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22893584969472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22893383643008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22893182316544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22892980990080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22892779663616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22892578337152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22892377010688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22892175684224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22891974357760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22891773031296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22891571704832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22891370378368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22891169051904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22890967725440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22890766398976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22890565072512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22902922585856 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22902915995392 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3050, r2: 1, n: 61, n_right: 1, m: 61, r1: 2)	 0.308387  	 1000      	 147.206   	 0         	 14.6723   	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 61, m: 100, rA: 2, r: 61)                            	 0.117829  	 1000      	 631.595   	 0         	 51.2065   	 12.3343   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 61, r2: 2, n: 50, n_right: 61, m: 50, r1: 2) 	 0.106411  	 1000      	 699.365   	 0         	 56.701    	 12.3343   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 61, xn: 50, m: 122, rA: 1, r: 61)                            	 0.0666181 	 1000      	 681.44    	 0         	 67.9206   	 10.0329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 61, n_right: 3050, m: 61, r1: 1)	 0.0655772 	 1000      	 692.256   	 0         	 68.9987   	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 61, xn: 61, m: 61, rA: 2, r: 50)                             	 0.0615609 	 1000      	 737.42    	 0         	 73.5002   	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 186050, cols: 1)                                                                                                                                                                        	 0.00034046	 2         	 0         	 0         	 8.74346   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.585731  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.480374  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.247509  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.246008  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00316605	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00034046	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000273969	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8971e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2361e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.325e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22752828467072 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22752656353280 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22752455026816 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22752253700352 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22752052373888 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22751851047424 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22751649720960 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22751448394496 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22751247068032 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22751045741568 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22750844415104 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22750643088640 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22750441762176 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22750240435712 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22750039109248 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22749837782784 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22749636456320 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22749435129856 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22749233803392 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22749032476928 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22748831150464 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22748629824000 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22748428497536 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22748227171072 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22748025844608 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22747824518144 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22747623191680 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22747421865216 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22747220538752 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22747019212288 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22746817885824 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22746616559360 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22746415228800 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22746213902336 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22746012575872 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22745811249408 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22745609922944 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22745408596480 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22745207270016 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22745005943552 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22744804617088 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22744603290624 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22744401964160 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22744200637696 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22743999311232 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22743797984768 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22743596658304 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22743395331840 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22743194005376 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22742992678912 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22742791352448 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22742590025984 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22742388699520 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22742187373056 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22741986046592 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22741784720128 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22741583393664 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22741382067200 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22741180740736 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22740979414272 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22740778087808 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22740576761344 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22740375434880 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22752550811392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22752544245504 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3100, r2: 1, n: 62, n_right: 1, m: 62, r1: 2)	 0.296595  	 1000      	 160.709   	 0         	 15.7599   	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 62, m: 100, rA: 2, r: 62)                            	 0.112699  	 1000      	 682.173   	 0         	 55.2837   	 12.3395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 62, r2: 2, n: 50, n_right: 62, m: 50, r1: 2) 	 0.109367  	 1000      	 702.956   	 0         	 56.9679   	 12.3395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 62, xn: 50, m: 124, rA: 1, r: 62)                            	 0.0700494 	 1000      	 680.457   	 0         	 66.7287   	 10.1974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 62, n_right: 3100, m: 62, r1: 1)	 0.0672505 	 1000      	 708.777   	 0         	 69.5059   	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 62, xn: 62, m: 62, rA: 2, r: 50)                             	 0.0643892 	 1000      	 740.273   	 0         	 72.5945   	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 192200, cols: 1)                                                                                                                                                                        	 0.000405243	 2         	 0         	 0         	 7.58853   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.581887  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.473213  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.248529  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.247137  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00325671	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000405243	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000287409	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.915e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3521e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.309e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23092841060224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23092629858304 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23092428531840 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23092227205376 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23092025878912 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23091824552448 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23091623225984 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23091421899520 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23091220573056 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23091019246592 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23090817920128 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23090616593664 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23090415267200 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23090213940736 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23090012614272 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23089811287808 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23089609961344 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23089408634880 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23089207308416 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23089005981952 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23088804655488 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23088603329024 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23088402002560 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23088200676096 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23087999349632 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23087798023168 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23087596696704 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23087395370240 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23087194043776 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23086992717312 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23086791390848 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23086590064384 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23086388733824 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23086187407360 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23085986080896 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23085784754432 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23085583427968 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23085382101504 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23085180775040 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23084979448576 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23084778122112 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23084576795648 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23084375469184 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23084174142720 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23083972816256 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23083771489792 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23083570163328 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23083368836864 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23083167510400 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23082966183936 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23082764857472 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23082563531008 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23082362204544 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23082160878080 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23081959551616 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23081758225152 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23081556898688 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23081355572224 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23081154245760 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23080952919296 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23080751592832 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23080550266368 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23080348939904 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23092735399680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23092728809216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3150, r2: 1, n: 63, n_right: 1, m: 63, r1: 2)	 0.29148   	 1000      	 171.571   	 0         	 16.5579   	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 63, m: 100, rA: 2, r: 63)                            	 0.118939  	 1000      	 667.401   	 0         	 54.0647   	 12.3445   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 63, r2: 2, n: 50, n_right: 63, m: 50, r1: 2) 	 0.111832  	 1000      	 709.817   	 0         	 57.5007   	 12.3445   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 63, n_right: 3150, m: 63, r1: 1)	 0.0697797 	 1000      	 716.675   	 0         	 69.1648   	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 63, xn: 50, m: 126, rA: 1, r: 63)                            	 0.0680394 	 1000      	 735.006   	 0         	 70.934    	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 63, xn: 63, m: 63, rA: 2, r: 50)                             	 0.0651736 	 1000      	 767.326   	 0         	 74.053    	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 198450, cols: 1)                                                                                                                                                                        	 0.000341971	 2         	 0         	 0         	 9.285     	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.586145  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.473091  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.253714  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.252152  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0032756 	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000341971	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000335441	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.91e-05  	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2721e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3451e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22793844389760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22793659869184 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22793458542720 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22793257216256 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22793055889792 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22792854563328 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22792653236864 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22792451910400 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22792250583936 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22792049257472 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22791847931008 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22791646604544 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22791445278080 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22791243951616 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22791042625152 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22790841298688 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22790639972224 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22790438645760 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22790237319296 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22790035992832 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22789834666368 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22789633339904 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22789432013440 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22789230686976 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22789029360512 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22788828034048 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22788626707584 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22788425381120 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22788224054656 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22788022728192 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22787821401728 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22787620075264 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22787418744704 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22787217418240 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22787016091776 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22786814765312 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22786613438848 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22786412112384 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22786210785920 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22786009459456 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22785808132992 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22785606806528 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22785405480064 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22785204153600 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22785002827136 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22784801500672 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22784600174208 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22784398847744 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22784197521280 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22783996194816 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22783794868352 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22783593541888 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22783392215424 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22783190888960 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22782989562496 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22782788236032 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22782586909568 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22782385583104 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22782184256640 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22781982930176 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22781781603712 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22781580277248 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22781378950784 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22793738729216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22793732138752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3200, r2: 1, n: 64, n_right: 1, m: 64, r1: 2)	 0.293612  	 1000      	 178.565   	 0         	 16.9637   	 10.5263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 64, m: 100, rA: 2, r: 64)                            	 0.134621  	 1000      	 608.524   	 0         	 49.2762   	 12.3493   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 64, r2: 2, n: 50, n_right: 64, m: 50, r1: 2) 	 0.111811  	 1000      	 732.663   	 0         	 59.3286   	 12.3493   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 64, xn: 64, m: 64, rA: 2, r: 50)                             	 0.0776066 	 1000      	 675.572   	 0         	 64.1793   	 10.5263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 64, n_right: 3200, m: 64, r1: 1)	 0.0739931 	 1000      	 708.564   	 0         	 67.3135   	 10.5263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 64, xn: 50, m: 128, rA: 1, r: 64)                            	 0.0714229 	 1000      	 734.061   	 0         	 69.7358   	 10.5263   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 204800, cols: 1)                                                                                                                                                                        	 0.000349811	 2         	 0         	 0         	 9.36734   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.595853  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.479416  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.285163  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.28365   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00296434	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000349811	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00032567	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.938e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.203e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.365e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22510189389696 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22509990701056 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22509789374592 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22509588048128 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22509386721664 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22509185395200 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22508984068736 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22508782742272 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22508581415808 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22508380089344 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22508178762880 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22507977436416 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22507776109952 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22507574783488 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22507373457024 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22507172130560 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22506970804096 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22506769477632 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22506568151168 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22506366824704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22506165498240 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22505964171776 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22505762845312 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22505561518848 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22505360192384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22505158865920 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22504957539456 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22504756212992 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22504554886528 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22504353560064 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22504152233600 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22503950907136 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22503749576576 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22503548250112 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22503346923648 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22503145597184 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22502944270720 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22502742944256 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22502541617792 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22502340291328 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22502138964864 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22501937638400 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22501736311936 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22501534985472 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22501333659008 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22501132332544 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22500931006080 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22500729679616 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22500528353152 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22500327026688 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22500125700224 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22499924373760 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22499723047296 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22499521720832 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22499320394368 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22499119067904 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22498917741440 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22498716414976 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22498515088512 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22498313762048 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22498112435584 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22497911109120 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22497709782656 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22510083729152 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22510077138688 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3250, r2: 1, n: 65, n_right: 1, m: 65, r1: 2)	 0.232122  	 1000      	 236.622   	 0         	 22.1332   	 10.6908   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 66, m: 100, rA: 2, r: 66)                            	 0.154619  	 1000      	 563.451   	 0         	 45.5935   	 12.3581   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 65, r2: 2, n: 50, n_right: 65, m: 50, r1: 2) 	 0.130106  	 1000      	 649.472   	 0         	 52.5727   	 12.3538   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 65, n_right: 3250, m: 65, r1: 1)	 0.0830873 	 1000      	 661.052   	 0         	 61.8338   	 10.6908   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 66, m: 66, rA: 2, r: 50)                             	 0.0755967 	 1000      	 760.605   	 0         	 70.0678   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 50, m: 132, rA: 1, r: 66)                            	 0.0748015 	 1000      	 768.69    	 0         	 70.8127   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 211250, cols: 1)                                                                                                                                                                        	 0.000392473	 2         	 0         	 0         	 8.61206   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.566049  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.445315  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.306432  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.305017  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00347548	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000392473	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00030312	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000228707	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000157995	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000125024	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3571e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.54e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23082434103168 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23082227984384 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23082026657920 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23081825331456 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23081624004992 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23081422678528 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23081221352064 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23081020025600 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23080818699136 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23080617372672 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23080416046208 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23080214719744 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23080013393280 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23079812066816 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23079610740352 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23079409413888 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23079208087424 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23079006760960 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23078805434496 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23078604108032 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23078402781568 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23078201455104 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23078000128640 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23077798802176 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23077597475712 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23077396149248 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23077194822784 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23076993496320 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23076792169856 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23076590843392 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23076389516928 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23076188190464 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23075986859904 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23075785533440 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23075584206976 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23075382880512 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23075181554048 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23074980227584 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23074778901120 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23074577574656 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23074376248192 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23074174921728 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23073973595264 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23073772268800 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23073570942336 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23073369615872 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23073168289408 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23072966962944 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23072765636480 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23072564310016 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23072362983552 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23072161657088 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23071960330624 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23071759004160 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23071557677696 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23071356351232 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23071155024768 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23070953698304 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23070752371840 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23070551045376 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23070349718912 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23070148392448 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23069947065984 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23082328442624 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23082321852160 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3300, r2: 1, n: 66, n_right: 1, m: 66, r1: 2)	 0.22816   	 1000      	 252.012   	 0         	 23.2157   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 66, m: 100, rA: 2, r: 66)                            	 0.194905  	 1000      	 446.988   	 0         	 36.1695   	 12.3581   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 66, r2: 2, n: 50, n_right: 66, m: 50, r1: 2) 	 0.143911  	 1000      	 605.375   	 0         	 48.9859   	 12.3581   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 66, n_right: 3300, m: 66, r1: 1)	 0.0880833 	 1000      	 652.782   	 0         	 60.1351   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 50, m: 132, rA: 1, r: 66)                            	 0.0754743 	 1000      	 761.838   	 0         	 70.1814   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 66, m: 66, rA: 2, r: 50)                             	 0.0728877 	 1000      	 788.874   	 0         	 72.672    	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 217800, cols: 1)                                                                                                                                                                        	 0.000420174	 2         	 0         	 0         	 8.29371   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.581488  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.460154  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.344757  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.343267  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00309771	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000420174	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00030922	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8722e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3481e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2651e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23148778510208 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23148598650880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23148397324416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23148195997952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23147994671488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23147793345024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23147592018560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23147390692096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23147189365632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23146988039168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23146786712704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23146585386240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23146384059776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23146182733312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23145981406848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23145780080384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23145578753920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23145377427456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23145176100992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23144974774528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23144773448064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23144572121600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23144370795136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23144169468672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23143968142208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23143766815744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23143565489280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23143364162816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23143162836352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23142961509888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23142760183424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23142558856960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23142357526400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23142156199936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23141954873472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23141753547008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23141552220544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23141350894080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23141149567616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23140948241152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23140746914688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23140545588224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23140344261760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23140142935296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23139941608832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23139740282368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23139538955904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23139337629440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23139136302976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23138934976512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23138733650048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23138532323584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23138330997120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23138129670656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23137928344192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23137727017728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23137525691264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23137324364800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23137123038336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23136921711872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23136720385408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23136519058944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23136317732480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23148672849664 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23148493788928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3350, r2: 1, n: 67, n_right: 1, m: 67, r1: 2)	 0.230036  	 1000      	 261.492   	 0         	 23.7294   	 11.0197   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 68, m: 100, rA: 2, r: 68)                            	 0.157349  	 1000      	 587.739   	 0         	 47.5275   	 12.3663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 67, r2: 2, n: 50, n_right: 67, m: 50, r1: 2) 	 0.137098  	 1000      	 654.86    	 0         	 52.9723   	 12.3623   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 67, n_right: 3350, m: 67, r1: 1)	 0.0903269 	 1000      	 665.943   	 0         	 60.4319   	 11.0197   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 68, m: 68, rA: 2, r: 50)                             	 0.0799621 	 1000      	 786.453   	 0         	 70.3181   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 50, m: 136, rA: 1, r: 68)                            	 0.0790521 	 1000      	 795.506   	 0         	 71.1276   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 224450, cols: 1)                                                                                                                                                                        	 0.000439934	 2         	 0         	 0         	 8.16304   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.58371   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.457461  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.317918  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.316363  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00331484	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000439934	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00031453	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000212707	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000144704	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000136914	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3611e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.268e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22618515634048 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22618304407552 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22618103081088 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22617901754624 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22617700428160 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22617499101696 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22617297775232 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22617096448768 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22616895122304 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22616693795840 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22616492469376 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22616291142912 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22616089816448 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22615888489984 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22615687163520 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22615485837056 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22615284510592 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22615083184128 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22614881857664 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22614680531200 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22614479204736 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22614277878272 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22614076551808 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22613875225344 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22613673898880 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22613472572416 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22613271245952 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22613069919488 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22612868593024 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22612667266560 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22612465940096 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22612264613632 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22612063283072 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22611861956608 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22611660630144 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22611459303680 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22611257977216 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22611056650752 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22610855324288 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22610653997824 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22610452671360 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22610251344896 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22610050018432 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22609848691968 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22609647365504 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22609446039040 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22609244712576 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22609043386112 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22608842059648 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22608640733184 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22608439406720 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22608238080256 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22608036753792 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22607835427328 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22607634100864 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22607432774400 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22607231447936 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22607030121472 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22606828795008 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22606627468544 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22606426142080 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22606224815616 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22606023489152 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22618409973504 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22618403383040 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3400, r2: 1, n: 68, n_right: 1, m: 68, r1: 2)	 0.222689  	 1000      	 282.395   	 0         	 25.2495   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 68, m: 100, rA: 2, r: 68)                            	 0.163332  	 1000      	 566.208   	 0         	 45.7864   	 12.3663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 68, r2: 2, n: 50, n_right: 68, m: 50, r1: 2) 	 0.138653  	 1000      	 666.987   	 0         	 53.9359   	 12.3663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 68, n_right: 3400, m: 68, r1: 1)	 0.0876687 	 1000      	 717.318   	 0         	 64.1367   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 50, m: 136, rA: 1, r: 68)                            	 0.0816898 	 1000      	 769.819   	 0         	 68.8309   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 68, m: 68, rA: 2, r: 50)                             	 0.0742989 	 1000      	 846.397   	 0         	 75.6779   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 231200, cols: 1)                                                                                                                                                                        	 0.000434264	 2         	 0         	 0         	 8.51832   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.580795  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.449011  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.32084   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.319321  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00324779	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000434264	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000414874	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.927e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2931e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.563e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23121526941568 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23121352452096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23121151125632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23120949799168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23120748472704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23120547146240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23120345819776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23120144493312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23119943166848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23119741840384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23119540513920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23119339187456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23119137860992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23118936534528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23118735208064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23118533881600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23118332555136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23118131228672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23117929902208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23117728575744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23117527249280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23117325922816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23117124596352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23116923269888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23116721943424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23116520616960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23116319290496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23116117964032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23115916637568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23115715311104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23115513984640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23115312658176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23115111327616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23114910001152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23114708674688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23114507348224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23114306021760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23114104695296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23113903368832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23113702042368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23113500715904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23113299389440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23113098062976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23112896736512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23112695410048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23112494083584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23112292757120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23112091430656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23111890104192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23111688777728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23111487451264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23111286124800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23111084798336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23110883471872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23110682145408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23110480818944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23110279492480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23110078166016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23109876839552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23109675513088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23109474186624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23109272860160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23109071533696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23121247590144 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23121242699520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3450, r2: 1, n: 69, n_right: 1, m: 69, r1: 2)	 0.241154  	 1000      	 272.447   	 0         	 24.007    	 11.3487   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 70, m: 100, rA: 2, r: 70)                            	 0.16256   	 1000      	 602.855   	 0         	 48.7206   	 12.3737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 69, r2: 2, n: 50, n_right: 69, m: 50, r1: 2) 	 0.149083  	 1000      	 638.707   	 0         	 51.6331   	 12.3701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 69, n_right: 3450, m: 69, r1: 1)	 0.0924284 	 1000      	 710.84    	 0         	 62.6363   	 11.3487   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 50, m: 140, rA: 1, r: 70)                            	 0.0851617 	 1000      	 805.526   	 0         	 69.9657   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 70, m: 70, rA: 2, r: 50)                             	 0.0811013 	 1000      	 845.856   	 0         	 73.4686   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 238050, cols: 1)                                                                                                                                                                        	 0.000532857	 2         	 0         	 0         	 7.14788   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.617122  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.482665  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.330391  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.328823  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0035138 	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000532857	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00033771	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000236098	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000164474	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000148395	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2811e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4351e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23269421705088 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23269193279488 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23268991953024 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23268790626560 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23268589300096 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23268387973632 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23268186647168 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23267985320704 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23267783994240 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23267582667776 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23267381341312 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23267180014848 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23266978688384 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23266777361920 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23266576035456 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23266374708992 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23266173382528 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23265972056064 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23265770729600 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23265569403136 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23265368076672 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23265166750208 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23264965423744 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23264764097280 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23264562770816 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23264361444352 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23264160117888 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23263958791424 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23263757464960 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23263556138496 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23263354812032 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23263153485568 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23262952155008 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23262750828544 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23262549502080 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23262348175616 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23262146849152 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23261945522688 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23261744196224 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23261542869760 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23261341543296 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23261140216832 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23260938890368 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23260737563904 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23260536237440 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23260334910976 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23260133584512 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23259932258048 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23259730931584 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23259529605120 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23259328278656 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23259126952192 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23258925625728 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23258724299264 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23258522972800 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23258321646336 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23258120319872 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23257918993408 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23257717666944 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23257516340480 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23257315014016 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23257113687552 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23256912361088 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23269316044544 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23269309454080 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3500, r2: 1, n: 70, n_right: 1, m: 70, r1: 2)	 0.2493    	 1000      	 275.171   	 0         	 23.9005   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 70, m: 100, rA: 2, r: 70)                            	 0.162286  	 1000      	 603.871   	 0         	 48.8026   	 12.3737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 70, r2: 2, n: 50, n_right: 70, m: 50, r1: 2) 	 0.155188  	 1000      	 631.493   	 0         	 51.035    	 12.3737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 70, n_right: 3500, m: 70, r1: 1)	 0.0972916 	 1000      	 705.097   	 0         	 61.2427   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 50, m: 140, rA: 1, r: 70)                            	 0.0838517 	 1000      	 818.111   	 0         	 71.0588   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 70, m: 70, rA: 2, r: 50)                             	 0.0791416 	 1000      	 866.8     	 0         	 75.2878   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 245000, cols: 1)                                                                                                                                                                        	 0.000575478	 2         	 0         	 0         	 6.81173   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.640938  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.501779  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.326854  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.32528   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00341132	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000575478	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000341801	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.966e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3441e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.54e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22716198033280 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22716014913536 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22715813587072 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22715612260608 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22715410934144 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22715209607680 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22715008281216 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22714806954752 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22714605628288 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22714404301824 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22714202975360 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22714001648896 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22713800322432 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22713598995968 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22713397669504 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22713196343040 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22712995016576 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22712793690112 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22712592363648 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22712391037184 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22712189710720 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22711988384256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22711787057792 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22711585731328 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22711384404864 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22711183078400 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22710981751936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22710780425472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22710579099008 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22710377772544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22710176446080 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22709975119616 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22709773789056 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22709572462592 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22709371136128 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22709169809664 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22708968483200 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22708767156736 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22708565830272 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22708364503808 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22708163177344 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22707961850880 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22707760524416 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22707559197952 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22707357871488 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22707156545024 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22706955218560 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22706753892096 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22706552565632 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22706351239168 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22706149912704 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22705948586240 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22705747259776 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22705545933312 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22705344606848 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22705143280384 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22704941953920 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22704740627456 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22704539300992 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22704337974528 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22704136648064 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22703935321600 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22703733995136 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22716092372736 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22716085782272 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3550, r2: 1, n: 71, n_right: 1, m: 71, r1: 2)	 0.24766   	 1000      	 289.034   	 0         	 24.7511   	 11.6776   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 72, m: 100, rA: 2, r: 72)                            	 0.165783  	 1000      	 625.396   	 0         	 50.5143   	 12.3806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 71, r2: 2, n: 50, n_right: 71, m: 50, r1: 2) 	 0.151839  	 1000      	 663.993   	 0         	 53.6463   	 12.3772   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 71, n_right: 3550, m: 71, r1: 1)	 0.102801  	 1000      	 696.316   	 0         	 59.6282   	 11.6776   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 50, m: 144, rA: 1, r: 72)                            	 0.0872089 	 1000      	 855.986   	 0         	 72.2832   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 72, m: 72, rA: 2, r: 50)                             	 0.080898  	 1000      	 922.762   	 0         	 77.9221   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 252050, cols: 1)                                                                                                                                                                        	 0.000495136	 2         	 0         	 0         	 8.14483   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.646271  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.5023    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.335329  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.33389   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00413901	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000495136	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00033726	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000256049	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000174466	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000150885	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.339e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6001e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22737927010176 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22737691076608 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22737489750144 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22737288423680 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22737087097216 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22736885770752 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22736684444288 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22736483117824 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22736281791360 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22736080464896 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22735879138432 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22735677811968 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22735476485504 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22735275159040 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22735073832576 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22734872506112 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22734671179648 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22734469853184 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22734268526720 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22734067200256 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22733865873792 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22733664547328 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22733463220864 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22733261894400 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22733060567936 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22732859241472 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22732657915008 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22732456588544 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22732255262080 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22732053935616 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22731852609152 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22731651282688 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22731449952128 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22731248625664 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22731047299200 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22730845972736 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22730644646272 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22730443319808 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22730241993344 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22730040666880 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22729839340416 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22729638013952 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22729436687488 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22729235361024 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22729034034560 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22728832708096 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22728631381632 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22728430055168 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22728228728704 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22728027402240 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22727826075776 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22727624749312 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22727423422848 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22727222096384 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22727020769920 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22726819443456 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22726618116992 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22726416790528 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22726215464064 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22726014137600 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22725812811136 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22725611484672 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22725410158208 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22737821349632 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22737814759168 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3600, r2: 1, n: 72, n_right: 1, m: 72, r1: 2)	 0.252888  	 1000      	 295.189   	 0         	 24.927    	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 72, m: 100, rA: 2, r: 72)                            	 0.16537   	 1000      	 626.959   	 0         	 50.6405   	 12.3806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 72, r2: 2, n: 50, n_right: 72, m: 50, r1: 2) 	 0.14942   	 1000      	 693.883   	 0         	 56.046    	 12.3806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 72, n_right: 3600, m: 72, r1: 1)	 0.0939024 	 1000      	 794.97    	 0         	 67.1308   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 50, m: 144, rA: 1, r: 72)                            	 0.0875002 	 1000      	 853.136   	 0         	 72.0426   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 72, m: 72, rA: 2, r: 50)                             	 0.0800429 	 1000      	 932.62    	 0         	 78.7546   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 259200, cols: 1)                                                                                                                                                                        	 0.000575629	 2         	 0         	 0         	 7.20464   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.644184  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.49621   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.334464  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.332913  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00380244	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000575629	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000342231	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0131e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3081e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.718e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22603365529472 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22603137804288 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22602936477824 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22602735151360 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22602533824896 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22602332498432 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22602131171968 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22601929845504 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22601728519040 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22601527192576 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22601325866112 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22601124539648 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22600923213184 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22600721886720 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22600520560256 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22600319233792 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22600117907328 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22599916580864 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22599715254400 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22599513927936 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22599312601472 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22599111275008 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22598909948544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22598708622080 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22598507295616 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22598305969152 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22598104642688 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22597903316224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22597701989760 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22597500663296 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22597299336832 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22597098010368 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22596896679808 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22596695353344 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22596494026880 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22596292700416 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22596091373952 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22595890047488 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22595688721024 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22595487394560 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22595286068096 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22595084741632 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22594883415168 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22594682088704 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22594480762240 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22594279435776 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22594078109312 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22593876782848 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22593675456384 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22593474129920 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22593272803456 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22593071476992 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22592870150528 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22592668824064 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22592467497600 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22592266171136 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22592064844672 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22591863518208 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22591662191744 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22591460865280 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22591259538816 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22591058212352 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22590856885888 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22603259868928 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22603253278464 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3650, r2: 1, n: 73, n_right: 1, m: 73, r1: 2)	 0.255474  	 1000      	 304.546   	 0         	 25.3649   	 12.0066   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 74, m: 100, rA: 2, r: 74)                            	 0.173796  	 1000      	 630.165   	 0         	 50.8735   	 12.3869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 73, r2: 2, n: 50, n_right: 73, m: 50, r1: 2) 	 0.164123  	 1000      	 649.393   	 0         	 52.4389   	 12.3838   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 73, n_right: 3650, m: 73, r1: 1)	 0.103651  	 1000      	 750.627   	 0         	 62.518    	 12.0066   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 50, m: 148, rA: 1, r: 74)                            	 0.0938424 	 1000      	 863.627   	 0         	 70.9574   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 74, m: 74, rA: 2, r: 50)                             	 0.0893165 	 1000      	 907.389   	 0         	 74.5531   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 266450, cols: 1)                                                                                                                                                                        	 0.000565878	 2         	 0         	 0         	 7.53378   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.679982  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.523247  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.358438  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.356955  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00376063	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000565878	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000352481	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000251618	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000171674	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000159275	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3671e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.35e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23096952768384 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23096723499008 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23096522172544 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23096320846080 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23096119519616 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23095918193152 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23095716866688 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23095515540224 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23095314213760 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23095112887296 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23094911560832 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23094710234368 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23094508907904 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23094307581440 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23094106254976 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23093904928512 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23093703602048 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23093502275584 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23093300949120 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23093099622656 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23092898296192 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23092696969728 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23092495643264 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23092294316800 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23092092990336 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23091891663872 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23091690337408 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23091489010944 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23091287684480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23091086358016 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23090885031552 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23090683705088 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23090482374528 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23090281048064 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23090079721600 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23089878395136 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23089677068672 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23089475742208 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23089274415744 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23089073089280 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23088871762816 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23088670436352 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23088469109888 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23088267783424 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23088066456960 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23087865130496 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23087663804032 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23087462477568 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23087261151104 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23087059824640 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23086858498176 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23086657171712 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23086455845248 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23086254518784 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23086053192320 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23085851865856 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23085650539392 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23085449212928 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23085247886464 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23085046560000 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23084845233536 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23084643907072 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23084442580608 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23096847107840 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23096840517376 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3700, r2: 1, n: 74, n_right: 1, m: 74, r1: 2)	 0.252256  	 1000      	 321.28    	 0         	 26.397    	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 74, m: 100, rA: 2, r: 74)                            	 0.186768  	 1000      	 586.397   	 0         	 47.3401   	 12.3869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 74, r2: 2, n: 50, n_right: 74, m: 50, r1: 2) 	 0.167067  	 1000      	 655.546   	 0         	 52.9225   	 12.3869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 74, n_right: 3700, m: 74, r1: 1)	 0.105386  	 1000      	 769.028   	 0         	 63.185    	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 50, m: 148, rA: 1, r: 74)                            	 0.094592  	 1000      	 856.783   	 0         	 70.3951   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 74, m: 74, rA: 2, r: 50)                             	 0.0852726 	 1000      	 950.42    	 0         	 78.0886   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 273800, cols: 1)                                                                                                                                                                        	 0.000597319	 2         	 0         	 0         	 7.3341    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.681947  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.524709  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.368038  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.366632  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00338122	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000597319	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000358462	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.9812e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3771e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.444e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23047200937856 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23046995830784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23046794504320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23046593177856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23046391851392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23046190524928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23045989198464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23045787872000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23045586545536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23045385219072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23045183892608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23044982566144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23044781239680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23044579913216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23044378586752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23044177260288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23043975933824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23043774607360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23043573280896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23043371954432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23043170627968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23042969301504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23042767975040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23042566648576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23042365322112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23042163995648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23041962669184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23041761342720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23041560016256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23041358689792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23041157363328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23040956036864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23040754706304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23040553379840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23040352053376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23040150726912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23039949400448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23039748073984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23039546747520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23039345421056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23039144094592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23038942768128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23038741441664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23038540115200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23038338788736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23038137462272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23037936135808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23037734809344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23037533482880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23037332156416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23037130829952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23036929503488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23036728177024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23036526850560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23036325524096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23036124197632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23035922871168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23035721544704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23035520218240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23035318891776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23035117565312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23034916238848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23034714912384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23047095277312 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23047088686848 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3750, r2: 1, n: 75, n_right: 1, m: 75, r1: 2)	 0.255082  	 1000      	 330.775   	 0         	 26.8149   	 12.3355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 75, r2: 2, n: 50, n_right: 75, m: 50, r1: 2) 	 0.17543   	 1000      	 641.28    	 0         	 51.7585   	 12.3899   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 76, m: 100, rA: 2, r: 76)                            	 0.169666  	 1000      	 680.868   	 0         	 54.941    	 12.3927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 75, n_right: 3750, m: 75, r1: 1)	 0.111667  	 1000      	 755.597   	 0         	 61.2538   	 12.3355   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 50, m: 152, rA: 1, r: 76)                            	 0.0963738 	 1000      	 910.986   	 0         	 72.8789   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 76, m: 76, rA: 2, r: 50)                             	 0.0898    	 1000      	 977.675   	 0         	 78.214    	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 281250, cols: 1)                                                                                                                                                                        	 0.000539257	 2         	 0         	 0         	 8.34482   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.703763  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.542179  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.357254  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.35584   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00363651	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000539257	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000446814	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000272669	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000176555	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000174486	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.378e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.7741e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23122917480320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23122694629376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23122493302912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23122291976448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23122090649984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23121889323520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23121687997056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23121486670592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23121285344128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23121084017664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23120882691200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23120681364736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23120480038272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23120278711808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23120077385344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23119876058880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23119674732416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23119473405952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23119272079488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23119070753024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23118869426560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23118668100096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23118466773632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23118265447168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23118064120704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23117862794240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23117661467776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23117460141312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23117258814848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23117057488384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23116856161920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23116654835456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23116453504896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23116252178432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23116050851968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23115849525504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23115648199040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23115446872576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23115245546112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23115044219648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23114842893184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23114641566720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23114440240256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23114238913792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23114037587328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23113836260864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23113634934400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23113433607936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23113232281472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23113030955008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23112829628544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23112628302080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23112426975616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23112225649152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23112024322688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23111822996224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23111621669760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23111420343296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23111219016832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23111017690368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23110816363904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23110615037440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23110413710976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23122811819776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23122805229312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3800, r2: 1, n: 76, n_right: 1, m: 76, r1: 2)	 0.276331  	 1000      	 317.718   	 0         	 25.4174   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 76, m: 100, rA: 2, r: 76)                            	 0.176627  	 1000      	 654.034   	 0         	 52.7757   	 12.3927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 76, r2: 2, n: 50, n_right: 76, m: 50, r1: 2) 	 0.163909  	 1000      	 704.782   	 0         	 56.8707   	 12.3927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 76, n_right: 3800, m: 76, r1: 1)	 0.111834  	 1000      	 785.049   	 0         	 62.8039   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 50, m: 152, rA: 1, r: 76)                            	 0.0981478 	 1000      	 894.52    	 0         	 71.5616   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 76, m: 76, rA: 2, r: 50)                             	 0.0876689 	 1000      	 1001.44   	 0         	 80.1153   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 288800, cols: 1)                                                                                                                                                                        	 0.000770415	 2         	 0         	 0         	 5.99781   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.716178  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.552073  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.364013  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.362444  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00329968	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000770415	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000495616	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0431e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.5481e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4091e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23028806219648 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23028608002048 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23028406675584 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23028205349120 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23028004022656 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23027802696192 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23027601369728 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23027400043264 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23027198716800 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23026997390336 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23026796063872 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23026594737408 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23026393410944 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23026192084480 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23025990758016 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23025789431552 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23025588105088 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23025386778624 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23025185452160 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23024984125696 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23024782799232 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23024581472768 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23024380146304 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23024178819840 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23023977493376 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23023776166912 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23023574840448 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23023373513984 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23023172187520 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23022970861056 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23022769534592 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23022568208128 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23022366877568 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23022165551104 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23021964224640 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23021762898176 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23021561571712 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23021360245248 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23021158918784 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23020957592320 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23020756265856 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23020554939392 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23020353612928 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23020152286464 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23019950960000 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23019749633536 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23019548307072 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23019346980608 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23019145654144 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23018944327680 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23018743001216 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23018541674752 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23018340348288 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23018139021824 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23017937695360 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23017736368896 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23017535042432 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23017333715968 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23017132389504 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23016931063040 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23016729736576 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23016528410112 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23016327083648 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23028700559104 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23028693968640 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3850, r2: 1, n: 77, n_right: 1, m: 77, r1: 2)	 0.262497  	 1000      	 347.838   	 0         	 27.4657   	 12.6645   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 77, r2: 2, n: 50, n_right: 77, m: 50, r1: 2) 	 0.172523  	 1000      	 687.328   	 0         	 55.45     	 12.3955   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 78, m: 100, rA: 2, r: 78)                            	 0.172172  	 1000      	 706.736   	 0         	 57.0035   	 12.3981   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 77, n_right: 3850, m: 77, r1: 1)	 0.115732  	 1000      	 788.951   	 0         	 62.2964   	 12.6645   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 50, m: 156, rA: 1, r: 78)                            	 0.101914  	 1000      	 931.282   	 0         	 72.5922   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 78, m: 78, rA: 2, r: 50)                             	 0.0942519 	 1000      	 1006.99   	 0         	 78.4933   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 296450, cols: 1)                                                                                                                                                                        	 0.000551787	 2         	 0         	 0         	 8.59607   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.718313  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.550752  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.369841  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.368337  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0036051 	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000551787	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000414623	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000284199	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000184726	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000178995	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.4421e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6191e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22432589891456 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22432412854272 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22432211527808 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22432010201344 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22431808874880 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22431607548416 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22431406221952 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22431204895488 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22431003569024 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22430802242560 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22430600916096 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22430399589632 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22430198263168 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22429996936704 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22429795610240 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22429594283776 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22429392957312 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22429191630848 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22428990304384 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22428788977920 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22428587651456 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22428386324992 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22428184998528 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22427983672064 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22427782345600 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22427581019136 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22427379692672 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22427178366208 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22426977039744 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22426775713280 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22426574386816 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22426373060352 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22426171729792 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22425970403328 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22425769076864 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22425567750400 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22425366423936 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22425165097472 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22424963771008 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22424762444544 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22424561118080 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22424359791616 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22424158465152 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22423957138688 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22423755812224 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22423554485760 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22423353159296 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22423151832832 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22422950506368 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22422749179904 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22422547853440 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22422346526976 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22422145200512 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22421943874048 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22421742547584 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22421541221120 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22421339894656 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22421138568192 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22420937241728 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22420735915264 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22420534588800 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22420333262336 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22420131935872 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22432484230912 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22432305645312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3900, r2: 1, n: 78, n_right: 1, m: 78, r1: 2)	 0.263878  	 1000      	 359.676   	 0         	 28.0363   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 78, m: 100, rA: 2, r: 78)                            	 0.192929  	 1000      	 630.699   	 0         	 50.8706   	 12.3981   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 78, r2: 2, n: 50, n_right: 78, m: 50, r1: 2) 	 0.177726  	 1000      	 684.648   	 0         	 55.222    	 12.3981   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 78, n_right: 3900, m: 78, r1: 1)	 0.120497  	 1000      	 787.659   	 0         	 61.397    	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 50, m: 156, rA: 1, r: 78)                            	 0.0944427 	 1000      	 1004.95   	 0         	 78.3347   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 78, m: 78, rA: 2, r: 50)                             	 0.0922522 	 1000      	 1028.81   	 0         	 80.1948   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 304200, cols: 1)                                                                                                                                                                        	 0.000579929	 2         	 0         	 0         	 8.39275   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.735961  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.562101  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.381179  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.379624  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00353998	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000579929	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000388113	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.1201e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.8851e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.299e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22557732108160 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22557503776768 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22557302450304 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22557101123840 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22556899797376 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22556698470912 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22556497144448 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22556295817984 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22556094491520 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22555893165056 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22555691838592 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22555490512128 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22555289185664 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22555087859200 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22554886532736 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22554685206272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22554483879808 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22554282553344 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22554081226880 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22553879900416 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22553678573952 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22553477247488 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22553275921024 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22553074594560 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22552873268096 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22552671941632 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22552470615168 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22552269288704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22552067962240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22551866635776 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22551665309312 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22551463982848 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22551262652288 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22551061325824 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22550859999360 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22550658672896 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22550457346432 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22550256019968 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22550054693504 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22549853367040 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22549652040576 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22549450714112 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22549249387648 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22549048061184 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22548846734720 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22548645408256 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22548444081792 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22548242755328 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22548041428864 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22547840102400 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22547638775936 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22547437449472 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22547236123008 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22547034796544 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22546833470080 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22546632143616 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22546430817152 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22546229490688 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22546028164224 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22545826837760 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22545625511296 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22545424184832 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22545222858368 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22557626447616 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22557619857152 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3950, r2: 1, n: 79, n_right: 1, m: 79, r1: 2)	 0.26428   	 1000      	 373.118   	 0         	 28.7159   	 12.9934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 79, r2: 2, n: 50, n_right: 79, m: 50, r1: 2) 	 0.184821  	 1000      	 675.356   	 0         	 54.4614   	 12.4007   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 80, m: 100, rA: 2, r: 80)                            	 0.182695  	 1000      	 700.623   	 0         	 56.4877   	 12.4031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 79, n_right: 3950, m: 79, r1: 1)	 0.124994  	 1000      	 788.902   	 0         	 60.7155   	 12.9934   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 80, m: 80, rA: 2, r: 50)                             	 0.101426  	 1000      	 1009.6    	 0         	 76.7296   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 50, m: 160, rA: 1, r: 80)                            	 0.0993869 	 1000      	 1030.32   	 0         	 78.304    	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 312050, cols: 1)                                                                                                                                                                        	 0.000580249	 2         	 0         	 0         	 8.60458   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.752177  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.574095  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.385083  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.383508  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00348029	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000580249	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000396623	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.00031862	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000215746	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000186786	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.4681e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4791e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23152690161536 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23152490964992 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23152289638528 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23152088312064 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23151886985600 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23151685659136 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23151484332672 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23151283006208 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23151081679744 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23150880353280 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23150679026816 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23150477700352 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23150276373888 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23150075047424 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23149873720960 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23149672394496 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23149471068032 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23149269741568 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23149068415104 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23148867088640 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23148665762176 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23148464435712 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23148263109248 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23148061782784 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23147860456320 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23147659129856 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23147457803392 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23147256476928 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23147055150464 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23146853824000 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23146652497536 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23146451171072 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23146249840512 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23146048514048 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23145847187584 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23145645861120 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23145444534656 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23145243208192 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23145041881728 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23144840555264 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23144639228800 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23144437902336 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23144236575872 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23144035249408 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23143833922944 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23143632596480 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23143431270016 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23143229943552 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23143028617088 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23142827290624 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23142625964160 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23142424637696 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23142223311232 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23142021984768 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23141820658304 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23141619331840 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23141418005376 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23141216678912 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23141015352448 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23140814025984 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23140612699520 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23140411373056 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23140210046592 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23152584500992 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23152577910528 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4000, r2: 1, n: 80, n_right: 1, m: 80, r1: 2)	 0.279748  	 1000      	 366.044   	 0         	 27.8194   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 80, m: 100, rA: 2, r: 80)                            	 0.195125  	 1000      	 655.991   	 0         	 52.8893   	 12.4031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 80, r2: 2, n: 50, n_right: 80, m: 50, r1: 2) 	 0.175751  	 1000      	 728.303   	 0         	 58.7194   	 12.4031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 80, n_right: 4000, m: 80, r1: 1)	 0.122822  	 1000      	 833.725   	 0         	 63.3631   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 50, m: 160, rA: 1, r: 80)                            	 0.103282  	 1000      	 991.461   	 0         	 75.351    	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 80, m: 80, rA: 2, r: 50)                             	 0.0972795 	 1000      	 1052.64   	 0         	 80.0004   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 320000, cols: 1)                                                                                                                                                                        	 0.000520237	 2         	 0         	 0         	 9.84167   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.762333  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.578321  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.397217  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.395686  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00343893	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000520237	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000407323	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.1701e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.5171e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.0461e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22400543532928 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22400334817280 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22400133490816 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22399932164352 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22399730837888 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22399529511424 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22399328184960 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22399126858496 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22398925532032 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22398724205568 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22398522879104 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22398321552640 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22398120226176 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22397918899712 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22397717573248 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22397516246784 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22397314920320 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22397113593856 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22396912267392 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22396710940928 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22396509614464 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22396308288000 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22396106961536 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22395905635072 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22395704308608 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22395502982144 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22395301655680 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22395100329216 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22394899002752 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22394697676288 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22394496349824 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22394295023360 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22394093692800 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22393892366336 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22393691039872 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22393489713408 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22393288386944 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22393087060480 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22392885734016 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22392684407552 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22392483081088 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22392281754624 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22392080428160 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22391879101696 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22391677775232 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22391476448768 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22391275122304 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22391073795840 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22390872469376 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22390671142912 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22390469816448 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22390268489984 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22390067163520 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22389865837056 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22389664510592 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22389463184128 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22389261857664 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22389060531200 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22388859204736 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22388657878272 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22388456551808 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22388255225344 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22388053898880 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22400437872384 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22400431281920 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4050, r2: 1, n: 81, n_right: 1, m: 81, r1: 2)	 0.294297  	 1000      	 361.159   	 0         	 27.1092   	 13.3224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 81, r2: 2, n: 50, n_right: 81, m: 50, r1: 2) 	 0.191141  	 1000      	 686.508   	 0         	 55.3392   	 12.4055   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 82, m: 100, rA: 2, r: 82)                            	 0.17802   	 1000      	 755.422   	 0         	 60.8832   	 12.4077   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 50, m: 164, rA: 1, r: 82)                            	 0.168353  	 1000      	 655.015   	 0         	 48.567    	 13.4868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 82, m: 82, rA: 2, r: 50)                             	 0.151706  	 1000      	 726.892   	 0         	 53.8963   	 13.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 81, n_right: 4050, m: 81, r1: 1)	 0.135107  	 1000      	 786.698   	 0         	 59.0509   	 13.3224   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 328050, cols: 1)                                                                                                                                                                        	 0.000528297	 2         	 0         	 0         	 9.93532   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.808366  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.620545  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.499662  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.498078  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00426317	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000528297	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000518687	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000450674	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000212386	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000199517	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.1463e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.7171e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22777466566528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22777285306368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22777083979904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22776882653440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22776681326976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22776480000512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22776278674048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22776077347584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22775876021120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22775674694656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22775473368192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22775272041728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22775070715264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22774869388800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22774668062336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22774466735872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22774265409408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22774064082944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22773862756480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22773661430016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22773460103552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22773258777088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22773057450624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22772856124160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22772654797696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22772453471232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22772252144768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22772050818304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22771849491840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22771648165376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22771446838912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22771245512448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22771044181888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22770842855424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22770641528960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22770440202496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22770238876032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22770037549568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22769836223104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22769634896640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22769433570176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22769232243712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22769030917248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22768829590784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22768628264320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22768426937856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22768225611392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22768024284928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22767822958464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22767621632000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22767420305536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22767218979072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22767017652608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22766816326144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22766614999680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22766413673216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22766212346752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22766011020288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22765809693824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22765608367360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22765407040896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22765205714432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22765004387968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22777360905984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22777180444416 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4100, r2: 1, n: 82, n_right: 1, m: 82, r1: 2)	 0.300519  	 1000      	 366.944   	 0         	 27.2076   	 13.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 82, r2: 2, n: 50, n_right: 82, m: 50, r1: 2) 	 0.196473  	 1000      	 684.471   	 0         	 55.1649   	 12.4077   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 82, m: 100, rA: 2, r: 82)                            	 0.178198  	 1000      	 754.667   	 0         	 60.8223   	 12.4077   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 50, m: 164, rA: 1, r: 82)                            	 0.168468  	 1000      	 654.567   	 0         	 48.5338   	 13.4868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 82, m: 82, rA: 2, r: 50)                             	 0.149902  	 1000      	 735.639   	 0         	 54.545    	 13.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 82, n_right: 4100, m: 82, r1: 1)	 0.139607  	 1000      	 789.888   	 0         	 58.5673   	 13.4868   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 336200, cols: 1)                                                                                                                                                                        	 0.00060903	 2         	 0         	 0         	 8.83241   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.82927   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.636598  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.498101  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.496567  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.004077  	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00060903	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000552118	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.9913e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.075e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.473e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23168850151296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23168664201216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23168462874752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23168261548288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23168060221824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23167858895360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23167657568896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23167456242432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23167254915968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23167053589504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23166852263040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23166650936576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23166449610112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23166248283648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23166046957184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23165845630720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23165644304256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23165442977792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23165241651328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23165040324864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23164838998400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23164637671936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23164436345472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23164235019008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23164033692544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23163832366080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23163631039616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23163429713152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23163228386688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23163027060224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23162825733760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23162624407296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23162423076736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23162221750272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23162020423808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23161819097344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23161617770880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23161416444416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23161215117952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23161013791488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23160812465024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23160611138560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23160409812096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23160208485632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23160007159168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23159805832704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23159604506240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23159403179776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23159201853312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23159000526848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23158799200384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23158597873920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23158396547456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23158195220992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23157993894528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23157792568064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23157591241600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23157389915136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23157188588672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23156987262208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23156785935744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23156584609280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23156383282816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23168744490752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23168737900288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4150, r2: 1, n: 83, n_right: 1, m: 83, r1: 2)	 0.292842  	 1000      	 390.509   	 0         	 28.6059   	 13.6513   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 83, r2: 2, n: 50, n_right: 83, m: 50, r1: 2) 	 0.195379  	 1000      	 705.194   	 0         	 56.825    	 12.4099   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 84, m: 100, rA: 2, r: 84)                            	 0.177389  	 1000      	 795.541   	 0         	 64.0942   	 12.412    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 50, m: 168, rA: 1, r: 84)                            	 0.161744  	 1000      	 732.891   	 0         	 53.0474   	 13.8158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 84, m: 84, rA: 2, r: 50)                             	 0.160523  	 1000      	 738.468   	 0         	 53.451    	 13.8158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 83, n_right: 4150, m: 83, r1: 1)	 0.146569  	 1000      	 780.229   	 0         	 57.1541   	 13.6513   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 344450, cols: 1)                                                                                                                                                                        	 0.000532017	 2         	 0         	 0         	 10.3591   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.837991  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.63479   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.501148  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.499655  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00435392	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000650401	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000532017	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000425384	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.00026278	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000221097	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.3873e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5851e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22907532494720 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22907342284800 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22907140958336 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22906939631872 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22906738305408 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22906536978944 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22906335652480 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22906134326016 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22905932999552 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22905731673088 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22905530346624 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22905329020160 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22905127693696 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22904926367232 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22904725040768 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22904523714304 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22904322387840 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22904121061376 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22903919734912 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22903718408448 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22903517081984 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22903315755520 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22903114429056 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22902913102592 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22902711776128 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22902510449664 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22902309123200 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22902107796736 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22901906470272 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22901705143808 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22901503817344 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22901302490880 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22901101160320 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22900899833856 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22900698507392 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22900497180928 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22900295854464 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22900094528000 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22899893201536 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22899691875072 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22899490548608 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22899289222144 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22899087895680 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22898886569216 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22898685242752 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22898483916288 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22898282589824 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22898081263360 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22897879936896 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22897678610432 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22897477283968 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22897275957504 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22897074631040 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22896873304576 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22896671978112 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22896470651648 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22896269325184 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22896067998720 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22895866672256 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22895665345792 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22895464019328 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22895262692864 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22895061366400 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22907426834176 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22907420243712 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4200, r2: 1, n: 84, n_right: 1, m: 84, r1: 2)	 0.299459  	 1000      	 395.85    	 0         	 28.652    	 13.8158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 84, r2: 2, n: 50, n_right: 84, m: 50, r1: 2) 	 0.185959  	 1000      	 758.879   	 0         	 61.1405   	 12.412    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 84, m: 100, rA: 2, r: 84)                            	 0.17879   	 1000      	 789.307   	 0         	 63.5921   	 12.412    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 50, m: 168, rA: 1, r: 84)                            	 0.163819  	 1000      	 723.606   	 0         	 52.3753   	 13.8158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 84, m: 84, rA: 2, r: 50)                             	 0.154371  	 1000      	 767.896   	 0         	 55.5811   	 13.8158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 84, n_right: 4200, m: 84, r1: 1)	 0.139515  	 1000      	 849.665   	 0         	 61.4995   	 13.8158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 352800, cols: 1)                                                                                                                                                                        	 0.000535317	 2         	 0         	 0         	 10.5448   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.825383  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.624933  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.498555  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.49698   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0032583 	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000535317	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000519777	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.2413e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.1811e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.9e-05   	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23387253245824 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23387036444672 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23386835118208 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23386633791744 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23386432465280 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23386231138816 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23386029812352 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23385828485888 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23385627159424 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23385425832960 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23385224506496 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23385023180032 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23384821853568 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23384620527104 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23384419200640 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23384217874176 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23384016547712 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23383815221248 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23383613894784 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23383412568320 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23383211241856 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23383009915392 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23382808588928 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23382607262464 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23382405936000 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23382204609536 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23382003283072 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23381801956608 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23381600630144 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23381399303680 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23381197977216 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23380996650752 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23380795320192 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23380593993728 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23380392667264 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23380191340800 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23379990014336 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23379788687872 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23379587361408 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23379386034944 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23379184708480 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23378983382016 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23378782055552 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23378580729088 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23378379402624 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23378178076160 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23377976749696 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23377775423232 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23377574096768 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23377372770304 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23377171443840 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23376970117376 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23376768790912 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23376567464448 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23376366137984 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23376164811520 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23375963485056 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23375762158592 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23375560832128 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23375359505664 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23375158179200 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23374956852736 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23374755526272 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23387147585280 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23387140994816 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4250, r2: 1, n: 85, n_right: 1, m: 85, r1: 2)	 0.30699   	 1000      	 400.095   	 0         	 28.6185   	 13.9803   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 85, r2: 2, n: 50, n_right: 85, m: 50, r1: 2) 	 0.194365  	 1000      	 743.448   	 0         	 59.8875   	 12.4141   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 86, m: 100, rA: 2, r: 86)                            	 0.185012  	 1000      	 799.514   	 0         	 64.3935   	 12.4161   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 50, m: 172, rA: 1, r: 86)                            	 0.184942  	 1000      	 687.845   	 0         	 48.6291   	 14.1447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 86, m: 86, rA: 2, r: 50)                             	 0.168867  	 1000      	 753.323   	 0         	 53.2582   	 14.1447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 85, n_right: 4250, m: 85, r1: 1)	 0.14896   	 1000      	 824.549   	 0         	 58.9795   	 13.9803   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 361250, cols: 1)                                                                                                                                                                        	 0.000544407	 2         	 0         	 0         	 10.6171   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.858484  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.650314  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.54035   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.538821  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00387031	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000608909	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000544407	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000434884	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000237708	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000216817	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.4223e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.0591e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22865049511808 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22864862373888 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22864661047424 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22864459720960 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22864258394496 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22864057068032 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22863855741568 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22863654415104 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22863453088640 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22863251762176 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22863050435712 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22862849109248 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22862647782784 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22862446456320 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22862245129856 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22862043803392 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22861842476928 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22861641150464 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22861439824000 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22861238497536 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22861037171072 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22860835844608 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22860634518144 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22860433191680 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22860231865216 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22860030538752 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22859829212288 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22859627885824 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22859426559360 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22859225232896 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22859023906432 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22858822579968 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22858621249408 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22858419922944 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22858218596480 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22858017270016 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22857815943552 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22857614617088 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22857413290624 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22857211964160 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22857010637696 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22856809311232 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22856607984768 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22856406658304 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22856205331840 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22856004005376 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22855802678912 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22855601352448 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22855400025984 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22855198699520 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22854997373056 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22854796046592 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22854594720128 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22854393393664 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22854192067200 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22853990740736 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22853789414272 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22853588087808 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22853386761344 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22853185434880 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22852984108416 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22852782781952 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22852581455488 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22864943851264 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22864937260800 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4300, r2: 1, n: 86, n_right: 1, m: 86, r1: 2)	 0.297688  	 1000      	 427.33    	 0         	 30.2112   	 14.1447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 86, r2: 2, n: 50, n_right: 86, m: 50, r1: 2) 	 0.199406  	 1000      	 741.805   	 0         	 59.7456   	 12.4161   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 86, m: 100, rA: 2, r: 86)                            	 0.182541  	 1000      	 810.338   	 0         	 65.2653   	 12.4161   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 50, m: 172, rA: 1, r: 86)                            	 0.171743  	 1000      	 740.709   	 0         	 52.3664   	 14.1447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 86, m: 86, rA: 2, r: 50)                             	 0.163439  	 1000      	 778.343   	 0         	 55.027    	 14.1447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 86, n_right: 4300, m: 86, r1: 1)	 0.148606  	 1000      	 856.031   	 0         	 60.5194   	 14.1447   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 369800, cols: 1)                                                                                                                                                                        	 0.000517026	 2         	 0         	 0         	 11.4439   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.859298  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.6457    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.519258  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.517722  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00351923	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000517026	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000511436	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.5213e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.2033e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6591e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22912863860608 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22912643885056 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22912442558592 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22912241232128 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22912039905664 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22911838579200 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22911637252736 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22911435926272 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22911234599808 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22911033273344 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22910831946880 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22910630620416 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22910429293952 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22910227967488 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22910026641024 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22909825314560 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22909623988096 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22909422661632 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22909221335168 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22909020008704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22908818682240 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22908617355776 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22908416029312 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22908214702848 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22908013376384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22907812049920 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22907610723456 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22907409396992 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22907208070528 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22907006744064 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22906805417600 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22906604091136 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22906402760576 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22906201434112 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22906000107648 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22905798781184 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22905597454720 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22905396128256 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22905194801792 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22904993475328 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22904792148864 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22904590822400 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22904389495936 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22904188169472 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22903986843008 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22903785516544 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22903584190080 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22903382863616 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22903181537152 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22902980210688 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22902778884224 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22902577557760 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22902376231296 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22902174904832 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22901973578368 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22901772251904 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22901570925440 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22901369598976 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22901168272512 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22900966946048 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22900765619584 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22900564293120 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22900362966656 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22912758200064 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22912751609600 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4350, r2: 1, n: 87, n_right: 1, m: 87, r1: 2)	 0.312372  	 1000      	 421.615   	 0         	 29.4646   	 14.3092   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 87, r2: 2, n: 50, n_right: 87, m: 50, r1: 2) 	 0.208893  	 1000      	 724.678   	 0         	 58.3572   	 12.418    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 50, m: 176, rA: 1, r: 88)                            	 0.18389   	 1000      	 741.174   	 0         	 51.2084   	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 88, m: 100, rA: 2, r: 88)                            	 0.183157  	 1000      	 845.614   	 0         	 68.0859   	 12.4198   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 88, m: 88, rA: 2, r: 50)                             	 0.165951  	 1000      	 821.294   	 0         	 56.744    	 14.4737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 87, n_right: 4350, m: 87, r1: 1)	 0.156181  	 1000      	 843.256   	 0         	 58.931    	 14.3092   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 378450, cols: 1)                                                                                                                                                                        	 0.000549497	 2         	 0         	 0         	 11.0195   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.907678  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.677445  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.534517  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.532997  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00416727	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000680172	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000549497	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000478805	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000300222	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000232857	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.7193e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.512e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23351713326976 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23351535855616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23351334529152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23351133202688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23350931876224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23350730549760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23350529223296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23350327896832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23350126570368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23349925243904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23349723917440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23349522590976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23349321264512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23349119938048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23348918611584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23348717285120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23348515958656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23348314632192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23348113305728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23347911979264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23347710652800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23347509326336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23347307999872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23347106673408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23346905346944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23346704020480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23346502694016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23346301367552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23346100041088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23345898714624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23345697388160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23345496061696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23345294731136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23345093404672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23344892078208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23344690751744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23344489425280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23344288098816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23344086772352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23343885445888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23343684119424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23343482792960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23343281466496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23343080140032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23342878813568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23342677487104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23342476160640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23342274834176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23342073507712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23341872181248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23341670854784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23341469528320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23341268201856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23341066875392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23340865548928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23340664222464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23340462896000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23340261569536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23340060243072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23339858916608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23339657590144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23339456263680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23339254937216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23351607666432 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23351429076736 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4400, r2: 1, n: 88, n_right: 1, m: 88, r1: 2)	 0.307514  	 1000      	 443.214   	 0         	 30.6221   	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 88, m: 100, rA: 2, r: 88)                            	 0.205879  	 1000      	 752.287   	 0         	 60.5715   	 12.4198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 88, r2: 2, n: 50, n_right: 88, m: 50, r1: 2) 	 0.200816  	 1000      	 771.252   	 0         	 62.0985   	 12.4198   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 50, m: 176, rA: 1, r: 88)                            	 0.172615  	 1000      	 789.584   	 0         	 54.5531   	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 88, m: 88, rA: 2, r: 50)                             	 0.165091  	 1000      	 825.57    	 0         	 57.0394   	 14.4737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 88, n_right: 4400, m: 88, r1: 1)	 0.154763  	 1000      	 880.662   	 0         	 60.8458   	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 387200, cols: 1)                                                                                                                                                                        	 0.000551938	 2         	 0         	 0         	 11.2244   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.89675   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.663094  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.545146  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.543585  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00366282	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000551938	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000474036	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.8093e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.183e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.586e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22676196480896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22676018030592 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22675816704128 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22675615377664 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22675414051200 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22675212724736 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22675011398272 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22674810071808 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22674608745344 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22674407418880 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22674206092416 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22674004765952 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22673803439488 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22673602113024 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22673400786560 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22673199460096 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22672998133632 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22672796807168 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22672595480704 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22672394154240 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22672192827776 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22671991501312 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22671790174848 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22671588848384 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22671387521920 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22671186195456 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22670984868992 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22670783542528 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22670582216064 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22670380889600 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22670179563136 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22669978236672 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22669776906112 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22669575579648 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22669374253184 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22669172926720 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22668971600256 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22668770273792 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22668568947328 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22668367620864 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22668166294400 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22667964967936 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22667763641472 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22667562315008 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22667360988544 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22667159662080 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22666958335616 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22666757009152 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22666555682688 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22666354356224 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22666153029760 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22665951703296 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22665750376832 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22665549050368 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22665347723904 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22665146397440 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22664945070976 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22664743744512 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22664542418048 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22664341091584 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22664139765120 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22663938438656 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22663737112192 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22676090820352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22675912050432 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4450, r2: 1, n: 89, n_right: 1, m: 89, r1: 2)	 0.322559  	 1000      	 437.11    	 0         	 29.861    	 14.6382   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 89, r2: 2, n: 50, n_right: 89, m: 50, r1: 2) 	 0.212142  	 1000      	 746.762   	 0         	 60.1181   	 12.4216   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 90, m: 100, rA: 2, r: 90)                            	 0.194499  	 1000      	 832.908   	 0         	 67.044    	 12.4233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 50, m: 180, rA: 1, r: 90)                            	 0.192647  	 1000      	 756.824   	 0         	 51.1276   	 14.8026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 90, m: 90, rA: 2, r: 50)                             	 0.18347   	 1000      	 794.679   	 0         	 53.685    	 14.8026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 89, n_right: 4450, m: 89, r1: 1)	 0.174697  	 1000      	 807.074   	 0         	 55.135    	 14.6382   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 396050, cols: 1)                                                                                                                                                                        	 0.00062151	 2         	 0         	 0         	 10.1958   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.94039   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.709399  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.572257  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.570617  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00385781	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00062151	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.00061764	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000474405	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000297858	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000242488	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000101363	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.8201e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22833046873984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22832851445760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22832650119296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22832448792832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22832247466368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22832046139904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22831844813440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22831643486976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22831442160512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22831240834048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22831039507584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22830838181120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22830636854656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22830435528192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22830234201728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22830032875264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22829831548800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22829630222336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22829428895872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22829227569408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22829026242944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22828824916480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22828623590016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22828422263552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22828220937088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22828019610624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22827818284160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22827616957696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22827415631232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22827214304768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22827012978304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22826811651840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22826610321280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22826408994816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22826207668352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22826006341888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22825805015424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22825603688960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22825402362496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22825201036032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22824999709568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22824798383104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22824597056640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22824395730176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22824194403712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22823993077248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22823791750784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22823590424320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22823389097856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22823187771392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22822986444928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22822785118464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22822583792000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22822382465536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22822181139072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22821979812608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22821778486144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22821577159680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22821375833216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22821174506752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22820973180288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22820771853824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22820570527360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22832941213440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22832934622976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4500, r2: 1, n: 90, n_right: 1, m: 90, r1: 2)	 0.32246   	 1000      	 452.149   	 0         	 30.5452   	 14.8026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 90, r2: 2, n: 50, n_right: 90, m: 50, r1: 2) 	 0.21079   	 1000      	 768.538   	 0         	 61.8625   	 12.4233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 90, m: 100, rA: 2, r: 90)                            	 0.192206  	 1000      	 842.847   	 0         	 67.844    	 12.4233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 50, m: 180, rA: 1, r: 90)                            	 0.191787  	 1000      	 760.217   	 0         	 51.3569   	 14.8026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 90, m: 90, rA: 2, r: 50)                             	 0.191387  	 1000      	 761.809   	 0         	 51.4644   	 14.8026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 90, n_right: 4500, m: 90, r1: 1)	 0.175498  	 1000      	 830.781   	 0         	 56.1239   	 14.8026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 405000, cols: 1)                                                                                                                                                                        	 0.000557888	 2         	 0         	 0         	 11.6152   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.952137  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.708747  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.577055  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.57538   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00376674	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000557888	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000480295	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000113154	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.2653e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6771e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22846377535360 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22846139000832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22845937674368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22845736347904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22845535021440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22845333694976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22845132368512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22844931042048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22844729715584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22844528389120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22844327062656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22844125736192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22843924409728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22843723083264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22843521756800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22843320430336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22843119103872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22842917777408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22842716450944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22842515124480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22842313798016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22842112471552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22841911145088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22841709818624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22841508492160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22841307165696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22841105839232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22840904512768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22840703186304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22840501859840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22840300533376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22840099206912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22839897876352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22839696549888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22839495223424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22839293896960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22839092570496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22838891244032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22838689917568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22838488591104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22838287264640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22838085938176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22837884611712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22837683285248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22837481958784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22837280632320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22837079305856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22836877979392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22836676652928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22836475326464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22836274000000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22836072673536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22835871347072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22835670020608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22835468694144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22835267367680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22835066041216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22834864714752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22834663388288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22834462061824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22834260735360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22834059408896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22833858082432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22846271874816 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22846265284352 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4550, r2: 1, n: 91, n_right: 1, m: 91, r1: 2)	 0.354558  	 1000      	 425.076   	 0         	 28.4007   	 14.9671   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 92, m: 100, rA: 2, r: 92)                            	 0.223628  	 1000      	 756.97    	 0         	 60.9153   	 12.4266   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 91, r2: 2, n: 50, n_right: 91, m: 50, r1: 2) 	 0.214594  	 1000      	 771.782   	 0         	 62.1153   	 12.425    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 50, m: 184, rA: 1, r: 92)                            	 0.196078  	 1000      	 794.264   	 0         	 52.4905   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 92, m: 92, rA: 2, r: 50)                             	 0.183492  	 1000      	 848.742   	 0         	 56.0908   	 15.1316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 91, n_right: 4550, m: 91, r1: 1)	 0.17872   	 1000      	 843.297   	 0         	 56.3433   	 14.9671   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 414050, cols: 1)                                                                                                                                                                        	 0.000596099	 2         	 0         	 0         	 11.1136   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.99717   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.747873  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.604803  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.603199  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00391011	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000657071	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000596099	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000520237	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.00028661	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000274518	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.7843e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.29e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22739687077760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22739503015936 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22739301689472 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22739100363008 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22738899036544 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22738697710080 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22738496383616 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22738295057152 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22738093730688 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22737892404224 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22737691077760 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22737489751296 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22737288424832 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22737087098368 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22736885771904 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22736684445440 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22736483118976 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22736281792512 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22736080466048 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22735879139584 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22735677813120 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22735476486656 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22735275160192 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22735073833728 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22734872507264 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22734671180800 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22734469854336 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22734268527872 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22734067201408 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22733865874944 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22733664548480 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22733463222016 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22733261891456 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22733060564992 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22732859238528 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22732657912064 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22732456585600 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22732255259136 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22732053932672 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22731852606208 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22731651279744 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22731449953280 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22731248626816 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22731047300352 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22730845973888 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22730644647424 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22730443320960 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22730241994496 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22730040668032 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22729839341568 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22729638015104 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22729436688640 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22729235362176 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22729034035712 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22728832709248 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22728631382784 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22728430056320 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22728228729856 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22728027403392 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22727826076928 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22727624750464 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22727423424000 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22727222097536 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22739581417216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22739574826752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4600, r2: 1, n: 92, n_right: 1, m: 92, r1: 2)	 0.350097  	 1000      	 444.841   	 0         	 29.3982   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 92, m: 100, rA: 2, r: 92)                            	 0.258     	 1000      	 656.125   	 0         	 52.8001   	 12.4266   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 92, r2: 2, n: 50, n_right: 92, m: 50, r1: 2) 	 0.215204  	 1000      	 786.603   	 0         	 63.3      	 12.4266   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 50, m: 184, rA: 1, r: 92)                            	 0.207775  	 1000      	 749.548   	 0         	 49.5353   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 92, m: 92, rA: 2, r: 50)                             	 0.18688   	 1000      	 833.358   	 0         	 55.0741   	 15.1316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 92, n_right: 4600, m: 92, r1: 1)	 0.174701  	 1000      	 891.45    	 0         	 58.9132   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 423200, cols: 1)                                                                                                                                                                        	 0.000587887	 2         	 0         	 0         	 11.5179   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.00058   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.740002  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.654229  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.652655  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0035995 	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000587887	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000511066	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.7963e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.2271e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2091e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23121355151232 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23121151125504 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23120949799040 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23120748472576 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23120547146112 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23120345819648 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23120144493184 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23119943166720 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23119741840256 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23119540513792 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23119339187328 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23119137860864 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23118936534400 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23118735207936 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23118533881472 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23118332555008 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23118131228544 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23117929902080 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23117728575616 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23117527249152 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23117325922688 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23117124596224 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23116923269760 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23116721943296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23116520616832 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23116319290368 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23116117963904 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23115916637440 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23115715310976 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23115513984512 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23115312658048 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23115111331584 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23114910001024 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23114708674560 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23114507348096 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23114306021632 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23114104695168 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23113903368704 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23113702042240 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23113500715776 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23113299389312 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23113098062848 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23112896736384 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23112695409920 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23112494083456 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23112292756992 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23112091430528 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23111890104064 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23111688777600 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23111487451136 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23111286124672 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23111084798208 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23110883471744 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23110682145280 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23110480818816 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23110279492352 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23110078165888 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23109876839424 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23109675512960 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23109474186496 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23109272860032 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23109071533568 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23108870207104 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23121249490688 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23121242900224 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4650, r2: 1, n: 93, n_right: 1, m: 93, r1: 2)	 0.35415   	 1000      	 454.247   	 0         	 29.697    	 15.2961   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 94, m: 100, rA: 2, r: 94)                            	 0.243401  	 1000      	 726.045   	 0         	 58.4122   	 12.4297   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 93, r2: 2, n: 50, n_right: 93, m: 50, r1: 2) 	 0.218046  	 1000      	 793.318   	 0         	 63.8323   	 12.4282   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 50, m: 188, rA: 1, r: 94)                            	 0.213765  	 1000      	 777.1     	 0         	 50.2635   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 94, m: 94, rA: 2, r: 50)                             	 0.194407  	 1000      	 854.478   	 0         	 55.2684   	 15.4605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 93, n_right: 4650, m: 93, r1: 1)	 0.180306  	 1000      	 892.214   	 0         	 58.3297   	 15.2961   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 432450, cols: 1)                                                                                                                                                                        	 0.000783805	 2         	 0         	 0         	 8.82771   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.01365   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.752502  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.653105  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.651573  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.004832  	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000783805	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000678592	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000508726	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000297338	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000262518	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.0053e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3171e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23113288791936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23113098061824 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23112896735360 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23112695408896 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23112494082432 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23112292755968 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23112091429504 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23111890103040 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23111688776576 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23111487450112 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23111286123648 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23111084797184 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23110883470720 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23110682144256 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23110480817792 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23110279491328 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23110078164864 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23109876838400 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23109675511936 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23109474185472 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23109272859008 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23109071532544 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23108870206080 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23108668879616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23108467553152 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23108266226688 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23108064900224 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23107863573760 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23107662247296 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23107460920832 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23107259594368 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23107058267904 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23106856937344 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23106655610880 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23106454284416 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23106252957952 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23106051631488 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23105850305024 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23105648978560 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23105447652096 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23105246325632 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23105044999168 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23104843672704 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23104642346240 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23104441019776 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23104239693312 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23104038366848 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23103837040384 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23103635713920 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23103434387456 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23103233060992 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23103031734528 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23102830408064 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23102629081600 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23102427755136 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23102226428672 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23102025102208 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23101823775744 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23101622449280 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23101421122816 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23101219796352 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23101018469888 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23100817143424 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23113183131392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23113176540928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4700, r2: 1, n: 94, n_right: 1, m: 94, r1: 2)	 0.357994  	 1000      	 464.021   	 0         	 30.0133   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 94, m: 100, rA: 2, r: 94)                            	 0.248023  	 1000      	 712.515   	 0         	 57.3237   	 12.4297   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 94, r2: 2, n: 50, n_right: 94, m: 50, r1: 2) 	 0.218034  	 1000      	 810.517   	 0         	 65.2082   	 12.4297   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 50, m: 188, rA: 1, r: 94)                            	 0.213386  	 1000      	 778.48    	 0         	 50.3527   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 94, m: 94, rA: 2, r: 50)                             	 0.194662  	 1000      	 853.36    	 0         	 55.196    	 15.4605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 94, n_right: 4700, m: 94, r1: 1)	 0.19004   	 1000      	 874.114   	 0         	 56.5385   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 441800, cols: 1)                                                                                                                                                                        	 0.000655441	 2         	 0         	 0         	 10.7848   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.03591   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.766068  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.657625  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.656071  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00373846	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000655441	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000497676	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000105203	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.2952e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.333e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22995169924992 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22994986461184 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22994785134720 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22994583808256 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22994382481792 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22994181155328 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22993979828864 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22993778502400 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22993577175936 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22993375849472 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22993174523008 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22992973196544 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22992771870080 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22992570543616 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22992369217152 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22992167890688 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22991966564224 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22991765237760 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22991563911296 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22991362584832 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22991161258368 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22990959931904 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22990758605440 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22990557278976 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22990355952512 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22990154626048 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22989953299584 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22989751973120 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22989550646656 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22989349320192 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22989147993728 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22988946667264 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22988745336704 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22988544010240 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22988342683776 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22988141357312 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22987940030848 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22987738704384 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22987537377920 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22987336051456 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22987134724992 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22986933398528 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22986732072064 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22986530745600 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22986329419136 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22986128092672 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22985926766208 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22985725439744 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22985524113280 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22985322786816 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22985121460352 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22984920133888 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22984718807424 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22984517480960 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22984316154496 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22984114828032 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22983913501568 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22983712175104 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22983510848640 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22983309522176 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22983108195712 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22982906869248 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22982705542784 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22995064264448 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22995057673984 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4750, r2: 1, n: 95, n_right: 1, m: 95, r1: 2)	 0.352094  	 1000      	 487.015   	 0         	 31.1689   	 15.625    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.257998  	 1000      	 744.501   	 0         	 59.8701   	 12.4353   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.243087  	 1000      	 774.367   	 0         	 48.0423   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 95, r2: 2, n: 50, n_right: 95, m: 50, r1: 2) 	 0.226772  	 1000      	 795.953   	 0         	 64.029    	 12.4311   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.222552  	 1000      	 845.816   	 0         	 52.4751   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 95, n_right: 4750, m: 95, r1: 1)	 0.191314  	 1000      	 896.303   	 0         	 57.3634   	 15.625    
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 451250, cols: 1)                                                                                                                                                                        	 0.000646011	 2         	 0         	 0         	 11.1763   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.04087   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.77018   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.725204  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.723638  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00429923	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.00176313	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000646011	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000520857	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.00032382	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000283379	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000116984	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.499e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23054284621696 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23054109370368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23053908043904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23053706717440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23053505390976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23053304064512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23053102738048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23052901411584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23052700085120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23052498758656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23052297432192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23052096105728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23051894779264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23051693452800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23051492126336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23051290799872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23051089473408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23050888146944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23050686820480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23050485494016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23050284167552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23050082841088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23049881514624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23049680188160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23049478861696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23049277535232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23049076208768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23048874882304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23048673555840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23048472229376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23048270902912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23048069576448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23047868245888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23047666919424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23047465592960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23047264266496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23047062940032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23046861613568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23046660287104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23046458960640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23046257634176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23046056307712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23045854981248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23045653654784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23045452328320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23045251001856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23045049675392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23044848348928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23044647022464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23044445696000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23044244369536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23044043043072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23043841716608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23043640390144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23043439063680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23043237737216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23043036410752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23042835084288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23042633757824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23042432431360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23042231104896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23042029778432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23041828451968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23054178961152 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23054000396032 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4800, r2: 1, n: 96, n_right: 1, m: 96, r1: 2)	 0.371775  	 1000      	 475.952   	 0         	 30.1436   	 15.7895   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.25735   	 1000      	 746.378   	 0         	 60.0211   	 12.4353   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.243971  	 1000      	 771.56    	 0         	 47.8682   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.227524  	 1000      	 827.336   	 0         	 51.3286   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 96, r2: 2, n: 50, n_right: 96, m: 50, r1: 2) 	 0.224174  	 1000      	 822.217   	 0         	 66.1342   	 12.4325   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 96, n_right: 4800, m: 96, r1: 1)	 0.188903  	 1000      	 936.711   	 0         	 59.325    	 15.7895   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 460800, cols: 1)                                                                                                                                                                        	 0.000707293	 2         	 0         	 0         	 10.424    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.06798   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.784852  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.730501  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.728844  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00401737	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000707293	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000684032	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000530347	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.00032229	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000293559	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000124424	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.322e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23413468243840 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23413276010496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23413074684032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23412873357568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23412672031104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23412470704640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23412269378176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23412068051712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23411866725248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23411665398784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23411464072320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23411262745856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23411061419392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23410860092928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23410658766464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23410457440000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23410256113536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23410054787072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23409853460608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23409652134144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23409450807680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23409249481216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23409048154752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23408846828288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23408645501824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23408444175360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23408242848896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23408041522432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23407840195968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23407638869504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23407437543040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23407236216576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23407034886016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23406833559552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23406632233088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23406430906624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23406229580160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23406028253696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23405826927232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23405625600768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23405424274304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23405222947840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23405021621376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23404820294912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23404618968448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23404417641984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23404216315520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23404014989056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23403813662592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23403612336128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23403411009664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23403209683200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23403008356736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23402807030272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23402605703808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23402404377344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23402203050880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23402001724416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23401800397952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23401599071488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23401397745024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23401196418560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23400995092096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23413362583296 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23413355992832 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4850, r2: 1, n: 97, n_right: 1, m: 97, r1: 2)	 0.38335   	 1000      	 476.157   	 0         	 29.8457   	 15.9539   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.257122  	 1000      	 732.099   	 0         	 45.42     	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.25445   	 1000      	 754.882   	 0         	 60.705    	 12.4353   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 97, r2: 2, n: 50, n_right: 97, m: 50, r1: 2) 	 0.228353  	 1000      	 824.076   	 0         	 66.2764   	 12.4339   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.218428  	 1000      	 861.786   	 0         	 53.4659   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 97, n_right: 4850, m: 97, r1: 1)	 0.215234  	 1000      	 848.076   	 0         	 53.1577   	 15.9539   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 470450, cols: 1)                                                                                                                                                                        	 0.000702622	 2         	 0         	 0         	 10.713    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.11419   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.826936  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.731587  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.73      	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00408308	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000750554	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000702622	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000603769	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000339812	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000318491	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000112503	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.345e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22746932348800 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22746750773248 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22746549446784 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22746348120320 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22746146793856 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22745945467392 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22745744140928 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22745542814464 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22745341488000 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22745140161536 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22744938835072 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22744737508608 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22744536182144 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22744334855680 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22744133529216 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22743932202752 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22743730876288 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22743529549824 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22743328223360 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22743126896896 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22742925570432 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22742724243968 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22742522917504 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22742321591040 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22742120264576 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22741918938112 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22741717611648 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22741516285184 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22741314958720 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22741113632256 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22740912305792 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22740710979328 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22740509648768 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22740308322304 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22740106995840 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22739905669376 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22739704342912 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22739503016448 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22739301689984 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22739100363520 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22738899037056 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22738697710592 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22738496384128 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22738295057664 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22738093731200 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22737892404736 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22737691078272 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22737489751808 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22737288425344 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22737087098880 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22736885772416 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22736684445952 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22736483119488 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22736281793024 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22736080466560 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22735879140096 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22735677813632 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22735476487168 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22735275160704 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22735073834240 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22734872507776 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22734671181312 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22734469854848 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22746826688256 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22746820097792 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4900, r2: 1, n: 98, n_right: 1, m: 98, r1: 2)	 0.393984  	 1000      	 477.782   	 0         	 29.642    	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.250205  	 1000      	 767.69    	 0         	 61.7349   	 12.4353   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.245305  	 1000      	 767.365   	 0         	 47.6079   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 98, r2: 2, n: 50, n_right: 98, m: 50, r1: 2) 	 0.232964  	 1000      	 824.505   	 0         	 66.3038   	 12.4353   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.225562  	 1000      	 834.53    	 0         	 51.7749   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 98, n_right: 4900, m: 98, r1: 1)	 0.210584  	 1000      	 893.886   	 0         	 55.4574   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 480200, cols: 1)                                                                                                                                                                        	 0.000681082	 2         	 0         	 0         	 11.2809   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.1302    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.837532  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.722699  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.721072  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00371281	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000681082	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000549588	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.5313e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.2873e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.288e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23403557058432 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23403343898624 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23403142572160 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23402941245696 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23402739919232 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23402538592768 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23402337266304 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23402135939840 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23401934613376 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23401733286912 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23401531960448 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23401330633984 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23401129307520 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23400927981056 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23400726654592 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23400525328128 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23400324001664 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23400122675200 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23399921348736 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23399720022272 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23399518695808 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23399317369344 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23399116042880 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23398914716416 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23398713389952 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23398512063488 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23398310737024 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23398109410560 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23397908084096 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23397706757632 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23397505431168 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23397304104704 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23397102774144 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23396901447680 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23396700121216 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23396498794752 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23396297468288 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23396096141824 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23395894815360 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23395693488896 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23395492162432 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23395290835968 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23395089509504 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23394888183040 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23394686856576 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23394485530112 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23394284203648 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23394082877184 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23393881550720 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23393680224256 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23393478897792 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23393277571328 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23393076244864 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23392874918400 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23392673591936 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23392472265472 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23392270939008 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23392069612544 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23391868286080 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23391666959616 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23391465633152 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23391264306688 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23391062980224 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23403451397888 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23403444807424 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4950, r2: 1, n: 99, n_right: 1, m: 99, r1: 2)	 0.403708  	 1000      	 480.694   	 0         	 29.5214   	 16.2829   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 100, m: 100, rA: 2, r: 100)                          	 0.25055   	 1000      	 798.244   	 0         	 64.1788   	 12.4378   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 100, m: 100, rA: 2, r: 50)                          	 0.243492  	 1000      	 821.383   	 0         	 49.9401   	 16.4474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 99, r2: 2, n: 50, n_right: 99, m: 50, r1: 2) 	 0.237008  	 1000      	 827.062   	 0         	 66.5025   	 12.4366   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 50, m: 200, rA: 1, r: 100)                          	 0.218105  	 1000      	 916.988   	 0         	 55.7529   	 16.4474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 99, n_right: 4950, m: 99, r1: 1)	 0.215603  	 1000      	 900.079   	 0         	 55.2776   	 16.2829   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 490050, cols: 1)                                                                                                                                                                        	 0.000667281	 2         	 0         	 0         	 11.7504   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.15573   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.856319  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.713808  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.712147  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00463213	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000667281	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000653601	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000540597	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000333601	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000317211	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000103073	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.1351e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22440681748352 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22440465917952 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22440264591488 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22440063265024 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22439861938560 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22439660612096 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22439459285632 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22439257959168 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22439056632704 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22438855306240 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22438653979776 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22438452653312 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22438251326848 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22438050000384 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22437848673920 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22437647347456 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22437446020992 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22437244694528 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22437043368064 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22436842041600 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22436640715136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22436439388672 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22436238062208 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22436036735744 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22435835409280 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22435634082816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22435432756352 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22435231429888 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22435030103424 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22434828776960 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22434627450496 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22434426124032 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22434224793472 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22434023467008 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22433822140544 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22433620814080 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22433419487616 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22433218161152 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22433016834688 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22432815508224 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22432614181760 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22432412855296 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22432211528832 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22432010202368 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22431808875904 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22431607549440 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22431406222976 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22431204896512 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22431003570048 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22430802243584 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22430600917120 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22430399590656 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22430198264192 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22429996937728 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22429795611264 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22429594284800 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22429392958336 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22429191631872 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22428990305408 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22428788978944 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22428587652480 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22428386326016 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22428184999552 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22440576087808 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22440569497344 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                                 	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 5000, r2: 1, n: 100, n_right: 1, m: 100, r1: 2)	 0.415156  	 1000      	 481.747   	 0         	 29.2902   	 16.4474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 100, m: 100, rA: 2, r: 100)                            	 0.254177  	 1000      	 786.852   	 0         	 63.2629   	 12.4378   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 100, m: 100, rA: 2, r: 50)                            	 0.250913  	 1000      	 797.089   	 0         	 48.463    	 16.4474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 100, r2: 2, n: 50, n_right: 100, m: 50, r1: 2) 	 0.230782  	 1000      	 866.619   	 0         	 69.6762   	 12.4378   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 50, m: 200, rA: 1, r: 100)                            	 0.219194  	 1000      	 912.435   	 0         	 55.4761   	 16.4474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 100, n_right: 5000, m: 100, r1: 1)	 0.215559  	 1000      	 927.822   	 0         	 56.4116   	 16.4474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 500000, cols: 1)                                                                                                                                                                          	 0.000717813	 2         	 0         	 0         	 11.145    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.16939   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.861496  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.726027  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.724284  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00383532	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000717813	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000554588	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000104863	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.3212e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2581e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
