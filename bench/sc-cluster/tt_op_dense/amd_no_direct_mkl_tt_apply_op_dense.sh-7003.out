[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22982365603712 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22982168668160 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22981967341696 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22981766015232 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22981564688768 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22981363362304 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22981162035840 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22980960709376 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22980759382912 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22980558056448 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22980356729984 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22980155403520 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22979954077056 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22979752750592 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22979551424128 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22979350097664 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22979148771200 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22978947444736 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22978746118272 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22978544791808 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22978343465344 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22978142138880 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22977940812416 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22977739485952 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22977538159488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22977336833024 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22977135506560 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22976934180096 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22976732853632 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22976531527168 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22976330200704 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22976128874240 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22975927543680 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22975726217216 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22975524890752 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22975323564288 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22975122237824 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22974920911360 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22974719584896 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22974518258432 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22974316931968 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22974115605504 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22973914279040 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22973712952576 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22973511626112 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22973310299648 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22973108973184 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22972907646720 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22972706320256 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22972504993792 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22972303667328 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22972102340864 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22971901014400 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22971699687936 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22971498361472 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22971297035008 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22971095708544 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22970894382080 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22970693055616 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22970491729152 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22970290402688 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22970089076224 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22969887749760 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22982259943168 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22982253352704 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 50, r2: 1, n: 1, n_right: 1, m: 1, r1: 2) 	 0.0036557 	 1000      	 0.054709  	 0         	 0.332631  	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 1, m: 100, rA: 2, r: 1)                           	 0.00297972	 1000      	 6.71205   	 0         	 27.3852   	 0.245098  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 1, xn: 50, m: 2, rA: 1, r: 1)                             	 0.00296605	 1000      	 0.0674298 	 0         	 0.409973  	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 1, xn: 1, m: 1, rA: 2, r: 50)                             	 0.00296453	 1000      	 0.0674644 	 0         	 0.410183  	 0.164474  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 50, n_right: 1, m: 50, r1: 2)	 0.00107489	 1000      	 18.6065   	 0         	 75.9147   	 0.245098  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 1, n_right: 50, m: 1, r1: 1) 	 0.000251007	 1000      	 0.796791  	 0         	 4.84449   	 0.164474  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 50, cols: 1)                                                                                                                                                                         	 3.1611e-05	 2         	 0         	 0         	 0.0253076 	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0101169 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.00891029	 3000      
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.00549112	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0049816 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000220809	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000105203	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.3851e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.1611e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.849e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.233e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22418610173824 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22418387101696 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22418185775232 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22417984448768 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22417783122304 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22417581795840 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22417380469376 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22417179142912 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22416977816448 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22416776489984 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22416575163520 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22416373837056 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22416172510592 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22415971184128 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22415769857664 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22415568531200 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22415367204736 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22415165878272 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22414964551808 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22414763225344 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22414561898880 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22414360572416 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22414159245952 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22413957919488 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22413756593024 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22413555266560 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22413353940096 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22413152613632 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22412951287168 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22412749960704 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22412548634240 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22412347307776 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22412145977216 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22411944650752 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22411743324288 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22411541997824 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22411340671360 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22411139344896 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22410938018432 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22410736691968 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22410535365504 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22410334039040 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22410132712576 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22409931386112 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22409730059648 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22409528733184 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22409327406720 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22409126080256 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22408924753792 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22408723427328 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22408522100864 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22408320774400 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22408119447936 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22407918121472 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22407716795008 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22407515468544 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22407314142080 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22407112815616 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22406911489152 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22406710162688 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22406508836224 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22406307509760 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22406106183296 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22418504513280 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22418497922816 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 100, r2: 1, n: 2, n_right: 1, m: 2, r1: 2)	 0.0071402 	 1000      	 0.224083  	 0         	 0.681214  	 0.328947  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2, r2: 2, n: 50, n_right: 2, m: 50, r1: 2)	 0.00635707	 1000      	 12.5844   	 0         	 13.5912   	 0.925926  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 2, m: 100, rA: 2, r: 2)                           	 0.00397528	 1000      	 20.1244   	 0         	 21.7343   	 0.925926  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 2, xn: 50, m: 4, rA: 1, r: 2)                             	 0.00351804	 1000      	 0.454799  	 0         	 1.38259   	 0.328947  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 2, xn: 2, m: 2, rA: 2, r: 50)                             	 0.00329948	 1000      	 0.484925  	 0         	 1.47417   	 0.328947  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 2, n_right: 100, m: 2, r1: 1)	 0.000757578	 1000      	 2.11199   	 0         	 6.42046   	 0.328947  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 200, cols: 1)                                                                                                                                                                        	 4.7481e-05	 2         	 0         	 0         	 0.0673954 	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0147994 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0142548 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0121518 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0107928 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000246415	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000113153	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.7812e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 4.7481e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8561e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.83e-06  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23060535519104 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23060350494720 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23060149168256 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23059947841792 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23059746515328 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23059545188864 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23059343862400 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23059142535936 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23058941209472 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23058739883008 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23058538556544 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23058337230080 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23058135903616 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23057934577152 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23057733250688 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23057531924224 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23057330597760 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23057129271296 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23056927944832 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23056726618368 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23056525291904 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23056323965440 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23056122638976 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23055921312512 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23055719986048 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23055518659584 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23055317333120 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23055116006656 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23054914680192 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23054713353728 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23054512027264 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23054310700800 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23054109370240 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23053908043776 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23053706717312 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23053505390848 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23053304064384 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23053102737920 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23052901411456 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23052700084992 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23052498758528 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23052297432064 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23052096105600 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23051894779136 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23051693452672 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23051492126208 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23051290799744 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23051089473280 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23050888146816 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23050686820352 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23050485493888 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23050284167424 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23050082840960 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23049881514496 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23049680188032 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23049478861568 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23049277535104 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23049076208640 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23048874882176 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23048673555712 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23048472229248 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23048270902784 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23048069576320 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23060429858560 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23060423268096 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3, r2: 2, n: 50, n_right: 3, m: 50, r1: 2)	 0.0091835 	 1000      	 19.6004   	 0         	 10.2793   	 1.90678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 150, r2: 1, n: 3, n_right: 1, m: 3, r1: 2)	 0.00740164	 1000      	 0.729568  	 0         	 1.47859   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 3, m: 100, rA: 2, r: 3)                           	 0.00647431	 1000      	 27.8022   	 0         	 14.5807   	 1.90678   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 3, xn: 3, m: 3, rA: 2, r: 50)                             	 0.003471  	 1000      	 1.55575   	 0         	 3.15298   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 3, xn: 50, m: 6, rA: 1, r: 3)                             	 0.00295595	 1000      	 1.82682   	 0         	 3.70236   	 0.493421  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 3, n_right: 150, m: 3, r1: 1)	 0.00103094	 1000      	 5.23796   	 0         	 10.6156   	 0.493421  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 450, cols: 1)                                                                                                                                                                        	 3.4371e-05	 2         	 0         	 0         	 0.209479  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.018121  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0176161 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0141451 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0129013 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000229696	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000137454	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.5952e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 3.4371e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8331e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.108e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23455651465088 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23455420377088 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23455219050624 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23455017724160 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23454816397696 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23454615071232 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23454413744768 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23454212418304 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23454011091840 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23453809765376 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23453608438912 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23453407112448 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23453205785984 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23453004459520 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23452803133056 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23452601806592 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23452400480128 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23452199153664 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23451997827200 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23451796500736 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23451595174272 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23451393847808 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23451192521344 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23450991194880 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23450789868416 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23450588541952 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23450387215488 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23450185889024 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23449984562560 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23449783236096 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23449581909632 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23449380583168 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23449179252608 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23448977926144 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23448776599680 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23448575273216 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23448373946752 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23448172620288 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23447971293824 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23447769967360 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23447568640896 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23447367314432 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23447165987968 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23446964661504 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23446763335040 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23446562008576 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23446360682112 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23446159355648 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23445958029184 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23445756702720 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23445555376256 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23445354049792 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23445152723328 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23444951396864 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23444750070400 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23444548743936 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23444347417472 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23444146091008 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23443944764544 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23443743438080 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23443542111616 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23443340785152 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23443139458688 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23455545804544 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23455539214080 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4, r2: 2, n: 50, n_right: 4, m: 50, r1: 2)	 0.011069  	 1000      	 28.9095   	 0         	 9.54015   	 3.0303    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 4, m: 100, rA: 2, r: 4)                           	 0.0103236 	 1000      	 30.9968   	 0         	 10.2289   	 3.0303    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 200, r2: 1, n: 4, n_right: 1, m: 4, r1: 2)	 0.00811931	 1000      	 1.57649   	 0         	 2.39626   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 4, xn: 4, m: 4, rA: 2, r: 50)                             	 0.00307544	 1000      	 4.16201   	 0         	 6.32626   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 4, xn: 50, m: 8, rA: 1, r: 4)                             	 0.00301695	 1000      	 4.24269   	 0         	 6.44889   	 0.657895  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 4, n_right: 200, m: 4, r1: 1)	 0.000931128	 1000      	 13.7468   	 0         	 20.8951   	 0.657895  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 800, cols: 1)                                                                                                                                                                        	 4.6851e-05	 2         	 0         	 0         	 0.273207  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0206593 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0201195 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0177413 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.016416  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000230906	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000138534	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.0281e-05	 1         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 4.6851e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8563e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1481e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22401299380096 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22401073014784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22400871688320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22400670361856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22400469035392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22400267708928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22400066382464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22399865056000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22399663729536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22399462403072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22399261076608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22399059750144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22398858423680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22398657097216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22398455770752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22398254444288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22398053117824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22397851791360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22397650464896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22397449138432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22397247811968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22397046485504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22396845159040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22396643832576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22396442506112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22396241179648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22396039853184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22395838526720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22395637200256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22395435873792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22395234547328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22395033220864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22394831890304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22394630563840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22394429237376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22394227910912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22394026584448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22393825257984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22393623931520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22393422605056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22393221278592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22393019952128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22392818625664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22392617299200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22392415972736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22392214646272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22392013319808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22391811993344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22391610666880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22391409340416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22391208013952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22391006687488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22390805361024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22390604034560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22390402708096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22390201381632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22390000055168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22389798728704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22389597402240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22389396075776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22389194749312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22388993422848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22388792096384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22401193719552 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22401187129088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 5, r2: 2, n: 50, n_right: 5, m: 50, r1: 2)	 0.021221  	 1000      	 23.5615   	 0         	 5.65477   	 4.16667   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 5, m: 100, rA: 2, r: 5)                           	 0.0156766 	 1000      	 31.8946   	 0         	 7.6547    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 250, r2: 1, n: 5, n_right: 1, m: 5, r1: 2)	 0.00844075	 1000      	 2.96182   	 0         	 3.60157   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 5, xn: 50, m: 10, rA: 1, r: 5)                            	 0.0049594 	 1000      	 5.04093   	 0         	 6.12977   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 5, xn: 5, m: 5, rA: 2, r: 50)                             	 0.00439131	 1000      	 5.69306   	 0         	 6.92277   	 0.822368  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 5, n_right: 250, m: 5, r1: 1)	 0.0019936 	 1000      	 12.5401   	 0         	 15.2488   	 0.822368  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1250, cols: 1)                                                                                                                                                                       	 0.000136304	 2         	 0         	 0         	 0.146731  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.032212  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0316554 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0262702 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0250274 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000233448	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000136304	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000112934	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.4891e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.854e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.275e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23374313318272 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23374084433920 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23373883107456 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23373681780992 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23373480454528 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23373279128064 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23373077801600 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23372876475136 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23372675148672 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23372473822208 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23372272495744 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23372071169280 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23371869842816 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23371668516352 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23371467189888 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23371265863424 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23371064536960 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23370863210496 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23370661884032 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23370460557568 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23370259231104 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23370057904640 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23369856578176 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23369655251712 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23369453925248 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23369252598784 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23369051272320 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23368849945856 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23368648619392 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23368447292928 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23368245966464 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23368044640000 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23367843309440 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23367641982976 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23367440656512 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23367239330048 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23367038003584 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23366836677120 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23366635350656 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23366434024192 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23366232697728 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23366031371264 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23365830044800 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23365628718336 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23365427391872 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23365226065408 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23365024738944 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23364823412480 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23364622086016 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23364420759552 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23364219433088 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23364018106624 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23363816780160 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23363615453696 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23363414127232 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23363212800768 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23363011474304 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23362810147840 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23362608821376 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23362407494912 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23362206168448 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23362004841984 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23361803515520 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23374207657728 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23374201067264 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 6, r2: 2, n: 50, n_right: 6, m: 50, r1: 2)	 0.0256619 	 1000      	 28.0572   	 0         	 5.36204   	 5.23256   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 6, m: 100, rA: 2, r: 6)                           	 0.0212981 	 1000      	 33.8059   	 0         	 6.46068   	 5.23256   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 300, r2: 1, n: 6, n_right: 1, m: 6, r1: 2)	 0.00893689	 1000      	 4.8339    	 0         	 4.89835   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 6, xn: 6, m: 6, rA: 2, r: 50)                             	 0.00396804	 1000      	 10.887    	 0         	 11.0321   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 6, xn: 50, m: 12, rA: 1, r: 6)                            	 0.00321067	 1000      	 13.4551   	 0         	 13.6345   	 0.986842  
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 6, n_right: 300, m: 6, r1: 1)	 0.00260776	 1000      	 16.566    	 0         	 16.7868   	 0.986842  
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 1800, cols: 1)                                                                                                                                                                       	 0.000121904	 2         	 0         	 0         	 0.236251  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0377768 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0372065 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0297579 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0284768 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000223489	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000137355	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000121904	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.0141e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.868e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.178e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23156609525632 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23156383279104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23156181952640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23155980626176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23155779299712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23155577973248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23155376646784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23155175320320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23154973993856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23154772667392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23154571340928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23154370014464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23154168688000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23153967361536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23153766035072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23153564708608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23153363382144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23153162055680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23152960729216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23152759402752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23152558076288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23152356749824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23152155423360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23151954096896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23151752770432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23151551443968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23151350117504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23151148791040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23150947464576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23150746138112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23150544811648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23150343485184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23150142154624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23149940828160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23149739501696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23149538175232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23149336848768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23149135522304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23148934195840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23148732869376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23148531542912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23148330216448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23148128889984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23147927563520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23147726237056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23147524910592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23147323584128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23147122257664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23146920931200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23146719604736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23146518278272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23146316951808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23146115625344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23145914298880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23145712972416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23145511645952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23145310319488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23145108993024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23144907666560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23144706340096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23144505013632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23144303687168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23144102360704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23156503865088 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23156497274624 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 7, m: 100, rA: 2, r: 7)                           	 0.0283474 	 1000      	 34.5711   	 0         	 5.58782   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 7, r2: 2, n: 50, n_right: 7, m: 50, r1: 2)	 0.0268373 	 1000      	 36.5164   	 0         	 5.90224   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 350, r2: 1, n: 7, n_right: 1, m: 7, r1: 2)	 0.00986163	 1000      	 6.95626   	 0         	 6.04201   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 7, xn: 7, m: 7, rA: 2, r: 50)                             	 0.00447337	 1000      	 15.3352   	 0         	 13.3197   	 1.15132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 7, n_right: 350, m: 7, r1: 1)	 0.00392291	 1000      	 17.487    	 0         	 15.1887   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 7, xn: 50, m: 14, rA: 1, r: 7)                            	 0.00347523	 1000      	 19.7397   	 0         	 17.1453   	 1.15132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 2450, cols: 1)                                                                                                                                                                       	 0.000158455	 2         	 0         	 0         	 0.247389  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0412731 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0406218 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0375193 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.036296  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000227436	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000158455	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000127034	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8451e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.4291e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1261e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22996471453568 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22996261529600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22996060203136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22995858876672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22995657550208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22995456223744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22995254897280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22995053570816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22994852244352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22994650917888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22994449591424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22994248264960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22994046938496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22993845612032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22993644285568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22993442959104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22993241632640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22993040306176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22992838979712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22992637653248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22992436326784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22992235000320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22992033673856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22991832347392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22991631020928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22991429694464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22991228368000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22991027041536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22990825715072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22990624388608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22990423062144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22990221735680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22990020405120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22989819078656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22989617752192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22989416425728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22989215099264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22989013772800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22988812446336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22988611119872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22988409793408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22988208466944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22988007140480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22987805814016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22987604487552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22987403161088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22987201834624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22987000508160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22986799181696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22986597855232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22986396528768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22986195202304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22985993875840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22985792549376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22985591222912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22985389896448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22985188569984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22984987243520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22984785917056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22984584590592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22984383264128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22984181937664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22983980611200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22996365793024 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22996359202560 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 8, m: 100, rA: 2, r: 8)                           	 0.036321  	 1000      	 35.2413   	 0         	 5.02189   	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 8, r2: 2, n: 50, n_right: 8, m: 50, r1: 2)	 0.0314488 	 1000      	 40.701    	 0         	 5.7999    	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 400, r2: 1, n: 8, n_right: 1, m: 8, r1: 2)	 0.0112832 	 1000      	 9.07547   	 0         	 6.89736   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 8, xn: 8, m: 8, rA: 2, r: 50)                             	 0.00435134	 1000      	 23.533    	 0         	 17.8851   	 1.31579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 8, n_right: 400, m: 8, r1: 1)	 0.00397675	 1000      	 25.7497   	 0         	 19.5698   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 8, xn: 50, m: 16, rA: 1, r: 8)                            	 0.00303098	 1000      	 33.7845   	 0         	 25.6762   	 1.31579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 3200, cols: 1)                                                                                                                                                                       	 0.000202686	 2         	 0         	 0         	 0.252607  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0474088 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0467087 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0449452 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0437033 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000227136	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000202686	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000137274	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.838e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.9491e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2811e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23432846641024 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23432670472192 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23432469145728 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23432267819264 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23432066492800 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23431865166336 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23431663839872 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23431462513408 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23431261186944 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23431059860480 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23430858534016 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23430657207552 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23430455881088 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23430254554624 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23430053228160 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23429851901696 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23429650575232 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23429449248768 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23429247922304 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23429046595840 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23428845269376 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23428643942912 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23428442616448 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23428241289984 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23428039963520 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23427838637056 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23427637310592 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23427435984128 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23427234657664 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23427033331200 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23426832004736 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23426630678272 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23426429347712 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23426228021248 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23426026694784 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23425825368320 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23425624041856 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23425422715392 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23425221388928 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23425020062464 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23424818736000 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23424617409536 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23424416083072 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23424214756608 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23424013430144 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23423812103680 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23423610777216 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23423409450752 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23423208124288 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23423006797824 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23422805471360 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23422604144896 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23422402818432 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23422201491968 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23422000165504 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23421798839040 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23421597512576 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23421396186112 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23421194859648 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23420993533184 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23420792206720 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23420590880256 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23420389553792 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23432740980480 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23432562390784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                            	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 9, r2: 2, n: 50, n_right: 9, m: 50, r1: 2)	 0.125698  	 1000      	 12.8881   	 0         	 1.66749   	 7.72901   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 9, n_right: 450, m: 9, r1: 1)	 0.042421  	 1000      	 3.43698   	 0         	 2.32187   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 9, m: 100, rA: 2, r: 9)                           	 0.0385372 	 1000      	 42.0373   	 0         	 5.43889   	 7.72901   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 450, r2: 1, n: 9, n_right: 1, m: 9, r1: 2)	 0.0137534 	 1000      	 10.601    	 0         	 7.16158   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 9, xn: 9, m: 9, rA: 2, r: 50)                             	 0.00546613	 1000      	 26.6734   	 0         	 18.0193   	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 9, xn: 50, m: 18, rA: 1, r: 9)                            	 0.00424369	 1000      	 34.3569   	 0         	 23.21     	 1.48026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 4050, cols: 1)                                                                                                                                                                       	 0.000207746	 2         	 0         	 0         	 0.311919  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.182859  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.181872  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0495653 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0482471 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000322753	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000207746	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000123703	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.2632e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.3771e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.0211e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23252760545152 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23252550281216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23252348954752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23252147628288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23251946301824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23251744975360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23251543648896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23251342322432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23251140995968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23250939669504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23250738343040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23250537016576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23250335690112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23250134363648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23249933037184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23249731710720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23249530384256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23249329057792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23249127731328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23248926404864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23248725078400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23248523751936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23248322425472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23248121099008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23247919772544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23247718446080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23247517119616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23247315793152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23247114466688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23246913140224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23246711813760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23246510487296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23246309156736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23246107830272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23245906503808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23245705177344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23245503850880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23245302524416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23245101197952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23244899871488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23244698545024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23244497218560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23244295892096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23244094565632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23243893239168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23243691912704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23243490586240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23243289259776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23243087933312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23242886606848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23242685280384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23242483953920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23242282627456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23242081300992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23241879974528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23241678648064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23241477321600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23241275995136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23241074668672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23240873342208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23240672015744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23240470689280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23240269362816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23252654884608 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23252648294144 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 10, r2: 2, n: 50, n_right: 10, m: 50, r1: 2)	 0.0578091 	 1000      	 34.5966   	 0         	 4.1516    	 8.33333   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 10, m: 100, rA: 2, r: 10)                           	 0.0382213 	 1000      	 52.3269   	 0         	 6.27923   	 8.33333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 500, r2: 1, n: 10, n_right: 1, m: 10, r1: 2)	 0.0191376 	 1000      	 10.4507   	 0         	 6.354     	 1.64474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 10, n_right: 500, m: 10, r1: 1)	 0.0110939 	 1000      	 18.0279   	 0         	 10.961    	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 10, xn: 10, m: 10, rA: 2, r: 50)                            	 0.00570458	 1000      	 35.0596   	 0         	 21.3162   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 10, xn: 50, m: 20, rA: 1, r: 10)                            	 0.00415064	 1000      	 48.1854   	 0         	 29.2967   	 1.64474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 5000, cols: 1)                                                                                                                                                                         	 0.000192146	 2         	 0         	 0         	 0.41635   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.0890247 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.0880405 	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.049455  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0480765 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00027811	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000192146	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000106814	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8583e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.9961e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.012e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22377247844224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22377048041472 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22376846715008 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22376645388544 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22376444062080 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22376242735616 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22376041409152 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22375840082688 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22375638756224 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22375437429760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22375236103296 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22375034776832 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22374833450368 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22374632123904 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22374430797440 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22374229470976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22374028144512 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22373826818048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22373625491584 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22373424165120 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22373222838656 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22373021512192 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22372820185728 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22372618859264 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22372417532800 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22372216206336 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22372014879872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22371813553408 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22371612226944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22371410900480 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22371209574016 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22371008247552 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22370806916992 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22370605590528 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22370404264064 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22370202937600 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22370001611136 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22369800284672 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22369598958208 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22369397631744 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22369196305280 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22368994978816 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22368793652352 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22368592325888 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22368390999424 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22368189672960 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22367988346496 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22367787020032 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22367585693568 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22367384367104 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22367183040640 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22366981714176 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22366780387712 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22366579061248 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22366377734784 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22366176408320 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22365975081856 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22365773755392 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22365572428928 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22365371102464 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22365169776000 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22364968449536 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22364767123072 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22377142183680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22377135593216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 11, r2: 2, n: 50, n_right: 11, m: 50, r1: 2)	 0.0657364 	 1000      	 36.8137   	 0         	 4.16208   	 8.84503   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 11, m: 100, rA: 2, r: 11)                           	 0.0415426 	 1000      	 58.2535   	 0         	 6.58601   	 8.84503   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 550, r2: 1, n: 11, n_right: 1, m: 11, r1: 2)	 0.0235236 	 1000      	 11.3163   	 0         	 6.25482   	 1.80921   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 11, n_right: 550, m: 11, r1: 1)	 0.0134044 	 1000      	 19.8591   	 0         	 10.9767   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 11, xn: 11, m: 11, rA: 2, r: 50)                            	 0.00763943	 1000      	 34.8455   	 0         	 19.2601   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 11, xn: 50, m: 22, rA: 1, r: 11)                            	 0.00603595	 1000      	 44.1024   	 0         	 24.3766   	 1.80921   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 6050, cols: 1)                                                                                                                                                                         	 0.000209146	 2         	 0         	 0         	 0.462835  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.103668  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.102664  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0566775 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.055218  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000270598	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000209146	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000113064	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.823e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.8811e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.109e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22997882058624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22997670815744 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22997469489280 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22997268162816 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22997066836352 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22996865509888 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22996664183424 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22996462856960 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22996261530496 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22996060204032 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22995858877568 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22995657551104 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22995456224640 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22995254898176 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22995053571712 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22994852245248 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22994650918784 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22994449592320 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22994248265856 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22994046939392 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22993845612928 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22993644286464 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22993442960000 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22993241633536 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22993040307072 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22992838980608 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22992637654144 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22992436327680 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22992235001216 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22992033674752 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22991832348288 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22991631021824 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22991429691264 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22991228364800 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22991027038336 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22990825711872 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22990624385408 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22990423058944 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22990221732480 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22990020406016 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22989819079552 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22989617753088 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22989416426624 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22989215100160 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22989013773696 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22988812447232 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22988611120768 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22988409794304 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22988208467840 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22988007141376 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22987805814912 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22987604488448 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22987403161984 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22987201835520 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22987000509056 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22986799182592 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22986597856128 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22986396529664 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22986195203200 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22985993876736 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22985792550272 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22985591223808 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22985389897344 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22997776398080 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22997769807616 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 12, r2: 2, n: 50, n_right: 12, m: 50, r1: 2)	 0.0833722 	 1000      	 34.5439   	 0         	 3.72306   	 9.27835   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 12, m: 100, rA: 2, r: 12)                           	 0.0449073 	 1000      	 64.1321   	 0         	 6.91201   	 9.27835   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 600, r2: 1, n: 12, n_right: 1, m: 12, r1: 2)	 0.0296451 	 1000      	 11.6579   	 0         	 5.90668   	 1.97368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 12, n_right: 600, m: 12, r1: 1)	 0.0160891 	 1000      	 21.4804   	 0         	 10.8834   	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 12, xn: 12, m: 12, rA: 2, r: 50)                            	 0.00997719	 1000      	 34.639    	 0         	 17.5504   	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 12, xn: 50, m: 24, rA: 1, r: 12)                            	 0.00688133	 1000      	 50.2228   	 0         	 25.4462   	 1.97368   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 7200, cols: 1)                                                                                                                                                                         	 0.000194136	 2         	 0         	 0         	 0.593398  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.130271  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.129106  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0633008 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0617659 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000273876	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000194136	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000125484	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.851e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.9021e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6191e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23347907008384 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23347710650368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23347509323904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23347307997440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23347106670976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23346905344512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23346704018048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23346502691584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23346301365120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23346100038656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23345898712192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23345697385728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23345496059264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23345294732800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23345093406336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23344892079872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23344690753408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23344489426944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23344288100480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23344086774016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23343885447552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23343684121088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23343482794624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23343281468160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23343080141696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23342878815232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23342677488768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23342476162304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23342274835840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23342073509376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23341872182912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23341670856448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23341469525888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23341268199424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23341066872960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23340865546496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23340664220032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23340462893568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23340261567104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23340060240640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23339858914176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23339657587712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23339456261248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23339254934784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23339053608320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23338852281856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23338650955392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23338449628928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23338248302464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23338046976000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23337845649536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23337644323072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23337442996608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23337241670144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23337040343680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23336839017216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23336637690752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23336436364288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23336235037824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23336033711360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23335832384896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23335631058432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23335429731968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23347801347840 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23347794757376 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 13, r2: 2, n: 50, n_right: 13, m: 50, r1: 2)	 0.0967031 	 1000      	 34.9523   	 0         	 3.62346   	 9.64612   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 13, m: 100, rA: 2, r: 13)                           	 0.0464118 	 1000      	 72.8262   	 0         	 7.5498    	 9.64612   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 650, r2: 1, n: 13, n_right: 1, m: 13, r1: 2)	 0.0337795 	 1000      	 13.0079   	 0         	 6.0837    	 2.13816   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 13, n_right: 650, m: 13, r1: 1)	 0.0192344 	 1000      	 22.8445   	 0         	 10.6842   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 13, xn: 13, m: 13, rA: 2, r: 50)                            	 0.0103768 	 1000      	 42.3443   	 0         	 19.8041   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 13, xn: 50, m: 26, rA: 1, r: 13)                            	 0.00863722	 1000      	 50.8728   	 0         	 23.7928   	 2.13816   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 8450, cols: 1)                                                                                                                                                                         	 0.000200276	 2         	 0         	 0         	 0.675068  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.150706  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.149717  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0669782 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0654259 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000307011	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000200276	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000110593	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.866e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.741e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.271e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22666797602688 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22666622789632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22666421463168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22666220136704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22666018810240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22665817483776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22665616157312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22665414830848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22665213504384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22665012177920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22664810851456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22664609524992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22664408198528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22664206872064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22664005545600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22663804219136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22663602892672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22663401566208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22663200239744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22662998913280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22662797586816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22662596260352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22662394933888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22662193607424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22661992280960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22661790954496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22661589628032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22661388301568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22661186975104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22660985648640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22660784322176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22660582995712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22660381665152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22660180338688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22659979012224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22659777685760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22659576359296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22659375032832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22659173706368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22658972379904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22658771053440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22658569726976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22658368400512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22658167074048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22657965747584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22657764421120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22657563094656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22657361768192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22657160441728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22656959115264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22656757788800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22656556462336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22656355135872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22656153809408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22655952482944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22655751156480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22655549830016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22655348503552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22655147177088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22654945850624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22654744524160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22654543197696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22654341871232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22666517927680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22666513352448 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 14, r2: 2, n: 50, n_right: 14, m: 50, r1: 2)	 0.105352  	 1000      	 37.2086   	 0         	 3.73605   	 9.95935   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 14, m: 100, rA: 2, r: 14)                           	 0.0487956 	 1000      	 80.3352   	 0         	 8.06631   	 9.95935   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 700, r2: 1, n: 14, n_right: 1, m: 14, r1: 2)	 0.0376438 	 1000      	 14.5787   	 0         	 6.33134   	 2.30263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 14, n_right: 700, m: 14, r1: 1)	 0.0200092 	 1000      	 27.4274   	 0         	 11.9113   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 14, xn: 14, m: 14, rA: 2, r: 50)                            	 0.0131223 	 1000      	 41.8219   	 0         	 18.1626   	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 14, xn: 50, m: 28, rA: 1, r: 14)                            	 0.00892041	 1000      	 61.5218   	 0         	 26.718    	 2.30263   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 9800, cols: 1)                                                                                                                                                                         	 0.000193427	 2         	 0         	 0         	 0.810642  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.164035  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.163005  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0724325 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0708383 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000284289	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000193427	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000113593	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8451e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.066e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1991e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22603210577792 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22603003586560 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22602802260096 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22602600933632 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22602399607168 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22602198280704 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22601996954240 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22601795627776 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22601594301312 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22601392974848 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22601191648384 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22600990321920 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22600788995456 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22600587668992 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22600386342528 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22600185016064 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22599983689600 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22599782363136 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22599581036672 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22599379710208 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22599178383744 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22598977057280 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22598775730816 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22598574404352 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22598373077888 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22598171751424 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22597970424960 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22597769098496 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22597567772032 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22597366445568 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22597165119104 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22596963792640 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22596762462080 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22596561135616 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22596359809152 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22596158482688 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22595957156224 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22595755829760 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22595554503296 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22595353176832 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22595151850368 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22594950523904 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22594749197440 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22594547870976 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22594346544512 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22594145218048 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22593943891584 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22593742565120 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22593541238656 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22593339912192 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22593138585728 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22592937259264 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22592735932800 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22592534606336 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22592333279872 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22592131953408 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22591930626944 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22591729300480 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22591527974016 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22591326647552 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22591125321088 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22590923994624 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22590722668160 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22603104917248 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22603098326784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 15, r2: 2, n: 50, n_right: 15, m: 50, r1: 2)	 0.118287  	 1000      	 38.0431   	 0         	 3.71977   	 10.2273   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 15, m: 100, rA: 2, r: 15)                           	 0.0512748 	 1000      	 87.7624   	 0         	 8.58121   	 10.2273   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 750, r2: 1, n: 15, n_right: 1, m: 15, r1: 2)	 0.0476823 	 1000      	 14.1562   	 0         	 5.73797   	 2.46711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 15, n_right: 750, m: 15, r1: 1)	 0.0260292 	 1000      	 25.9324   	 0         	 10.5113   	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 15, xn: 15, m: 15, rA: 2, r: 50)                            	 0.0141443 	 1000      	 47.7223   	 0         	 19.3434   	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 15, xn: 50, m: 30, rA: 1, r: 15)                            	 0.00962335	 1000      	 70.1419   	 0         	 28.4308   	 2.46711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 11250, cols: 1)                                                                                                                                                                        	 0.000188986	 2         	 0         	 0         	 0.952452  	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.193041  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.191998  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0766657 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0750425 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0002985 	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000188986	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000118774	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.907e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.4441e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.043e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22843270436736 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22843051993088 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22842850666624 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22842649340160 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22842448013696 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22842246687232 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22842045360768 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22841844034304 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22841642707840 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22841441381376 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22841240054912 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22841038728448 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22840837401984 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22840636075520 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22840434749056 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22840233422592 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22840032096128 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22839830769664 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22839629443200 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22839428116736 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22839226790272 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22839025463808 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22838824137344 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22838622810880 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22838421484416 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22838220157952 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22838018831488 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22837817505024 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22837616178560 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22837414852096 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22837213525632 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22837012199168 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22836810868608 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22836609542144 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22836408215680 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22836206889216 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22836005562752 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22835804236288 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22835602909824 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22835401583360 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22835200256896 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22834998930432 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22834797603968 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22834596277504 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22834394951040 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22834193624576 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22833992298112 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22833790971648 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22833589645184 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22833388318720 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22833186992256 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22832985665792 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22832784339328 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22832583012864 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22832381686400 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22832180359936 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22831979033472 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22831777707008 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22831576380544 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22831375054080 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22831173727616 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22830972401152 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22830771074688 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22843164776192 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22843158185728 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 16, r2: 2, n: 50, n_right: 16, m: 50, r1: 2)	 0.146211  	 1000      	 35.0179   	 0         	 3.34859   	 10.4575   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 16, m: 100, rA: 2, r: 16)                           	 0.0625836 	 1000      	 81.8106   	 0         	 7.82314   	 10.4575   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 800, r2: 1, n: 16, n_right: 1, m: 16, r1: 2)	 0.0492799 	 1000      	 16.6234   	 0         	 6.3169    	 2.63158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 16, n_right: 800, m: 16, r1: 1)	 0.0288749 	 1000      	 28.3707   	 0         	 10.7809   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 16, xn: 16, m: 16, rA: 2, r: 50)                            	 0.0171375 	 1000      	 47.8016   	 0         	 18.1646   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 16, xn: 50, m: 32, rA: 1, r: 16)                            	 0.0152132 	 1000      	 53.848    	 0         	 20.4622   	 2.63158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 12800, cols: 1)                                                                                                                                                                        	 0.000191156	 2         	 0         	 0         	 1.07138   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.225435  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.224366  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0962721 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0949343 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000294322	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000191156	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000112733	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8161e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.527e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1361e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22795794675584 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22795606026240 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22795404699776 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22795203373312 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22795002046848 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22794800720384 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22794599393920 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22794398067456 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22794196740992 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22793995414528 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22793794088064 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22793592761600 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22793391435136 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22793190108672 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22792988782208 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22792787455744 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22792586129280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22792384802816 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22792183476352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22791982149888 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22791780823424 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22791579496960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22791378170496 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22791176844032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22790975517568 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22790774191104 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22790572864640 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22790371538176 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22790170211712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22789968885248 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22789767558784 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22789566232320 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22789364901760 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22789163575296 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22788962248832 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22788760922368 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22788559595904 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22788358269440 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22788156942976 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22787955616512 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22787754290048 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22787552963584 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22787351637120 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22787150310656 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22786948984192 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22786747657728 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22786546331264 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22786345004800 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22786143678336 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22785942351872 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22785741025408 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22785539698944 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22785338372480 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22785137046016 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22784935719552 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22784734393088 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22784533066624 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22784331740160 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22784130413696 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22783929087232 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22783727760768 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22783526434304 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22783325107840 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22795689015040 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22795682424576 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 17, r2: 2, n: 50, n_right: 17, m: 50, r1: 2)	 0.15997   	 1000      	 36.1317   	 0         	 3.39063   	 10.6563   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 17, m: 100, rA: 2, r: 17)                           	 0.0568668 	 1000      	 101.641   	 0         	 9.53809   	 10.6563   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 850, r2: 1, n: 17, n_right: 1, m: 17, r1: 2)	 0.0513423 	 1000      	 19.1382   	 0         	 6.84473   	 2.79605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 17, n_right: 850, m: 17, r1: 1)	 0.0274214 	 1000      	 35.8333   	 0         	 12.8157   	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 17, xn: 17, m: 17, rA: 2, r: 50)                            	 0.0199707 	 1000      	 49.2021   	 0         	 17.597    	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 17, xn: 50, m: 34, rA: 1, r: 17)                            	 0.0127351 	 1000      	 77.1568   	 0         	 27.5949   	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 14450, cols: 1)                                                                                                                                                                        	 0.000213217	 2         	 0         	 0         	 1.08434   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.239772  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.238734  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.0912141 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0895725 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000301373	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000213217	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000116303	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0311e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.132e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.1091e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22971712849792 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22971498358784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22971297032320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22971095705856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22970894379392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22970693052928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22970491726464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22970290400000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22970089073536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22969887747072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22969686420608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22969485094144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22969283767680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22969082441216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22968881114752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22968679788288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22968478461824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22968277135360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22968075808896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22967874482432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22967673155968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22967471829504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22967270503040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22967069176576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22966867850112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22966666523648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22966465197184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22966263870720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22966062544256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22965861217792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22965659891328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22965458564864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22965257234304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22965055907840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22964854581376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22964653254912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22964451928448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22964250601984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22964049275520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22963847949056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22963646622592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22963445296128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22963243969664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22963042643200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22962841316736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22962639990272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22962438663808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22962237337344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22962036010880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22961834684416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22961633357952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22961432031488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22961230705024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22961029378560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22960828052096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22960626725632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22960425399168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22960224072704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22960022746240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22959821419776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22959620093312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22959418766848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22959217440384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22971607189248 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22971600598784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 18, r2: 2, n: 50, n_right: 18, m: 50, r1: 2)	 0.210312  	 1000      	 30.8114   	 0         	 2.8453    	 10.8289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 900, r2: 1, n: 18, n_right: 1, m: 18, r1: 2)	 0.0614833 	 1000      	 18.971    	 0         	 6.40798   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 18, m: 100, rA: 2, r: 18)                           	 0.0583256 	 1000      	 111.1     	 0         	 10.2597   	 10.8289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 18, n_right: 900, m: 18, r1: 1)	 0.0353339 	 1000      	 33.0108   	 0         	 11.1503   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 18, xn: 18, m: 18, rA: 2, r: 50)                            	 0.0265997 	 1000      	 43.8501   	 0         	 14.8116   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 18, xn: 50, m: 36, rA: 1, r: 18)                            	 0.0138749 	 1000      	 84.0652   	 0         	 28.3954   	 2.96053   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 16200, cols: 1)                                                                                                                                                                        	 0.000204546	 2         	 0         	 0         	 1.2672    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.30821   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.307129  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.100467  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.0988002 	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000315988	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000204546	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000118054	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8681e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.4031e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.289e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22964212066176 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22963982166016 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22963780839552 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22963579513088 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22963378186624 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22963176860160 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22962975533696 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22962774207232 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22962572880768 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22962371554304 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22962170227840 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22961968901376 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22961767574912 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22961566248448 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22961364921984 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22961163595520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22960962269056 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22960760942592 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22960559616128 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22960358289664 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22960156963200 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22959955636736 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22959754310272 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22959552983808 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22959351657344 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22959150330880 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22958949004416 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22958747677952 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22958546351488 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22958345025024 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22958143698560 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22957942372096 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22957741041536 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22957539715072 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22957338388608 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22957137062144 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22956935735680 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22956734409216 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22956533082752 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22956331756288 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22956130429824 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22955929103360 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22955727776896 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22955526450432 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22955325123968 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22955123797504 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22954922471040 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22954721144576 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22954519818112 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22954318491648 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22954117165184 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22953915838720 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22953714512256 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22953513185792 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22953311859328 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22953110532864 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22952909206400 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22952707879936 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22952506553472 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22952305227008 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22952103900544 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22951902574080 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22951701247616 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22964106405632 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22964099815168 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 19, r2: 2, n: 50, n_right: 19, m: 50, r1: 2)	 0.212728  	 1000      	 33.94     	 0         	 3.09127   	 10.9793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 950, r2: 1, n: 19, n_right: 1, m: 19, r1: 2)	 0.0767158 	 1000      	 17.8816   	 0         	 5.72211   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 19, m: 100, rA: 2, r: 19)                           	 0.0622389 	 1000      	 116.005   	 0         	 10.5657   	 10.9793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 19, n_right: 950, m: 19, r1: 1)	 0.0386842 	 1000      	 35.4615   	 0         	 11.3477   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 19, xn: 19, m: 19, rA: 2, r: 50)                            	 0.0254982 	 1000      	 53.8      	 0         	 17.216    	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 19, xn: 50, m: 38, rA: 1, r: 19)                            	 0.0148778 	 1000      	 92.2043   	 0         	 29.5054   	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 18050, cols: 1)                                                                                                                                                                        	 0.000184886	 2         	 0         	 0         	 1.56204   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.32923   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.328128  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.104145  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.102615  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00032828	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000184886	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000132134	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.849e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3921e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 9.591e-06 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22766230988672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22766011017216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22765809690752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22765608364288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22765407037824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22765205711360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22765004384896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22764803058432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22764601731968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22764400405504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22764199079040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22763997752576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22763796426112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22763595099648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22763393773184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22763192446720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22762991120256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22762789793792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22762588467328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22762387140864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22762185814400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22761984487936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22761783161472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22761581835008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22761380508544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22761179182080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22760977855616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22760776529152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22760575202688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22760373876224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22760172549760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22759971223296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22759769892736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22759568566272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22759367239808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22759165913344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22758964586880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22758763260416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22758561933952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22758360607488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22758159281024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22757957954560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22757756628096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22757555301632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22757353975168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22757152648704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22756951322240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22756749995776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22756548669312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22756347342848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22756146016384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22755944689920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22755743363456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22755542036992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22755340710528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22755139384064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22754938057600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22754736731136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22754535404672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22754334078208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22754132751744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22753931425280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22753730098816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22766125328128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22766118737664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 20, r2: 2, n: 50, n_right: 20, m: 50, r1: 2) 	 0.246968  	 1000      	 32.3928   	 0         	 2.91535   	 11.1111   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1000, r2: 1, n: 20, n_right: 1, m: 20, r1: 2)	 0.0681338 	 1000      	 23.4832   	 0         	 7.1389    	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 20, m: 100, rA: 2, r: 20)                            	 0.0645354 	 1000      	 123.963   	 0         	 11.1567   	 11.1111   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 20, n_right: 1000, m: 20, r1: 1)	 0.0401425 	 1000      	 39.858    	 0         	 12.1168   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 20, xn: 20, m: 20, rA: 2, r: 50)                             	 0.0274391 	 1000      	 58.3109   	 0         	 17.7265   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 20, xn: 50, m: 40, rA: 1, r: 20)                             	 0.0159388 	 1000      	 100.384   	 0         	 30.5168   	 3.28947   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 20000, cols: 1)                                                                                                                                                                         	 0.000228877	 2         	 0         	 0         	 1.39813   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.35634   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.355245  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.109434  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.107913  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000330713	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000228877	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000137225	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.846e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.242e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.32e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22412968679296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22412749957120 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22412548630656 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22412347304192 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22412145977728 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22411944651264 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22411743324800 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22411541998336 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22411340671872 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22411139345408 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22410938018944 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22410736692480 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22410535366016 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22410334039552 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22410132713088 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22409931386624 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22409730060160 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22409528733696 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22409327407232 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22409126080768 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22408924754304 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22408723427840 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22408522101376 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22408320774912 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22408119448448 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22407918121984 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22407716795520 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22407515469056 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22407314142592 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22407112816128 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22406911489664 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22406710163200 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22406508832640 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22406307506176 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22406106179712 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22405904853248 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22405703526784 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22405502200320 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22405300873856 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22405099547392 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22404898220928 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22404696894464 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22404495568000 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22404294241536 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22404092915072 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22403891588608 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22403690262144 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22403488935680 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22403287609216 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22403086282752 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22402884956288 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22402683629824 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22402482303360 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22402280976896 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22402079650432 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22401878323968 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22401676997504 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22401475671040 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22401274344576 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22401073018112 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22400871691648 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22400670365184 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22400469038720 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22412863018752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22412856428288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 21, r2: 2, n: 50, n_right: 21, m: 50, r1: 2) 	 0.273798  	 1000      	 32.2135   	 0         	 2.86927   	 11.2271   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1050, r2: 1, n: 21, n_right: 1, m: 21, r1: 2)	 0.0722424 	 1000      	 25.6387   	 0         	 7.42301   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 21, m: 100, rA: 2, r: 21)                            	 0.0693011 	 1000      	 127.271   	 0         	 11.336    	 11.2271   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 21, n_right: 1050, m: 21, r1: 1)	 0.0432516 	 1000      	 42.8239   	 0         	 12.3985   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 21, xn: 21, m: 21, rA: 2, r: 50)                             	 0.0306916 	 1000      	 60.3488   	 0         	 17.4724   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 21, xn: 50, m: 42, rA: 1, r: 21)                             	 0.0179208 	 1000      	 103.355   	 0         	 29.9236   	 3.45395   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 22050, cols: 1)                                                                                                                                                                         	 0.000160595	 2         	 0         	 0         	 2.19683   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.390524  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.389292  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.119492  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.117914  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000296778	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000160595	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000121294	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8561e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.892e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.1461e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22905539721088 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22905329018880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22905127692416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22904926365952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22904725039488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22904523713024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22904322386560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22904121060096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22903919733632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22903718407168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22903517080704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22903315754240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22903114427776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22902913101312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22902711774848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22902510448384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22902309121920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22902107795456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22901906468992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22901705142528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22901503816064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22901302489600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22901101163136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22900899836672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22900698510208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22900497183744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22900295857280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22900094530816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22899893204352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22899691877888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22899490551424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22899289224960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22899087894400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22898886567936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22898685241472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22898483915008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22898282588544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22898081262080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22897879935616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22897678609152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22897477282688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22897275956224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22897074629760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22896873303296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22896671976832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22896470650368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22896269323904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22896067997440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22895866670976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22895665344512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22895464018048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22895262691584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22895061365120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22894860038656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22894658712192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22894457385728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22894256059264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22894054732800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22893853406336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22893652079872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22893450753408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22893249426944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22893048100480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22905434060544 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22905427470080 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 22, r2: 2, n: 50, n_right: 22, m: 50, r1: 2) 	 0.213083  	 1000      	 45.4284   	 0         	 4.00971   	 11.3296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1100, r2: 1, n: 22, n_right: 1, m: 22, r1: 2)	 0.0729125 	 1000      	 29.2076   	 0         	 8.07192   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 22, m: 100, rA: 2, r: 22)                            	 0.0727761 	 1000      	 133.011   	 0         	 11.7401   	 11.3296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 22, n_right: 1100, m: 22, r1: 1)	 0.0435535 	 1000      	 48.8962   	 0         	 13.5131   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 22, xn: 22, m: 22, rA: 2, r: 50)                             	 0.033556  	 1000      	 63.4642   	 0         	 17.5392   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 22, xn: 50, m: 44, rA: 1, r: 22)                             	 0.0200334 	 1000      	 106.302   	 0         	 29.3781   	 3.61842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 24200, cols: 1)                                                                                                                                                                         	 0.000214296	 2         	 0         	 0         	 1.80685   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.330684  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.329549  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.127911  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.126365  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000352549	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000214296	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000129024	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.857e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.1371e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.165e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23366329530240 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23366098479104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23365897152640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23365695826176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23365494499712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23365293173248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23365091846784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23364890520320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23364689193856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23364487867392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23364286540928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23364085214464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23363883888000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23363682561536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23363481235072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23363279908608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23363078582144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23362877255680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23362675929216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23362474602752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23362273276288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23362071949824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23361870623360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23361669296896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23361467970432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23361266643968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23361065317504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23360863991040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23360662664576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23360461338112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23360260011648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23360058685184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23359857354624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23359656028160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23359454701696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23359253375232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23359052048768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23358850722304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23358649395840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23358448069376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23358246742912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23358045416448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23357844089984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23357642763520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23357441437056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23357240110592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23357038784128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23356837457664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23356636131200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23356434804736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23356233478272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23356032151808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23355830825344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23355629498880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23355428172416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23355226845952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23355025519488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23354824193024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23354622866560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23354421540096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23354220213632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23354018887168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23353817560704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23366223869696 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23366217279232 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 23, r2: 2, n: 50, n_right: 23, m: 50, r1: 2) 	 0.22792   	 1000      	 46.4199   	 0         	 4.06459   	 11.4206   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1150, r2: 1, n: 23, n_right: 1, m: 23, r1: 2)	 0.0893664 	 1000      	 27.2295   	 0         	 7.19806   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 23, m: 100, rA: 2, r: 23)                            	 0.0799903 	 1000      	 132.266   	 0         	 11.5814   	 11.4206   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 23, n_right: 1150, m: 23, r1: 1)	 0.0462331 	 1000      	 52.6333   	 0         	 13.9135   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 23, xn: 23, m: 23, rA: 2, r: 50)                             	 0.0351682 	 1000      	 69.1932   	 0         	 18.2911   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 23, xn: 50, m: 46, rA: 1, r: 23)                             	 0.0215432 	 1000      	 112.954   	 0         	 29.8593   	 3.78289   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 26450, cols: 1)                                                                                                                                                                         	 0.000156295	 2         	 0         	 0         	 2.7077    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.364707  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.363519  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.138363  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.136702  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000341553	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000156295	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000151585	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8542e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.992e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.415e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22622163797888 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22621928286208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22621726959744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22621525633280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22621324306816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22621122980352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22620921653888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22620720327424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22620519000960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22620317674496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22620116348032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22619915021568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22619713695104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22619512368640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22619311042176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22619109715712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22618908389248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22618707062784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22618505736320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22618304409856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22618103083392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22617901756928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22617700430464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22617499104000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22617297777536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22617096451072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22616895124608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22616693798144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22616492471680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22616291145216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22616089818752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22615888492288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22615687161728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22615485835264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22615284508800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22615083182336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22614881855872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22614680529408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22614479202944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22614277876480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22614076550016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22613875223552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22613673897088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22613472570624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22613271244160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22613069917696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22612868591232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22612667264768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22612465938304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22612264611840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22612063285376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22611861958912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22611660632448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22611459305984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22611257979520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22611056653056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22610855326592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22610654000128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22610452673664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22610251347200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22610050020736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22609848694272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22609647367808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22622058137344 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22622051546880 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 24, r2: 2, n: 50, n_right: 24, m: 50, r1: 2) 	 0.328023  	 1000      	 35.1194   	 0         	 3.05344   	 11.5016   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1200, r2: 1, n: 24, n_right: 1, m: 24, r1: 2)	 0.0947034 	 1000      	 29.1943   	 0         	 7.39589   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 24, m: 100, rA: 2, r: 24)                            	 0.0811872 	 1000      	 141.894   	 0         	 12.3369   	 11.5016   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 24, n_right: 1200, m: 24, r1: 1)	 0.0551966 	 1000      	 50.09     	 0         	 12.6895   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 24, xn: 24, m: 24, rA: 2, r: 50)                             	 0.0332132 	 1000      	 83.244    	 0         	 21.0885   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 24, xn: 50, m: 48, rA: 1, r: 24)                             	 0.0209266 	 1000      	 132.119   	 0         	 33.4702   	 3.94737   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 28800, cols: 1)                                                                                                                                                                         	 0.000175385	 2         	 0         	 0         	 2.62736   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.479094  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.477924  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.136942  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.135327  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000309643	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000175385	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000153305	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8661e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2131e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.7351e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22968511125376 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22968277133312 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22968075806848 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22967874480384 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22967673153920 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22967471827456 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22967270500992 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22967069174528 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22966867848064 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22966666521600 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22966465195136 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22966263868672 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22966062542208 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22965861215744 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22965659889280 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22965458562816 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22965257236352 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22965055909888 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22964854583424 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22964653256960 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22964451930496 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22964250604032 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22964049277568 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22963847951104 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22963646624640 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22963445298176 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22963243971712 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22963042645248 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22962841318784 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22962639992320 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22962438665856 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22962237339392 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22962036008832 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22961834682368 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22961633355904 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22961432029440 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22961230702976 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22961029376512 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22960828050048 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22960626723584 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22960425397120 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22960224070656 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22960022744192 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22959821417728 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22959620091264 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22959418764800 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22959217438336 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22959016111872 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22958814785408 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22958613458944 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22958412132480 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22958210806016 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22958009479552 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22957808153088 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22957606826624 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22957405500160 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22957204173696 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22957002847232 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22956801520768 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22956600194304 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22956398867840 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22956197541376 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22955996214912 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22968405464832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22968398874368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 25, r2: 2, n: 50, n_right: 25, m: 50, r1: 2) 	 0.360501  	 1000      	 34.674    	 0         	 2.99583   	 11.5741   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1250, r2: 1, n: 25, n_right: 1, m: 25, r1: 2)	 0.0919589 	 1000      	 33.9826   	 0         	 8.26456   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 25, m: 100, rA: 2, r: 25)                            	 0.0815907 	 1000      	 153.204   	 0         	 13.2368   	 11.5741   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 25, xn: 25, m: 25, rA: 2, r: 50)                             	 0.0549234 	 1000      	 56.8975   	 0         	 13.8375   	 4.11184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 25, n_right: 1250, m: 25, r1: 1)	 0.0549119 	 1000      	 56.9094   	 0         	 13.8404   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 25, xn: 50, m: 50, rA: 1, r: 25)                             	 0.0355483 	 1000      	 87.9086   	 0         	 21.3794   	 4.11184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 31250, cols: 1)                                                                                                                                                                         	 0.000141614	 2         	 0         	 0         	 3.53072   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.50857   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.507372  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.173669  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.172062  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000296974	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000158665	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000141614	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8501e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.202e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4481e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22516833408896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22516634478592 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22516433152128 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22516231825664 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22516030499200 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22515829172736 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22515627846272 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22515426519808 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22515225193344 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22515023866880 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22514822540416 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22514621213952 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22514419887488 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22514218561024 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22514017234560 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22513815908096 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22513614581632 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22513413255168 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22513211928704 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22513010602240 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22512809275776 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22512607949312 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22512406622848 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22512205296384 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22512003969920 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22511802643456 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22511601316992 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22511399990528 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22511198664064 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22510997337600 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22510796011136 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22510594684672 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22510393354112 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22510192027648 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22509990701184 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22509789374720 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22509588048256 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22509386721792 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22509185395328 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22508984068864 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22508782742400 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22508581415936 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22508380089472 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22508178763008 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22507977436544 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22507776110080 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22507574783616 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22507373457152 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22507172130688 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22506970804224 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22506769477760 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22506568151296 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22506366824832 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22506165498368 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22505964171904 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22505762845440 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22505561518976 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22505360192512 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22505158866048 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22504957539584 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22504756213120 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22504554886656 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22504353560192 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22516727748352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22516721157888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 26, r2: 2, n: 50, n_right: 26, m: 50, r1: 2) 	 0.346262  	 1000      	 39.0456   	 0         	 3.35469   	 11.6391   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1300, r2: 1, n: 26, n_right: 1, m: 26, r1: 2)	 0.100021  	 1000      	 35.1445   	 0         	 8.2184    	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 26, m: 100, rA: 2, r: 26)                            	 0.0867485 	 1000      	 155.853   	 0         	 13.3904   	 11.6391   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 26, n_right: 1300, m: 26, r1: 1)	 0.057079  	 1000      	 61.5848   	 0         	 14.4014   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 26, xn: 26, m: 26, rA: 2, r: 50)                             	 0.0484466 	 1000      	 72.5582   	 0         	 16.9675   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 26, xn: 50, m: 52, rA: 1, r: 26)                             	 0.0318863 	 1000      	 110.242   	 0         	 25.7796   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 33800, cols: 1)                                                                                                                                                                         	 0.000126574	 2         	 0         	 0         	 4.2726    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.504574  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.503362  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.168629  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.167082  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00031058	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000127664	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000126574	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8511e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2491e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.482e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22568127674240 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22567905650688 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22567704324224 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22567502997760 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22567301671296 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22567100344832 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22566899018368 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22566697691904 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22566496365440 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22566295038976 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22566093712512 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22565892386048 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22565691059584 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22565489733120 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22565288406656 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22565087080192 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22564885753728 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22564684427264 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22564483100800 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22564281774336 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22564080447872 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22563879121408 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22563677794944 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22563476468480 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22563275142016 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22563073815552 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22562872489088 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22562671162624 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22562469836160 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22562268509696 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22562067183232 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22561865856768 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22561664526208 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22561463199744 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22561261873280 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22561060546816 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22560859220352 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22560657893888 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22560456567424 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22560255240960 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22560053914496 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22559852588032 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22559651261568 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22559449935104 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22559248608640 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22559047282176 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22558845955712 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22558644629248 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22558443302784 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22558241976320 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22558040649856 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22557839323392 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22557637996928 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22557436670464 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22557235344000 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22557034017536 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22556832691072 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22556631364608 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22556430038144 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22556228711680 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22556027385216 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22555826058752 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22555624732288 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22568022013696 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22568015423232 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 27, r2: 2, n: 50, n_right: 27, m: 50, r1: 2) 	 0.419607  	 1000      	 34.7468   	 0         	 2.9704    	 11.6977   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1350, r2: 1, n: 27, n_right: 1, m: 27, r1: 2)	 0.106184  	 1000      	 37.0734   	 0         	 8.34837   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 27, m: 100, rA: 2, r: 27)                            	 0.083406  	 1000      	 174.808   	 0         	 14.9438   	 11.6977   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 27, n_right: 1350, m: 27, r1: 1)	 0.0649651 	 1000      	 60.5956   	 0         	 13.6452   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 27, xn: 27, m: 27, rA: 2, r: 50)                             	 0.0365715 	 1000      	 107.641   	 0         	 24.2392   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 27, xn: 50, m: 54, rA: 1, r: 27)                             	 0.0232667 	 1000      	 169.194   	 0         	 38.1001   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 36450, cols: 1)                                                                                                                                                                         	 0.000133734	 2         	 0         	 0         	 4.3609    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.592155  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.590756  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.144905  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.143244  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000385955	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000158505	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000133734	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.8202e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.915e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.215e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22952416569216 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22952238114816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22952036788352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22951835461888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22951634135424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22951432808960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22951231482496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22951030156032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22950828829568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22950627503104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22950426176640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22950224850176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22950023523712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22949822197248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22949620870784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22949419544320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22949218217856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22949016891392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22948815564928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22948614238464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22948412912000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22948211585536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22948010259072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22947808932608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22947607606144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22947406279680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22947204953216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22947003626752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22946802300288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22946600973824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22946399647360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22946198320896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22945996990336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22945795663872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22945594337408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22945393010944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22945191684480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22944990358016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22944789031552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22944587705088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22944386378624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22944185052160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22943983725696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22943782399232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22943581072768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22943379746304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22943178419840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22942977093376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22942775766912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22942574440448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22942373113984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22942171787520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22941970461056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22941769134592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22941567808128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22941366481664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22941165155200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22940963828736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22940762502272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22940561175808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22940359849344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22940158522880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22939957196416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22952310908672 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22952132134656 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 28, r2: 2, n: 50, n_right: 28, m: 50, r1: 2) 	 0.301113  	 1000      	 52.0734   	 0         	 4.43156   	 11.7506   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1400, r2: 1, n: 28, n_right: 1, m: 28, r1: 2)	 0.116948  	 1000      	 37.5416   	 0         	 8.1519    	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 28, m: 100, rA: 2, r: 28)                            	 0.0813859 	 1000      	 192.662   	 0         	 16.396    	 11.7506   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 28, n_right: 1400, m: 28, r1: 1)	 0.0649706 	 1000      	 67.5752   	 0         	 14.6735   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 28, xn: 28, m: 28, rA: 2, r: 50)                             	 0.0333861 	 1000      	 131.504   	 0         	 28.5551   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 28, xn: 50, m: 56, rA: 1, r: 28)                             	 0.0218268 	 1000      	 201.147   	 0         	 43.6777   	 4.60526   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 39200, cols: 1)                                                                                                                                                                         	 0.000146515	 2         	 0         	 0         	 4.28079   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.484318  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.483031  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.137996  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.136599  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000319957	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000146515	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000136814	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.1494e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.4591e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3221e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22530923784064 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22530727340032 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22530526013568 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22530324687104 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22530123360640 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22529922034176 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22529720707712 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22529519381248 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22529318054784 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22529116728320 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22528915401856 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22528714075392 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22528512748928 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22528311422464 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22528110096000 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22527908769536 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22527707443072 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22527506116608 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22527304790144 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22527103463680 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22526902137216 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22526700810752 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22526499484288 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22526298157824 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22526096831360 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22525895504896 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22525694178432 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22525492851968 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22525291525504 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22525090199040 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22524888872576 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22524687546112 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22524486215552 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22524284889088 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22524083562624 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22523882236160 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22523680909696 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22523479583232 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22523278256768 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22523076930304 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22522875603840 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22522674277376 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22522472950912 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22522271624448 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22522070297984 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22521868971520 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22521667645056 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22521466318592 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22521264992128 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22521063665664 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22520862339200 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22520661012736 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22520459686272 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22520258359808 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22520057033344 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22519855706880 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22519654380416 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22519453053952 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22519251727488 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22519050401024 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22518849074560 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22518647748096 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22518446421632 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22530818123520 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22530811533056 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 29, r2: 2, n: 50, n_right: 29, m: 50, r1: 2) 	 0.329224  	 1000      	 51.0898   	 0         	 4.33018   	 11.7985   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1450, r2: 1, n: 29, n_right: 1, m: 29, r1: 2)	 0.114949  	 1000      	 42.4346   	 0         	 8.89662   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 29, m: 100, rA: 2, r: 29)                            	 0.0854669 	 1000      	 196.801   	 0         	 16.6801   	 11.7985   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 29, n_right: 1450, m: 29, r1: 1)	 0.0668964 	 1000      	 72.9157   	 0         	 15.2872   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 29, xn: 29, m: 29, rA: 2, r: 50)                             	 0.0380175 	 1000      	 128.304   	 0         	 26.8996   	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 29, xn: 50, m: 58, rA: 1, r: 29)                             	 0.0247887 	 1000      	 196.775   	 0         	 41.255    	 4.76974   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 42050, cols: 1)                                                                                                                                                                         	 0.000160925	 2         	 0         	 0         	 4.18083   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.512258  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.511069  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.149651  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.148273  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000352791	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000160925	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000148504	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8672e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.924e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4851e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22566368053120 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22566160820224 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22565959493760 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22565758167296 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22565556840832 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22565355514368 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22565154187904 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22564952861440 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22564751534976 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22564550208512 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22564348882048 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22564147555584 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22563946229120 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22563744902656 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22563543576192 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22563342249728 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22563140923264 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22562939596800 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22562738270336 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22562536943872 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22562335617408 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22562134290944 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22561932964480 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22561731638016 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22561530311552 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22561328985088 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22561127658624 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22560926332160 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22560725005696 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22560523679232 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22560322352768 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22560121026304 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22559919695744 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22559718369280 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22559517042816 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22559315716352 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22559114389888 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22558913063424 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22558711736960 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22558510410496 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22558309084032 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22558107757568 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22557906431104 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22557705104640 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22557503778176 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22557302451712 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22557101125248 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22556899798784 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22556698472320 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22556497145856 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22556295819392 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22556094492928 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22555893166464 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22555691840000 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22555490513536 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22555289187072 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22555087860608 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22554886534144 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22554685207680 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22554483881216 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22554282554752 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22554081228288 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22553879901824 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22566262392576 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22566255802112 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 30, r2: 2, n: 50, n_right: 30, m: 50, r1: 2) 	 0.363572  	 1000      	 49.5088   	 0         	 4.18074   	 11.8421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1500, r2: 1, n: 30, n_right: 1, m: 30, r1: 2)	 0.132134  	 1000      	 40.8675   	 0         	 8.28247   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 30, m: 100, rA: 2, r: 30)                            	 0.0884382 	 1000      	 203.532   	 0         	 17.1871   	 11.8421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 30, n_right: 1500, m: 30, r1: 1)	 0.0736005 	 1000      	 73.3691   	 0         	 14.8695   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 30, xn: 30, m: 30, rA: 2, r: 50)                             	 0.0417166 	 1000      	 129.445   	 0         	 26.2341   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 30, xn: 50, m: 60, rA: 1, r: 30)                             	 0.0255798 	 1000      	 211.104   	 0         	 42.7837   	 4.93421   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 45000, cols: 1)                                                                                                                                                                         	 0.000138994	 2         	 0         	 0         	 5.18008   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.570506  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.569307  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.157251  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.155735  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000319668	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000145224	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000138994	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8482e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.9661e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3701e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23216464340864 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23216244385792 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23216043059328 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23215841732864 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23215640406400 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23215439079936 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23215237753472 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23215036427008 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23214835100544 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23214633774080 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23214432447616 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23214231121152 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23214029794688 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23213828468224 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23213627141760 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23213425815296 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23213224488832 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23213023162368 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23212821835904 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23212620509440 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23212419182976 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23212217856512 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23212016530048 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23211815203584 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23211613877120 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23211412550656 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23211211224192 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23211009897728 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23210808571264 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23210607244800 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23210405918336 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23210204591872 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23210003261312 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23209801934848 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23209600608384 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23209399281920 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23209197955456 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23208996628992 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23208795302528 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23208593976064 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23208392649600 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23208191323136 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23207989996672 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23207788670208 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23207587343744 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23207386017280 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23207184690816 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23206983364352 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23206782037888 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23206580711424 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23206379384960 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23206178058496 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23205976732032 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23205775405568 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23205574079104 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23205372752640 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23205171426176 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23204970099712 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23204768773248 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23204567446784 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23204366120320 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23204164793856 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23203963467392 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23216358680320 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23216352089856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 31, r2: 2, n: 50, n_right: 31, m: 50, r1: 2) 	 0.388956  	 1000      	 49.4143   	 0         	 4.15883   	 11.8818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1550, r2: 1, n: 31, n_right: 1, m: 31, r1: 2)	 0.143674  	 1000      	 41.4701   	 0         	 8.1335    	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 31, m: 100, rA: 2, r: 31)                            	 0.0897123 	 1000      	 214.24    	 0         	 18.031    	 11.8818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 31, n_right: 1550, m: 31, r1: 1)	 0.0781898 	 1000      	 76.2018   	 0         	 14.9454   	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 31, xn: 31, m: 31, rA: 2, r: 50)                             	 0.0453287 	 1000      	 131.444   	 0         	 25.78     	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 31, xn: 50, m: 62, rA: 1, r: 31)                             	 0.0265226 	 1000      	 224.646   	 0         	 44.0596   	 5.09868   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 48050, cols: 1)                                                                                                                                                                         	 0.000141785	 2         	 0         	 0         	 5.42229   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.612207  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.61082   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.162941  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.161564  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000401329	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000153025	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000141785	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.888e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 1.966e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.418e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22552331696000 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22552135067648 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22551933741184 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22551732414720 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22551531088256 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22551329761792 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22551128435328 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22550927108864 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22550725782400 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22550524455936 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22550323129472 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22550121803008 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22549920476544 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22549719150080 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22549517823616 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22549316497152 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22549115170688 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22548913844224 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22548712517760 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22548511191296 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22548309864832 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22548108538368 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22547907211904 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22547705885440 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22547504558976 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22547303232512 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22547101906048 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22546900579584 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22546699253120 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22546497926656 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22546296600192 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22546095273728 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22545893943168 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22545692616704 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22545491290240 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22545289963776 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22545088637312 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22544887310848 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22544685984384 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22544484657920 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22544283331456 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22544082004992 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22543880678528 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22543679352064 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22543478025600 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22543276699136 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22543075372672 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22542874046208 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22542672719744 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22542471393280 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22542270066816 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22542068740352 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22541867413888 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22541666087424 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22541464760960 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22541263434496 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22541062108032 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22540860781568 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22540659455104 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22540458128640 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22540256802176 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22540055475712 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22539854149248 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22552226035456 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22552219444992 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 32, r2: 2, n: 50, n_right: 32, m: 50, r1: 2) 	 0.389493  	 1000      	 52.5812   	 0         	 4.41189   	 11.9181   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1600, r2: 1, n: 32, n_right: 1, m: 32, r1: 2)	 0.143686  	 1000      	 45.6106   	 0         	 8.66601   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 32, m: 100, rA: 2, r: 32)                            	 0.117208  	 1000      	 174.731   	 0         	 14.6611   	 11.9181   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 32, n_right: 1600, m: 32, r1: 1)	 0.0806729 	 1000      	 81.2367   	 0         	 15.435    	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 32, xn: 32, m: 32, rA: 2, r: 50)                             	 0.0482774 	 1000      	 135.749   	 0         	 25.7923   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 32, xn: 50, m: 64, rA: 1, r: 32)                             	 0.0306101 	 1000      	 214.099   	 0         	 40.6789   	 5.26316   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 51200, cols: 1)                                                                                                                                                                         	 0.000155095	 2         	 0         	 0         	 5.28192   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.615136  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.613851  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.197635  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.196096  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000307845	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000181676	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000155095	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.853e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.1231e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6201e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23240357226368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23240135141376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23239933814912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23239732488448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23239531161984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23239329835520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23239128509056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23238927182592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23238725856128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23238524529664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23238323203200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23238121876736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23237920550272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23237719223808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23237517897344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23237316570880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23237115244416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23236913917952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23236712591488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23236511265024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23236309938560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23236108612096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23235907285632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23235705959168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23235504632704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23235303306240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23235101979776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23234900653312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23234699326848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23234498000384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23234296673920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23234095347456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23233894016896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23233692690432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23233491363968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23233290037504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23233088711040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23232887384576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23232686058112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23232484731648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23232283405184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23232082078720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23231880752256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23231679425792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23231478099328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23231276772864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23231075446400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23230874119936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23230672793472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23230471467008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23230270140544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23230068814080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23229867487616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23229666161152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23229464834688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23229263508224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23229062181760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23228860855296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23228659528832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23228458202368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23228256875904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23228055549440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23227854222976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23240251565824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23240244975360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 33, r2: 2, n: 50, n_right: 33, m: 50, r1: 2) 	 0.482707  	 1000      	 45.1205   	 0         	 3.77537   	 11.9513   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1650, r2: 1, n: 33, n_right: 1, m: 33, r1: 2)	 0.161403  	 1000      	 44.5309   	 0         	 8.20448   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 33, m: 100, rA: 2, r: 33)                            	 0.106928  	 1000      	 203.688   	 0         	 17.0432   	 11.9513   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 33, n_right: 1650, m: 33, r1: 1)	 0.0947058 	 1000      	 75.8919   	 0         	 13.9825   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 33, xn: 33, m: 33, rA: 2, r: 50)                             	 0.0688079 	 1000      	 104.456   	 0         	 19.2452   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 33, xn: 50, m: 66, rA: 1, r: 33)                             	 0.0442941 	 1000      	 162.266   	 0         	 29.8962   	 5.42763   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 54450, cols: 1)                                                                                                                                                                         	 0.000154645	 2         	 0         	 0         	 5.63355   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.740137  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.738816  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.221605  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.22003   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000418799	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000158865	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000154645	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8491e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.3661e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3431e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23000691935104 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23000489388032 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23000288061568 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23000086735104 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22999885408640 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22999684082176 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22999482755712 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22999281429248 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22999080102784 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22998878776320 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22998677449856 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22998476123392 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22998274796928 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22998073470464 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22997872144000 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22997670817536 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22997469491072 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22997268164608 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22997066838144 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22996865511680 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22996664185216 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22996462858752 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22996261532288 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22996060205824 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22995858879360 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22995657552896 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22995456226432 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22995254899968 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22995053573504 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22994852247040 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22994650920576 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22994449594112 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22994248263552 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22994046937088 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22993845610624 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22993644284160 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22993442957696 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22993241631232 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22993040304768 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22992838978304 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22992637651840 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22992436325376 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22992234998912 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22992033672448 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22991832345984 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22991631019520 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22991429693056 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22991228366592 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22991027040128 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22990825713664 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22990624387200 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22990423060736 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22990221734272 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22990020407808 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22989819081344 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22989617754880 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22989416428416 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22989215101952 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22989013775488 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22988812449024 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22988611122560 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22988409796096 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22988208469632 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23000586274560 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23000579684096 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 34, r2: 2, n: 50, n_right: 34, m: 50, r1: 2) 	 0.40458   	 1000      	 57.1456   	 0         	 4.76939   	 11.9818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1700, r2: 1, n: 34, n_right: 1, m: 34, r1: 2)	 0.169453  	 1000      	 46.3892   	 0         	 8.29548   	 5.59211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 34, n_right: 1700, m: 34, r1: 1)	 0.100422  	 1000      	 78.2777   	 0         	 13.9979   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 34, m: 100, rA: 2, r: 34)                            	 0.0924038 	 1000      	 250.206   	 0         	 20.8823   	 11.9818   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 34, xn: 34, m: 34, rA: 2, r: 50)                             	 0.0463031 	 1000      	 169.768   	 0         	 30.3586   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 34, xn: 50, m: 68, rA: 1, r: 34)                             	 0.0323466 	 1000      	 243.018   	 0         	 43.4573   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 57800, cols: 1)                                                                                                                                                                         	 0.000171025	 2         	 0         	 0         	 5.4074    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.675779  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.674456  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.172785  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.171054  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000426004	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000171025	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000154385	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0611e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.18e-05  	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.28e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23448270968704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23448038402048 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23447837075584 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23447635749120 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23447434422656 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23447233096192 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23447031769728 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23446830443264 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23446629116800 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23446427790336 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23446226463872 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23446025137408 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23445823810944 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23445622484480 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23445421158016 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23445219831552 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23445018505088 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23444817178624 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23444615852160 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23444414525696 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23444213199232 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23444011872768 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23443810546304 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23443609219840 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23443407893376 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23443206566912 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23443005240448 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23442803913984 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23442602587520 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23442401261056 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23442199934592 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23441998608128 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23441797277568 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23441595951104 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23441394624640 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23441193298176 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23440991971712 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23440790645248 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23440589318784 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23440387992320 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23440186665856 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23439985339392 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23439784012928 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23439582686464 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23439381360000 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23439180033536 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23438978707072 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23438777380608 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23438576054144 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23438374727680 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23438173401216 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23437972074752 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23437770748288 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23437569421824 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23437368095360 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23437166768896 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23436965442432 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23436764115968 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23436562789504 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23436361463040 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23436160136576 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23435958810112 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23435757483648 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23448165308160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23448158717696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 35, r2: 2, n: 50, n_right: 35, m: 50, r1: 2) 	 0.475051  	 1000      	 51.5734   	 0         	 4.29427   	 12.0098   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1750, r2: 1, n: 35, n_right: 1, m: 35, r1: 2)	 0.175404  	 1000      	 48.887    	 0         	 8.49237   	 5.75658   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 35, n_right: 1750, m: 35, r1: 1)	 0.10431   	 1000      	 82.2071   	 0         	 14.2805   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 35, m: 100, rA: 2, r: 35)                            	 0.0964823 	 1000      	 253.933   	 0         	 21.1438   	 12.0098   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 35, xn: 35, m: 35, rA: 2, r: 50)                             	 0.0480792 	 1000      	 178.352   	 0         	 30.9822   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 35, xn: 50, m: 70, rA: 1, r: 35)                             	 0.0347397 	 1000      	 246.836   	 0         	 42.8789   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 61250, cols: 1)                                                                                                                                                                         	 0.000149835	 2         	 0         	 0         	 6.54053   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.756019  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.754766  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.180881  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.179301  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.000327797	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000154285	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000149835	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.082e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.2251e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.219e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23454654777216 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23454480852992 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23454279526528 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23454078200064 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23453876873600 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23453675547136 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23453474220672 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23453272894208 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23453071567744 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23452870241280 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23452668914816 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23452467588352 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23452266261888 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23452064935424 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23451863608960 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23451662282496 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23451460956032 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23451259629568 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23451058303104 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23450856976640 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23450655650176 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23450454323712 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23450252997248 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23450051670784 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23449850344320 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23449649017856 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23449447691392 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23449246364928 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23449045038464 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23448843712000 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23448642385536 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23448441059072 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23448239728512 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23448038402048 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23447837075584 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23447635749120 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23447434422656 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23447233096192 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23447031769728 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23446830443264 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23446629116800 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23446427790336 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23446226463872 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23446025137408 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23445823810944 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23445622484480 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23445421158016 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23445219831552 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23445018505088 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23444817178624 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23444615852160 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23444414525696 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23444213199232 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23444011872768 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23443810546304 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23443609219840 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23443407893376 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23443206566912 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23443005240448 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23442803913984 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23442602587520 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23442401261056 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23442199934592 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23454375991040 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23454370543360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 36, r2: 2, n: 50, n_right: 36, m: 50, r1: 2) 	 0.453682  	 1000      	 57.1325   	 0         	 4.74693   	 12.0357   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1800, r2: 1, n: 36, n_right: 1, m: 36, r1: 2)	 0.344631  	 1000      	 27.0759   	 0         	 4.57282   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 36, n_right: 1800, m: 36, r1: 1)	 0.124018  	 1000      	 75.2404   	 0         	 12.7073   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 36, m: 100, rA: 2, r: 36)                            	 0.0934736 	 1000      	 277.297   	 0         	 23.0397   	 12.0357   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 36, xn: 36, m: 36, rA: 2, r: 50)                             	 0.0447462 	 1000      	 208.536   	 0         	 35.2194   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 36, xn: 50, m: 72, rA: 1, r: 36)                             	 0.0309076 	 1000      	 301.906   	 0         	 50.9886   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 64800, cols: 1)                                                                                                                                                                         	 0.000168616	 2         	 0         	 0         	 6.14888   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 0.949468  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.922332  	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.170743  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.169127  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00271276	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000189756	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000168616	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.861e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.5971e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.213e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23114175567744 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23113970477056 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23113769150592 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23113567824128 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23113366497664 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23113165171200 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23112963844736 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23112762518272 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23112561191808 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23112359865344 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23112158538880 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23111957212416 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23111755885952 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23111554559488 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23111353233024 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23111151906560 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23110950580096 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23110749253632 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23110547927168 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23110346600704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23110145274240 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23109943947776 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23109742621312 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23109541294848 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23109339968384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23109138641920 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23108937315456 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23108735988992 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23108534662528 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23108333336064 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23108132009600 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23107930683136 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23107729352576 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23107528026112 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23107326699648 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23107125373184 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23106924046720 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23106722720256 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23106521393792 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23106320067328 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23106118740864 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23105917414400 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23105716087936 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23105514761472 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23105313435008 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23105112108544 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23104910782080 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23104709455616 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23104508129152 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23104306802688 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23104105476224 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23103904149760 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23103702823296 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23103501496832 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23103300170368 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23103098843904 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23102897517440 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23102696190976 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23102494864512 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23102293538048 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23102092211584 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23101890885120 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23101689558656 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23114069907200 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23114063316736 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 37, r2: 2, n: 50, n_right: 37, m: 50, r1: 2) 	 0.604767  	 1000      	 45.2736   	 0         	 3.75417   	 12.0595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1850, r2: 1, n: 37, n_right: 1, m: 37, r1: 2)	 0.354078  	 1000      	 28.6112   	 0         	 4.70152   	 6.08553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 37, n_right: 1850, m: 37, r1: 1)	 0.123595  	 1000      	 81.966    	 0         	 13.469    	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 37, m: 100, rA: 2, r: 37)                            	 0.0951791 	 1000      	 287.668   	 0         	 23.854    	 12.0595   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 37, xn: 37, m: 37, rA: 2, r: 50)                             	 0.0530768 	 1000      	 190.867   	 0         	 31.364    	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 37, xn: 50, m: 74, rA: 1, r: 37)                             	 0.0365585 	 1000      	 277.106   	 0         	 45.5353   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 68450, cols: 1)                                                                                                                                                                         	 0.000169525	 2         	 0         	 0         	 6.4604    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.11092   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.08244   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.186416  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.184814  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.0026632 	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000230677	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000169525	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 4.9872e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 4.959e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.9581e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22929889621888 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22929689536512 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22929488210048 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22929286883584 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22929085557120 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22928884230656 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22928682904192 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22928481577728 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22928280251264 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22928078924800 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22927877598336 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22927676271872 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22927474945408 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22927273618944 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22927072292480 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22926870966016 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22926669639552 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22926468313088 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22926266986624 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22926065660160 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22925864333696 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22925663007232 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22925461680768 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22925260354304 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22925059027840 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22924857701376 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22924656374912 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22924455048448 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22924253721984 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22924052395520 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22923851069056 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22923649742592 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22923448412032 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22923247085568 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22923045759104 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22922844432640 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22922643106176 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22922441779712 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22922240453248 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22922039126784 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22921837800320 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22921636473856 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22921435147392 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22921233820928 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22921032494464 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22920831168000 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22920629841536 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22920428515072 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22920227188608 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22920025862144 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22919824535680 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22919623209216 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22919421882752 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22919220556288 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22919019229824 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22918817903360 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22918616576896 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22918415250432 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22918213923968 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22918012597504 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22917811271040 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22917609944576 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22917408618112 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22929783961344 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22929777370880 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 38, r2: 2, n: 50, n_right: 38, m: 50, r1: 2) 	 0.532716  	 1000      	 54.2128   	 0         	 4.4872    	 12.0817   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1900, r2: 1, n: 38, n_right: 1, m: 38, r1: 2)	 0.367761  	 1000      	 29.8411   	 0         	 4.77458   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 38, n_right: 1900, m: 38, r1: 1)	 0.126488  	 1000      	 86.7623   	 0         	 13.882    	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 38, m: 100, rA: 2, r: 38)                            	 0.0914924 	 1000      	 315.655   	 0         	 26.1268   	 12.0817   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 38, xn: 38, m: 38, rA: 2, r: 50)                             	 0.0483567 	 1000      	 226.947   	 0         	 36.3115   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 38, xn: 50, m: 76, rA: 1, r: 38)                             	 0.0387608 	 1000      	 283.132   	 0         	 45.3011   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 72200, cols: 1)                                                                                                                                                                         	 0.000175706	 2         	 0         	 0         	 6.57462   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.05593   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.02696   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.180181  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.17861   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00332786	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000190666	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000175706	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8572e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.553e-05 	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.809e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23428597794688 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23428375504896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23428174178432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23427972851968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23427771525504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23427570199040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23427368872576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23427167546112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23426966219648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23426764893184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23426563566720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23426362240256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23426160913792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23425959587328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23425758260864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23425556934400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23425355607936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23425154281472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23424952955008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23424751628544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23424550302080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23424348975616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23424147649152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23423946322688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23423744996224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23423543669760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23423342343296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23423141016832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23422939690368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23422738363904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23422537037440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23422335710976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23422134380416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23421933053952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23421731727488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23421530401024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23421329074560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23421127748096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23420926421632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23420725095168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23420523768704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23420322442240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23420121115776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23419919789312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23419718462848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23419517136384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23419315809920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23419114483456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23418913156992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23418711830528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23418510504064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23418309177600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23418107851136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23417906524672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23417705198208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23417503871744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23417302545280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23417101218816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23416899892352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23416698565888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23416497239424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23416295912960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23416094586496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23428492134144 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23428485543680 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 39, r2: 2, n: 50, n_right: 39, m: 50, r1: 2) 	 0.604209  	 1000      	 50.3468   	 0         	 4.16015   	 12.1022   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1950, r2: 1, n: 39, n_right: 1, m: 39, r1: 2)	 0.390854  	 1000      	 30.3536   	 0         	 4.73204   	 6.41447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 39, n_right: 1950, m: 39, r1: 1)	 0.136302  	 1000      	 87.0404   	 0         	 13.5694   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 39, m: 100, rA: 2, r: 39)                            	 0.0949696 	 1000      	 320.313   	 0         	 26.4674   	 12.1022   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 39, xn: 39, m: 39, rA: 2, r: 50)                             	 0.0578466 	 1000      	 205.091   	 0         	 31.9731   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 39, xn: 50, m: 78, rA: 1, r: 39)                             	 0.0390529 	 1000      	 303.788   	 0         	 47.3597   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 76050, cols: 1)                                                                                                                                                                         	 0.000188476	 2         	 0         	 0         	 6.45599   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.16572   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.13136   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.19322   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.191869  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00282675	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000207876	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000188476	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.8941e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8541e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5801e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22362452666240 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22362216982528 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22362015656064 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22361814329600 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22361613003136 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22361411676672 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22361210350208 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22361009023744 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22360807697280 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22360606370816 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22360405044352 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22360203717888 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22360002391424 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22359801064960 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22359599738496 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22359398412032 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22359197085568 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22358995759104 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22358794432640 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22358593106176 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22358391779712 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22358190453248 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22357989126784 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22357787800320 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22357586473856 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22357385147392 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22357183820928 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22356982494464 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22356781168000 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22356579841536 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22356378515072 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22356177188608 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22355975858048 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22355774531584 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22355573205120 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22355371878656 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22355170552192 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22354969225728 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22354767899264 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22354566572800 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22354365246336 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22354163919872 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22353962593408 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22353761266944 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22353559940480 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22353358614016 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22353157287552 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22352955961088 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22352754634624 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22352553308160 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22352351981696 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22352150655232 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22351949328768 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22351748002304 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22351546675840 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22351345349376 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22351144022912 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22350942696448 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22350741369984 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22350540043520 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22350338717056 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22350137390592 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22349936064128 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22362347005696 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22362340415232 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 40, r2: 2, n: 50, n_right: 40, m: 50, r1: 2) 	 0.608546  	 1000      	 52.5843   	 0         	 4.33821   	 12.1212   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2000, r2: 1, n: 40, n_right: 1, m: 40, r1: 2)	 0.423307  	 1000      	 30.2381   	 0         	 4.59619   	 6.57895   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 40, n_right: 2000, m: 40, r1: 1)	 0.149147  	 1000      	 85.8215   	 0         	 13.0449   	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 40, m: 100, rA: 2, r: 40)                            	 0.104989  	 1000      	 304.793   	 0         	 25.1455   	 12.1212   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 40, xn: 40, m: 40, rA: 2, r: 50)                             	 0.0582599 	 1000      	 219.705   	 0         	 33.3952   	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 40, xn: 50, m: 80, rA: 1, r: 40)                             	 0.0366971 	 1000      	 348.801   	 0         	 53.0178   	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 80000, cols: 1)                                                                                                                                                                         	 0.000191626	 2         	 0         	 0         	 6.67968   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.21705   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.181     	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.201276  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.199946  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00304328	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000191626	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000175645	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.95e-05  	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8203e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4491e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22642356475776 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22642128054272 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22641926727808 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22641725401344 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22641524074880 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22641322748416 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22641121421952 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22640920095488 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22640718769024 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22640517442560 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22640316116096 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22640114789632 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22639913463168 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22639712136704 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22639510810240 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22639309483776 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22639108157312 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22638906830848 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22638705504384 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22638504177920 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22638302851456 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22638101524992 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22637900198528 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22637698872064 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22637497545600 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22637296219136 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22637094892672 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22636893566208 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22636692239744 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22636490913280 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22636289586816 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22636088260352 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22635886929792 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22635685603328 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22635484276864 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22635282950400 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22635081623936 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22634880297472 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22634678971008 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22634477644544 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22634276318080 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22634074991616 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22633873665152 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22633672338688 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22633471012224 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22633269685760 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22633068359296 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22632867032832 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22632665706368 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22632464379904 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22632263053440 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22632061726976 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22631860400512 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22631659074048 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22631457747584 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22631256421120 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22631055094656 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22630853768192 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22630652441728 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22630451115264 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22630249788800 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22630048462336 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22629847135872 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22642250815232 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22642244224768 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 41, r2: 2, n: 50, n_right: 41, m: 50, r1: 2) 	 0.515689  	 1000      	 65.1944   	 0         	 5.37068   	 12.1389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2050, r2: 1, n: 41, n_right: 1, m: 41, r1: 2)	 0.421209  	 1000      	 32.7253   	 0         	 4.85293   	 6.74342   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 41, n_right: 2050, m: 41, r1: 1)	 0.145947  	 1000      	 94.4468   	 0         	 14.0058   	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 41, m: 100, rA: 2, r: 41)                            	 0.0961968 	 1000      	 349.492   	 0         	 28.791    	 12.1389   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 41, xn: 41, m: 41, rA: 2, r: 50)                             	 0.0606827 	 1000      	 227.152   	 0         	 33.685    	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 41, xn: 50, m: 82, rA: 1, r: 41)                             	 0.0401248 	 1000      	 343.533   	 0         	 50.9435   	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 84050, cols: 1)                                                                                                                                                                         	 0.000184775	 2         	 0         	 0         	 7.27804   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.11861   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.08284   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.198642  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.197004  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00308398	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000214346	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000184775	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.9231e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.8951e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.7711e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22683785963392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22683601332224 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22683400005760 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22683198679296 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22682997352832 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22682796026368 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22682594699904 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22682393373440 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22682192046976 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22681990720512 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22681789394048 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22681588067584 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22681386741120 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22681185414656 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22680984088192 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22680782761728 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22680581435264 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22680380108800 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22680178782336 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22679977455872 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22679776129408 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22679574802944 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22679373476480 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22679172150016 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22678970823552 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22678769497088 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22678568170624 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22678366844160 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22678165517696 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22677964191232 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22677762864768 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22677561538304 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22677360207744 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22677158881280 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22676957554816 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22676756228352 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22676554901888 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22676353575424 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22676152248960 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22675950922496 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22675749596032 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22675548269568 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22675346943104 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22675145616640 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22674944290176 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22674742963712 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22674541637248 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22674340310784 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22674138984320 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22673937657856 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22673736331392 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22673535004928 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22673333678464 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22673132352000 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22672931025536 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22672729699072 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22672528372608 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22672327046144 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22672125719680 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22671924393216 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22671723066752 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22671521740288 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22671320413824 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22683680302848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22683673712384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 42, r2: 2, n: 50, n_right: 42, m: 50, r1: 2) 	 0.519743  	 1000      	 67.8797   	 0         	 5.5843    	 12.1555   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2100, r2: 1, n: 42, n_right: 1, m: 42, r1: 2)	 0.447591  	 1000      	 33.1052   	 0         	 4.79238   	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 42, n_right: 2100, m: 42, r1: 1)	 0.143333  	 1000      	 103.379   	 0         	 14.9653   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 42, m: 100, rA: 2, r: 42)                            	 0.0978154 	 1000      	 360.679   	 0         	 29.6722   	 12.1555   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 42, xn: 42, m: 42, rA: 2, r: 50)                             	 0.0588869 	 1000      	 251.628   	 0         	 36.4262   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 42, xn: 50, m: 84, rA: 1, r: 42)                             	 0.0384715 	 1000      	 385.158   	 0         	 55.7562   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 88200, cols: 1)                                                                                                                                                                         	 0.000232977	 2         	 0         	 0         	 6.05725   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.14929   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.11067   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.196795  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.195174  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.002727  	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000232977	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000187305	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.3771e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.832e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4801e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23186942773120 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23186716485632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23186515159168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23186313832704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23186112506240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23185911179776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23185709853312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23185508526848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23185307200384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23185105873920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23184904547456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23184703220992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23184501894528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23184300568064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23184099241600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23183897915136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23183696588672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23183495262208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23183293935744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23183092609280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23182891282816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23182689956352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23182488629888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23182287303424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23182085976960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23181884650496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23181683324032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23181481997568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23181280671104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23181079344640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23180878018176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23180676691712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23180475361152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23180274034688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23180072708224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23179871381760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23179670055296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23179468728832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23179267402368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23179066075904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23178864749440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23178663422976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23178462096512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23178260770048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23178059443584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23177858117120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23177656790656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23177455464192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23177254137728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23177052811264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23176851484800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23176650158336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23176448831872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23176247505408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23176046178944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23175844852480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23175643526016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23175442199552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23175240873088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23175039546624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23174838220160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23174636893696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23174435567232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23186837112576 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23186830522112 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 43, r2: 2, n: 50, n_right: 43, m: 50, r1: 2) 	 0.570258  	 1000      	 64.8479   	 0         	 5.32812   	 12.1709   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2150, r2: 1, n: 43, n_right: 1, m: 43, r1: 2)	 0.466807  	 1000      	 34.0642   	 0         	 4.81652   	 7.07237   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 43, n_right: 2150, m: 43, r1: 1)	 0.146039  	 1000      	 108.885   	 0         	 15.3958   	 7.07237   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 43, m: 100, rA: 2, r: 43)                            	 0.0969898 	 1000      	 381.277   	 0         	 31.327    	 12.1709   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 43, xn: 43, m: 43, rA: 2, r: 50)                             	 0.0576977 	 1000      	 275.598   	 0         	 38.9683   	 7.07237   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 43, xn: 50, m: 86, rA: 1, r: 43)                             	 0.0444835 	 1000      	 357.468   	 0         	 50.5443   	 7.07237   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 92450, cols: 1)                                                                                                                                                                         	 0.000179206	 2         	 0         	 0         	 8.25419   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.22801   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.1831    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.200769  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.199171  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00327653	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000191346	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000179206	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.859e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.7821e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.259e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23348075612032 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23347844868096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23347643541632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23347442215168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23347240888704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23347039562240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23346838235776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23346636909312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23346435582848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23346234256384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23346032929920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23345831603456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23345630276992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23345428950528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23345227624064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23345026297600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23344824971136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23344623644672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23344422318208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23344220991744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23344019665280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23343818338816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23343617012352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23343415685888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23343214359424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23343013032960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23342811706496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23342610380032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23342409053568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23342207727104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23342006400640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23341805074176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23341603743616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23341402417152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23341201090688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23340999764224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23340798437760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23340597111296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23340395784832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23340194458368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23339993131904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23339791805440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23339590478976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23339389152512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23339187826048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23338986499584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23338785173120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23338583846656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23338382520192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23338181193728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23337979867264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23337778540800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23337577214336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23337375887872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23337174561408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23336973234944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23336771908480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23336570582016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23336369255552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23336167929088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23335966602624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23335765276160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23335563949696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23347969951488 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23347963361024 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 44, r2: 2, n: 50, n_right: 44, m: 50, r1: 2) 	 0.532949  	 1000      	 72.6524   	 0         	 5.9623    	 12.1853   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2200, r2: 1, n: 44, n_right: 1, m: 44, r1: 2)	 0.48762   	 1000      	 34.9387   	 0         	 4.82789   	 7.23684   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 44, n_right: 2200, m: 44, r1: 1)	 0.149963  	 1000      	 113.606   	 0         	 15.6983   	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 44, m: 100, rA: 2, r: 44)                            	 0.0971959 	 1000      	 398.371   	 0         	 32.6927   	 12.1853   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 44, xn: 44, m: 44, rA: 2, r: 50)                             	 0.057344  	 1000      	 297.098   	 0         	 41.0536   	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 44, xn: 50, m: 88, rA: 1, r: 44)                             	 0.0420618 	 1000      	 405.043   	 0         	 55.9695   	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 96800, cols: 1)                                                                                                                                                                         	 0.000210246	 2         	 0         	 0         	 7.36661   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.21662   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.17053   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.197948  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.196602  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00306882	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00030764	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000210246	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8701e-05	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 2.6641e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.1971e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23105980348288 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23105783195648 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23105581869184 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23105380542720 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23105179216256 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23104977889792 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23104776563328 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23104575236864 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23104373910400 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23104172583936 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23103971257472 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23103769931008 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23103568604544 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23103367278080 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23103165951616 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23102964625152 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23102763298688 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23102561972224 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23102360645760 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23102159319296 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23101957992832 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23101756666368 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23101555339904 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23101354013440 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23101152686976 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23100951360512 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23100750034048 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23100548707584 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23100347381120 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23100146054656 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23099944728192 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23099743401728 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23099542071168 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23099340744704 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23099139418240 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23098938091776 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23098736765312 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23098535438848 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23098334112384 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23098132785920 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23097931459456 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23097730132992 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23097528806528 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23097327480064 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23097126153600 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23096924827136 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23096723500672 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23096522174208 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23096320847744 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23096119521280 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23095918194816 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23095716868352 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23095515541888 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23095314215424 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23095112888960 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23094911562496 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23094710236032 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23094508909568 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23094307583104 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23094106256640 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23093904930176 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23093703603712 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23093502277248 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23105874687744 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23105868097280 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 45, r2: 2, n: 50, n_right: 45, m: 50, r1: 2) 	 0.683283  	 1000      	 59.2726   	 0         	 4.85889   	 12.1988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2250, r2: 1, n: 45, n_right: 1, m: 45, r1: 2)	 0.512491  	 1000      	 35.5616   	 0         	 4.80476   	 7.40132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 45, n_right: 2250, m: 45, r1: 1)	 0.164324  	 1000      	 110.909   	 0         	 14.9851   	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 45, m: 100, rA: 2, r: 45)                            	 0.100253  	 1000      	 403.978   	 0         	 33.1162   	 12.1988   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 45, xn: 45, m: 45, rA: 2, r: 50)                             	 0.0581395 	 1000      	 313.47    	 0         	 42.3533   	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 45, xn: 50, m: 90, rA: 1, r: 45)                             	 0.0448541 	 1000      	 406.318   	 0         	 54.898    	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 101250, cols: 1)                                                                                                                                                                        	 0.000191746	 2         	 0         	 0         	 8.44868   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.40711   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.3601    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.204686  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.203247  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00294012	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000205856	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000191746	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.0111e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8471e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2461e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23076446066560 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23076255295488 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23076053969024 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23075852642560 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23075651316096 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23075449989632 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23075248663168 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23075047336704 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23074846010240 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23074644683776 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23074443357312 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23074242030848 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23074040704384 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23073839377920 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23073638051456 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23073436724992 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23073235398528 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23073034072064 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23072832745600 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23072631419136 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23072430092672 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23072228766208 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23072027439744 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23071826113280 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23071624786816 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23071423460352 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23071222133888 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23071020807424 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23070819480960 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23070618154496 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23070416828032 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23070215501568 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23070014171008 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23069812844544 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23069611518080 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23069410191616 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23069208865152 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23069007538688 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23068806212224 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23068604885760 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23068403559296 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23068202232832 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23068000906368 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23067799579904 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23067598253440 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23067396926976 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23067195600512 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23066994274048 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23066792947584 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23066591621120 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23066390294656 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23066188968192 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23065987641728 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23065786315264 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23065584988800 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23065383662336 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23065182335872 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23064981009408 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23064779682944 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23064578356480 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23064377030016 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23064175703552 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23063974377088 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23076340406016 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23076333815552 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 46, r2: 2, n: 50, n_right: 46, m: 50, r1: 2) 	 0.760758  	 1000      	 55.6288   	 0         	 4.55546   	 12.2114   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2300, r2: 1, n: 46, n_right: 1, m: 46, r1: 2)	 0.549409  	 1000      	 35.433    	 0         	 4.68331   	 7.56579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 46, n_right: 2300, m: 46, r1: 1)	 0.186018  	 1000      	 104.652   	 0         	 13.8323   	 7.56579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 46, m: 100, rA: 2, r: 46)                            	 0.101792  	 1000      	 415.749   	 0         	 34.0458   	 12.2114   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 46, xn: 46, m: 46, rA: 2, r: 50)                             	 0.0599199 	 1000      	 324.887   	 0         	 42.9416   	 7.56579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 46, xn: 50, m: 92, rA: 1, r: 46)                             	 0.0434502 	 1000      	 448.035   	 0         	 59.2186   	 7.56579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 105800, cols: 1)                                                                                                                                                                        	 0.000202416	 2         	 0         	 0         	 8.36298   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.54425   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.49618   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.206728  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.205162  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00278374	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000264008	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000202416	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.6401e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.82e-05  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4601e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22899600766848 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22899423438848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22899222112384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22899020785920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22898819459456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22898618132992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22898416806528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22898215480064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22898014153600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22897812827136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22897611500672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22897410174208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22897208847744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22897007521280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22896806194816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22896604868352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22896403541888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22896202215424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22896000888960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22895799562496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22895598236032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22895396909568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22895195583104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22894994256640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22894792930176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22894591603712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22894390277248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22894188950784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22893987624320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22893786297856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22893584971392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22893383644928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22893182314368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22892980987904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22892779661440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22892578334976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22892377008512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22892175682048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22891974355584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22891773029120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22891571702656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22891370376192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22891169049728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22890967723264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22890766396800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22890565070336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22890363743872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22890162417408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22889961090944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22889759764480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22889558438016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22889357111552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22889155785088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22888954458624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22888753132160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22888551805696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22888350479232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22888149152768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22887947826304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22887746499840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22887545173376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22887343846912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22887142520448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22899495106304 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22899316479744 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 47, r2: 2, n: 50, n_right: 47, m: 50, r1: 2) 	 0.803646  	 1000      	 54.9745   	 0         	 4.4975    	 12.2233   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2350, r2: 1, n: 47, n_right: 1, m: 47, r1: 2)	 0.580216  	 1000      	 35.7877   	 0         	 4.62956   	 7.73026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 47, n_right: 2350, m: 47, r1: 1)	 0.184223  	 1000      	 112.715   	 0         	 14.581    	 7.73026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 47, m: 100, rA: 2, r: 47)                            	 0.118034  	 1000      	 374.3     	 0         	 30.6218   	 12.2233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 47, xn: 47, m: 47, rA: 2, r: 50)                             	 0.0677412 	 1000      	 306.529   	 0         	 39.6531   	 7.73026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 47, xn: 50, m: 94, rA: 1, r: 47)                             	 0.0454188 	 1000      	 457.18    	 0         	 59.1416   	 7.73026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 110450, cols: 1)                                                                                                                                                                        	 0.000224007	 2         	 0         	 0         	 7.88904   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.61689   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.56808   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.232644  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.231194  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00340514	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000224007	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000207897	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.2021e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.869e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.498e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22782053902208 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22781848709120 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22781647382656 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22781446056192 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22781244729728 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22781043403264 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22780842076800 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22780640750336 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22780439423872 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22780238097408 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22780036770944 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22779835444480 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22779634118016 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22779432791552 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22779231465088 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22779030138624 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22778828812160 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22778627485696 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22778426159232 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22778224832768 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22778023506304 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22777822179840 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22777620853376 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22777419526912 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22777218200448 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22777016873984 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22776815547520 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22776614221056 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22776412894592 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22776211568128 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22776010241664 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22775808915200 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22775607584640 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22775406258176 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22775204931712 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22775003605248 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22774802278784 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22774600952320 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22774399625856 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22774198299392 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22773996972928 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22773795646464 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22773594320000 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22773392993536 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22773191667072 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22772990340608 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22772789014144 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22772587687680 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22772386361216 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22772185034752 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22771983708288 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22771782381824 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22771581055360 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22771379728896 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22771178402432 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22770977075968 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22770775749504 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22770574423040 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22770373096576 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22770171770112 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22769970443648 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22769769117184 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22769567790720 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22781948241664 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22781941651200 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2400, r2: 1, n: 48, n_right: 1, m: 48, r1: 2)	 0.583124  	 1000      	 37.9309   	 0         	 4.80457   	 7.89474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 48, r2: 2, n: 50, n_right: 48, m: 50, r1: 2) 	 0.582752  	 1000      	 79.0731   	 0         	 6.46313   	 12.2345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 48, n_right: 2400, m: 48, r1: 1)	 0.181368  	 1000      	 121.953   	 0         	 15.4474   	 7.89474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 48, m: 100, rA: 2, r: 48)                            	 0.107425  	 1000      	 428.95    	 0         	 35.0607   	 12.2345   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 48, xn: 48, m: 48, rA: 2, r: 50)                             	 0.0628481 	 1000      	 351.934   	 0         	 44.5784   	 7.89474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 48, xn: 50, m: 96, rA: 1, r: 48)                             	 0.0420473 	 1000      	 526.037   	 0         	 66.6313   	 7.89474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 115200, cols: 1)                                                                                                                                                                        	 0.000213177	 2         	 0         	 0         	 8.64634   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.40053   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.34724   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.213723  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.21232   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00315   	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000213177	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000210766	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.861e-05 	 1000      
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.1051e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.7481e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22731568215936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22731382843392 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22731181516928 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22730980190464 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22730778864000 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22730577537536 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22730376211072 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22730174884608 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22729973558144 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22729772231680 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22729570905216 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22729369578752 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22729168252288 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22728966925824 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22728765599360 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22728564272896 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22728362946432 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22728161619968 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22727960293504 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22727758967040 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22727557640576 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22727356314112 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22727154987648 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22726953661184 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22726752334720 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22726551008256 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22726349681792 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22726148355328 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22725947028864 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22725745702400 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22725544375936 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22725343049472 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22725141718912 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22724940392448 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22724739065984 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22724537739520 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22724336413056 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22724135086592 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22723933760128 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22723732433664 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22723531107200 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22723329780736 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22723128454272 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22722927127808 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22722725801344 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22722524474880 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22722323148416 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22722121821952 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22721920495488 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22721719169024 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22721517842560 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22721316516096 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22721115189632 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22720913863168 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22720712536704 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22720511210240 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22720309883776 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22720108557312 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22719907230848 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22719705904384 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22719504577920 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22719303251456 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22719101924992 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22731462555392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22731455964928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 49, r2: 2, n: 50, n_right: 49, m: 50, r1: 2) 	 0.814689  	 1000      	 58.9427   	 0         	 4.81361   	 12.245    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2450, r2: 1, n: 49, n_right: 1, m: 49, r1: 2)	 0.609994  	 1000      	 38.5738   	 0         	 4.7863    	 8.05921   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 49, n_right: 2450, m: 49, r1: 1)	 0.199262  	 1000      	 118.085   	 0         	 14.6522   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 49, m: 100, rA: 2, r: 49)                            	 0.118163  	 1000      	 406.386   	 0         	 33.1879   	 12.245    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 49, xn: 49, m: 49, rA: 2, r: 50)                             	 0.0657499 	 1000      	 357.868   	 0         	 44.4049   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 49, xn: 50, m: 98, rA: 1, r: 49)                             	 0.0478131 	 1000      	 492.12    	 0         	 61.0631   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 120050, cols: 1)                                                                                                                                                                        	 0.000241637	 2         	 0         	 0         	 7.94911   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.67741   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.62395   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.233161  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.231726  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00331517	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000241637	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000202806	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.9201e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8441e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.2401e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22403289909120 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22403086280704 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22402884954240 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22402683627776 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22402482301312 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22402280974848 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22402079648384 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22401878321920 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22401676995456 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22401475668992 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22401274342528 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22401073016064 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22400871689600 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22400670363136 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22400469036672 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22400267710208 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22400066383744 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22399865057280 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22399663730816 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22399462404352 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22399261077888 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22399059751424 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22398858424960 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22398657098496 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22398455772032 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22398254445568 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22398053119104 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22397851792640 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22397650466176 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22397449139712 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22397247813248 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22397046486784 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22396845156224 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22396643829760 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22396442503296 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22396241176832 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22396039850368 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22395838523904 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22395637197440 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22395435870976 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22395234544512 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22395033218048 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22394831891584 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22394630565120 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22394429238656 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22394227912192 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22394026585728 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22393825259264 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22393623932800 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22393422606336 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22393221279872 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22393019953408 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22392818626944 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22392617300480 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22392415974016 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22392214647552 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22392013321088 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22391811994624 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22391610668160 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22391409341696 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22391208015232 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22391006688768 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22390805362304 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22403184248576 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22403177658112 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 50, r2: 2, n: 50, n_right: 50, m: 50, r1: 2) 	 0.815396  	 1000      	 61.3199   	 0         	 5.0037    	 12.2549   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2500, r2: 1, n: 50, n_right: 1, m: 50, r1: 2)	 0.640493  	 1000      	 39.0324   	 0         	 4.74634   	 8.22368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 50, n_right: 2500, m: 50, r1: 1)	 0.198274  	 1000      	 126.088   	 0         	 15.3323   	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 50, m: 100, rA: 2, r: 50)                            	 0.106615  	 1000      	 468.978   	 0         	 38.2686   	 12.2549   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 50, m: 50, rA: 2, r: 50)                             	 0.0703574 	 1000      	 355.329   	 0         	 43.208    	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 50, m: 100, rA: 1, r: 50)                            	 0.0454768 	 1000      	 549.731   	 0         	 66.8473   	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 125000, cols: 1)                                                                                                                                                                        	 0.000253148	 2         	 0         	 0         	 7.90052   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.71864   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.65416   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.223762  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.222449  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00321911	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000253148	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000209386	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 3.2001e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8521e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4061e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22413645973376 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22413421045760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22413219719296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22413018392832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22412817066368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22412615739904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22412414413440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22412213086976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22412011760512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22411810434048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22411609107584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22411407781120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22411206454656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22411005128192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22410803801728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22410602475264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22410401148800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22410199822336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22409998495872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22409797169408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22409595842944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22409394516480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22409193190016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22408991863552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22408790537088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22408589210624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22408387884160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22408186557696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22407985231232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22407783904768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22407582578304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22407381251840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22407179921280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22406978594816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22406777268352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22406575941888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22406374615424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22406173288960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22405971962496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22405770636032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22405569309568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22405367983104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22405166656640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22404965330176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22404764003712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22404562677248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22404361350784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22404160024320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22403958697856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22403757371392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22403556044928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22403354718464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22403153392000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22402952065536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22402750739072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22402549412608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22402348086144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22402146759680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22401945433216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22401744106752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22401542780288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22401341453824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22401140127360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22413540312832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22413533722368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2550, r2: 1, n: 51, n_right: 1, m: 51, r1: 2)	 0.684445  	 1000      	 38.7616   	 0         	 4.621     	 8.38816   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 51, n_right: 2550, m: 51, r1: 1)	 0.193744  	 1000      	 136.934   	 0         	 16.3247   	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 51, m: 100, rA: 2, r: 51)                            	 0.130513  	 1000      	 398.581   	 0         	 32.4995   	 12.2642   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 51, r2: 2, n: 50, n_right: 51, m: 50, r1: 2) 	 0.117451  	 1000      	 442.906   	 0         	 36.1137   	 12.2642   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 51, xn: 51, m: 51, rA: 2, r: 50)                             	 0.0712107 	 1000      	 372.559   	 0         	 44.4149   	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 51, xn: 50, m: 102, rA: 1, r: 51)                            	 0.0486587 	 1000      	 545.23    	 0         	 65        	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 130050, cols: 1)                                                                                                                                                                        	 0.000249558	 2         	 0         	 0         	 8.33794   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.05929   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 0.99564   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.251667  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.250382  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00329943	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000249848	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000249558	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.6172e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8381e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.267e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23445651978112 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23445421156352 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23445219829888 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23445018503424 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23444817176960 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23444615850496 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23444414524032 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23444213197568 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23444011871104 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23443810544640 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23443609218176 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23443407891712 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23443206565248 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23443005238784 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23442803912320 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23442602585856 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23442401259392 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23442199932928 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23441998606464 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23441797280000 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23441595953536 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23441394627072 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23441193300608 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23440991974144 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23440790647680 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23440589321216 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23440387994752 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23440186668288 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23439985341824 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23439784015360 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23439582688896 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23439381362432 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23439180031872 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23438978705408 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23438777378944 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23438576052480 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23438374726016 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23438173399552 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23437972073088 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23437770746624 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23437569420160 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23437368093696 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23437166767232 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23436965440768 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23436764114304 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23436562787840 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23436361461376 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23436160134912 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23435958808448 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23435757481984 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23435556155520 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23435354829056 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23435153502592 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23434952176128 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23434750849664 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23434549523200 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23434348196736 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23434146870272 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23433945543808 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23433744217344 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23433542890880 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23433341564416 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23433140237952 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23445546317568 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23445539727104 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2600, r2: 1, n: 52, n_right: 1, m: 52, r1: 2)	 0.776028  	 1000      	 36.2379   	 0         	 4.23704   	 8.55263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 52, n_right: 2600, m: 52, r1: 1)	 0.208827  	 1000      	 134.664   	 0         	 15.7454   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 52, m: 100, rA: 2, r: 52)                            	 0.11034   	 1000      	 490.121   	 0         	 39.9347   	 12.2731   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 52, r2: 2, n: 50, n_right: 52, m: 50, r1: 2) 	 0.101275  	 1000      	 533.989   	 0         	 43.5091   	 12.2731   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 52, xn: 52, m: 52, rA: 2, r: 50)                             	 0.0709794 	 1000      	 396.194   	 0         	 46.3242   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 52, xn: 50, m: 104, rA: 1, r: 52)                            	 0.046597  	 1000      	 603.507   	 0         	 70.5639   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 135200, cols: 1)                                                                                                                                                                        	 0.000271549	 2         	 0         	 0         	 7.96615   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.1529    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.08613   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.229601  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.227916  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00313577	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000390992	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000271549	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.5182e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8493e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.1831e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23069106698112 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23068873320448 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23068671993984 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23068470667520 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23068269341056 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23068068014592 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23067866688128 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23067665361664 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23067464035200 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23067262708736 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23067061382272 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23066860055808 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23066658729344 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23066457402880 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23066256076416 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23066054749952 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23065853423488 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23065652097024 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23065450770560 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23065249444096 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23065048117632 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23064846791168 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23064645464704 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23064444138240 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23064242811776 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23064041485312 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23063840158848 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23063638832384 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23063437505920 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23063236179456 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23063034852992 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23062833526528 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23062632195968 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23062430869504 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23062229543040 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23062028216576 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23061826890112 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23061625563648 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23061424237184 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23061222910720 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23061021584256 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23060820257792 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23060618931328 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23060417604864 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23060216278400 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23060014951936 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23059813625472 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23059612299008 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23059410972544 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23059209646080 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23059008319616 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23058806993152 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23058605666688 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23058404340224 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23058203013760 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23058001687296 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23057800360832 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23057599034368 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23057397707904 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23057196381440 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23056995054976 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23056793728512 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23056592402048 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23069001037568 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23068994447104 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2650, r2: 1, n: 53, n_right: 1, m: 53, r1: 2)	 0.814799  	 1000      	 36.5432   	 0         	 4.19213   	 8.71711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 53, n_right: 2650, m: 53, r1: 1)	 0.242808  	 1000      	 122.63    	 0         	 14.0677   	 8.71711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 53, r2: 2, n: 50, n_right: 53, m: 50, r1: 2) 	 0.134376  	 1000      	 418.08    	 0         	 34.0417   	 12.2814   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 53, m: 100, rA: 2, r: 53)                            	 0.115423  	 1000      	 486.733   	 0         	 39.6317   	 12.2814   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 53, xn: 53, m: 53, rA: 2, r: 50)                             	 0.0761934 	 1000      	 390.787   	 0         	 44.8299   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 53, xn: 50, m: 106, rA: 1, r: 53)                            	 0.0528554 	 1000      	 563.337   	 0         	 64.6243   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 140450, cols: 1)                                                                                                                                                                        	 0.000288509	 2         	 0         	 0         	 7.78901   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.26126   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.19198   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.245801  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.244471  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00329807	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000288509	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000230997	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.7411e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.835e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.7401e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22582492997504 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22582266947584 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22582065621120 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22581864294656 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22581662968192 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22581461641728 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22581260315264 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22581058988800 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22580857662336 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22580656335872 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22580455009408 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22580253682944 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22580052356480 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22579851030016 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22579649703552 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22579448377088 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22579247050624 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22579045724160 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22578844397696 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22578643071232 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22578441744768 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22578240418304 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22578039091840 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22577837765376 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22577636438912 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22577435112448 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22577233785984 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22577032459520 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22576831133056 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22576629806592 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22576428480128 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22576227153664 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22576025823104 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22575824496640 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22575623170176 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22575421843712 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22575220517248 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22575019190784 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22574817864320 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22574616537856 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22574415211392 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22574213884928 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22574012558464 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22573811232000 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22573609905536 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22573408579072 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22573207252608 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22573005926144 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22572804599680 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22572603273216 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22572401946752 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22572200620288 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22571999293824 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22571797967360 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22571596640896 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22571395314432 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22571193987968 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22570992661504 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22570791335040 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22570590008576 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22570388682112 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22570187355648 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22569986029184 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22582387336960 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22582380746496 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2700, r2: 1, n: 54, n_right: 1, m: 54, r1: 2)	 0.761148  	 1000      	 41.3754   	 0         	 4.65856   	 8.88158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 54, n_right: 2700, m: 54, r1: 1)	 0.200524  	 1000      	 157.053   	 0         	 17.683    	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 54, m: 100, rA: 2, r: 54)                            	 0.114471  	 1000      	 509.474   	 0         	 41.4568   	 12.2893   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 54, r2: 2, n: 50, n_right: 54, m: 50, r1: 2) 	 0.104626  	 1000      	 557.412   	 0         	 45.3576   	 12.2893   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 54, xn: 54, m: 54, rA: 2, r: 50)                             	 0.0762037 	 1000      	 413.272   	 0         	 46.5313   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 54, xn: 50, m: 108, rA: 1, r: 54)                            	 0.0510929 	 1000      	 616.383   	 0         	 69.4002   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 145800, cols: 1)                                                                                                                                                                        	 0.000271179	 2         	 0         	 0         	 8.60244   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.13339   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.0663    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.243236  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.241767  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00311608	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000271179	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000227547	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.1552e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.106e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.8811e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22885313845120 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22885129250816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22884927924352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22884726597888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22884525271424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22884323944960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22884122618496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22883921292032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22883719965568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22883518639104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22883317312640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22883115986176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22882914659712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22882713333248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22882512006784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22882310680320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22882109353856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22881908027392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22881706700928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22881505374464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22881304048000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22881102721536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22880901395072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22880700068608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22880498742144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22880297415680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22880096089216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22879894762752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22879693436288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22879492109824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22879290783360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22879089456896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22878888126336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22878686799872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22878485473408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22878284146944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22878082820480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22877881494016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22877680167552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22877478841088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22877277514624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22877076188160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22876874861696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22876673535232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22876472208768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22876270882304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22876069555840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22875868229376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22875666902912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22875465576448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22875264249984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22875062923520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22874861597056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22874660270592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22874458944128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22874257617664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22874056291200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22873854964736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22873653638272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22873452311808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22873250985344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22873049658880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22872848332416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22885208184576 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22885201594112 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2750, r2: 1, n: 55, n_right: 1, m: 55, r1: 2)	 0.772076  	 1000      	 43.0981   	 0         	 4.7643    	 9.04605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 55, n_right: 2750, m: 55, r1: 1)	 0.208878  	 1000      	 159.303   	 0         	 17.6103   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 55, m: 100, rA: 2, r: 55)                            	 0.124175  	 1000      	 487.216   	 0         	 39.6215   	 12.2967   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 55, r2: 2, n: 50, n_right: 55, m: 50, r1: 2) 	 0.107307  	 1000      	 563.804   	 0         	 45.8498   	 12.2967   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 55, xn: 55, m: 55, rA: 2, r: 50)                             	 0.0800948 	 1000      	 415.445   	 0         	 45.9256   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 55, xn: 50, m: 110, rA: 1, r: 55)                            	 0.0523744 	 1000      	 635.33    	 0         	 70.2328   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 151250, cols: 1)                                                                                                                                                                        	 0.000285578	 2         	 0         	 0         	 8.47404   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.15678   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.08826   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.258191  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.256644  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00314184	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000295138	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000285578	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.2592e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8411e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.358e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22954064717696 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22953848727552 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22953647401088 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22953446074624 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22953244748160 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22953043421696 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22952842095232 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22952640768768 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22952439442304 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22952238115840 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22952036789376 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22951835462912 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22951634136448 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22951432809984 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22951231483520 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22951030157056 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22950828830592 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22950627504128 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22950426177664 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22950224851200 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22950023524736 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22949822198272 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22949620871808 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22949419545344 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22949218218880 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22949016892416 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22948815565952 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22948614239488 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22948412913024 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22948211586560 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22948010260096 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22947808933632 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22947607603072 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22947406276608 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22947204950144 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22947003623680 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22946802297216 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22946600970752 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22946399644288 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22946198317824 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22945996991360 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22945795664896 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22945594338432 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22945393011968 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22945191685504 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22944990359040 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22944789032576 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22944587706112 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22944386379648 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22944185053184 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22943983726720 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22943782400256 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22943581073792 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22943379747328 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22943178420864 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22942977094400 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22942775767936 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22942574441472 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22942373115008 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22942171788544 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22941970462080 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22941769135616 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22941567809152 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22953959057152 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22953952466688 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2800, r2: 1, n: 56, n_right: 1, m: 56, r1: 2)	 0.817144  	 1000      	 42.9829   	 0         	 4.66671   	 9.21053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 56, n_right: 2800, m: 56, r1: 1)	 0.216979  	 1000      	 161.874   	 0         	 17.5748   	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 56, m: 100, rA: 2, r: 56)                            	 0.140737  	 1000      	 445.653   	 0         	 36.2207   	 12.3038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 56, r2: 2, n: 50, n_right: 56, m: 50, r1: 2) 	 0.0962861 	 1000      	 651.392   	 0         	 52.9422   	 12.3038   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 56, xn: 56, m: 56, rA: 2, r: 50)                             	 0.0800977 	 1000      	 438.504   	 0         	 47.609    	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 56, xn: 50, m: 112, rA: 1, r: 56)                            	 0.0509317 	 1000      	 689.613   	 0         	 74.8723   	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 156800, cols: 1)                                                                                                                                                                        	 0.000272839	 2         	 0         	 0         	 9.19517   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.20097   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.13041   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.273026  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.271767  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00346772	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000293489	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000272839	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.1832e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8364e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4711e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23160662632320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23160476919808 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23160275593344 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23160074266880 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23159872940416 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23159671613952 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23159470287488 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23159268961024 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23159067634560 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23158866308096 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23158664981632 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23158463655168 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23158262328704 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23158061002240 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23157859675776 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23157658349312 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23157457022848 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23157255696384 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23157054369920 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23156853043456 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23156651716992 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23156450390528 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23156249064064 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23156047737600 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23155846411136 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23155645084672 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23155443758208 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23155242431744 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23155041105280 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23154839778816 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23154638452352 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23154437125888 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23154235795328 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23154034468864 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23153833142400 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23153631815936 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23153430489472 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23153229163008 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23153027836544 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23152826510080 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23152625183616 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23152423857152 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23152222530688 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23152021204224 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23151819877760 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23151618551296 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23151417224832 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23151215898368 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23151014571904 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23150813245440 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23150611918976 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23150410592512 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23150209266048 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23150007939584 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23149806613120 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23149605286656 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23149403960192 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23149202633728 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23149001307264 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23148799980800 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23148598654336 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23148397327872 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23148196001408 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23160556971776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23160550381312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2850, r2: 1, n: 57, n_right: 1, m: 57, r1: 2)	 0.840281  	 1000      	 44.0788   	 0         	 4.70174   	 9.375     
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 57, n_right: 2850, m: 57, r1: 1)	 0.231215  	 1000      	 160.191   	 0         	 17.087    	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 57, m: 100, rA: 2, r: 57)                            	 0.131826  	 1000      	 492.922   	 0         	 40.0406   	 12.3105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 57, r2: 2, n: 50, n_right: 57, m: 50, r1: 2) 	 0.120909  	 1000      	 537.427   	 0         	 43.6558   	 12.3105   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 57, xn: 57, m: 57, rA: 2, r: 50)                             	 0.0890695 	 1000      	 415.839   	 0         	 44.3562   	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 57, xn: 50, m: 114, rA: 1, r: 57)                            	 0.0610303 	 1000      	 606.888   	 0         	 64.7348   	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 162450, cols: 1)                                                                                                                                                                        	 0.000267648	 2         	 0         	 0         	 9.71126   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.26385   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.19241   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.283415  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.281926  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00448874	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00033444	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000267648	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.5981e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.9522e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6101e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22582623807360 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22582401165312 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22582199838848 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22581998512384 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22581797185920 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22581595859456 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22581394532992 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22581193206528 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22580991880064 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22580790553600 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22580589227136 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22580387900672 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22580186574208 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22579985247744 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22579783921280 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22579582594816 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22579381268352 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22579179941888 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22578978615424 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22578777288960 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22578575962496 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22578374636032 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22578173309568 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22577971983104 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22577770656640 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22577569330176 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22577368003712 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22577166677248 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22576965350784 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22576764024320 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22576562697856 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22576361371392 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22576160040832 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22575958714368 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22575757387904 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22575556061440 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22575354734976 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22575153408512 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22574952082048 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22574750755584 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22574549429120 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22574348102656 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22574146776192 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22573945449728 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22573744123264 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22573542796800 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22573341470336 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22573140143872 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22572938817408 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22572737490944 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22572536164480 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22572334838016 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22572133511552 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22571932185088 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22571730858624 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22571529532160 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22571328205696 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22571126879232 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22570925552768 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22570724226304 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22570522899840 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22570321573376 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22570120246912 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22582518146816 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22582511556352 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2900, r2: 1, n: 58, n_right: 1, m: 58, r1: 2)	 0.856014  	 1000      	 45.5862   	 0         	 4.77869   	 9.53947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 58, n_right: 2900, m: 58, r1: 1)	 0.229729  	 1000      	 169.863   	 0         	 17.8063   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 58, m: 100, rA: 2, r: 58)                            	 0.131824  	 1000      	 510.377   	 0         	 41.437    	 12.3169   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 58, r2: 2, n: 50, n_right: 58, m: 50, r1: 2) 	 0.113017  	 1000      	 595.31    	 0         	 48.3327   	 12.3169   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 58, xn: 58, m: 58, rA: 2, r: 50)                             	 0.0913498 	 1000      	 427.175   	 0         	 44.7798   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 58, xn: 50, m: 116, rA: 1, r: 58)                            	 0.0603055 	 1000      	 647.078   	 0         	 67.8316   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 168200, cols: 1)                                                                                                                                                                        	 0.000290229	 2         	 0         	 0         	 9.27268   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.27245   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.19876   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.284783  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.28348   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00308724	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000290229	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000252738	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.5042e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8221e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.7891e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23374608787328 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23374419978240 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23374218651776 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23374017325312 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23373815998848 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23373614672384 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23373413345920 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23373212019456 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23373010692992 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23372809366528 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23372608040064 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23372406713600 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23372205387136 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23372004060672 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23371802734208 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23371601407744 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23371400081280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23371198754816 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23370997428352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23370796101888 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23370594775424 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23370393448960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23370192122496 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23369990796032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23369789469568 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23369588143104 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23369386816640 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23369185490176 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23368984163712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23368782837248 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23368581510784 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23368380184320 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23368178853760 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23367977527296 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23367776200832 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23367574874368 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23367373547904 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23367172221440 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23366970894976 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23366769568512 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23366568242048 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23366366915584 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23366165589120 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23365964262656 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23365762936192 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23365561609728 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23365360283264 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23365158956800 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23364957630336 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23364756303872 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23364554977408 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23364353650944 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23364152324480 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23363950998016 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23363749671552 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23363548345088 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23363347018624 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23363145692160 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23362944365696 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23362743039232 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23362541712768 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23362340386304 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23362139059840 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23374503126784 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23374496536320 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 2950, r2: 1, n: 59, n_right: 1, m: 59, r1: 2)	 0.901714  	 1000      	 45.553    	 0         	 4.69428   	 9.70395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 59, n_right: 2950, m: 59, r1: 1)	 0.258637  	 1000      	 158.816   	 0         	 16.3662   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 59, m: 100, rA: 2, r: 59)                            	 0.143494  	 1000      	 485.176   	 0         	 39.3716   	 12.323    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 59, r2: 2, n: 50, n_right: 59, m: 50, r1: 2) 	 0.136768  	 1000      	 509.037   	 0         	 41.3079   	 12.323    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 59, xn: 59, m: 59, rA: 2, r: 50)                             	 0.0972192 	 1000      	 422.507   	 0         	 43.5397   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 59, xn: 50, m: 118, rA: 1, r: 59)                            	 0.0660535 	 1000      	 621.856   	 0         	 64.0828   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 174050, cols: 1)                                                                                                                                                                        	 0.00032445	 2         	 0         	 0         	 8.58314   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.37786   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.29712   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.308071  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.306767  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00331763	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000391372	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00032445	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.3172e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8811e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.734e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22611898791808 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22611660630016 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22611459303552 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22611257977088 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22611056650624 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22610855324160 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22610653997696 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22610452671232 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22610251344768 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22610050018304 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22609848691840 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22609647365376 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22609446038912 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22609244712448 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22609043385984 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22608842059520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22608640733056 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22608439406592 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22608238080128 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22608036753664 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22607835427200 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22607634100736 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22607432774272 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22607231447808 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22607030121344 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22606828794880 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22606627468416 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22606426141952 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22606224815488 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22606023489024 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22605822162560 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22605620836096 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22605419505536 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22605218179072 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22605016852608 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22604815526144 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22604614199680 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22604412873216 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22604211546752 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22604010220288 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22603808893824 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22603607567360 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22603406240896 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22603204914432 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22603003587968 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22602802261504 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22602600935040 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22602399608576 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22602198282112 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22601996955648 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22601795629184 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22601594302720 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22601392976256 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22601191649792 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22600990323328 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22600788996864 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22600587670400 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22600386343936 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22600185017472 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22599983691008 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22599782364544 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22599581038080 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22599379711616 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22611793131264 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22611786540800 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3000, r2: 1, n: 60, n_right: 1, m: 60, r1: 2)	 0.911762  	 1000      	 47.3808   	 0         	 4.80125   	 9.86842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 60, n_right: 3000, m: 60, r1: 1)	 0.256092  	 1000      	 168.689   	 0         	 17.0939   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 60, m: 100, rA: 2, r: 60)                            	 0.148746  	 1000      	 484.047   	 0         	 39.2616   	 12.3288   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 60, r2: 2, n: 50, n_right: 60, m: 50, r1: 2) 	 0.123559  	 1000      	 582.719   	 0         	 47.265    	 12.3288   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 60, xn: 60, m: 60, rA: 2, r: 50)                             	 0.0987593 	 1000      	 437.427   	 0         	 44.326    	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 60, xn: 50, m: 120, rA: 1, r: 60)                            	 0.0656502 	 1000      	 658.033   	 0         	 66.6807   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 180000, cols: 1)                                                                                                                                                                        	 0.000282609	 2         	 0         	 0         	 10.1908   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.37354   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.29141   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.314474  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.313155  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00313562	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000329951	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000282609	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.3262e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.829e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.542e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22814523185024 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22814329399296 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22814128072832 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22813926746368 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22813725419904 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22813524093440 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22813322766976 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22813121440512 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22812920114048 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22812718787584 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22812517461120 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22812316134656 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22812114808192 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22811913481728 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22811712155264 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22811510828800 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22811309502336 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22811108175872 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22810906849408 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22810705522944 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22810504196480 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22810302870016 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22810101543552 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22809900217088 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22809698890624 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22809497564160 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22809296237696 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22809094911232 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22808893584768 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22808692258304 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22808490931840 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22808289605376 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22808088274816 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22807886948352 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22807685621888 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22807484295424 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22807282968960 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22807081642496 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22806880316032 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22806678989568 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22806477663104 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22806276336640 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22806075010176 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22805873683712 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22805672357248 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22805471030784 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22805269704320 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22805068377856 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22804867051392 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22804665724928 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22804464398464 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22804263072000 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22804061745536 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22803860419072 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22803659092608 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22803457766144 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22803256439680 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22803055113216 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22802853786752 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22802652460288 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22802451133824 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22802249807360 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22802048480896 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22814417524480 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22814410934016 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3050, r2: 1, n: 61, n_right: 1, m: 61, r1: 2)	 0.95875   	 1000      	 47.3493   	 0         	 4.71941   	 10.0329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 61, n_right: 3050, m: 61, r1: 1)	 0.278846  	 1000      	 162.8     	 0         	 16.2266   	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 61, m: 100, rA: 2, r: 61)                            	 0.154731  	 1000      	 480.964   	 0         	 38.9942   	 12.3343   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 61, r2: 2, n: 50, n_right: 61, m: 50, r1: 2) 	 0.145276  	 1000      	 512.266   	 0         	 41.5319   	 12.3343   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 61, xn: 61, m: 61, rA: 2, r: 50)                             	 0.102185  	 1000      	 444.255   	 0         	 44.2798   	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 61, xn: 50, m: 122, rA: 1, r: 61)                            	 0.0707211 	 1000      	 641.905   	 0         	 63.98     	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 186050, cols: 1)                                                                                                                                                                        	 0.000350841	 2         	 0         	 0         	 8.48476   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.46565   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.38287   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.328974  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.327637  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00322278	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000456454	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000350841	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.4192e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8442e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6051e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23282383464320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23282145290240 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23281943963776 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23281742637312 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23281541310848 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23281339984384 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23281138657920 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23280937331456 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23280736004992 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23280534678528 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23280333352064 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23280132025600 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23279930699136 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23279729372672 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23279528046208 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23279326719744 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23279125393280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23278924066816 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23278722740352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23278521413888 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23278320087424 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23278118760960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23277917434496 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23277716108032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23277514781568 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23277313455104 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23277112128640 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23276910802176 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23276709475712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23276508149248 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23276306822784 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23276105496320 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23275904165760 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23275702839296 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23275501512832 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23275300186368 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23275098859904 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23274897533440 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23274696206976 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23274494880512 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23274293554048 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23274092227584 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23273890901120 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23273689574656 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23273488248192 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23273286921728 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23273085595264 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23272884268800 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23272682942336 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23272481615872 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23272280289408 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23272078962944 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23271877636480 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23271676310016 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23271474983552 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23271273657088 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23271072330624 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23270871004160 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23270669677696 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23270468351232 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23270267024768 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23270065698304 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23269864371840 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23282277803776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23282271213312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3100, r2: 1, n: 62, n_right: 1, m: 62, r1: 2)	 0.999359  	 1000      	 47.6962   	 0         	 4.6773    	 10.1974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 62, n_right: 3100, m: 62, r1: 1)	 0.284031  	 1000      	 167.818   	 0         	 16.457    	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 62, m: 100, rA: 2, r: 62)                            	 0.157098  	 1000      	 489.376   	 0         	 39.6593   	 12.3395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 62, r2: 2, n: 50, n_right: 62, m: 50, r1: 2) 	 0.141671  	 1000      	 542.665   	 0         	 43.9779   	 12.3395   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 62, xn: 62, m: 62, rA: 2, r: 50)                             	 0.0991551 	 1000      	 480.717   	 0         	 47.1413   	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 62, xn: 50, m: 124, rA: 1, r: 62)                            	 0.066876  	 1000      	 712.746   	 0         	 69.8951   	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 192200, cols: 1)                                                                                                                                                                        	 0.00034326	 2         	 0         	 0         	 8.95881   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.50896   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.42506   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.324791  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.323129  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00395148	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00034326	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000266768	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 5.8652e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 3.0901e-05	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.069e-05 	 1000      
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23172338718592 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23172153862144 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23171952535680 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23171751209216 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23171549882752 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23171348556288 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23171147229824 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23170945903360 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23170744576896 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23170543250432 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23170341923968 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23170140597504 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23169939271040 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23169737944576 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23169536618112 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23169335291648 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23169133965184 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23168932638720 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23168731312256 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23168529985792 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23168328659328 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23168127332864 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23167926006400 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23167724679936 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23167523353472 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23167322027008 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23167120700544 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23166919374080 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23166718047616 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23166516721152 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23166315394688 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23166114068224 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23165912737664 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23165711411200 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23165510084736 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23165308758272 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23165107431808 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23164906105344 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23164704778880 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23164503452416 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23164302125952 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23164100799488 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23163899473024 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23163698146560 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23163496820096 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23163295493632 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23163094167168 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23162892840704 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23162691514240 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23162490187776 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23162288861312 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23162087534848 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23161886208384 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23161684881920 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23161483555456 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23161282228992 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23161080902528 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23160879576064 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23160678249600 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23160476923136 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23160275596672 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23160074270208 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23159872943744 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23172233058048 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23172226467584 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3150, r2: 1, n: 63, n_right: 1, m: 63, r1: 2)	 1.02086   	 1000      	 48.9876   	 0         	 4.7277    	 10.3618   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 63, n_right: 3150, m: 63, r1: 1)	 0.281334  	 1000      	 177.758   	 0         	 17.1551   	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 63, m: 100, rA: 2, r: 63)                            	 0.159889  	 1000      	 496.468   	 0         	 40.2178   	 12.3445   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 63, r2: 2, n: 50, n_right: 63, m: 50, r1: 2) 	 0.131716  	 1000      	 602.661   	 0         	 48.8203   	 12.3445   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 63, xn: 63, m: 63, rA: 2, r: 50)                             	 0.107442  	 1000      	 465.455   	 0         	 44.9201   	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 63, xn: 50, m: 126, rA: 1, r: 63)                            	 0.0719209 	 1000      	 695.339   	 0         	 67.1057   	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 198450, cols: 1)                                                                                                                                                                        	 0.000353011	 2         	 0         	 0         	 8.99462   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.52397   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.43391   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.340889  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.339252  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00334359	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000353011	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000305919	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.8442e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8782e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6e-05   	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23197017659264 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23196782815232 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23196581488768 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23196380162304 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23196178835840 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23195977509376 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23195776182912 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23195574856448 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23195373529984 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23195172203520 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23194970877056 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23194769550592 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23194568224128 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23194366897664 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23194165571200 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23193964244736 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23193762918272 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23193561591808 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23193360265344 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23193158938880 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23192957612416 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23192756285952 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23192554959488 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23192353633024 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23192152306560 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23191950980096 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23191749653632 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23191548327168 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23191347000704 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23191145674240 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23190944347776 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23190743021312 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23190541690752 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23190340364288 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23190139037824 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23189937711360 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23189736384896 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23189535058432 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23189333731968 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23189132405504 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23188931079040 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23188729752576 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23188528426112 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23188327099648 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23188125773184 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23187924446720 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23187723120256 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23187521793792 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23187320467328 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23187119140864 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23186917814400 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23186716487936 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23186515161472 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23186313835008 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23186112508544 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23185911182080 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23185709855616 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23185508529152 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23185307202688 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23185105876224 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23184904549760 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23184703223296 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23184501896832 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23196911998720 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23196905408256 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3200, r2: 1, n: 64, n_right: 1, m: 64, r1: 2)	 1.06825   	 1000      	 49.079    	 0         	 4.6625    	 10.5263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 64, n_right: 3200, m: 64, r1: 1)	 0.294256  	 1000      	 178.174   	 0         	 16.9265   	 10.5263   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 64, m: 100, rA: 2, r: 64)                            	 0.195625  	 1000      	 418.759   	 0         	 33.9097   	 12.3493   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 64, xn: 64, m: 64, rA: 2, r: 50)                             	 0.134117  	 1000      	 390.918   	 0         	 37.1372   	 10.5263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 64, r2: 2, n: 50, n_right: 64, m: 50, r1: 2) 	 0.115508  	 1000      	 709.215   	 0         	 57.4298   	 12.3493   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 64, xn: 50, m: 128, rA: 1, r: 64)                            	 0.0727579 	 1000      	 720.593   	 0         	 68.4563   	 10.5263   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 204800, cols: 1)                                                                                                                                                                        	 0.000364381	 2         	 0         	 0         	 8.99279   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.56844   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.47802   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.403795  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.4025    	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00327225	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000364381	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000354721	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.7632e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8771e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.52e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22422945970048 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22422749177856 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22422547851392 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22422346524928 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22422145198464 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22421943872000 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22421742545536 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22421541219072 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22421339892608 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22421138566144 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22420937239680 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22420735913216 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22420534586752 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22420333260288 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22420131933824 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22419930607360 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22419729280896 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22419527954432 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22419326627968 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22419125301504 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22418923975040 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22418722648576 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22418521322112 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22418319995648 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22418118669184 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22417917342720 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22417716016256 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22417514689792 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22417313363328 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22417112036864 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22416910710400 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22416709383936 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22416508053376 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22416306726912 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22416105400448 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22415904073984 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22415702747520 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22415501421056 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22415300094592 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22415098768128 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22414897441664 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22414696115200 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22414494788736 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22414293462272 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22414092135808 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22413890809344 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22413689482880 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22413488156416 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22413286829952 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22413085503488 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22412884177024 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22412682850560 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22412481524096 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22412280197632 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22412078871168 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22411877544704 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22411676218240 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22411474891776 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22411273565312 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22411072238848 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22410870912384 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22410669585920 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22410468259456 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22422840309504 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22422833719040 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3250, r2: 1, n: 65, n_right: 1, m: 65, r1: 2)	 1.08409   	 1000      	 50.6647   	 0         	 4.7391    	 10.6908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 65, n_right: 3250, m: 65, r1: 1)	 0.312969  	 1000      	 175.497   	 0         	 16.4157   	 10.6908   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 66, m: 100, rA: 2, r: 66)                            	 0.177906  	 1000      	 489.696   	 0         	 39.6253   	 12.3581   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 65, r2: 2, n: 50, n_right: 65, m: 50, r1: 2) 	 0.152429  	 1000      	 554.355   	 0         	 44.8732   	 12.3538   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 66, m: 66, rA: 2, r: 50)                             	 0.108921  	 1000      	 527.897   	 0         	 48.6305   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 50, m: 132, rA: 1, r: 66)                            	 0.0794592 	 1000      	 723.632   	 0         	 66.6619   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 211250, cols: 1)                                                                                                                                                                        	 0.000410523	 2         	 0         	 0         	 8.2334    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.64109   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.54949   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.36793   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.366287  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00371026	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000410523	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000404992	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000306389	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000156796	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 8.7683e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.3732e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.8e-05   	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22999621113728 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22999415646208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22999214319744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22999012993280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22998811666816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22998610340352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22998409013888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22998207687424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22998006360960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22997805034496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22997603708032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22997402381568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22997201055104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22996999728640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22996798402176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22996597075712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22996395749248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22996194422784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22995993096320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22995791769856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22995590443392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22995389116928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22995187790464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22994986464000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22994785137536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22994583811072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22994382484608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22994181158144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22993979831680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22993778505216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22993577178752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22993375852288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22993174521728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22992973195264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22992771868800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22992570542336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22992369215872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22992167889408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22991966562944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22991765236480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22991563910016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22991362583552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22991161257088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22990959930624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22990758604160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22990557277696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22990355951232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22990154624768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22989953298304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22989751971840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22989550645376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22989349318912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22989147992448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22988946665984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22988745339520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22988544013056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22988342686592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22988141360128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22987940033664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22987738707200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22987537380736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22987336054272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22987134727808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22999515453184 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22999508862720 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3300, r2: 1, n: 66, n_right: 1, m: 66, r1: 2)	 1.09539   	 1000      	 52.4921   	 0         	 4.83564   	 10.8553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 66, n_right: 3300, m: 66, r1: 1)	 0.32465   	 1000      	 177.111   	 0         	 16.3157   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 66, m: 100, rA: 2, r: 66)                            	 0.175882  	 1000      	 495.333   	 0         	 40.0815   	 12.3581   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 66, r2: 2, n: 50, n_right: 66, m: 50, r1: 2) 	 0.155981  	 1000      	 558.531   	 0         	 45.1954   	 12.3581   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 66, m: 66, rA: 2, r: 50)                             	 0.107463  	 1000      	 535.063   	 0         	 49.2906   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 66, xn: 50, m: 132, rA: 1, r: 66)                            	 0.080331  	 1000      	 715.779   	 0         	 65.9384   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 217800, cols: 1)                                                                                                                                                                        	 0.000449314	 2         	 0         	 0         	 7.75582   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.66761   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.57602   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.364926  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.363675  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00330556	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000449314	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00033322	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.2023e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.9091e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5571e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23073731663744 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23073503832064 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23073302505600 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23073101179136 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23072899852672 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23072698526208 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23072497199744 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23072295873280 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23072094546816 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23071893220352 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23071691893888 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23071490567424 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23071289240960 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23071087914496 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23070886588032 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23070685261568 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23070483935104 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23070282608640 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23070081282176 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23069879955712 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23069678629248 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23069477302784 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23069275976320 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23069074649856 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23068873323392 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23068671996928 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23068470670464 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23068269344000 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23068068017536 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23067866691072 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23067665364608 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23067464038144 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23067262707584 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23067061381120 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23066860054656 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23066658728192 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23066457401728 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23066256075264 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23066054748800 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23065853422336 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23065652095872 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23065450769408 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23065249442944 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23065048116480 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23064846790016 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23064645463552 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23064444137088 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23064242810624 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23064041484160 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23063840157696 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23063638831232 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23063437504768 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23063236178304 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23063034851840 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23062833525376 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23062632198912 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23062430872448 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23062229545984 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23062028219520 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23061826893056 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23061625566592 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23061424240128 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23061222913664 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23073626003200 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23073619412736 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3350, r2: 1, n: 67, n_right: 1, m: 67, r1: 2)	 1.16539   	 1000      	 51.6158   	 0         	 4.68394   	 11.0197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 67, n_right: 3350, m: 67, r1: 1)	 0.33809   	 1000      	 177.919   	 0         	 16.1455   	 11.0197   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 68, m: 100, rA: 2, r: 68)                            	 0.194493  	 1000      	 475.492   	 0         	 38.4507   	 12.3663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 67, r2: 2, n: 50, n_right: 67, m: 50, r1: 2) 	 0.163565  	 1000      	 548.895   	 0         	 44.4007   	 12.3623   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 68, m: 68, rA: 2, r: 50)                             	 0.115799  	 1000      	 543.065   	 0         	 48.5564   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 50, m: 136, rA: 1, r: 68)                            	 0.0888437 	 1000      	 707.832   	 0         	 63.2885   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 224450, cols: 1)                                                                                                                                                                        	 0.000464915	 2         	 0         	 0         	 7.72442   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.7635    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.66705   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.400919  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.399136  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00393995	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000464915	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000347731	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000322831	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000179566	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 8.3183e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.3353e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.403e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22600938739584 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22600721885184 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22600520558720 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22600319232256 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22600117905792 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22599916579328 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22599715252864 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22599513926400 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22599312599936 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22599111273472 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22598909947008 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22598708620544 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22598507294080 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22598305967616 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22598104641152 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22597903314688 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22597701988224 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22597500661760 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22597299335296 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22597098008832 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22596896682368 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22596695355904 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22596494029440 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22596292702976 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22596091376512 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22595890050048 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22595688723584 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22595487397120 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22595286070656 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22595084744192 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22594883417728 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22594682091264 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22594480760704 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22594279434240 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22594078107776 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22593876781312 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22593675454848 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22593474128384 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22593272801920 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22593071475456 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22592870148992 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22592668822528 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22592467496064 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22592266169600 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22592064843136 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22591863516672 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22591662190208 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22591460863744 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22591259537280 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22591058210816 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22590856884352 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22590655557888 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22590454231424 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22590252904960 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22590051578496 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22589850252032 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22589648925568 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22589447599104 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22589246272640 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22589044946176 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22588843619712 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22588642293248 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22588440966784 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22600833079040 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22600826488576 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3400, r2: 1, n: 68, n_right: 1, m: 68, r1: 2)	 1.17182   	 1000      	 53.6656   	 0         	 4.79833   	 11.1842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 68, n_right: 3400, m: 68, r1: 1)	 0.330364  	 1000      	 190.355   	 0         	 17.02     	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 68, m: 100, rA: 2, r: 68)                            	 0.182193  	 1000      	 507.595   	 0         	 41.0467   	 12.3663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 68, r2: 2, n: 50, n_right: 68, m: 50, r1: 2) 	 0.156932  	 1000      	 589.3     	 0         	 47.6537   	 12.3663   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 68, m: 68, rA: 2, r: 50)                             	 0.116042  	 1000      	 541.926   	 0         	 48.4545   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 68, xn: 50, m: 136, rA: 1, r: 68)                            	 0.0842077 	 1000      	 746.801   	 0         	 66.7728   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 231200, cols: 1)                                                                                                                                                                        	 0.000445804	 2         	 0         	 0         	 8.29782   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.75394   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.65912   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.383956  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.382443  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00357836	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000445804	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00031274	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.2952e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.8921e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.305e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22409274906496 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22409058969600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22408857643136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22408656316672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22408454990208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22408253663744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22408052337280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22407851010816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22407649684352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22407448357888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22407247031424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22407045704960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22406844378496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22406643052032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22406441725568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22406240399104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22406039072640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22405837746176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22405636419712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22405435093248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22405233766784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22405032440320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22404831113856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22404629787392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22404428460928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22404227134464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22404025808000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22403824481536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22403623155072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22403421828608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22403220502144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22403019175680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22402817845120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22402616518656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22402415192192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22402213865728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22402012539264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22401811212800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22401609886336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22401408559872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22401207233408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22401005906944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22400804580480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22400603254016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22400401927552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22400200601088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22399999274624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22399797948160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22399596621696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22399395295232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22399193968768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22398992642304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22398791315840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22398589989376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22398388662912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22398187336448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22397986009984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22397784683520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22397583357056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22397382030592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22397180704128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22396979377664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22396778051200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22409169245952 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22409162655488 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3450, r2: 1, n: 69, n_right: 1, m: 69, r1: 2)	 1.21547   	 1000      	 54.0547   	 0         	 4.76308   	 11.3487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 69, n_right: 3450, m: 69, r1: 1)	 0.364387  	 1000      	 180.308   	 0         	 15.888    	 11.3487   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 70, m: 100, rA: 2, r: 70)                            	 0.189405  	 1000      	 517.41    	 0         	 41.8151   	 12.3737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 69, r2: 2, n: 50, n_right: 69, m: 50, r1: 2) 	 0.1797    	 1000      	 529.883   	 0         	 42.8358   	 12.3701   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 70, m: 70, rA: 2, r: 50)                             	 0.112681  	 1000      	 608.801   	 0         	 52.8787   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 50, m: 140, rA: 1, r: 70)                            	 0.0882242 	 1000      	 777.564   	 0         	 67.537    	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 238050, cols: 1)                                                                                                                                                                        	 0.000576318	 2         	 0         	 0         	 6.60885   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.86529   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.75956   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.391878  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.39031   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00356458	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000576318	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000520256	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000377922	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000165476	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 8.5702e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.5892e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.4121e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23125588035456 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23125378983936 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23125177657472 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23124976331008 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23124775004544 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23124573678080 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23124372351616 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23124171025152 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23123969698688 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23123768372224 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23123567045760 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23123365719296 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23123164392832 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23122963066368 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23122761739904 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23122560413440 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23122359086976 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23122157760512 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23121956434048 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23121755107584 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23121553781120 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23121352454656 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23121151128192 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23120949801728 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23120748475264 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23120547148800 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23120345822336 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23120144495872 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23119943169408 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23119741842944 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23119540516480 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23119339190016 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23119137859456 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23118936532992 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23118735206528 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23118533880064 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23118332553600 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23118131227136 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23117929900672 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23117728574208 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23117527247744 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23117325921280 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23117124594816 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23116923268352 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23116721941888 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23116520615424 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23116319288960 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23116117962496 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23115916636032 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23115715309568 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23115513983104 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23115312656640 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23115111330176 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23114910003712 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23114708677248 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23114507350784 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23114306024320 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23114104697856 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23113903371392 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23113702044928 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23113500718464 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23113299392000 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23113098065536 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23125482374912 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23125475784448 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3500, r2: 1, n: 70, n_right: 1, m: 70, r1: 2)	 1.26469   	 1000      	 54.2426   	 0         	 4.71136   	 11.5132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 70, n_right: 3500, m: 70, r1: 1)	 0.362278  	 1000      	 189.357   	 0         	 16.447    	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 70, m: 100, rA: 2, r: 70)                            	 0.195248  	 1000      	 501.925   	 0         	 40.5637   	 12.3737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 70, r2: 2, n: 50, n_right: 70, m: 50, r1: 2) 	 0.178261  	 1000      	 549.755   	 0         	 44.4292   	 12.3737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 70, m: 70, rA: 2, r: 50)                             	 0.113703  	 1000      	 603.327   	 0         	 52.4032   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 70, xn: 50, m: 140, rA: 1, r: 70)                            	 0.0890057 	 1000      	 770.737   	 0         	 66.9441   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 245000, cols: 1)                                                                                                                                                                        	 0.000377871	 2         	 0         	 0         	 10.3739   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.9056    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.80523   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.399722  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.397957  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00369253	 3007      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000421173	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000377871	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.3802e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.324e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.9911e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23070572509056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23070349715456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23070148388992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23069947062528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23069745736064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23069544409600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23069343083136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23069141756672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23068940430208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23068739103744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23068537777280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23068336450816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23068135124352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23067933797888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23067732471424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23067531144960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23067329818496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23067128492032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23066927165568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23066725839104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23066524512640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23066323186176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23066121859712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23065920533248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23065719206784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23065517880320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23065316553856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23065115227392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23064913900928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23064712574464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23064511248000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23064309921536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23064108590976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23063907264512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23063705938048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23063504611584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23063303285120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23063101958656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23062900632192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23062699305728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23062497979264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23062296652800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23062095326336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23061893999872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23061692673408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23061491346944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23061290020480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23061088694016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23060887367552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23060686041088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23060484714624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23060283388160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23060082061696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23059880735232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23059679408768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23059478082304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23059276755840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23059075429376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23058874102912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23058672776448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23058471449984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23058270123520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23058068797056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23070466848512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23070460258048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3550, r2: 1, n: 71, n_right: 1, m: 71, r1: 2)	 1.2834    	 1000      	 55.7756   	 0         	 4.77628   	 11.6776   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 71, n_right: 3550, m: 71, r1: 1)	 0.376364  	 1000      	 190.194   	 0         	 16.287    	 11.6776   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 72, m: 100, rA: 2, r: 72)                            	 0.199174  	 1000      	 520.55    	 0         	 42.0457   	 12.3806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 71, r2: 2, n: 50, n_right: 71, m: 50, r1: 2) 	 0.180706  	 1000      	 557.922   	 0         	 45.0764   	 12.3772   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 72, m: 72, rA: 2, r: 50)                             	 0.131965  	 1000      	 565.675   	 0         	 47.7681   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 50, m: 144, rA: 1, r: 72)                            	 0.0933417 	 1000      	 799.745   	 0         	 67.5341   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 252050, cols: 1)                                                                                                                                                                        	 0.000552487	 2         	 0         	 0         	 7.29936   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 1.94507   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.84047   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.426186  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.424481  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00432072	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000552487	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000463155	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00032928	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000168026	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 9.0053e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.5322e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.376e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23380213307264 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23379990013952 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23379788687488 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23379587361024 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23379386034560 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23379184708096 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23378983381632 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23378782055168 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23378580728704 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23378379402240 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23378178075776 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23377976749312 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23377775422848 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23377574096384 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23377372769920 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23377171443456 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23376970116992 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23376768790528 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23376567464064 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23376366137600 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23376164811136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23375963484672 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23375762158208 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23375560831744 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23375359505280 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23375158178816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23374956852352 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23374755525888 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23374554199424 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23374352872960 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23374151546496 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23373950220032 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23373748889472 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23373547563008 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23373346236544 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23373144910080 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23372943583616 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23372742257152 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23372540930688 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23372339604224 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23372138277760 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23371936951296 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23371735624832 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23371534298368 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23371332971904 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23371131645440 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23370930318976 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23370728992512 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23370527666048 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23370326339584 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23370125013120 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23369923686656 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23369722360192 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23369521033728 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23369319707264 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23369118380800 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23368917054336 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23368715727872 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23368514401408 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23368313074944 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23368111748480 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23367910422016 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23367709095552 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23380107646720 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23380101056256 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3600, r2: 1, n: 72, n_right: 1, m: 72, r1: 2)	 1.32706   	 1000      	 56.2519   	 0         	 4.75016   	 11.8421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 72, n_right: 3600, m: 72, r1: 1)	 0.388849  	 1000      	 191.976   	 0         	 16.2113   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 72, m: 100, rA: 2, r: 72)                            	 0.202473  	 1000      	 512.069   	 0         	 41.3606   	 12.3806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 72, r2: 2, n: 50, n_right: 72, m: 50, r1: 2) 	 0.196597  	 1000      	 527.373   	 0         	 42.5968   	 12.3806   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 72, m: 72, rA: 2, r: 50)                             	 0.129725  	 1000      	 575.446   	 0         	 48.5932   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 72, xn: 50, m: 144, rA: 1, r: 72)                            	 0.0914543 	 1000      	 816.25    	 0         	 68.9278   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 259200, cols: 1)                                                                                                                                                                        	 0.000443512	 2         	 0         	 0         	 9.35082   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.02623   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.9125    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.42531   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.423652  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00404883	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000443512	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000429753	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.5402e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.103e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.2811e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22395066156928 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22394831890432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22394630563968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22394429237504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22394227911040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22394026584576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22393825258112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22393623931648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22393422605184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22393221278720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22393019952256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22392818625792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22392617299328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22392415972864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22392214646400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22392013319936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22391811993472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22391610667008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22391409340544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22391208014080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22391006687616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22390805361152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22390604034688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22390402708224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22390201381760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22390000055296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22389798728832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22389597402368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22389396075904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22389194749440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22388993422976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22388792096512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22388590765952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22388389439488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22388188113024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22387986786560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22387785460096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22387584133632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22387382807168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22387181480704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22386980154240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22386778827776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22386577501312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22386376174848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22386174848384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22385973521920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22385772195456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22385570868992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22385369542528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22385168216064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22384966889600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22384765563136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22384564236672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22384362910208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22384161583744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22383960257280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22383758930816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22383557604352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22383356277888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22383154951424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22382953624960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22382752298496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22382550972032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22394960496384 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22394953905920 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3650, r2: 1, n: 73, n_right: 1, m: 73, r1: 2)	 1.38304   	 1000      	 56.2552   	 0         	 4.68537   	 12.0066   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 73, n_right: 3650, m: 73, r1: 1)	 0.398299  	 1000      	 195.339   	 0         	 16.2694   	 12.0066   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 74, m: 100, rA: 2, r: 74)                            	 0.207857  	 1000      	 526.9     	 0         	 42.5368   	 12.3869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 73, r2: 2, n: 50, n_right: 73, m: 50, r1: 2) 	 0.189123  	 1000      	 563.55    	 0         	 45.507    	 12.3838   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 74, m: 74, rA: 2, r: 50)                             	 0.138793  	 1000      	 583.925   	 0         	 47.9765   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 50, m: 148, rA: 1, r: 74)                            	 0.100521  	 1000      	 806.249   	 0         	 66.2432   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 266450, cols: 1)                                                                                                                                                                        	 0.000400102	 2         	 0         	 0         	 10.6553   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.08201   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 1.97046   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.448899  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.447172  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00390083	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000450144	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000400102	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00034482	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000171538	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 9.3053e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.9642e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4841e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22649750243200 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22649577138176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22649375811712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22649174485248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22648973158784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22648771832320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22648570505856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22648369179392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22648167852928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22647966526464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22647765200000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22647563873536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22647362547072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22647161220608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22646959894144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22646758567680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22646557241216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22646355914752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22646154588288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22645953261824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22645751935360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22645550608896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22645349282432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22645147955968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22644946629504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22644745303040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22644543976576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22644342650112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22644141323648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22643939997184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22643738670720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22643537344256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22643336013696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22643134687232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22642933360768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22642732034304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22642530707840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22642329381376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22642128054912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22641926728448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22641725401984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22641524075520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22641322749056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22641121422592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22640920096128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22640718769664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22640517443200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22640316116736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22640114790272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22639913463808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22639712137344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22639510810880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22639309484416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22639108157952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22638906831488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22638705505024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22638504178560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22638302852096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22638101525632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22637900199168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22637698872704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22637497546240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22637296219776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22649472276224 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22649466009344 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3700, r2: 1, n: 74, n_right: 1, m: 74, r1: 2)	 1.40507   	 1000      	 57.6804   	 0         	 4.73915   	 12.1711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 74, n_right: 3700, m: 74, r1: 1)	 0.401223  	 1000      	 201.994   	 0         	 16.5963   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 74, m: 100, rA: 2, r: 74)                            	 0.201734  	 1000      	 542.894   	 0         	 43.828    	 12.3869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 74, r2: 2, n: 50, n_right: 74, m: 50, r1: 2) 	 0.194157  	 1000      	 564.079   	 0         	 45.5383   	 12.3869   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 74, m: 74, rA: 2, r: 50)                             	 0.136716  	 1000      	 592.799   	 0         	 48.7056   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 74, xn: 50, m: 148, rA: 1, r: 74)                            	 0.0993194 	 1000      	 816.002   	 0         	 67.0445   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 273800, cols: 1)                                                                                                                                                                        	 0.000529886	 2         	 0         	 0         	 8.26744   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.11774   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.00045   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.439377  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.437769  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00352758	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000529886	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000349861	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 6.9692e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 2.979e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5811e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23333668919168 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23333483571200 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23333282244736 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23333080918272 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23332879591808 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23332678265344 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23332476938880 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23332275612416 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23332074285952 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23331872959488 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23331671633024 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23331470306560 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23331268980096 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23331067653632 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23330866327168 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23330665000704 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23330463674240 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23330262347776 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23330061021312 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23329859694848 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23329658368384 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23329457041920 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23329255715456 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23329054388992 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23328853062528 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23328651736064 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23328450409600 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23328249083136 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23328047756672 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23327846430208 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23327645103744 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23327443777280 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23327242446720 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23327041120256 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23326839793792 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23326638467328 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23326437140864 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23326235814400 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23326034487936 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23325833161472 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23325631835008 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23325430508544 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23325229182080 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23325027855616 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23324826529152 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23324625202688 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23324423876224 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23324222549760 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23324021223296 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23323819896832 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23323618570368 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23323417243904 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23323215917440 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23323014590976 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23322813264512 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23322611938048 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23322410611584 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23322209285120 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23322007958656 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23321806632192 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23321605305728 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23321403979264 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23321202652800 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23333563258624 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23333556668160 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3750, r2: 1, n: 75, n_right: 1, m: 75, r1: 2)	 1.43794   	 1000      	 58.6778   	 0         	 4.75681   	 12.3355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 75, n_right: 3750, m: 75, r1: 1)	 0.428571  	 1000      	 196.875   	 0         	 15.96     	 12.3355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 75, r2: 2, n: 50, n_right: 75, m: 50, r1: 2) 	 0.208722  	 1000      	 538.994   	 0         	 43.5028   	 12.3899   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 76, m: 100, rA: 2, r: 76)                            	 0.206154  	 1000      	 560.358   	 0         	 45.2167   	 12.3927   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 76, m: 76, rA: 2, r: 50)                             	 0.141889  	 1000      	 618.762   	 0         	 49.5009   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 50, m: 152, rA: 1, r: 76)                            	 0.107394  	 1000      	 817.506   	 0         	 65.4005   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 281250, cols: 1)                                                                                                                                                                        	 0.000540027	 2         	 0         	 0         	 8.33292   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.19493   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.07523   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.457073  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.455436  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00375135	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000540027	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000519166	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000441674	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000193946	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 9.3733e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.8893e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6621e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22970145359744 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22969954854912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22969753528448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22969552201984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22969350875520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22969149549056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22968948222592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22968746896128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22968545569664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22968344243200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22968142916736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22967941590272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22967740263808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22967538937344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22967337610880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22967136284416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22966934957952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22966733631488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22966532305024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22966330978560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22966129652096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22965928325632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22965726999168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22965525672704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22965324346240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22965123019776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22964921693312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22964720366848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22964519040384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22964317713920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22964116387456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22963915060992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22963713730432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22963512403968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22963311077504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22963109751040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22962908424576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22962707098112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22962505771648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22962304445184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22962103118720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22961901792256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22961700465792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22961499139328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22961297812864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22961096486400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22960895159936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22960693833472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22960492507008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22960291180544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22960089854080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22959888527616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22959687201152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22959485874688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22959284548224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22959083221760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22958881895296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22958680568832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22958479242368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22958277915904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22958076589440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22957875262976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22957673936512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22970039699200 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22970033108736 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3800, r2: 1, n: 76, n_right: 1, m: 76, r1: 2)	 1.47848   	 1000      	 59.382    	 0         	 4.75056   	 12.5      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 76, n_right: 3800, m: 76, r1: 1)	 0.423924  	 1000      	 207.101   	 0         	 16.5681   	 12.5      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 76, r2: 2, n: 50, n_right: 76, m: 50, r1: 2) 	 0.205913  	 1000      	 561.015   	 0         	 45.2697   	 12.3927   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 76, m: 100, rA: 2, r: 76)                            	 0.204517  	 1000      	 564.843   	 0         	 45.5786   	 12.3927   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 76, m: 76, rA: 2, r: 50)                             	 0.143861  	 1000      	 610.276   	 0         	 48.8221   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 76, xn: 50, m: 152, rA: 1, r: 76)                            	 0.103478  	 1000      	 848.444   	 0         	 67.8755   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 288800, cols: 1)                                                                                                                                                                        	 0.000500256	 2         	 0         	 0         	 9.23687   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.22853   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.10832   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.453295  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.451856  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00356874	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000500256	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000385352	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.1532e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0071e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5511e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23205078460288 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23204902987776 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23204701661312 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23204500334848 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23204299008384 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23204097681920 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23203896355456 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23203695028992 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23203493702528 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23203292376064 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23203091049600 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23202889723136 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23202688396672 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23202487070208 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23202285743744 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23202084417280 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23201883090816 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23201681764352 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23201480437888 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23201279111424 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23201077784960 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23200876458496 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23200675132032 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23200473805568 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23200272479104 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23200071152640 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23199869826176 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23199668499712 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23199467173248 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23199265846784 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23199064520320 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23198863193856 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23198661863296 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23198460536832 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23198259210368 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23198057883904 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23197856557440 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23197655230976 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23197453904512 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23197252578048 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23197051251584 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23196849925120 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23196648598656 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23196447272192 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23196245945728 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23196044619264 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23195843292800 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23195641966336 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23195440639872 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23195239313408 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23195037986944 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23194836660480 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23194635334016 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23194434007552 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23194232681088 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23194031354624 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23193830028160 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23193628701696 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23193427375232 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23193226048768 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23193024722304 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23192823395840 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23192622069376 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23204972799744 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23204794222336 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3850, r2: 1, n: 77, n_right: 1, m: 77, r1: 2)	 1.50737   	 1000      	 60.5734   	 0         	 4.78294   	 12.6645   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 77, n_right: 3850, m: 77, r1: 1)	 0.433497  	 1000      	 210.628   	 0         	 16.6314   	 12.6645   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 78, m: 100, rA: 2, r: 78)                            	 0.213333  	 1000      	 570.375   	 0         	 46.005    	 12.3981   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 77, r2: 2, n: 50, n_right: 77, m: 50, r1: 2) 	 0.209295  	 1000      	 566.567   	 0         	 45.7076   	 12.3955   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 78, m: 78, rA: 2, r: 50)                             	 0.151259  	 1000      	 627.467   	 0         	 48.9103   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 50, m: 156, rA: 1, r: 78)                            	 0.107396  	 1000      	 883.742   	 0         	 68.8865   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 296450, cols: 1)                                                                                                                                                                        	 0.000517996	 2         	 0         	 0         	 9.15683   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.2712    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.15016   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.473677  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.471989  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00378318	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000517996	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000495515	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000371181	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000274317	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000107543	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.1843e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.0221e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23106685908864 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23106454284288 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23106252957824 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23106051631360 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23105850304896 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23105648978432 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23105447651968 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23105246325504 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23105044999040 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23104843672576 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23104642346112 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23104441019648 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23104239693184 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23104038366720 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23103837040256 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23103635713792 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23103434387328 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23103233060864 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23103031734400 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23102830407936 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23102629081472 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23102427755008 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23102226428544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23102025102080 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23101823775616 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23101622449152 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23101421122688 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23101219796224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23101018469760 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23100817143296 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23100615816832 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23100414490368 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23100213159808 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23100011833344 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23099810506880 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23099609180416 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23099407853952 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23099206527488 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23099005201024 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23098803874560 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23098602548096 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23098401221632 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23098199895168 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23097998568704 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23097797242240 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23097595915776 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23097394589312 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23097193262848 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23096991936384 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23096790609920 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23096589283456 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23096387956992 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23096186630528 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23095985304064 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23095783977600 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23095582651136 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23095381324672 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23095179998208 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23094978671744 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23094777345280 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23094576018816 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23094374692352 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23094173365888 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23106580248320 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23106573657856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3900, r2: 1, n: 78, n_right: 1, m: 78, r1: 2)	 1.56205   	 1000      	 60.7602   	 0         	 4.73618   	 12.8289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 78, n_right: 3900, m: 78, r1: 1)	 0.465947  	 1000      	 203.693   	 0         	 15.8776   	 12.8289   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 78, r2: 2, n: 50, n_right: 78, m: 50, r1: 2) 	 0.231559  	 1000      	 525.482   	 0         	 42.3841   	 12.3981   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 78, m: 100, rA: 2, r: 78)                            	 0.218237  	 1000      	 557.559   	 0         	 44.9713   	 12.3981   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 78, m: 78, rA: 2, r: 50)                             	 0.151609  	 1000      	 626.022   	 0         	 48.7976   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 78, xn: 50, m: 156, rA: 1, r: 78)                            	 0.105587  	 1000      	 898.887   	 0         	 70.0671   	 12.8289   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 304200, cols: 1)                                                                                                                                                                        	 0.000741612	 2         	 0         	 0         	 6.563     	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.38409   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.25956   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.477133  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.475432  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00399594	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000741612	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000611599	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.2052e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.2961e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.857e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22874524190592 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22874324723712 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22874123397248 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22873922070784 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22873720744320 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22873519417856 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22873318091392 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22873116764928 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22872915438464 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22872714112000 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22872512785536 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22872311459072 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22872110132608 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22871908806144 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22871707479680 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22871506153216 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22871304826752 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22871103500288 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22870902173824 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22870700847360 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22870499520896 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22870298194432 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22870096867968 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22869895541504 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22869694215040 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22869492888576 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22869291562112 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22869090235648 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22868888909184 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22868687582720 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22868486256256 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22868284929792 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22868083599232 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22867882272768 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22867680946304 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22867479619840 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22867278293376 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22867076966912 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22866875640448 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22866674313984 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22866472987520 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22866271661056 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22866070334592 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22865869008128 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22865667681664 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22865466355200 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22865265028736 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22865063702272 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22864862375808 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22864661049344 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22864459722880 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22864258396416 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22864057069952 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22863855743488 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22863654417024 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22863453090560 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22863251764096 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22863050437632 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22862849111168 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22862647784704 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22862446458240 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22862245131776 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22862043805312 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22874418530048 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22874411939584 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 3950, r2: 1, n: 79, n_right: 1, m: 79, r1: 2)	 1.60804   	 1000      	 61.3218   	 0         	 4.71945   	 12.9934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 79, n_right: 3950, m: 79, r1: 1)	 0.462134  	 1000      	 213.375   	 0         	 16.4218   	 12.9934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 79, r2: 2, n: 50, n_right: 79, m: 50, r1: 2) 	 0.227413  	 1000      	 548.87    	 0         	 44.2614   	 12.4007   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 80, m: 100, rA: 2, r: 80)                            	 0.216064  	 1000      	 592.416   	 0         	 47.7636   	 12.4031   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 80, m: 80, rA: 2, r: 50)                             	 0.15744   	 1000      	 650.405   	 0         	 49.4307   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 50, m: 160, rA: 1, r: 80)                            	 0.112498  	 1000      	 910.236   	 0         	 69.1779   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 312050, cols: 1)                                                                                                                                                                        	 0.000454174	 2         	 0         	 0         	 10.9931   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.43171   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.29759   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.487773  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.486003  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00386867	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000557157	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000467305	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000454174	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000203267	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 9.9593e-05	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.3772e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.584e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22929415636864 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22929219774464 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22929018448000 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22928817121536 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22928615795072 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22928414468608 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22928213142144 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22928011815680 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22927810489216 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22927609162752 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22927407836288 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22927206509824 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22927005183360 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22926803856896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22926602530432 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22926401203968 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22926199877504 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22925998551040 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22925797224576 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22925595898112 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22925394571648 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22925193245184 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22924991918720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22924790592256 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22924589265792 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22924387939328 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22924186612864 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22923985286400 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22923783959936 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22923582633472 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22923381307008 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22923179980544 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22922978649984 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22922777323520 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22922575997056 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22922374670592 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22922173344128 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22921972017664 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22921770691200 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22921569364736 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22921368038272 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22921166711808 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22920965385344 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22920764058880 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22920562732416 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22920361405952 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22920160079488 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22919958753024 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22919757426560 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22919556100096 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22919354773632 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22919153447168 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22918952120704 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22918750794240 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22918549467776 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22918348141312 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22918146814848 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22917945488384 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22917744161920 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22917542835456 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22917341508992 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22917140182528 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22916938856064 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22929309976320 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22929303385856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4000, r2: 1, n: 80, n_right: 1, m: 80, r1: 2)	 1.6114    	 1000      	 63.547    	 0         	 4.82957   	 13.1579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 80, n_right: 4000, m: 80, r1: 1)	 0.462599  	 1000      	 221.358   	 0         	 16.8232   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 80, m: 100, rA: 2, r: 80)                            	 0.221811  	 1000      	 577.069   	 0         	 46.5262   	 12.4031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 80, r2: 2, n: 50, n_right: 80, m: 50, r1: 2) 	 0.221097  	 1000      	 578.931   	 0         	 46.6763   	 12.4031   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 80, m: 80, rA: 2, r: 50)                             	 0.158803  	 1000      	 644.823   	 0         	 49.0065   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 80, xn: 50, m: 160, rA: 1, r: 80)                            	 0.108458  	 1000      	 944.148   	 0         	 71.7553   	 13.1579   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 320000, cols: 1)                                                                                                                                                                        	 0.000535206	 2         	 0         	 0         	 9.56641   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.43057   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.2951    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.490785  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.489071  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00347305	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000535206	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000425723	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.4602e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.111e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.662e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22847116408704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22846944307200 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22846742980736 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22846541654272 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22846340327808 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22846139001344 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22845937674880 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22845736348416 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22845535021952 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22845333695488 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22845132369024 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22844931042560 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22844729716096 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22844528389632 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22844327063168 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22844125736704 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22843924410240 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22843723083776 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22843521757312 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22843320430848 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22843119104384 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22842917777920 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22842716451456 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22842515124992 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22842313798528 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22842112472064 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22841911145600 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22841709819136 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22841508492672 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22841307166208 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22841105839744 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22840904513280 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22840703182720 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22840501856256 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22840300529792 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22840099203328 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22839897876864 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22839696550400 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22839495223936 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22839293897472 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22839092571008 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22838891244544 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22838689918080 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22838488591616 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22838287265152 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22838085938688 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22837884612224 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22837683285760 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22837481959296 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22837280632832 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22837079306368 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22836877979904 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22836676653440 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22836475326976 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22836274000512 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22836072674048 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22835871347584 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22835670021120 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22835468694656 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22835267368192 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22835066041728 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22834864715264 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22834663388800 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22846838765312 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22846832174848 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4050, r2: 1, n: 81, n_right: 1, m: 81, r1: 2)	 1.66128   	 1000      	 63.9798   	 0         	 4.80243   	 13.3224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 81, n_right: 4050, m: 81, r1: 1)	 0.490699  	 1000      	 216.606   	 0         	 16.2588   	 13.3224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 81, r2: 2, n: 50, n_right: 81, m: 50, r1: 2) 	 0.230588  	 1000      	 569.067   	 0         	 45.8723   	 12.4055   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 82, m: 100, rA: 2, r: 82)                            	 0.221509  	 1000      	 607.109   	 0         	 48.9299   	 12.4077   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 82, m: 82, rA: 2, r: 50)                             	 0.198513  	 1000      	 555.497   	 0         	 41.1881   	 13.4868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 50, m: 164, rA: 1, r: 82)                            	 0.152777  	 1000      	 721.795   	 0         	 53.5184   	 13.4868   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 328050, cols: 1)                                                                                                                                                                        	 0.000497325	 2         	 0         	 0         	 10.5541   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.51381   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.38257   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.574254  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.572799  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00392587	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000570447	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000497325	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000496315	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000211066	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000106043	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.0473e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.5361e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23170218100608 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23170006378496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23169805052032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23169603725568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23169402399104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23169201072640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23168999746176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23168798419712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23168597093248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23168395766784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23168194440320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23167993113856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23167791787392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23167590460928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23167389134464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23167187808000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23166986481536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23166785155072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23166583828608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23166382502144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23166181175680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23165979849216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23165778522752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23165577196288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23165375869824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23165174543360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23164973216896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23164771890432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23164570563968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23164369237504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23164167911040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23163966584576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23163765254016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23163563927552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23163362601088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23163161274624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23162959948160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23162758621696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23162557295232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23162355968768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23162154642304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23161953315840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23161751989376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23161550662912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23161349336448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23161148009984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23160946683520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23160745357056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23160544030592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23160342704128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23160141377664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23159940051200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23159738724736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23159537398272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23159336071808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23159134745344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23158933418880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23158732092416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23158530765952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23158329439488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23158128113024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23157926786560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23157725460096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23170112440064 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23170105849600 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4100, r2: 1, n: 82, n_right: 1, m: 82, r1: 2)	 1.73926   	 1000      	 63.4026   	 0         	 4.70107   	 13.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 82, n_right: 4100, m: 82, r1: 1)	 0.496636  	 1000      	 222.041   	 0         	 16.4635   	 13.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 82, r2: 2, n: 50, n_right: 82, m: 50, r1: 2) 	 0.23304   	 1000      	 577.067   	 0         	 46.5087   	 12.4077   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 82, m: 100, rA: 2, r: 82)                            	 0.221596  	 1000      	 606.869   	 0         	 48.9106   	 12.4077   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 82, m: 82, rA: 2, r: 50)                             	 0.194957  	 1000      	 565.631   	 0         	 41.9395   	 13.4868   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 82, xn: 50, m: 164, rA: 1, r: 82)                            	 0.159696  	 1000      	 690.521   	 0         	 51.1996   	 13.4868   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 336200, cols: 1)                                                                                                                                                                        	 0.000520326	 2         	 0         	 0         	 10.3381   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.61058   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.46894   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.577855  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.576249  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00416058	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000520326	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000403543	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.2862e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.3962e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.847e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22527733892992 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22527506114560 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22527304788096 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22527103461632 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22526902135168 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22526700808704 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22526499482240 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22526298155776 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22526096829312 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22525895502848 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22525694176384 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22525492849920 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22525291523456 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22525090196992 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22524888870528 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22524687544064 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22524486217600 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22524284891136 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22524083564672 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22523882238208 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22523680911744 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22523479585280 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22523278258816 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22523076932352 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22522875605888 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22522674279424 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22522472952960 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22522271626496 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22522070300032 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22521868973568 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22521667647104 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22521466320640 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22521264990080 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22521063663616 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22520862337152 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22520661010688 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22520459684224 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22520258357760 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22520057031296 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22519855704832 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22519654378368 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22519453051904 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22519251725440 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22519050398976 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22518849072512 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22518647746048 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22518446419584 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22518245093120 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22518043766656 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22517842440192 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22517641113728 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22517439787264 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22517238460800 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22517037134336 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22516835807872 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22516634481408 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22516433154944 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22516231828480 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22516030502016 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22515829175552 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22515627849088 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22515426522624 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22515225196160 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22527628232448 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22527621641984 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4150, r2: 1, n: 83, n_right: 1, m: 83, r1: 2)	 1.7401    	 1000      	 65.7189   	 0         	 4.81411   	 13.6513   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 83, n_right: 4150, m: 83, r1: 1)	 0.508776  	 1000      	 224.77    	 0         	 16.4651   	 13.6513   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 83, r2: 2, n: 50, n_right: 83, m: 50, r1: 2) 	 0.238046  	 1000      	 578.795   	 0         	 46.6397   	 12.4099   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 84, m: 100, rA: 2, r: 84)                            	 0.218945  	 1000      	 644.546   	 0         	 51.9291   	 12.412    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 84, m: 84, rA: 2, r: 50)                             	 0.208171  	 1000      	 569.44    	 0         	 41.2166   	 13.8158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 50, m: 168, rA: 1, r: 84)                            	 0.159506  	 1000      	 743.175   	 0         	 53.7917   	 13.8158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 344450, cols: 1)                                                                                                                                                                        	 0.000556207	 2         	 0         	 0         	 9.90854   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.63167   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.48692   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.588203  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.586621  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00397144	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000572918	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000556207	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000452784	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000219999	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000117323	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.7432e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.39e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23016165631872 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23015991535616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23015790209152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23015588882688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23015387556224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23015186229760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23014984903296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23014783576832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23014582250368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23014380923904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23014179597440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23013978270976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23013776944512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23013575618048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23013374291584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23013172965120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23012971638656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23012770312192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23012568985728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23012367659264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23012166332800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23011965006336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23011763679872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23011562353408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23011361026944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23011159700480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23010958374016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23010757047552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23010555721088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23010354394624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23010153068160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23009951741696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23009750411136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23009549084672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23009347758208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23009146431744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23008945105280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23008743778816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23008542452352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23008341125888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23008139799424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23007938472960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23007737146496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23007535820032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23007334493568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23007133167104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23006931840640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23006730514176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23006529187712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23006327861248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23006126534784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23005925208320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23005723881856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23005522555392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23005321228928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23005119902464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23004918576000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23004717249536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23004515923072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23004314596608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23004113270144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23003911943680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23003710617216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23015886673664 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23015881352960 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4200, r2: 1, n: 84, n_right: 1, m: 84, r1: 2)	 1.78141   	 1000      	 66.5432   	 0         	 4.81646   	 13.8158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 84, n_right: 4200, m: 84, r1: 1)	 0.509704  	 1000      	 232.568   	 0         	 16.8335   	 13.8158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 84, r2: 2, n: 50, n_right: 84, m: 50, r1: 2) 	 0.241133  	 1000      	 585.238   	 0         	 47.1508   	 12.412    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 84, m: 100, rA: 2, r: 84)                            	 0.22274   	 1000      	 633.563   	 0         	 51.0442   	 12.412    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 84, m: 84, rA: 2, r: 50)                             	 0.206711  	 1000      	 573.461   	 0         	 41.5077   	 13.8158   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 84, xn: 50, m: 168, rA: 1, r: 84)                            	 0.160332  	 1000      	 739.344   	 0         	 53.5144   	 13.8158   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 352800, cols: 1)                                                                                                                                                                        	 0.000561368	 2         	 0         	 0         	 10.0554   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.67854   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.53225   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.591436  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.589784  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00365725	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000561368	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000526746	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.0142e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0701e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.6631e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22419373193088 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22419192408064 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22418991081600 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22418789755136 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22418588428672 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22418387102208 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22418185775744 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22417984449280 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22417783122816 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22417581796352 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22417380469888 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22417179143424 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22416977816960 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22416776490496 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22416575164032 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22416373837568 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22416172511104 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22415971184640 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22415769858176 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22415568531712 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22415367205248 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22415165878784 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22414964552320 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22414763225856 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22414561899392 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22414360572928 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22414159246464 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22413957920000 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22413756593536 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22413555267072 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22413353940608 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22413152614144 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22412951283584 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22412749957120 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22412548630656 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22412347304192 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22412145977728 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22411944651264 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22411743324800 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22411541998336 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22411340671872 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22411139345408 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22410938018944 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22410736692480 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22410535366016 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22410334039552 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22410132713088 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22409931386624 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22409730060160 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22409528733696 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22409327407232 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22409126080768 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22408924754304 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22408723427840 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22408522101376 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22408320774912 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22408119448448 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22407918121984 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22407716795520 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22407515469056 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22407314142592 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22407112816128 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22406911489664 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22419267532544 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22419087546112 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4250, r2: 1, n: 85, n_right: 1, m: 85, r1: 2)	 1.85581   	 1000      	 66.1839   	 0         	 4.7341    	 13.9803   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 85, n_right: 4250, m: 85, r1: 1)	 0.534082  	 1000      	 229.974   	 0         	 16.4499   	 13.9803   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 85, r2: 2, n: 50, n_right: 85, m: 50, r1: 2) 	 0.247185  	 1000      	 584.582   	 0         	 47.0902   	 12.4141   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 86, m: 100, rA: 2, r: 86)                            	 0.231467  	 1000      	 639.056   	 0         	 51.4701   	 12.4161   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 86, m: 86, rA: 2, r: 50)                             	 0.228275  	 1000      	 557.273   	 0         	 39.3979   	 14.1447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 50, m: 172, rA: 1, r: 86)                            	 0.171518  	 1000      	 741.676   	 0         	 52.4348   	 14.1447   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 361250, cols: 1)                                                                                                                                                                        	 0.000538737	 2         	 0         	 0         	 10.7288   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.78878   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.63708   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.63292   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.63126   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00430403	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000540985	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000538737	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000423483	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000228308	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000119343	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 7.8543e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4391e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23056888797056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23056659507200 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23056458180736 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23056256854272 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23056055527808 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23055854201344 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23055652874880 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23055451548416 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23055250221952 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23055048895488 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23054847569024 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23054646242560 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23054444916096 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23054243589632 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23054042263168 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23053840936704 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23053639610240 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23053438283776 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23053236957312 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23053035630848 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23052834304384 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23052632977920 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23052431651456 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23052230324992 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23052028998528 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23051827672064 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23051626345600 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23051425019136 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23051223692672 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23051022366208 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23050821039744 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23050619713280 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23050418382720 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23050217056256 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23050015729792 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23049814403328 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23049613076864 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23049411750400 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23049210423936 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23049009097472 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23048807771008 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23048606444544 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23048405118080 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23048203791616 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23048002465152 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23047801138688 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23047599812224 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23047398485760 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23047197159296 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23046995832832 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23046794506368 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23046593179904 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23046391853440 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23046190526976 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23045989200512 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23045787874048 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23045586547584 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23045385221120 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23045183894656 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23044982568192 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23044781241728 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23044579915264 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23044378588800 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23056783136512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23056776546048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4300, r2: 1, n: 86, n_right: 1, m: 86, r1: 2)	 1.87415   	 1000      	 67.8766   	 0         	 4.79872   	 14.1447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 86, n_right: 4300, m: 86, r1: 1)	 0.543855  	 1000      	 233.906   	 0         	 16.5366   	 14.1447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 86, r2: 2, n: 50, n_right: 86, m: 50, r1: 2) 	 0.248507  	 1000      	 595.235   	 0         	 47.9407   	 12.4161   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 86, m: 86, rA: 2, r: 50)                             	 0.228156  	 1000      	 557.564   	 0         	 39.4184   	 14.1447   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 86, m: 100, rA: 2, r: 86)                            	 0.2257    	 1000      	 655.383   	 0         	 52.7851   	 12.4161   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 86, xn: 50, m: 172, rA: 1, r: 86)                            	 0.172223  	 1000      	 738.644   	 0         	 52.2204   	 14.1447   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 369800, cols: 1)                                                                                                                                                                        	 0.000591168	 2         	 0         	 0         	 10.0087   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.81886   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.66652   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.627507  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.626078  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00371382	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000591168	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000430643	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.0393e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0692e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.4011e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23280706938752 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23280534677504 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23280333351040 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23280132024576 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23279930698112 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23279729371648 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23279528045184 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23279326718720 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23279125392256 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23278924065792 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23278722739328 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23278521412864 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23278320086400 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23278118759936 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23277917433472 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23277716107008 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23277514780544 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23277313454080 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23277112127616 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23276910801152 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23276709474688 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23276508148224 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23276306821760 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23276105495296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23275904168832 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23275702842368 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23275501515904 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23275300189440 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23275098862976 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23274897536512 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23274696210048 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23274494883584 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23274293553024 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23274092226560 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23273890900096 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23273689573632 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23273488247168 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23273286920704 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23273085594240 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23272884267776 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23272682941312 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23272481614848 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23272280288384 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23272078961920 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23271877635456 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23271676308992 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23271474982528 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23271273656064 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23271072329600 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23270871003136 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23270669676672 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23270468350208 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23270267023744 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23270065697280 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23269864370816 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23269663044352 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23269461717888 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23269260391424 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23269059064960 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23268857738496 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23268656412032 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23268455085568 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23268253759104 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23280429278976 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23280422713088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4350, r2: 1, n: 87, n_right: 1, m: 87, r1: 2)	 1.9284    	 1000      	 68.2953   	 0         	 4.77282   	 14.3092   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 87, n_right: 4350, m: 87, r1: 1)	 0.548676  	 1000      	 240.033   	 0         	 16.7747   	 14.3092   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 87, r2: 2, n: 50, n_right: 87, m: 50, r1: 2) 	 0.25479   	 1000      	 594.137   	 0         	 47.8449   	 12.418    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 88, m: 88, rA: 2, r: 50)                             	 0.250408  	 1000      	 544.288   	 0         	 37.6054   	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 88, m: 100, rA: 2, r: 88)                            	 0.225225  	 1000      	 687.669   	 0         	 55.3687   	 12.4198   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 50, m: 176, rA: 1, r: 88)                            	 0.174101  	 1000      	 782.846   	 0         	 54.0875   	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 378450, cols: 1)                                                                                                                                                                        	 0.000556868	 2         	 0         	 0         	 10.8737   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.88497   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.73186   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.651222  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.649734  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00399717	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.00065503	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000556868	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000441674	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000260168	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000125154	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.3313e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.34e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22607879333760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22607701207040 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22607499880576 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22607298554112 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22607097227648 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22606895901184 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22606694574720 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22606493248256 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22606291921792 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22606090595328 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22605889268864 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22605687942400 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22605486615936 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22605285289472 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22605083963008 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22604882636544 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22604681310080 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22604479983616 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22604278657152 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22604077330688 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22603876004224 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22603674677760 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22603473351296 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22603272024832 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22603070698368 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22602869371904 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22602668045440 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22602466718976 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22602265392512 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22602064066048 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22601862739584 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22601661413120 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22601460082560 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22601258756096 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22601057429632 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22600856103168 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22600654776704 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22600453450240 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22600252123776 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22600050797312 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22599849470848 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22599648144384 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22599446817920 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22599245491456 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22599044164992 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22598842838528 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22598641512064 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22598440185600 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22598238859136 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22598037532672 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22597836206208 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22597634879744 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22597433553280 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22597232226816 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22597030900352 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22596829573888 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22596628247424 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22596426920960 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22596225594496 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22596024268032 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22595822941568 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22595621615104 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22595420288640 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22607773673216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22607595095808 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4400, r2: 1, n: 88, n_right: 1, m: 88, r1: 2)	 1.9548    	 1000      	 69.7228   	 0         	 4.81721   	 14.4737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 88, n_right: 4400, m: 88, r1: 1)	 0.560368  	 1000      	 243.223   	 0         	 16.8045   	 14.4737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 88, r2: 2, n: 50, n_right: 88, m: 50, r1: 2) 	 0.257712  	 1000      	 600.982   	 0         	 48.389    	 12.4198   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 88, m: 88, rA: 2, r: 50)                             	 0.249959  	 1000      	 545.267   	 0         	 37.673    	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 88, m: 100, rA: 2, r: 88)                            	 0.233409  	 1000      	 663.555   	 0         	 53.4272   	 12.4198   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 88, xn: 50, m: 176, rA: 1, r: 88)                            	 0.179083  	 1000      	 761.068   	 0         	 52.5829   	 14.4737   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 387200, cols: 1)                                                                                                                                                                        	 0.000676901	 2         	 0         	 0         	 9.1523    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 2.93325   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.77288   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.66395   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.662451  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00423178	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000676901	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000546227	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.0122e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.0883e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.748e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22741495998336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22741314955264 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22741113628800 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22740912302336 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22740710975872 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22740509649408 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22740308322944 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22740106996480 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22739905670016 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22739704343552 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22739503017088 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22739301690624 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22739100364160 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22738899037696 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22738697711232 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22738496384768 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22738295058304 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22738093731840 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22737892405376 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22737691078912 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22737489752448 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22737288425984 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22737087099520 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22736885773056 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22736684446592 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22736483120128 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22736281793664 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22736080467200 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22735879140736 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22735677814272 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22735476487808 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22735275161344 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22735073830784 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22734872504320 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22734671177856 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22734469851392 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22734268524928 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22734067198464 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22733865872000 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22733664545536 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22733463219072 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22733261892608 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22733060566144 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22732859239680 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22732657913216 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22732456586752 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22732255260288 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22732053933824 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22731852607360 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22731651280896 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22731449954432 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22731248627968 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22731047301504 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22730845975040 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22730644648576 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22730443322112 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22730241995648 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22730040669184 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22729839342720 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22729638016256 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22729436689792 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22729235363328 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22729034036864 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22741390337792 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22741210093312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4450, r2: 1, n: 89, n_right: 1, m: 89, r1: 2)	 2.0061    	 1000      	 70.2825   	 0         	 4.80132   	 14.6382   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 89, n_right: 4450, m: 89, r1: 1)	 0.592667  	 1000      	 237.897   	 0         	 16.2518   	 14.6382   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 90, m: 90, rA: 2, r: 50)                             	 0.283125  	 1000      	 514.967   	 0         	 34.7889   	 14.8026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 89, r2: 2, n: 50, n_right: 89, m: 50, r1: 2) 	 0.262126  	 1000      	 604.365   	 0         	 48.6544   	 12.4216   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 90, m: 100, rA: 2, r: 90)                            	 0.24055   	 1000      	 673.456   	 0         	 54.209    	 12.4233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 50, m: 180, rA: 1, r: 90)                            	 0.195282  	 1000      	 746.613   	 0         	 50.4379   	 14.8026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 396050, cols: 1)                                                                                                                                                                        	 0.000569867	 2         	 0         	 0         	 11.1198   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.02623   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.86089   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.720727  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.718957  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00418731	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.00065597	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000569867	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000472535	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000259037	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000142505	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.6353e-05	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.659e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23156706658176 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23156517496832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23156316170368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23156114843904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23155913517440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23155712190976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23155510864512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23155309538048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23155108211584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23154906885120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23154705558656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23154504232192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23154302905728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23154101579264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23153900252800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23153698926336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23153497599872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23153296273408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23153094946944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23152893620480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23152692294016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23152490967552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23152289641088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23152088314624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23151886988160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23151685661696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23151484335232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23151283008768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23151081682304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23150880355840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23150679029376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23150477702912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23150276372352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23150075045888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23149873719424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23149672392960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23149471066496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23149269740032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23149068413568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23148867087104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23148665760640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23148464434176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23148263107712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23148061781248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23147860454784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23147659128320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23147457801856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23147256475392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23147055148928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23146853822464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23146652496000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23146451169536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23146249843072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23146048516608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23145847190144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23145645863680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23145444537216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23145243210752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23145041884288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23144840557824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23144639231360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23144437904896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23144236578432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23156600997632 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23156594407168 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4500, r2: 1, n: 90, n_right: 1, m: 90, r1: 2)	 2.02744   	 1000      	 71.9133   	 0         	 4.85814   	 14.8026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 90, n_right: 4500, m: 90, r1: 1)	 0.593249  	 1000      	 245.765   	 0         	 16.6028   	 14.8026   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 90, m: 90, rA: 2, r: 50)                             	 0.280629  	 1000      	 519.547   	 0         	 35.0983   	 14.8026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 90, r2: 2, n: 50, n_right: 90, m: 50, r1: 2) 	 0.264161  	 1000      	 613.262   	 0         	 49.3638   	 12.4233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 90, m: 100, rA: 2, r: 90)                            	 0.234399  	 1000      	 691.129   	 0         	 55.6316   	 12.4233   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 90, xn: 50, m: 180, rA: 1, r: 90)                            	 0.197192  	 1000      	 739.382   	 0         	 49.9494   	 14.8026   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 405000, cols: 1)                                                                                                                                                                        	 0.000592798	 2         	 0         	 0         	 10.9312   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.05623   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.88485   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.713843  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.71222   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00385442	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000592798	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000477315	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.5653e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.1521e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.8031e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22547541669760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22547303229440 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22547101902976 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22546900576512 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22546699250048 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22546497923584 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22546296597120 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22546095270656 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22545893944192 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22545692617728 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22545491291264 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22545289964800 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22545088638336 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22544887311872 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22544685985408 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22544484658944 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22544283332480 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22544082006016 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22543880679552 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22543679353088 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22543478026624 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22543276700160 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22543075373696 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22542874047232 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22542672720768 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22542471394304 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22542270067840 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22542068741376 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22541867414912 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22541666088448 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22541464761984 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22541263435520 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22541062104960 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22540860778496 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22540659452032 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22540458125568 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22540256799104 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22540055472640 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22539854146176 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22539652819712 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22539451493248 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22539250166784 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22539048840320 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22538847513856 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22538646187392 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22538444860928 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22538243534464 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22538042208000 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22537840881536 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22537639555072 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22537438228608 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22537236902144 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22537035575680 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22536834249216 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22536632922752 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22536431596288 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22536230269824 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22536028943360 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22535827616896 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22535626290432 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22535424963968 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22535223637504 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22535022311040 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22547436009216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22547429418752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4550, r2: 1, n: 91, n_right: 1, m: 91, r1: 2)	 2.0686    	 1000      	 72.858    	 0         	 4.86788   	 14.9671   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 91, n_right: 4550, m: 91, r1: 1)	 0.606834  	 1000      	 248.361   	 0         	 16.5938   	 14.9671   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 91, r2: 2, n: 50, n_right: 91, m: 50, r1: 2) 	 0.279986  	 1000      	 591.529   	 0         	 47.608    	 12.425    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 92, m: 92, rA: 2, r: 50)                             	 0.276999  	 1000      	 562.232   	 0         	 37.1562   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 92, m: 100, rA: 2, r: 92)                            	 0.248226  	 1000      	 681.959   	 0         	 54.879    	 12.4266   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 50, m: 184, rA: 1, r: 92)                            	 0.199961  	 1000      	 778.841   	 0         	 51.4712   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 414050, cols: 1)                                                                                                                                                                        	 0.000814966	 2         	 0         	 0         	 8.12893   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.12237   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 2.95542   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.7268    	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.725185  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00384272	 3011      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000836976	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000814966	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000693432	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000270967	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000152144	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000101793	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.2341e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22938712008576 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22938480797696 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22938279471232 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22938078144768 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22937876818304 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22937675491840 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22937474165376 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22937272838912 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22937071512448 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22936870185984 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22936668859520 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22936467533056 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22936266206592 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22936064880128 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22935863553664 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22935662227200 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22935460900736 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22935259574272 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22935058247808 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22934856921344 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22934655594880 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22934454268416 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22934252941952 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22934051615488 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22933850289024 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22933648962560 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22933447636096 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22933246309632 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22933044983168 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22932843656704 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22932642330240 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22932441003776 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22932239673216 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22932038346752 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22931837020288 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22931635693824 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22931434367360 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22931233040896 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22931031714432 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22930830387968 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22930629061504 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22930427735040 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22930226408576 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22930025082112 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22929823755648 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22929622429184 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22929421102720 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22929219776256 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22929018449792 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22928817123328 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22928615796864 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22928414470400 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22928213143936 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22928011817472 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22927810491008 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22927609164544 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22927407838080 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22927206511616 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22927005185152 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22926803858688 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22926602532224 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22926401205760 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22926199879296 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22938606348032 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22938599757568 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4600, r2: 1, n: 92, n_right: 1, m: 92, r1: 2)	 2.1416    	 1000      	 72.7202   	 0         	 4.80585   	 15.1316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 92, n_right: 4600, m: 92, r1: 1)	 0.617589  	 1000      	 252.17    	 0         	 16.6652   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 92, m: 92, rA: 2, r: 50)                             	 0.280821  	 1000      	 554.581   	 0         	 36.6505   	 15.1316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 92, r2: 2, n: 50, n_right: 92, m: 50, r1: 2) 	 0.273952  	 1000      	 617.919   	 0         	 49.7255   	 12.4266   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 92, m: 100, rA: 2, r: 92)                            	 0.248281  	 1000      	 681.809   	 0         	 54.8669   	 12.4266   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 92, xn: 50, m: 184, rA: 1, r: 92)                            	 0.198721  	 1000      	 783.701   	 0         	 51.7924   	 15.1316   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 423200, cols: 1)                                                                                                                                                                        	 0.000590809	 2         	 0         	 0         	 11.4609   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.20646   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.03314   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.729563  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.727822  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00384064	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000590809	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000498906	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.0133e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.3763e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.455e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23116025833344 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23115849525248 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23115648198784 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23115446872320 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23115245545856 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23115044219392 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23114842892928 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23114641566464 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23114440240000 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23114238913536 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23114037587072 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23113836260608 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23113634934144 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23113433607680 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23113232281216 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23113030954752 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23112829628288 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23112628301824 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23112426975360 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23112225648896 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23112024322432 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23111822995968 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23111621669504 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23111420343040 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23111219016576 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23111017690112 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23110816363648 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23110615037184 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23110413710720 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23110212384256 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23110011057792 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23109809731328 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23109608400768 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23109407074304 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23109205747840 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23109004421376 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23108803094912 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23108601768448 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23108400441984 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23108199115520 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23107997789056 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23107796462592 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23107595136128 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23107393809664 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23107192483200 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23106991156736 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23106789830272 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23106588503808 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23106387177344 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23106185850880 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23105984524416 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23105783197952 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23105581871488 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23105380545024 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23105179218560 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23104977892096 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23104776565632 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23104575239168 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23104373912704 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23104172586240 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23103971259776 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23103769933312 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23103568606848 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23115920172800 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23115741554432 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4650, r2: 1, n: 93, n_right: 1, m: 93, r1: 2)	 2.16734   	 1000      	 74.2253   	 0         	 4.85258   	 15.2961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 93, n_right: 4650, m: 93, r1: 1)	 0.634566  	 1000      	 253.514   	 0         	 16.5738   	 15.2961   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 94, m: 100, rA: 2, r: 94)                            	 0.288692  	 1000      	 612.139   	 0         	 49.2483   	 12.4297   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 94, m: 94, rA: 2, r: 50)                             	 0.281242  	 1000      	 590.654   	 0         	 38.204    	 15.4605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 93, r2: 2, n: 50, n_right: 93, m: 50, r1: 2) 	 0.279567  	 1000      	 618.742   	 0         	 49.7855   	 12.4282   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 50, m: 188, rA: 1, r: 94)                            	 0.22104   	 1000      	 751.522   	 0         	 48.6091   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 432450, cols: 1)                                                                                                                                                                        	 0.00062542	 2         	 0         	 0         	 11.0633   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.25891   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.08147   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.79258   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.790975  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00410566	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000648691	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.00062542	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000484425	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000271508	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000148225	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000101993	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.329e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23004270311296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23004046157824 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23003844831360 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23003643504896 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23003442178432 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23003240851968 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23003039525504 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23002838199040 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23002636872576 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23002435546112 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23002234219648 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23002032893184 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23001831566720 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23001630240256 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23001428913792 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23001227587328 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23001026260864 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23000824934400 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23000623607936 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23000422281472 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23000220955008 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23000019628544 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22999818302080 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22999616975616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22999415649152 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22999214322688 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22999012996224 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22998811669760 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22998610343296 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22998409016832 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22998207690368 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22998006363904 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22997805033344 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22997603706880 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22997402380416 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22997201053952 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22996999727488 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22996798401024 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22996597074560 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22996395748096 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22996194421632 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22995993095168 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22995791768704 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22995590442240 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22995389115776 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22995187789312 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22994986462848 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22994785136384 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22994583809920 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22994382483456 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22994181156992 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22993979830528 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22993778504064 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22993577177600 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22993375851136 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22993174524672 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22992973198208 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22992771871744 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22992570545280 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22992369218816 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22992167892352 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22991966565888 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22991765239424 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23004164650752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23004158060288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4700, r2: 1, n: 94, n_right: 1, m: 94, r1: 2)	 2.2206    	 1000      	 74.8072   	 0         	 4.83859   	 15.4605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 94, n_right: 4700, m: 94, r1: 1)	 0.638083  	 1000      	 260.337   	 0         	 16.8388   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 94, m: 100, rA: 2, r: 94)                            	 0.292109  	 1000      	 604.98    	 0         	 48.6722   	 12.4297   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 94, r2: 2, n: 50, n_right: 94, m: 50, r1: 2) 	 0.286951  	 1000      	 615.854   	 0         	 49.5471   	 12.4297   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 94, m: 94, rA: 2, r: 50)                             	 0.285789  	 1000      	 581.257   	 0         	 37.5962   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 94, xn: 50, m: 188, rA: 1, r: 94)                            	 0.220227  	 1000      	 754.298   	 0         	 48.7886   	 15.4605   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 441800, cols: 1)                                                                                                                                                                        	 0.000615629	 2         	 0         	 0         	 11.4822   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.32498   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.14563   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.799708  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.798125  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00448834	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000615629	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000490376	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 8.9383e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.165e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.4e-05   	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22721672832896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22721450731520 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22721249405056 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22721048078592 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22720846752128 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22720645425664 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22720444099200 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22720242772736 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22720041446272 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22719840119808 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22719638793344 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22719437466880 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22719236140416 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22719034813952 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22718833487488 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22718632161024 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22718430834560 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22718229508096 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22718028181632 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22717826855168 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22717625528704 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22717424202240 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22717222875776 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22717021549312 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22716820222848 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22716618896384 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22716417569920 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22716216243456 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22716014916992 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22715813590528 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22715612264064 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22715410937600 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22715209607040 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22715008280576 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22714806954112 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22714605627648 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22714404301184 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22714202974720 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22714001648256 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22713800321792 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22713598995328 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22713397668864 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22713196342400 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22712995015936 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22712793689472 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22712592363008 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22712391036544 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22712189710080 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22711988383616 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22711787057152 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22711585730688 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22711384404224 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22711183077760 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22710981751296 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22710780424832 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22710579098368 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22710377771904 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22710176445440 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22709975118976 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22709773792512 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22709572466048 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22709371139584 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22709169813120 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22721567172352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22721560581888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4750, r2: 1, n: 95, n_right: 1, m: 95, r1: 2)	 2.24892   	 1000      	 76.2479   	 0         	 4.87986   	 15.625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 95, n_right: 4750, m: 95, r1: 1)	 0.665454  	 1000      	 257.681   	 0         	 16.4916   	 15.625    
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.308394  	 1000      	 622.839   	 0         	 50.0866   	 12.4353   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.305441  	 1000      	 616.285   	 0         	 38.2348   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 95, r2: 2, n: 50, n_right: 95, m: 50, r1: 2) 	 0.298035  	 1000      	 605.633   	 0         	 48.7191   	 12.4311   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.233296  	 1000      	 806.866   	 0         	 50.0586   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 451250, cols: 1)                                                                                                                                                                        	 0.000617439	 2         	 0         	 0         	 11.6935   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.39322   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.2124    	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.848839  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.84713   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00459254	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000666721	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000617439	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000535407	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000283629	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000165395	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000108034	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.34e-05  	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22762129528704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22761917376512 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22761716050048 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22761514723584 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22761313397120 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22761112070656 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22760910744192 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22760709417728 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22760508091264 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22760306764800 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22760105438336 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22759904111872 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22759702785408 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22759501458944 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22759300132480 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22759098806016 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22758897479552 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22758696153088 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22758494826624 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22758293500160 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22758092173696 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22757890847232 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22757689520768 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22757488194304 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22757286867840 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22757085541376 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22756884214912 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22756682888448 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22756481561984 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22756280235520 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22756078909056 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22755877582592 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22755676252032 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22755474925568 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22755273599104 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22755072272640 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22754870946176 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22754669619712 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22754468293248 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22754266966784 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22754065640320 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22753864313856 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22753662987392 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22753461660928 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22753260334464 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22753059008000 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22752857681536 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22752656355072 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22752455028608 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22752253702144 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22752052375680 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22751851049216 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22751649722752 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22751448396288 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22751247069824 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22751045743360 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22750844416896 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22750643090432 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22750441763968 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22750240437504 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22750039111040 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22749837784576 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22749636458112 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22762023868160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22762017277696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4800, r2: 1, n: 96, n_right: 1, m: 96, r1: 2)	 2.35933   	 1000      	 74.999    	 0         	 4.74994   	 15.7895   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 96, n_right: 4800, m: 96, r1: 1)	 0.678602  	 1000      	 260.753   	 0         	 16.5143   	 15.7895   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.311516  	 1000      	 604.265   	 0         	 37.4891   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.300303  	 1000      	 639.62    	 0         	 51.436    	 12.4353   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 96, r2: 2, n: 50, n_right: 96, m: 50, r1: 2) 	 0.28941   	 1000      	 636.881   	 0         	 51.2269   	 12.4325   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.234106  	 1000      	 804.072   	 0         	 49.8853   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 460800, cols: 1)                                                                                                                                                                        	 0.000685372	 2         	 0         	 0         	 10.7574   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.52914   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.32734   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.847504  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.845926  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00471253	 3011      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000685372	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.00063069	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000630119	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000295148	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000162565	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000111544	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.544e-05 	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22448975583104 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22448787417088 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22448586090624 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22448384764160 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22448183437696 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22447982111232 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22447780784768 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22447579458304 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22447378131840 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22447176805376 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22446975478912 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22446774152448 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22446572825984 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22446371499520 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22446170173056 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22445968846592 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22445767520128 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22445566193664 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22445364867200 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22445163540736 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22444962214272 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22444760887808 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22444559561344 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22444358234880 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22444156908416 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22443955581952 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22443754255488 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22443552929024 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22443351602560 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22443150276096 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22442948949632 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22442747623168 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22442546292608 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22442344966144 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22442143639680 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22441942313216 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22441740986752 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22441539660288 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22441338333824 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22441137007360 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22440935680896 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22440734354432 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22440533027968 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22440331701504 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22440130375040 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22439929048576 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22439727722112 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22439526395648 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22439325069184 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22439123742720 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22438922416256 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22438721089792 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22438519763328 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22438318436864 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22438117110400 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22437915783936 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22437714457472 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22437513131008 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22437311804544 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22437110478080 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22436909151616 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22436707825152 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22436506498688 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22448869922560 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22448863332096 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4850, r2: 1, n: 97, n_right: 1, m: 97, r1: 2)	 2.35406   	 1000      	 77.5402   	 0         	 4.86025   	 15.9539   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 97, n_right: 4850, m: 97, r1: 1)	 0.696888  	 1000      	 261.928   	 0         	 16.4178   	 15.9539   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.310374  	 1000      	 606.49    	 0         	 37.6271   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.300931  	 1000      	 638.286   	 0         	 51.3287   	 12.4353   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 97, r2: 2, n: 50, n_right: 97, m: 50, r1: 2) 	 0.291755  	 1000      	 644.994   	 0         	 51.8737   	 12.4339   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.231145  	 1000      	 814.373   	 0         	 50.5244   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 470450, cols: 1)                                                                                                                                                                        	 0.000672861	 2         	 0         	 0         	 11.1869   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.53655   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.34271   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.843951  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.84245   	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00478736	 3011      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000731883	 2         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000672861	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000539406	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000313169	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000160755	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000106303	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.3901e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23279041492864 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23278856955904 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23278655629440 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23278454302976 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23278252976512 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23278051650048 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23277850323584 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23277648997120 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23277447670656 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23277246344192 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23277045017728 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23276843691264 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23276642364800 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23276441038336 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23276239711872 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23276038385408 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23275837058944 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23275635732480 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23275434406016 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23275233079552 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23275031753088 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23274830426624 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23274629100160 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23274427773696 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23274226447232 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23274025120768 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23273823794304 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23273622467840 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23273421141376 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23273219814912 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23273018488448 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23272817161984 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23272615831424 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23272414504960 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23272213178496 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23272011852032 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23271810525568 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23271609199104 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23271407872640 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23271206546176 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23271005219712 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23270803893248 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23270602566784 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23270401240320 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23270199913856 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23269998587392 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23269797260928 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23269595934464 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23269394608000 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23269193281536 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23268991955072 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23268790628608 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23268589302144 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23268387975680 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23268186649216 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23267985322752 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23267783996288 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23267582669824 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23267381343360 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23267180016896 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23266978690432 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23266777363968 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23266576037504 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23278935832320 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23278929241856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4900, r2: 1, n: 98, n_right: 1, m: 98, r1: 2)	 2.39769   	 1000      	 78.5083   	 0         	 4.87072   	 16.1184   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 98, n_right: 4900, m: 98, r1: 1)	 0.695336  	 1000      	 270.716   	 0         	 16.7954   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 98, m: 98, rA: 2, r: 50)                             	 0.308697  	 1000      	 609.783   	 0         	 37.8315   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 98, m: 100, rA: 2, r: 98)                            	 0.304423  	 1000      	 630.964   	 0         	 50.7399   	 12.4353   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 98, r2: 2, n: 50, n_right: 98, m: 50, r1: 2) 	 0.299105  	 1000      	 642.183   	 0         	 51.6421   	 12.4353   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 98, xn: 50, m: 196, rA: 1, r: 98)                            	 0.231809  	 1000      	 812.041   	 0         	 50.3797   	 16.1184   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 480200, cols: 1)                                                                                                                                                                        	 0.000603419	 2         	 0         	 0         	 12.7328   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.58885   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.39213   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.846634  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.844929  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00430837	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000603419	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000545997	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.6143e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.192e-05 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5311e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22868230240128 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22868016490496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22867815164032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22867613837568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22867412511104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22867211184640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22867009858176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22866808531712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22866607205248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22866405878784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22866204552320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22866003225856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22865801899392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22865600572928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22865399246464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22865197920000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22864996593536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22864795267072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22864593940608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22864392614144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22864191287680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22863989961216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22863788634752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22863587308288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22863385981824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22863184655360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22862983328896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22862782002432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22862580675968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22862379349504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22862178023040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22861976696576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22861775366016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22861574039552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22861372713088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22861171386624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22860970060160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22860768733696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22860567407232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22860366080768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22860164754304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22859963427840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22859762101376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22859560774912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22859359448448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22859158121984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22858956795520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22858755469056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22858554142592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22858352816128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22858151489664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22857950163200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22857748836736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22857547510272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22857346183808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22857144857344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22856943530880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22856742204416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22856540877952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22856339551488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22856138225024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22855936898560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22855735572096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22868124579584 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22868117989120 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                               	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 4950, r2: 1, n: 99, n_right: 1, m: 99, r1: 2)	 2.45028   	 1000      	 79.199    	 0         	 4.86394   	 16.2829   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 99, n_right: 4950, m: 99, r1: 1)	 0.714677  	 1000      	 271.535   	 0         	 16.6761   	 16.2829   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 100, m: 100, rA: 2, r: 50)                          	 0.311163  	 1000      	 642.75    	 0         	 39.0792   	 16.4474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 100, m: 100, rA: 2, r: 100)                          	 0.30931   	 1000      	 646.601   	 0         	 51.9867   	 12.4378   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 99, r2: 2, n: 50, n_right: 99, m: 50, r1: 2) 	 0.304088  	 1000      	 644.615   	 0         	 51.8323   	 12.4366   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 50, m: 200, rA: 1, r: 100)                          	 0.231122  	 1000      	 865.345   	 0         	 52.613    	 16.4474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 490050, cols: 1)                                                                                                                                                                        	 0.000816026	 2         	 0         	 0         	 9.60852   	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.66932   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.46905   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.853107  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.851594  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00476918	 3011      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000893278	 3         
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000816026	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::addPadding(PITTS::MultiVector<T>&) const [with T = double]                                                                               	 0.000742263	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 0.000336551	 1002      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::removePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                            	 0.000181376	 2         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 0.000113374	 1         
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 2.3331e-05	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23169859999616 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23169670834176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23169469507712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23169268181248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23169066854784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23168865528320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23168664201856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23168462875392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23168261548928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23168060222464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23167858896000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23167657569536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23167456243072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23167254916608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23167053590144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23166852263680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23166650937216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23166449610752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23166248284288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23166046957824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23165845631360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23165644304896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23165442978432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23165241651968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23165040325504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23164838999040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23164637672576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23164436346112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23164235019648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23164033693184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23163832366720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23163631040256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23163429709696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23163228383232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23163027056768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23162825730304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23162624403840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23162423077376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23162221750912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23162020424448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23161819097984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23161617771520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23161416445056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23161215118592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23161013792128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23160812465664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23160611139200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23160409812736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23160208486272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23160007159808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23159805833344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23159604506880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23159403180416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23159201853952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23159000527488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23158799201024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23158597874560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23158396548096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23158195221632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23157993895168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23157792568704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23157591242240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23157389915776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23169754339072 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23169747748608 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                                                                                 	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 5000, r2: 1, n: 100, n_right: 1, m: 100, r1: 2)	 2.50987   	 1000      	 79.6855   	 0         	 4.84488   	 16.4474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 1, r2: 2, n: 100, n_right: 5000, m: 100, r1: 1)	 0.72299   	 1000      	 276.629   	 0         	 16.819    	 16.4474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 100, m: 100, rA: 2, r: 50)                            	 0.312013  	 1000      	 640.998   	 0         	 38.9727   	 16.4474   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 50, xn: 100, m: 100, rA: 2, r: 100)                            	 0.306201  	 1000      	 653.167   	 0         	 52.5146   	 12.4378   
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](nCols: 1, m_left: 100, r2: 2, n: 50, n_right: 100, m: 50, r1: 2) 	 0.305057  	 1000      	 655.616   	 0         	 52.7115   	 12.4378   
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double](yn: 100, xn: 50, m: 200, rA: 1, r: 100)                            	 0.233802  	 1000      	 855.425   	 0         	 52.0098   	 16.4474   
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double](rows: 500000, cols: 1)                                                                                                                                                                          	 0.000668731	 2         	 0         	 0         	 11.963    	 0         
Timing statistics:
function                                                                                                                                                                                                               	 time [s]  	 #calls    
<PITTS::TensorTrainOperator<double>> :: void PITTS::apply(const TensorTrainOperator<T>&, const MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                     	 3.74405   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::apply_dense_contract(const PITTS::TensorTrainOperator<T>&, int, const PITTS::Tensor3<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]	 3.53791   	 3000      
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::apply(const TTOpApplyDenseHelper<T>&, MultiVector<T>&, MultiVector<T>&) [with T = double]                                                                         	 0.853612  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::apply_dense_contract_padded(long long int, long long int, const PITTS::MultiVector<T>&, const PITTS::MultiVector<T>&, PITTS::MultiVector<T>&) [with T = double]  	 0.852016  	 3000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                                         	 0.00396486	 3007      
<PITTS::MultiVector<double>> :: void PITTS::randomize(MultiVector<T>&) [with T = double]                                                                                                                               	 0.000668731	 2         
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                                                       	 0.000560137	 3         
<PITTS::TTOpApplyDenseHelper<double>> :: PITTS::TTOpApplyDenseHelper<T>::TTOpApplyDenseHelper(const PITTS::TensorTrainOperator<T>&) [with T = double]                                                                  	 9.6233e-05	 1         
<PITTS::TTOpApplyDenseHelper<double>> :: void PITTS::TTOpApplyDenseHelper<T>::preparePadding(PITTS::MultiVector<T>&) const [with T = double]                                                                           	 3.1911e-05	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                                                  	 1.5e-05   	 3         
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
