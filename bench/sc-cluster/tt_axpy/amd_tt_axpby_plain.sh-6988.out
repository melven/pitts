[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23216739182464 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23216512821248 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23216311494784 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23216110168320 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23215908841856 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23215707515392 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23215506188928 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23215304862464 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23215103536000 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23214902209536 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23214700883072 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23214499556608 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23214298230144 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23214096903680 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23213895577216 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23213694250752 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23213492924288 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23213291597824 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23213090271360 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23212888944896 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23212687618432 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23212486291968 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23212284965504 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23212083639040 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23211882312576 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23211680986112 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23211479659648 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23211278333184 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23211077006720 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23210875680256 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23210674353792 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23210473027328 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23210271696768 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23210070370304 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23209869043840 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23209667717376 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23209466390912 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23209265064448 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23209063737984 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23208862411520 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23208661085056 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23208459758592 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23208258432128 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23208057105664 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23207855779200 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23207654452736 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23207453126272 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23207251799808 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23207050473344 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23206849146880 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23206647820416 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23206446493952 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23206245167488 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23206043841024 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23205842514560 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23205641188096 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23205439861632 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23205238535168 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23205037208704 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23204835882240 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23204634555776 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23204433229312 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23204231902848 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23216633521920 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23216626931456 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 51, reductionFactor: 37, colBlockingSize: 12)                                	 0.342566  	 1300      	 51.7      	 0         	 4.02716   	 12.8378   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 51)                                                                               	 0.284271  	 700       	 2.28651   	 0         	 0.15472   	 14.7784   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 51)	 0.1556    	 700       	 57.3815   	 0         	 9.27458   	 6.18697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 51)                           	 0.135568  	 700       	 68.4939   	 0         	 10.8516   	 6.31188   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 51, r2: 51, leftOrthog: 1)                      	 0.127351  	 600       	 62.497    	 0         	 14.9012   	 4.19408   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 51)                         	 0.116257  	 600       	 68.4607   	 0         	 10.8463   	 6.31188   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2550, Xcols: 51, r: 51, streamingCols: 0)                                 	 0.0605729 	 700       	 76.6479   	 0         	 24.1666   	 3.17164   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 51, m: 2550)                                                                                	 0.0545019 	 700       	 0         	 0         	 26.7249   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 51, reductionFactor: 37, colBlockingSize: 12)                                	 0.0534982 	 200       	 49.9325   	 0         	 3.891     	 12.8328   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2550, m: 51)                                                                       	 0.0507843 	 700       	 0         	 0         	 28.6813   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 51)                                                                               	 0.0407168 	 100       	 2.19197   	 0         	 0.150306  	 14.5833   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 51)                                                                                	 0.0377912 	 900       	 4.21213   	 0         	 1.49635   	 2.81494   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0362102 	 100       	 2.41645   	 0         	 0.166804  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0265794 	 100       	 49.266    	 0         	 3.91281   	 12.591    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 50)	 0.0240453 	 100       	 52.006    	 0         	 8.48732   	 6.1275    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 50, r2: 50, leftOrthog: 1)                      	 0.0215864 	 100       	 59.065    	 0         	 14.3609   	 4.1129    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 50)                           	 0.0214776 	 100       	 60.5513   	 0         	 9.68821   	 6.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 51, r2: 51, leftOrthog: 1)                      	 0.02035   	 100       	 63.9068   	 0         	 15.2414   	 4.19298   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 50)                         	 0.018868  	 100       	 68.9263   	 0         	 10.9223   	 6.31063   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 50, n: 50, r2: 51)                         	 0.017066  	 100       	 76.2041   	 0         	 12.1926   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 51, r: 51, streamingCols: 0)                                 	 0.00823414	 100       	 78.97     	 0         	 24.9013   	 3.17133   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 51, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00744011	 200       	 7.1808    	 0         	 1.10773   	 6.48247   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 1) 	 0.00492423	 100       	 0.10357   	 0         	 0.828882  	 0.124951  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 2, r2: 1)                             	 0.00429801	 100       	 0.237319  	 0         	 1.42429   	 0.166623  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 51)                                                                       	 0.00329034	 100       	 0         	 0         	 61.9996   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 1)                                                                                                         	 0.0032272 	 1010      	 0         	 0         	 0.250372  	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 51, m: 2500)                                                                                	 0.00316435	 100       	 0         	 0         	 64.4682   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 51, r: 50, streamingCols: 1)                                   	 0.00300033	 100       	 4.16621   	 0         	 1.66648   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 51) 	 0.00162969	 100       	 15.9601   	 0         	 3.78035   	 4.22185   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 51, fromLeft: 1)                              	 0.00153816	 800       	 0         	 0         	 21.6446   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 51, leftOrthog: 1)                        	 0.00119266	 100       	 21.3807   	 0         	 8.48522   	 2.51976   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 51, r2: 51)                            	 0.000881436	 100       	 29.5087   	 0         	 6.9895    	 4.22185   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000866474	 100       	 0.577051  	 0         	 2.30821   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000827001	 100       	 30.2297   	 0         	 7.25513   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 51)                           	 0.00055706	 100       	 0         	 0         	 7.32417   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000501525	 100       	 0         	 0         	 7.97567   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                        	 0.000483678	 100       	 0         	 0         	 8.43536   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 51)                                                                         	 0.00040264	 100       	 0         	 0         	 10.1331   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00033362	 100       	 0.749356  	 0         	 11.9897   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 50, fromLeft: 1)                              	 0.000198114	 100       	 0         	 0         	 20.5942   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.68804   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.68801   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.0392    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.03791   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.858885  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.457553  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.430084  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.361198  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.216998  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.21418   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.186199  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.17048   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.162225  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.153018  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0718074 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0581678 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0544772 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0377912 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0108428 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00589765	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00471768	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00371088	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00173627	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000936027	 4630      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000866474	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00055706	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033362	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22618246039424 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22618035972096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22617834645632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22617633319168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22617431992704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22617230666240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22617029339776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22616828013312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22616626686848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22616425360384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22616224033920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22616022707456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22615821380992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22615620054528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22615418728064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22615217401600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22615016075136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22614814748672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22614613422208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22614412095744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22614210769280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22614009442816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22613808116352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22613606789888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22613405463424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22613204136960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22613002810496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22612801484032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22612600157568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22612398831104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22612197504640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22611996178176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22611794847616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22611593521152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22611392194688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22611190868224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22610989541760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22610788215296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22610586888832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22610385562368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22610184235904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22609982909440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22609781582976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22609580256512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22609378930048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22609177603584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22608976277120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22608774950656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22608573624192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22608372297728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22608170971264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22607969644800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22607768318336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22607566991872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22607365665408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22607164338944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22606963012480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22606761686016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22606560359552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22606359033088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22606157706624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22605956380160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22605755053696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22618140378880 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22618133788416 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2600, cols: 52, reductionFactor: 37, colBlockingSize: 12)                                	 0.362846  	 1300      	 51.7384   	 0         	 3.95265   	 13.0896   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 52)                                                                               	 0.268954  	 700       	 2.5617    	 0         	 0.169986  	 15.0701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 52)	 0.162644  	 700       	 56.0401   	 0         	 9.05897   	 6.18615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 52)                           	 0.143209  	 700       	 68.7287   	 0         	 10.6794   	 6.43564   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 52, r2: 52, leftOrthog: 1)                      	 0.126615  	 600       	 66.6307   	 0         	 15.5813   	 4.27632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 52)                         	 0.119655  	 600       	 70.5068   	 0         	 10.9557   	 6.43564   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2600, m: 52)                                                                       	 0.072319  	 700       	 0         	 0         	 20.9383   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2600, Xcols: 52, r: 52, streamingCols: 0)                                 	 0.0619089 	 700       	 79.4923   	 0         	 24.5815   	 3.23383   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 52, m: 2600)                                                                                	 0.0602694 	 700       	 0         	 0         	 25.1245   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 52, reductionFactor: 37, colBlockingSize: 12)                                	 0.0557427 	 200       	 49.8197   	 0         	 3.80905   	 13.0793   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 52)                                                                               	 0.0423357 	 100       	 2.14949   	 0         	 0.146449  	 14.6774   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 52)                                                                                	 0.0384193 	 900       	 4.39176   	 0         	 1.52998   	 2.87047   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.037818  	 100       	 2.31371   	 0         	 0.159712  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0263545 	 100       	 50.6606   	 0         	 4.02209   	 12.5956   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 50)	 0.0252345 	 100       	 49.6146   	 0         	 8.17294   	 6.0706    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 50)                           	 0.0226153 	 100       	 59.7825   	 0         	 9.47323   	 6.31068   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 52, r2: 52, leftOrthog: 1)                      	 0.0213624 	 100       	 63.2887   	 0         	 14.8076   	 4.27407   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 50)                         	 0.01937   	 100       	 69.7985   	 0         	 10.8499   	 6.4331    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 50, r2: 50, leftOrthog: 1)                      	 0.0177511 	 100       	 73.2349   	 0         	 17.8017   	 4.11392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 50, n: 50, r2: 52)                         	 0.0131637 	 100       	 102.707   	 0         	 16.275    	 6.31068   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 52, r: 52, streamingCols: 0)                                 	 0.00854021	 100       	 79.155    	 0         	 24.482    	 3.23319   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 52, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00811076	 200       	 6.84789   	 0         	 1.04631   	 6.54478   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 1) 	 0.00435391	 100       	 0.119433  	 0         	 0.95583   	 0.124952  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 52, m: 2500)                                                                                	 0.00375092	 100       	 0         	 0         	 55.453    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 2, r2: 1)                             	 0.00370931	 100       	 0.280376  	 0         	 1.68269   	 0.166624  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 52)                                                                       	 0.0036975 	 100       	 0         	 0         	 56.2542   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 52, r: 50, streamingCols: 2)                                   	 0.0030471 	 100       	 4.10226   	 0         	 1.6409    	 2.5       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 2)                                                                                                         	 0.00260549	 808       	 0         	 0         	 0.992365  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 52) 	 0.00169719	 100       	 15.9322   	 0         	 3.72569   	 4.27632   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 52, fromLeft: 1)                              	 0.00160754	 800       	 0         	 0         	 21.5306   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 52, leftOrthog: 1)                        	 0.00116609	 100       	 22.2968   	 0         	 8.78152   	 2.53906   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 52, r2: 52)                            	 0.000965433	 100       	 28.0082   	 0         	 6.5496    	 4.27632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000907382	 100       	 27.5518   	 0         	 6.61243   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 2)                                                                                                         	 0.000887901	 101       	 0         	 0         	 0.182002  	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000869557	 100       	 0.575005  	 0         	 2.30002   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 52)                           	 0.00056121	 100       	 0         	 0         	 7.41256   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000507294	 100       	 0         	 0         	 7.88497   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                        	 0.000467912	 100       	 0         	 0         	 8.89056   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 52)                                                                         	 0.000354579	 100       	 0         	 0         	 11.7322   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329708	 100       	 0.758247  	 0         	 12.1319   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 1)                                                                                                         	 0.000325422	 101       	 0         	 0         	 0.496586  	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 50, fromLeft: 1)                              	 0.000190826	 100       	 0         	 0         	 21.8      	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.75242   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.7524    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.04968   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.04839   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.863518  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.505595  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.453054  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.349108  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.23069   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.223792  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.193929  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.170499  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.166895  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.153096  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0763711 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0734962 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0645276 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0384193 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0108    	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00817665	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00466131	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00428673	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00179836	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000995392	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000869557	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00056121	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329708	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23327651870592 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23327443773440 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23327242446976 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23327041120512 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23326839794048 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23326638467584 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23326437141120 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23326235814656 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23326034488192 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23325833161728 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23325631835264 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23325430508800 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23325229182336 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23325027855872 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23324826529408 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23324625202944 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23324423876480 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23324222550016 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23324021223552 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23323819897088 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23323618570624 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23323417244160 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23323215917696 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23323014591232 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23322813264768 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23322611938304 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23322410611840 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23322209285376 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23322007958912 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23321806632448 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23321605305984 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23321403979520 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23321202648960 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23321001322496 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23320799996032 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23320598669568 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23320397343104 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23320196016640 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23319994690176 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23319793363712 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23319592037248 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23319390710784 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23319189384320 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23318988057856 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23318786731392 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23318585404928 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23318384078464 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23318182752000 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23317981425536 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23317780099072 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23317578772608 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23317377446144 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23317176119680 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23316974793216 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23316773466752 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23316572140288 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23316370813824 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23316169487360 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23315968160896 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23315766834432 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23315565507968 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23315364181504 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23315162855040 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23327546210048 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23327539619584 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2650, cols: 53, reductionFactor: 37, colBlockingSize: 12)                                	 0.374577  	 1300      	 53.0654   	 0         	 3.97754   	 13.3413   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 53)                                                                               	 0.284948  	 700       	 2.56011   	 0         	 0.166655  	 15.3617   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 53)	 0.165476  	 700       	 56.2523   	 0         	 9.0936    	 6.18592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 53)                           	 0.144145  	 700       	 72.2979   	 0         	 11.022    	 6.55941   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 53, r2: 53, leftOrthog: 1)                      	 0.136006  	 600       	 65.6782   	 0         	 15.0688   	 4.35855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 53)                         	 0.121811  	 600       	 73.3319   	 0         	 11.1797   	 6.55941   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2650, Xcols: 53, r: 53, streamingCols: 0)                                 	 0.0639792 	 700       	 81.4435   	 0         	 24.7097   	 3.29602   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 53, m: 2650)                                                                                	 0.0584502 	 700       	 0         	 0         	 26.9125   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 53, reductionFactor: 37, colBlockingSize: 12)                                	 0.0574152 	 200       	 50.2466   	 0         	 3.77068   	 13.3256   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2650, m: 53)                                                                       	 0.0569844 	 700       	 0         	 0         	 27.6048   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 53)                                                                               	 0.0431008 	 100       	 2.15193   	 0         	 0.145705  	 14.7691   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 53)                                                                                	 0.0407331 	 900       	 4.38591   	 0         	 1.49893   	 2.92603   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0388311 	 100       	 2.25335   	 0         	 0.155545  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 50)	 0.0275936 	 100       	 45.4635   	 0         	 7.55539   	 6.01736   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0261354 	 100       	 52.0678   	 0         	 4.13233   	 12.6001   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 50)                           	 0.0242867 	 100       	 57.83     	 0         	 9.07822   	 6.37019   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0218536 	 100       	 60.6308   	 0         	 14.7344   	 4.11491   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 53, r2: 53, leftOrthog: 1)                      	 0.0206643 	 100       	 67.9675   	 0         	 15.6064   	 4.35511   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 50)                         	 0.0194726 	 100       	 72.127    	 0         	 11.0025   	 6.55551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 50, n: 50, r2: 53)                         	 0.0169239 	 100       	 82.9893   	 0         	 13.0278   	 6.37019   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 53, r: 53, streamingCols: 0)                                 	 0.00892561	 100       	 78.6781   	 0         	 23.8778   	 3.29504   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 53, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00801207	 200       	 7.20143   	 0         	 1.09015   	 6.60588   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 1) 	 0.00442732	 100       	 0.119711  	 0         	 0.958052  	 0.124953  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 53)                                                                       	 0.00418367	 100       	 0         	 0         	 50.6732   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 2, r2: 1)                             	 0.00380908	 100       	 0.278282  	 0         	 1.67011   	 0.166625  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 53, m: 2500)                                                                                	 0.0037054 	 100       	 0         	 0         	 57.2138   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 53, r: 50, streamingCols: 3)                                   	 0.00316704	 100       	 3.94691   	 0         	 1.57876   	 2.5       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 3)                                                                                                         	 0.00253012	 808       	 0         	 0         	 2.29934   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 53) 	 0.00202171	 100       	 13.8942   	 0         	 3.20877   	 4.33007   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 53, fromLeft: 1)                              	 0.00164862	 800       	 0         	 0         	 21.8092   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 53, leftOrthog: 1)                        	 0.00117571	 100       	 22.5395   	 0         	 8.81166   	 2.55792   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 53, r2: 53)                            	 0.00114575	 100       	 24.5167   	 0         	 5.66198   	 4.33007   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000887456	 100       	 28.1704   	 0         	 6.7609    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000787641	 100       	 0.634807  	 0         	 2.53923   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 53)                           	 0.000724536	 100       	 0         	 0         	 5.85202   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000486423	 100       	 0         	 0         	 8.2233    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                        	 0.000484245	 100       	 0         	 0         	 8.7559    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 53)                                                                         	 0.00040873	 100       	 0         	 0         	 10.3736   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 3)                                                                                                         	 0.000375215	 101       	 0         	 0         	 0.64603   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000341287	 100       	 0.732521  	 0         	 11.7203   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 1)                                                                                                         	 0.000307384	 101       	 0         	 0         	 0.78859   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 50, fromLeft: 1)                              	 0.000201656	 100       	 0         	 0         	 21.0259   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.78653   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.78651   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.08944   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.0882    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.900007  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.493256  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.46614   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.36688   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.233715  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.233582  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.199518  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.179699  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.173387  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.159095  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0760719 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.062642  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0615768 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0407331 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0106545 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00605269	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00495784	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00369696	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00185028	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116568	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000787641	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000724536	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000341287	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23241149028224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23240940447744 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23240739121280 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23240537794816 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23240336468352 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23240135141888 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23239933815424 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23239732488960 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23239531162496 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23239329836032 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23239128509568 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23238927183104 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23238725856640 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23238524530176 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23238323203712 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23238121877248 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23237920550784 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23237719224320 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23237517897856 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23237316571392 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23237115244928 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23236913918464 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23236712592000 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23236511265536 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23236309939072 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23236108612608 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23235907286144 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23235705959680 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23235504633216 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23235303306752 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23235101980288 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23234900653824 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23234699323264 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23234497996800 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23234296670336 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23234095343872 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23233894017408 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23233692690944 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23233491364480 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23233290038016 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23233088711552 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23232887385088 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23232686058624 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23232484732160 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23232283405696 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23232082079232 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23231880752768 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23231679426304 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23231478099840 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23231276773376 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23231075446912 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23230874120448 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23230672793984 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23230471467520 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23230270141056 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23230068814592 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23229867488128 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23229666161664 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23229464835200 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23229263508736 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23229062182272 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23228860855808 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23228659529344 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23241043367680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23241036777216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2700, cols: 54, reductionFactor: 37, colBlockingSize: 12)                                	 0.37542   	 1300      	 56.0001   	 0         	 4.11977   	 13.593    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 54)                                                                               	 0.293591  	 700       	 2.62806   	 0         	 0.167891  	 15.6534   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 54)	 0.17016   	 700       	 55.8913   	 0         	 9.03436   	 6.18652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 54)                           	 0.148022  	 700       	 74.4653   	 0         	 11.1422   	 6.68317   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 54, r2: 54, leftOrthog: 1)                      	 0.145082  	 600       	 65.1206   	 0         	 14.6642   	 4.44079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 54)                         	 0.128449  	 600       	 73.553    	 0         	 11.0057   	 6.68317   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2700, m: 54)                                                                       	 0.0693312 	 700       	 0         	 0         	 23.553    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2700, Xcols: 54, r: 54, streamingCols: 0)                                 	 0.0668284 	 700       	 82.4685   	 0         	 24.5573   	 3.35821   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 54, reductionFactor: 37, colBlockingSize: 12)                                	 0.058591  	 200       	 51.1138   	 0         	 3.7662    	 13.5717   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 54, m: 2700)                                                                                	 0.056892  	 700       	 0         	 0         	 28.7028   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 54)                                                                               	 0.0420394 	 100       	 2.24789   	 0         	 0.151287  	 14.8585   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 54)                                                                                	 0.0413943 	 900       	 4.5648    	 0         	 1.53099   	 2.9816    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0372764 	 100       	 2.34733   	 0         	 0.162033  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 50)	 0.0268844 	 100       	 46.7929   	 0         	 7.84097   	 5.96774   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0258165 	 100       	 53.7054   	 0         	 4.26084   	 12.6044   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 50)                           	 0.0234458 	 100       	 62.1859   	 0         	 9.67336   	 6.42857   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 50, r2: 50, leftOrthog: 1)                      	 0.0224138 	 100       	 60.2307   	 0         	 14.6338   	 4.11585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 54, r2: 54, leftOrthog: 1)                      	 0.0214053 	 100       	 68.1141   	 0         	 15.3544   	 4.43612   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 50)                         	 0.0203346 	 100       	 71.7003   	 0         	 10.737    	 6.67788   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 50, n: 50, r2: 54)                         	 0.0162599 	 100       	 89.6682   	 0         	 13.9484   	 6.42857   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 54, r: 54, streamingCols: 0)                                 	 0.00899311	 100       	 81.062    	 0         	 24.1481   	 3.35687   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 54, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00777702	 200       	 7.70169   	 0         	 1.1554    	 6.6658    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 1) 	 0.00431659	 100       	 0.125099  	 0         	 1.00116   	 0.124954  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 54, m: 2500)                                                                                	 0.00389439	 100       	 0         	 0         	 55.4644   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 54)                                                                       	 0.0038516 	 100       	 0         	 0         	 56.0805   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 2, r2: 1)                             	 0.00371699	 100       	 0.290558  	 0         	 1.74378   	 0.166626  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 54, r: 50, streamingCols: 4)                                   	 0.00320936	 100       	 3.89486   	 0         	 1.55794   	 2.5       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 4)                                                                                                         	 0.00275068	 808       	 0         	 0         	 3.75994   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 54) 	 0.00180171	 100       	 16.1846   	 0         	 3.69248   	 4.38312   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 54, fromLeft: 1)                              	 0.00174584	 800       	 0         	 0         	 21.3793   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 54, leftOrthog: 1)                        	 0.00135475	 100       	 19.9299   	 0         	 7.73577   	 2.57634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00091154	 100       	 27.4261   	 0         	 6.58227   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 54, r2: 54)                            	 0.000870691	 100       	 33.4906   	 0         	 7.64083   	 4.38312   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000861048	 100       	 0.580688  	 0         	 2.32275   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 54)                           	 0.000746044	 100       	 0         	 0         	 5.79054   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000491782	 100       	 0         	 0         	 8.13369   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                        	 0.000486432	 100       	 0         	 0         	 8.88099   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 54)                                                                         	 0.000402566	 100       	 0         	 0         	 10.7312   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 4)                                                                                                         	 0.000382189	 101       	 0         	 0         	 0.845655  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333962	 100       	 0.748588  	 0         	 11.9774   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 1)                                                                                                         	 0.000309027	 101       	 0         	 0         	 1.04586   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 50, fromLeft: 1)                              	 0.000201749	 100       	 0         	 0         	 21.4127   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.84154   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.84152   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.11804   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.11675   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.920557  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.514191  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.467605  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.372906  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.23793   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.230986  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.203163  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.190256  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.176055  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.165956  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0790309 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0735853 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0612782 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0413943 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0106407 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00781563	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0048807 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00392833	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00194759	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0012429 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000861048	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000746044	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333962	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23104380118912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23104172582912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23103971256448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23103769929984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23103568603520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23103367277056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23103165950592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23102964624128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23102763297664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23102561971200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23102360644736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23102159318272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23101957991808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23101756665344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23101555338880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23101354012416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23101152685952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23100951359488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23100750033024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23100548706560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23100347380096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23100146053632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23099944727168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23099743400704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23099542074240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23099340747776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23099139421312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23098938094848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23098736768384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23098535441920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23098334115456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23098132788992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23097931458432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23097730131968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23097528805504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23097327479040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23097126152576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23096924826112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23096723499648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23096522173184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23096320846720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23096119520256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23095918193792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23095716867328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23095515540864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23095314214400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23095112887936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23094911561472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23094710235008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23094508908544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23094307582080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23094106255616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23093904929152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23093703602688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23093502276224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23093300949760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23093099623296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23092898296832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23092696970368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23092495643904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23092294317440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23092092990976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23091891664512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23104274458368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23104267867904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2750, cols: 55, reductionFactor: 37, colBlockingSize: 12)                                	 0.390137  	 1300      	 56.9373   	 0         	 4.11256   	 13.8447   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 55)                                                                               	 0.299307  	 700       	 2.72374   	 0         	 0.170821  	 15.945    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 55)	 0.181009  	 700       	 53.7059   	 0         	 8.67879   	 6.18817   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 55)                           	 0.159661  	 700       	 72.9434   	 0         	 10.7161   	 6.80693   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 55, r2: 55, leftOrthog: 1)                      	 0.146049  	 600       	 68.3505   	 0         	 15.1117   	 4.52303   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 55)                         	 0.132781  	 600       	 75.1804   	 0         	 11.0447   	 6.80693   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2750, Xcols: 55, r: 55, streamingCols: 0)                                 	 0.068799  	 700       	 84.6397   	 0         	 24.7456   	 3.4204    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 55, reductionFactor: 37, colBlockingSize: 12)                                	 0.0603422 	 200       	 51.4856   	 0         	 3.72608   	 13.8176   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2750, m: 55)                                                                       	 0.0599423 	 700       	 0         	 0         	 28.2605   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 55, m: 2750)                                                                                	 0.0551716 	 700       	 0         	 0         	 30.7042   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 55)                                                                                	 0.0437624 	 900       	 4.56211   	 0         	 1.50211   	 3.03713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 55)                                                                               	 0.041639  	 100       	 2.31153   	 0         	 0.154663  	 14.9457   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.037184  	 100       	 2.35316   	 0         	 0.162435  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0299537 	 100       	 47.1448   	 0         	 3.73911   	 12.6086   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 50)	 0.0262547 	 100       	 48.0867   	 0         	 8.12046   	 5.92167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 50)                           	 0.0227671 	 100       	 66.4335   	 0         	 10.2428   	 6.48585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0227103 	 100       	 60.5451   	 0         	 14.707    	 4.11677   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 55, r2: 55, leftOrthog: 1)                      	 0.0216791 	 100       	 69.7678   	 0         	 15.4453   	 4.51708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 50)                         	 0.0204863 	 100       	 73.8297   	 0         	 10.857    	 6.8002    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 50, n: 50, r2: 55)                         	 0.0168734 	 100       	 89.6381   	 0         	 13.8206   	 6.48585   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 55, r: 55, streamingCols: 0)                                 	 0.00923706	 100       	 81.8713   	 0         	 23.9481   	 3.4187    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 55, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00807844	 200       	 7.69148   	 0         	 1.14378   	 6.72458   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 1) 	 0.00435427	 100       	 0.126313  	 0         	 1.01087   	 0.124955  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 55, m: 2500)                                                                                	 0.0040168 	 100       	 0         	 0         	 54.77     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 55)                                                                       	 0.00386857	 100       	 0         	 0         	 56.8685   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 2, r2: 1)                             	 0.00376497	 100       	 0.292167  	 0         	 1.75343   	 0.166626  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 55, r: 50, streamingCols: 5)                                   	 0.00301295	 100       	 4.14876   	 0         	 1.65951   	 2.5       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 5)                                                                                                         	 0.00299882	 808       	 0         	 0         	 5.38879   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 55) 	 0.00187979	 100       	 16.0922   	 0         	 3.62806   	 4.43548   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 55, fromLeft: 1)                              	 0.00180414	 800       	 0         	 0         	 21.4618   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 55, leftOrthog: 1)                        	 0.0011714 	 100       	 23.4761   	 0         	 9.04899   	 2.59434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 55, r2: 55)                            	 0.000957553	 100       	 31.5909   	 0         	 7.12232   	 4.43548   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000886326	 100       	 0.564127  	 0         	 2.25651   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000864296	 100       	 28.9253   	 0         	 6.94207   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 55)                           	 0.000744552	 100       	 0         	 0         	 5.90959   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000486787	 100       	 0         	 0         	 8.21715   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                        	 0.000452632	 100       	 0         	 0         	 9.72092   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 55)                                                                         	 0.000412229	 100       	 0         	 0         	 10.6737   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 5)                                                                                                         	 0.000379411	 101       	 0         	 0         	 1.06481   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000343662	 100       	 0.727459  	 0         	 11.6393   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 1)                                                                                                         	 0.000309188	 101       	 0         	 0         	 1.30665   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 50, fromLeft: 1)                              	 0.000215443	 100       	 0         	 0         	 20.423    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.87708   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.87706   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.14389   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.14257   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.944304  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.515451  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.488511  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.37813   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.247127  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.242483  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.213498  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.19161   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.187151  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.171005  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.081049  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0642231 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0596752 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0437624 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0107941 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00658779	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00453774	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00414005	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00201958	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00105366	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000886326	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000744552	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343662	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23268211656576 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23267985319936 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23267783993472 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23267582667008 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23267381340544 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23267180014080 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23266978687616 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23266777361152 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23266576034688 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23266374708224 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23266173381760 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23265972055296 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23265770728832 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23265569402368 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23265368075904 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23265166749440 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23264965422976 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23264764096512 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23264562770048 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23264361443584 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23264160117120 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23263958790656 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23263757464192 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23263556137728 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23263354811264 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23263153484800 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23262952158336 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23262750831872 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23262549505408 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23262348178944 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23262146852480 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23261945526016 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23261744195456 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23261542868992 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23261341542528 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23261140216064 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23260938889600 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23260737563136 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23260536236672 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23260334910208 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23260133583744 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23259932257280 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23259730930816 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23259529604352 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23259328277888 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23259126951424 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23258925624960 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23258724298496 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23258522972032 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23258321645568 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23258120319104 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23257918992640 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23257717666176 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23257516339712 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23257315013248 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23257113686784 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23256912360320 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23256711033856 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23256509707392 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23256308380928 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23256107054464 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23255905728000 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23255704401536 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23268105996032 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23268099405568 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2800, cols: 56, reductionFactor: 37, colBlockingSize: 12)                                	 0.401343  	 1300      	 58.4216   	 0         	 4.14442   	 14.0964   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 56)                                                                               	 0.305339  	 700       	 2.81824   	 0         	 0.173572  	 16.2367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 56)	 0.181306  	 700       	 54.8307   	 0         	 8.85643   	 6.19106   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 56, r2: 56, leftOrthog: 1)                      	 0.16289   	 600       	 64.6874   	 0         	 14.0464   	 4.60526   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 56)                           	 0.159659  	 700       	 76.996    	 0         	 11.1094   	 6.93069   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 56)                         	 0.15421   	 600       	 68.3287   	 0         	 9.85885   	 6.93069   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2800, Xcols: 56, r: 56, streamingCols: 0)                                 	 0.0718329 	 700       	 85.5675   	 0         	 24.5701   	 3.48259   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 56, reductionFactor: 37, colBlockingSize: 12)                                	 0.0632423 	 200       	 50.9273   	 0         	 3.62127   	 14.0634   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 56, m: 2800)                                                                                	 0.0631284 	 700       	 0         	 0         	 27.8189   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 56)                                                                               	 0.0438831 	 100       	 2.2332    	 0         	 0.148576  	 15.0307   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 56)                                                                                	 0.0431809 	 900       	 4.88037   	 0         	 1.57803   	 3.09269   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2800, m: 56)                                                                       	 0.0412857 	 700       	 0         	 0         	 42.5368   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0378818 	 100       	 2.30982   	 0         	 0.159443  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 50)	 0.0275467 	 100       	 46.0309   	 0         	 7.82961   	 5.87908   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0267797 	 100       	 53.6913   	 0         	 4.25696   	 12.6126   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 50, r2: 50, leftOrthog: 1)                      	 0.0259395 	 100       	 53.9717   	 0         	 13.1074   	 4.11765   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 50)                           	 0.0240708 	 100       	 65.1412   	 0         	 9.95729   	 6.54206   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 56, r2: 56, leftOrthog: 1)                      	 0.0233174 	 100       	 67.2459   	 0         	 14.625    	 4.598     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 50)                         	 0.0217289 	 100       	 72.1619   	 0         	 10.4243   	 6.92247   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 50, n: 50, r2: 56)                         	 0.0166705 	 100       	 94.0586   	 0         	 14.3775   	 6.54206   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 56, r: 56, streamingCols: 0)                                 	 0.00948659	 100       	 82.643    	 0         	 23.7445   	 3.48051   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 56, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00907446	 200       	 7.09851   	 0         	 1.04663   	 6.78225   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 1) 	 0.00430655	 100       	 0.130034  	 0         	 1.04065   	 0.124955  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 56, m: 2500)                                                                                	 0.00416154	 100       	 0         	 0         	 53.8263   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 56)                                                                       	 0.00404731	 100       	 0         	 0         	 55.3454   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 2, r2: 1)                             	 0.00368915	 100       	 0.303593  	 0         	 1.82199   	 0.166627  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 56, r: 50, streamingCols: 6)                                   	 0.00315942	 100       	 3.95642   	 0         	 1.58257   	 2.5       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 6)                                                                                                         	 0.00306355	 808       	 0         	 0         	 7.59589   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 56, fromLeft: 1)                              	 0.00186926	 800       	 0         	 0         	 21.4742   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 56) 	 0.00179965	 100       	 17.4256   	 0         	 3.88341   	 4.48718   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 56, leftOrthog: 1)                        	 0.00128506	 100       	 21.7888   	 0         	 8.34202   	 2.61194   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 56, r2: 56)                            	 0.000917057	 100       	 34.1963   	 0         	 7.6209    	 4.48718   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000845924	 100       	 29.5535   	 0         	 7.09284   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000800484	 100       	 0.624622  	 0         	 2.49849   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 56)                           	 0.000727061	 100       	 0         	 0         	 6.16179   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000495456	 100       	 0         	 0         	 8.07337   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                        	 0.000480274	 100       	 0         	 0         	 9.32801   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 56)                                                                         	 0.000407892	 100       	 0         	 0         	 10.9833   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 6)                                                                                                         	 0.000391801	 101       	 0         	 0         	 1.23736   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000338142	 100       	 0.739334  	 0         	 11.8293   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 1)                                                                                                         	 0.000313447	 101       	 0         	 0         	 1.54667   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 50, fromLeft: 1)                              	 0.000226848	 100       	 0         	 0         	 19.7489   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.94587   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.94584   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.21467   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.21342   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.990037  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.513288  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.500439  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.387104  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.254072  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.247663  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.214959  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.213432  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.193455  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.188336  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0844789 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0677854 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0457409 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0431809 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0107433 	 20        
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00496322	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00424907	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00361168	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00209611	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0010019 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000800484	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000727061	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338142	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22715675535232 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22715478042624 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22715276716160 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22715075389696 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22714874063232 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22714672736768 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22714471410304 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22714270083840 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22714068757376 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22713867430912 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22713666104448 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22713464777984 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22713263451520 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22713062125056 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22712860798592 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22712659472128 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22712458145664 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22712256819200 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22712055492736 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22711854166272 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22711652839808 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22711451513344 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22711250186880 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22711048860416 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22710847533952 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22710646207488 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22710444881024 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22710243554560 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22710042228096 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22709840901632 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22709639575168 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22709438248704 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22709236918144 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22709035591680 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22708834265216 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22708632938752 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22708431612288 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22708230285824 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22708028959360 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22707827632896 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22707626306432 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22707424979968 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22707223653504 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22707022327040 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22706821000576 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22706619674112 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22706418347648 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22706217021184 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22706015694720 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22705814368256 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22705613041792 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22705411715328 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22705210388864 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22705009062400 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22704807735936 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22704606409472 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22704405083008 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22704203756544 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22704002430080 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22703801103616 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22703599777152 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22703398450688 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22703197124224 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22715569874688 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22715563284224 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2850, cols: 57, reductionFactor: 37, colBlockingSize: 12)                                	 0.41873   	 1300      	 59.0494   	 0         	 4.11546   	 14.3482   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 57)                                                                               	 0.326723  	 700       	 2.77741   	 0         	 0.16804   	 16.5283   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 57)	 0.199583  	 700       	 50.9588   	 0         	 8.22532   	 6.19536   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 57, r2: 57, leftOrthog: 1)                      	 0.178041  	 600       	 62.4101   	 0         	 13.3142   	 4.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 57)                           	 0.17451   	 700       	 74.2852   	 0         	 10.5303   	 7.05446   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 57)                         	 0.155145  	 600       	 71.6206   	 0         	 10.1525   	 7.05446   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2850, Xcols: 57, r: 57, streamingCols: 0)                                 	 0.0759533 	 700       	 85.3387   	 0         	 24.0745   	 3.54478   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2850, m: 57)                                                                       	 0.0701855 	 700       	 0         	 0         	 25.9233   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 57, reductionFactor: 37, colBlockingSize: 12)                                	 0.0652915 	 200       	 51.1064   	 0         	 3.57165   	 14.3089   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 57, m: 2850)                                                                                	 0.0620861 	 700       	 0         	 0         	 29.3051   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 57)                                                                                	 0.048039  	 900       	 4.62607   	 0         	 1.46941   	 3.14826   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 57)                                                                               	 0.0438226 	 100       	 2.27622   	 0         	 0.150607  	 15.1136   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0388385 	 100       	 2.25292   	 0         	 0.155516  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 50)	 0.0292052 	 100       	 43.6395   	 0         	 7.47265   	 5.8399    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 50, r2: 50, leftOrthog: 1)                      	 0.0274642 	 100       	 51.8857   	 0         	 12.5982   	 4.1185    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0258352 	 100       	 56.6481   	 0         	 4.49      	 12.6165   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 57, r2: 57, leftOrthog: 1)                      	 0.0251301 	 100       	 64.6437   	 0         	 13.8161   	 4.67888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 50)                           	 0.0250579 	 100       	 64.8299   	 0         	 9.82685   	 6.59722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 50)                         	 0.0225302 	 100       	 72.1031   	 0         	 10.2351   	 7.04469   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 50, n: 50, r2: 57)                         	 0.0190952 	 100       	 85.0737   	 0         	 12.8954   	 6.59722   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 57, r: 57, streamingCols: 0)                                 	 0.00990353	 100       	 82.0163   	 0         	 23.1533   	 3.54231   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 57, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00918694	 200       	 7.26425   	 0         	 1.0622    	 6.83885   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 1) 	 0.00435428	 100       	 0.130906  	 0         	 1.04761   	 0.124956  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 57, m: 2500)                                                                                	 0.00409346	 100       	 0         	 0         	 55.6986   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 57)                                                                       	 0.00392909	 100       	 0         	 0         	 58.0287   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 2, r2: 1)                             	 0.00374875	 100       	 0.304101  	 0         	 1.82503   	 0.166628  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 7)                                                                                                         	 0.00319914	 808       	 0         	 0         	 9.90065   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 57, r: 50, streamingCols: 7)                                   	 0.00308189	 100       	 4.05595   	 0         	 1.62238   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 57, fromLeft: 1)                              	 0.00193958	 800       	 0         	 0         	 21.4413   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 57) 	 0.00187764	 100       	 17.3037   	 0         	 3.81288   	 4.53822   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 57, leftOrthog: 1)                        	 0.00135227	 100       	 21.0757   	 0         	 8.01617   	 2.62915   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 57, r2: 57)                            	 0.000939723	 100       	 34.574    	 0         	 7.61842   	 4.53822   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00089811	 100       	 27.8362   	 0         	 6.6807    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000802423	 100       	 0.623113  	 0         	 2.49245   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 57)                           	 0.000749741	 100       	 0         	 0         	 6.0821    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000507646	 100       	 0         	 0         	 7.87951   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                        	 0.000484126	 100       	 0         	 0         	 9.41904   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 7)                                                                                                         	 0.000390808	 101       	 0         	 0         	 1.44726   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 57)                                                                         	 0.000374555	 100       	 0         	 0         	 12.1744   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000340901	 100       	 0.733351  	 0         	 11.7336   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 1)                                                                                                         	 0.000334562	 101       	 0         	 0         	 1.69057   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 50, fromLeft: 1)                              	 0.000216525	 100       	 0         	 0         	 21.0599   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.07606   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.07603   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.27133   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.27009   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.04127   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.564191  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.519044  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.409384  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.26555   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.254801  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.23502   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.231988  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.204256  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.197669  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0889387 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0744892 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0666872 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.048039  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0107999 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00700425	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00483349	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00440864	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00215611	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00126046	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000802423	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000749741	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340901	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23230970840960 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23230739900416 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23230538573952 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23230337247488 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23230135921024 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23229934594560 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23229733268096 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23229531941632 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23229330615168 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23229129288704 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23228927962240 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23228726635776 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23228525309312 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23228323982848 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23228122656384 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23227921329920 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23227720003456 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23227518676992 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23227317350528 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23227116024064 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23226914697600 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23226713371136 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23226512044672 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23226310718208 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23226109391744 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23225908065280 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23225706738816 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23225505412352 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23225304085888 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23225102759424 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23224901432960 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23224700106496 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23224498775936 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23224297449472 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23224096123008 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23223894796544 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23223693470080 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23223492143616 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23223290817152 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23223089490688 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23222888164224 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23222686837760 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23222485511296 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23222284184832 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23222082858368 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23221881531904 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23221680205440 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23221478878976 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23221277552512 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23221076226048 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23220874899584 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23220673573120 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23220472246656 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23220270920192 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23220069593728 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23219868267264 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23219666940800 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23219465614336 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23219264287872 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23219062961408 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23218861634944 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23218660308480 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23218458982016 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23230865180416 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23230858589952 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2900, cols: 58, reductionFactor: 37, colBlockingSize: 12)                                	 0.433479  	 1300      	 60.0954   	 0         	 4.11616   	 14.5999   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 58)                                                                               	 0.331822  	 700       	 2.88121   	 0         	 0.171297  	 16.82     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 58)	 0.203716  	 700       	 51.0997   	 0         	 8.24028   	 6.20121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 58)                           	 0.177233  	 700       	 77.0616   	 0         	 10.7355   	 7.17822   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 58, r2: 58, leftOrthog: 1)                      	 0.176468  	 600       	 66.3389   	 0         	 13.9083   	 4.76974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 58)                         	 0.158144  	 600       	 74.0258   	 0         	 10.3126   	 7.17822   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2900, Xcols: 58, r: 58, streamingCols: 0)                                 	 0.0774726 	 700       	 88.1463   	 0         	 24.4378   	 3.60697   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2900, m: 58)                                                                       	 0.0685635 	 700       	 0         	 0         	 27.4758   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 58, reductionFactor: 37, colBlockingSize: 12)                                	 0.0665764 	 200       	 51.8941   	 0         	 3.56556   	 14.5542   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 58, m: 2900)                                                                                	 0.0635368 	 700       	 0         	 0         	 29.6496   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 58)                                                                                	 0.0492067 	 900       	 4.75816   	 0         	 1.48516   	 3.20379   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 58)                                                                               	 0.0423554 	 100       	 2.39639   	 0         	 0.157713  	 15.1946   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0383129 	 100       	 2.28382   	 0         	 0.157649  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 50)	 0.0304345 	 100       	 42.1232   	 0         	 7.25755   	 5.80406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 50)                           	 0.0262809 	 100       	 64.0009   	 0         	 9.6222    	 6.65138   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0258586 	 100       	 57.5896   	 0         	 4.56327   	 12.6202   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 50, r2: 50, leftOrthog: 1)                      	 0.0257148 	 100       	 56.3878   	 0         	 13.6886   	 4.11932   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 58, r2: 58, leftOrthog: 1)                      	 0.0245606 	 100       	 68.4836   	 0         	 14.3882   	 4.75972   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 50)                         	 0.0216871 	 100       	 77.5577   	 0         	 10.8217   	 7.16686   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 50, n: 50, r2: 58)                         	 0.0198961 	 100       	 84.5393   	 0         	 12.7101   	 6.65138   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 58, r: 58, streamingCols: 0)                                 	 0.00984556	 100       	 85.4192   	 0         	 23.7006   	 3.6041    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 58, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0095178 	 200       	 7.25991   	 0         	 1.05302   	 6.89439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 1) 	 0.00472143	 100       	 0.122844  	 0         	 0.983093  	 0.124957  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 2, r2: 1)                             	 0.0041365 	 100       	 0.280431  	 0         	 1.68297   	 0.166628  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 58)                                                                       	 0.00410936	 100       	 0         	 0         	 56.4564   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 58, m: 2500)                                                                                	 0.00378125	 100       	 0         	 0         	 61.3554   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 58, r: 50, streamingCols: 8)                                   	 0.00326764	 100       	 3.82539   	 0         	 1.53016   	 2.5       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 8)                                                                                                         	 0.00315419	 808       	 0         	 0         	 13.1158   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 58, fromLeft: 1)                              	 0.00200169	 800       	 0         	 0         	 21.5115   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 58) 	 0.00188417	 100       	 17.854    	 0         	 3.89094   	 4.58861   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 58, leftOrthog: 1)                        	 0.00122095	 100       	 23.752    	 0         	 8.9766    	 2.64599   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 58, r2: 58)                            	 0.000948725	 100       	 35.4581   	 0         	 7.72742   	 4.58861   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000856564	 100       	 29.1864   	 0         	 7.00473   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000801544	 100       	 0.623796  	 0         	 2.49518   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 58)                           	 0.000729658	 100       	 0         	 0         	 6.35914   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000505929	 100       	 0         	 0         	 7.90625   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                        	 0.000503217	 100       	 0         	 0         	 9.22067   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 58)                                                                         	 0.00037321	 100       	 0         	 0         	 12.4327   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 8)                                                                                                         	 0.000372973	 101       	 0         	 0         	 1.7331    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000331687	 100       	 0.753723  	 0         	 12.0596   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 1)                                                                                                         	 0.000305674	 101       	 0         	 0         	 2.11467   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 50, fromLeft: 1)                              	 0.000216826	 100       	 0         	 0         	 21.3996   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.10569   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.10566   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.2772    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.27598   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.04352   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.579302  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.535431  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.412491  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.279938  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.256857  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.240756  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.227965  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.208599  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.200583  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0905858 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0730461 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.067824  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0492067 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0110554 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00707194	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00501313	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00433606	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00221851	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00134187	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000801544	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000729658	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331687	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22838993696640 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22838757025792 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22838555699328 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22838354372864 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22838153046400 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22837951719936 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22837750393472 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22837549067008 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22837347740544 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22837146414080 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22836945087616 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22836743761152 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22836542434688 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22836341108224 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22836139781760 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22835938455296 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22835737128832 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22835535802368 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22835334475904 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22835133149440 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22834931822976 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22834730496512 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22834529170048 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22834327843584 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22834126517120 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22833925190656 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22833723864192 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22833522537728 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22833321211264 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22833119884800 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22832918558336 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22832717231872 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22832515901312 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22832314574848 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22832113248384 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22831911921920 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22831710595456 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22831509268992 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22831307942528 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22831106616064 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22830905289600 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22830703963136 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22830502636672 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22830301310208 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22830099983744 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22829898657280 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22829697330816 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22829496004352 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22829294677888 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22829093351424 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22828892024960 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22828690698496 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22828489372032 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22828288045568 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22828086719104 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22827885392640 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22827684066176 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22827482739712 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22827281413248 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22827080086784 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22826878760320 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22826677433856 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22826476107392 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22838888036096 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22838881445632 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2950, cols: 59, reductionFactor: 37, colBlockingSize: 12)                                	 0.453418  	 1300      	 60.4759   	 0         	 4.07201   	 14.8516   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 59)                                                                               	 0.344036  	 700       	 2.92515   	 0         	 0.170945  	 17.1116   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 59)	 0.208154  	 700       	 51.2097   	 0         	 8.24798   	 6.20876   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 59)                           	 0.182432  	 700       	 78.8048   	 0         	 10.7923   	 7.30198   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 59, r2: 59, leftOrthog: 1)                      	 0.173835  	 600       	 70.8875   	 0         	 14.61     	 4.85197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 59)                         	 0.156091  	 600       	 78.9459   	 0         	 10.8116   	 7.30198   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2950, Xcols: 59, r: 59, streamingCols: 0)                                 	 0.0786072 	 700       	 91.4454   	 0         	 24.9227   	 3.66915   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 59, reductionFactor: 37, colBlockingSize: 12)                                	 0.0685721 	 200       	 52.1361   	 0         	 3.52285   	 14.7994   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2950, m: 59)                                                                       	 0.0631099 	 700       	 0         	 0         	 30.8883   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 59, m: 2950)                                                                                	 0.06279   	 700       	 0         	 0         	 31.0457   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 59)                                                                                	 0.0492177 	 900       	 5.00743   	 0         	 1.53632   	 3.25936   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 59)                                                                               	 0.0441191 	 100       	 2.34026   	 0         	 0.153222  	 15.2737   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0380561 	 100       	 2.29923   	 0         	 0.158713  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 50)	 0.0296217 	 100       	 43.566    	 0         	 7.54852   	 5.77147   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0257879 	 100       	 58.7432   	 0         	 4.65334   	 12.6239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 50)                           	 0.0253314 	 100       	 68.7091   	 0         	 10.2481   	 6.70455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 50, r2: 50, leftOrthog: 1)                      	 0.0249779 	 100       	 59.0523   	 0         	 14.3327   	 4.12011   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 59, r2: 59, leftOrthog: 1)                      	 0.0237304 	 100       	 73.3447   	 0         	 15.1523   	 4.84051   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 50)                         	 0.0219792 	 100       	 79.1884   	 0         	 10.8641   	 7.28899   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 50, n: 50, r2: 59)                         	 0.0187283 	 100       	 92.934    	 0         	 13.8613   	 6.70455   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 59, m: 2500)                                                                                	 0.010606  	 100       	 0         	 0         	 22.2515   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 59, r: 59, streamingCols: 0)                                 	 0.0101566 	 100       	 85.6833   	 0         	 23.3732   	 3.66587   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 59, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00901755	 200       	 7.92916   	 0         	 1.14106   	 6.94892   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 1) 	 0.00482615	 100       	 0.122251  	 0         	 0.978337  	 0.124958  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 2, r2: 1)                             	 0.00426256	 100       	 0.276829  	 0         	 1.66135   	 0.166629  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 59)                                                                       	 0.00403499	 100       	 0         	 0         	 58.4883   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 9)                                                                                                         	 0.003506  	 808       	 0         	 0         	 14.9339   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 59, r: 50, streamingCols: 9)                                   	 0.00317606	 100       	 3.93569   	 0         	 1.57428   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 59, fromLeft: 1)                              	 0.00208746	 800       	 0         	 0         	 21.345    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 59) 	 0.00189818	 100       	 18.3386   	 0         	 3.95368   	 4.63836   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 59, leftOrthog: 1)                        	 0.00130969	 100       	 22.5245   	 0         	 8.46005   	 2.66245   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 59, r2: 59)                            	 0.00096279	 100       	 36.1553   	 0         	 7.79485   	 4.63836   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000879147	 100       	 28.4367   	 0         	 6.8248    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000800183	 100       	 0.624857  	 0         	 2.49943   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 59)                           	 0.000749455	 100       	 0         	 0         	 6.29791   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000507768	 100       	 0         	 0         	 7.87761   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                        	 0.000474582	 100       	 0         	 0         	 9.94559   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 59)                                                                         	 0.000407863	 100       	 0         	 0         	 11.5725   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 9)                                                                                                         	 0.000384958	 101       	 0         	 0         	 1.88904   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330114	 100       	 0.757314  	 0         	 12.117    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 1)                                                                                                         	 0.000310755	 101       	 0         	 0         	 2.34011   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 50, fromLeft: 1)                              	 0.000212695	 100       	 0         	 0         	 22.1914   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.14142   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.14139   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.29591   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.29468   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.06328   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.59603   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.556796  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.426212  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.2921    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.266013  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.2445    	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.223853  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.212989  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.197678  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0919399 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0739037 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0675528 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0492177 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0110533 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00680261	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0046763 	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00450858	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00230015	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00121604	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000800183	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000749455	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330114	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23089424844672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23089207306240 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23089005979776 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23088804653312 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23088603326848 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23088402000384 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23088200673920 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23087999347456 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23087798020992 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23087596694528 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23087395368064 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23087194041600 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23086992715136 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23086791388672 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23086590062208 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23086388735744 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23086187409280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23085986082816 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23085784756352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23085583429888 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23085382103424 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23085180776960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23084979450496 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23084778124032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23084576797568 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23084375471104 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23084174144640 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23083972818176 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23083771491712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23083570165248 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23083368838784 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23083167512320 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23082966181760 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23082764855296 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23082563528832 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23082362202368 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23082160875904 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23081959549440 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23081758222976 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23081556896512 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23081355570048 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23081154243584 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23080952917120 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23080751590656 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23080550264192 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23080348937728 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23080147611264 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23079946284800 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23079744958336 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23079543631872 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23079342305408 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23079140978944 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23078939652480 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23078738326016 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23078536999552 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23078335673088 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23078134346624 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23077933020160 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23077731693696 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23077530367232 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23077329040768 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23077127714304 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23076926387840 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23089319184128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23089312593664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 60, reductionFactor: 37, colBlockingSize: 12)                                	 0.468753  	 1300      	 61.5226   	 0         	 4.07345   	 15.1033   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 60)                                                                               	 0.340432  	 700       	 3.10899   	 0         	 0.178643  	 17.4033   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 60)	 0.208315  	 700       	 52.4207   	 0         	 8.43032   	 6.21811   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 60, r2: 60, leftOrthog: 1)                      	 0.18637   	 600       	 69.5393   	 0         	 14.0933   	 4.93421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 60)                           	 0.183585  	 700       	 82.3596   	 0         	 11.0911   	 7.42574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 60)                         	 0.166594  	 600       	 77.7941   	 0         	 10.4763   	 7.42574   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3000, Xcols: 60, r: 60, streamingCols: 0)                                 	 0.0803553 	 700       	 94.0822   	 0         	 25.214    	 3.73134   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 60, m: 3000)                                                                                	 0.0732405 	 700       	 0         	 0         	 27.5258   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 60, reductionFactor: 37, colBlockingSize: 12)                                	 0.0715216 	 200       	 51.6948   	 0         	 3.43617   	 15.0443   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3000, m: 60)                                                                       	 0.067036  	 700       	 0         	 0         	 30.0734   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 60)                                                                                	 0.0501594 	 900       	 5.16753   	 0         	 1.55887   	 3.31492   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 60)                                                                               	 0.043546  	 100       	 2.41124   	 0         	 0.157075  	 15.3509   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.038051  	 100       	 2.29954   	 0         	 0.158734  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 50)	 0.0295528 	 100       	 43.989    	 0         	 7.66086   	 5.74205   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 50)                           	 0.0259866 	 100       	 69.2664   	 0         	 10.2514   	 6.75676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 50, r2: 50, leftOrthog: 1)                      	 0.0259508 	 100       	 57.8018   	 0         	 14.0266   	 4.12088   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0259321 	 100       	 59.4067   	 0         	 4.7046    	 12.6274   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 50)                         	 0.023299  	 100       	 77.2564   	 0         	 10.4245   	 7.41107   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 60, r2: 60, leftOrthog: 1)                      	 0.0229071 	 100       	 78.5784   	 0         	 15.9671   	 4.92126   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 50, n: 50, r2: 60)                         	 0.0196696 	 100       	 91.5119   	 0         	 13.5438   	 6.75676   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 60, r: 60, streamingCols: 0)                                 	 0.0103456 	 100       	 86.9938   	 0         	 23.3375   	 3.72763   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 60, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00891141	 200       	 8.2979    	 0         	 1.185     	 7.00246   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 60, m: 2500)                                                                                	 0.00569728	 100       	 0         	 0         	 42.1254   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 60)                                                                       	 0.00531657	 100       	 0         	 0         	 45.1419   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 1) 	 0.00443067	 100       	 0.13542   	 0         	 1.08372   	 0.124958  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 2, r2: 1)                             	 0.00380541	 100       	 0.31534   	 0         	 1.89246   	 0.16663   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 10)                                                                                                       	 0.00339966	 808       	 0         	 0         	 19.0137   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 60, r: 50, streamingCols: 10)                                  	 0.00315402	 100       	 3.96319   	 0         	 1.58528   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 60, fromLeft: 1)                              	 0.00220804	 800       	 0         	 0         	 20.8692   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 60) 	 0.00187079	 100       	 19.2432   	 0         	 4.10521   	 4.6875    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 60, leftOrthog: 1)                        	 0.00125418	 100       	 23.92     	 0         	 8.93013   	 2.67857   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 60, r2: 60)                            	 0.000984074	 100       	 36.5826   	 0         	 7.80429   	 4.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000884895	 100       	 28.2519   	 0         	 6.78047   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000801364	 100       	 0.623936  	 0         	 2.49574   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 60)                           	 0.000712831	 100       	 0         	 0         	 6.73371   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                        	 0.000485856	 100       	 0         	 0         	 9.87947   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000482691	 100       	 0         	 0         	 8.28688   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 10)                                                                                                        	 0.000407574	 101       	 0         	 0         	 1.98246   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 60)                                                                         	 0.000382024	 100       	 0         	 0         	 12.5647   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000350081	 100       	 0.71412   	 0         	 11.4259   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                                                        	 0.000312992	 101       	 0         	 0         	 2.58154   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 50, fromLeft: 1)                              	 0.000238418	 100       	 0         	 0         	 20.1327   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.20909   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.20906   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.34483   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.34358   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.08934   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.616562  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.575118  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.42203   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.299979  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.276193  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.244169  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.236482  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.214361  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.210447  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0938549 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0794204 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0727346 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0501594 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0112484 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00614007	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00505003	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00460608	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00244646	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00114372	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000801364	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000712831	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000350081	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23148068910976 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23147860453376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23147659126912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23147457800448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23147256473984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23147055147520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23146853821056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23146652494592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23146451168128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23146249841664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23146048515200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23145847188736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23145645862272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23145444535808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23145243209344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23145041882880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23144840556416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23144639229952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23144437903488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23144236577024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23144035250560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23143833924096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23143632597632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23143431271168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23143229944704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23143028618240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23142827291776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23142625965312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23142424638848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23142223312384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23142021985920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23141820659456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23141619328896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23141418002432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23141216675968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23141015349504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23140814023040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23140612696576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23140411370112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23140210043648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23140008717184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23139807390720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23139606064256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23139404737792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23139203411328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23139002084864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23138800758400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23138599431936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23138398105472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23138196779008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23137995452544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23137794126080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23137592799616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23137391473152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23137190146688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23136988820224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23136787493760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23136586167296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23136384840832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23136183514368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23135982187904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23135780861440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23135579534976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23147963250432 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23147956659968 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3050, cols: 61, reductionFactor: 37, colBlockingSize: 12)                                	 0.478703  	 1300      	 63.3066   	 0         	 4.12285   	 15.3551   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 61)                                                                               	 0.353695  	 700       	 3.14454   	 0         	 0.177708  	 17.695    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 61)	 0.223044  	 700       	 50.177    	 0         	 8.0549    	 6.22937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 61)                           	 0.195189  	 700       	 81.4015   	 0         	 10.7824   	 7.5495    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 61, r2: 61, leftOrthog: 1)                      	 0.181737  	 600       	 74.9374   	 0         	 14.9383   	 5.01645   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 61)                         	 0.170726  	 600       	 79.7701   	 0         	 10.5663   	 7.5495    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3050, m: 61)                                                                       	 0.100818  	 700       	 0         	 0         	 20.6685   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3050, Xcols: 61, r: 61, streamingCols: 0)                                 	 0.0815755 	 700       	 97.3862   	 0         	 25.6717   	 3.79353   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 61, reductionFactor: 37, colBlockingSize: 12)                                	 0.0732474 	 200       	 52.1735   	 0         	 3.41246   	 15.2891   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 61, m: 3050)                                                                                	 0.0726774 	 700       	 0         	 0         	 28.6713   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 61)                                                                                	 0.0546214 	 900       	 4.98662   	 0         	 1.47951   	 3.37046   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 61)                                                                               	 0.0436502 	 100       	 2.44558   	 0         	 0.158533  	 15.4263   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0383027 	 100       	 2.28444   	 0         	 0.157691  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 50)	 0.0313154 	 100       	 41.8484   	 0         	 7.32164   	 5.71572   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 50, r2: 50, leftOrthog: 1)                      	 0.0285466 	 100       	 53.4215   	 0         	 12.9613   	 4.12162   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 50)                           	 0.0271394 	 100       	 68.5535   	 0         	 10.0695   	 6.80804   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 61, r2: 61, leftOrthog: 1)                      	 0.025947  	 100       	 71.704    	 0         	 14.3352   	 5.00197   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0254472 	 100       	 61.5477   	 0         	 4.87284   	 12.6308   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 50)                         	 0.0232286 	 100       	 80.0953   	 0         	 10.6324   	 7.5331    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 50, n: 50, r2: 61)                         	 0.0180035 	 100       	 103.341   	 0         	 15.1792   	 6.80804   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 61, r: 61, streamingCols: 0)                                 	 0.0102931 	 100       	 90.3765   	 0         	 23.8499   	 3.78938   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 61, m: 2500)                                                                                	 0.0086509 	 100       	 0         	 0         	 28.2052   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 61, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00863484	 200       	 8.85151   	 0         	 1.25464   	 7.05503   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 61)                                                                       	 0.0054382 	 100       	 0         	 0         	 44.8677   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 11)                                                                                                       	 0.00479216	 808       	 0         	 0         	 16.3213   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 1) 	 0.00464784	 100       	 0.131244  	 0         	 1.0503    	 0.124959  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 2, r2: 1)                             	 0.00405599	 100       	 0.30079   	 0         	 1.80513   	 0.16663   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 61, r: 50, streamingCols: 11)                                  	 0.00307041	 100       	 4.07112   	 0         	 1.62845   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 61, fromLeft: 1)                              	 0.00229827	 800       	 0         	 0         	 20.7238   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 61) 	 0.00197696	 100       	 18.8218   	 0         	 3.97417   	 4.73602   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 61, leftOrthog: 1)                        	 0.00130717	 100       	 23.3329   	 0         	 8.65995   	 2.69435   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 61, r2: 61)                            	 0.00100882	 100       	 36.8845   	 0         	 7.78807   	 4.73602   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000939018	 100       	 26.6236   	 0         	 6.38965   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000810022	 100       	 0.617267  	 0         	 2.46907   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 61)                           	 0.000779673	 100       	 0         	 0         	 6.25903   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000485612	 100       	 0         	 0         	 8.23703   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                        	 0.0004797 	 100       	 0         	 0         	 10.173    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 61)                                                                         	 0.000391663	 100       	 0         	 0         	 12.4597   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 11)                                                                                                        	 0.000388534	 101       	 0         	 0         	 2.28757   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329477	 100       	 0.758778  	 0         	 12.1405   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 1)                                                                                                        	 0.000309049	 101       	 0         	 0         	 2.87592   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 50, fromLeft: 1)                              	 0.000222095	 100       	 0         	 0         	 21.9726   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.32361   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.32358   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.39151   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.39028   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.12074   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.66869   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.586032  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.435648  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.306601  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.280651  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.260984  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.237537  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.227393  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.212898  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.106648  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.094939  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.081814  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0546214 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.011622  	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00964496	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00596944	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0053591 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00252036	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00136805	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000810022	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000779673	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329477	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23398121367424 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23397908080640 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23397706754176 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23397505427712 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23397304101248 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23397102774784 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23396901448320 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23396700121856 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23396498795392 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23396297468928 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23396096142464 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23395894816000 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23395693489536 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23395492163072 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23395290836608 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23395089510144 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23394888183680 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23394686857216 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23394485530752 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23394284204288 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23394082877824 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23393881551360 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23393680224896 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23393478898432 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23393277571968 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23393076245504 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23392874919040 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23392673592576 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23392472266112 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23392270939648 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23392069613184 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23391868286720 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23391666956160 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23391465629696 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23391264303232 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23391062976768 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23390861650304 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23390660323840 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23390458997376 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23390257670912 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23390056344448 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23389855017984 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23389653691520 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23389452365056 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23389251038592 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23389049712128 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23388848385664 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23388647059200 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23388445732736 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23388244406272 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23388043079808 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23387841753344 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23387640426880 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23387439100416 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23387237773952 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23387036447488 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23386835121024 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23386633794560 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23386432468096 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23386231141632 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23386029815168 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23385828488704 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23385627162240 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23398015706880 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23398009116416 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3100, cols: 62, reductionFactor: 37, colBlockingSize: 12)                                	 0.494136  	 1300      	 64.3952   	 0         	 4.1261    	 15.6068   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 62)                                                                               	 0.36762   	 700       	 3.17667   	 0         	 0.176613  	 17.9866   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 62)	 0.222375  	 700       	 51.6018   	 0         	 8.26605   	 6.24261   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 62, r2: 62, leftOrthog: 1)                      	 0.195554  	 600       	 73.124    	 0         	 14.3417   	 5.09868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 62)                           	 0.194275  	 700       	 85.873    	 0         	 11.1912   	 7.67327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 62)                         	 0.174998  	 600       	 81.7134   	 0         	 10.6491   	 7.67327   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3100, m: 62)                                                                       	 0.0880266 	 700       	 0         	 0         	 24.4544   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3100, Xcols: 62, r: 62, streamingCols: 0)                                 	 0.0848645 	 700       	 98.2917   	 0         	 25.4924   	 3.85572   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 62, reductionFactor: 37, colBlockingSize: 12)                                	 0.0753689 	 200       	 52.3809   	 0         	 3.37208   	 15.5337   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 62, m: 3100)                                                                                	 0.0713548 	 700       	 0         	 0         	 30.1681   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 62)                                                                                	 0.0526734 	 900       	 5.42955   	 0         	 1.5848    	 3.42602   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 62)                                                                               	 0.0440299 	 100       	 2.46424   	 0         	 0.158983  	 15.5      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.037532  	 100       	 2.33134   	 0         	 0.160929  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 50)	 0.029898  	 100       	 44.217    	 0         	 7.76774   	 5.69239   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 50, r2: 50, leftOrthog: 1)                      	 0.0268479 	 100       	 57.7327   	 0         	 14.0048   	 4.12234   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 50)                           	 0.0266026 	 100       	 72.2485   	 0         	 10.5343   	 6.85841   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0256073 	 100       	 62.1656   	 0         	 4.92047   	 12.6341   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 62, r2: 62, leftOrthog: 1)                      	 0.0252632 	 100       	 76.0791   	 0         	 14.9684   	 5.08263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 50)                         	 0.0228931 	 100       	 83.9553   	 0         	 10.9673   	 7.65508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 50, n: 50, r2: 62)                         	 0.0202831 	 100       	 94.7588   	 0         	 13.8164   	 6.85841   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 62, r: 62, streamingCols: 0)                                 	 0.0109829 	 100       	 87.4995   	 0         	 22.7205   	 3.85112   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 62, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00926739	 200       	 8.51997   	 0         	 1.19887   	 7.10666   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 62, m: 2500)                                                                                	 0.00519652	 100       	 0         	 0         	 47.7242   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 1) 	 0.00446043	 100       	 0.139     	 0         	 1.11236   	 0.12496   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 62)                                                                       	 0.00412573	 100       	 0         	 0         	 60.1105   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 2, r2: 1)                             	 0.00385001	 100       	 0.322077  	 0         	 1.93288   	 0.166631  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 12)                                                                                                       	 0.00349322	 808       	 0         	 0         	 26.6464   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 62, r: 50, streamingCols: 12)                                  	 0.00323197	 100       	 3.86761   	 0         	 1.54704   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 62, fromLeft: 1)                              	 0.00234816	 800       	 0         	 0         	 20.954    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 62) 	 0.00186585	 100       	 20.6018   	 0         	 4.30645   	 4.78395   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 62, leftOrthog: 1)                        	 0.00136554	 100       	 22.7017   	 0         	 8.37764   	 2.70979   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 62, r2: 62)                            	 0.000950999	 100       	 40.4207   	 0         	 8.44922   	 4.78395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000937621	 100       	 26.6632   	 0         	 6.39917   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000847333	 100       	 0.590087  	 0         	 2.36035   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 62)                           	 0.0007361 	 100       	 0         	 0         	 6.73821   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 62)                                                                         	 0.000508703	 100       	 0         	 0         	 9.75029   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000494413	 100       	 0         	 0         	 8.0904    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                        	 0.000457369	 100       	 0         	 0         	 10.8446   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 12)                                                                                                        	 0.000376995	 101       	 0         	 0         	 2.57192   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329772	 100       	 0.7581    	 0         	 12.1296   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 1)                                                                                                        	 0.000309881	 101       	 0         	 0         	 3.12894   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 50, fromLeft: 1)                              	 0.000232488	 100       	 0         	 0         	 21.3344   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.33505   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.33503   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.41454   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.41326   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.15333   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.655709  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.60438   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.449182  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.311719  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.293815  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.2586    	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.24903   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.225678  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.219112  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0990794 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0926611 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0770458 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0526734 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0112511 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00883239	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00494203	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00463747	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00258065	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00113723	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000847333	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.0007361 	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329772	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22949128607616 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22948949780480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22948748454016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22948547127552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22948345801088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22948144474624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22947943148160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22947741821696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22947540495232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22947339168768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22947137842304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22946936515840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22946735189376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22946533862912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22946332536448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22946131209984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22945929883520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22945728557056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22945527230592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22945325904128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22945124577664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22944923251200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22944721924736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22944520598272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22944319271808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22944117945344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22943916618880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22943715292416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22943513965952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22943312639488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22943111313024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22942909986560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22942708656000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22942507329536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22942306003072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22942104676608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22941903350144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22941702023680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22941500697216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22941299370752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22941098044288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22940896717824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22940695391360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22940494064896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22940292738432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22940091411968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22939890085504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22939688759040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22939487432576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22939286106112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22939084779648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22938883453184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22938682126720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22938480800256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22938279473792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22938078147328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22937876820864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22937675494400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22937474167936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22937272841472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22937071515008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22936870188544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22936668862080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22949022947072 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22948844381952 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3150, cols: 63, reductionFactor: 37, colBlockingSize: 12)                                	 0.505798  	 1300      	 66.004    	 0         	 4.16206   	 15.8585   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 63)                                                                               	 0.372215  	 700       	 3.29173   	 0         	 0.18009   	 18.2783   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 63)	 0.232128  	 700       	 50.706    	 0         	 8.1027    	 6.25791   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 63)                           	 0.202223  	 700       	 86.5543   	 0         	 11.1009   	 7.79703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 63, r2: 63, leftOrthog: 1)                      	 0.198435  	 600       	 75.6056   	 0         	 14.5931   	 5.18092   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 63)                         	 0.180897  	 600       	 82.9357   	 0         	 10.6368   	 7.79703   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3150, Xcols: 63, r: 63, streamingCols: 0)                                 	 0.0864177 	 700       	 101.271   	 0         	 25.8483   	 3.91791   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3150, m: 63)                                                                       	 0.0819785 	 700       	 0         	 0         	 27.1125   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 63, reductionFactor: 37, colBlockingSize: 12)                                	 0.0764027 	 200       	 53.3524   	 0         	 3.38143   	 15.7781   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 63, m: 3150)                                                                                	 0.0703508 	 700       	 0         	 0         	 31.5936   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 63)                                                                                	 0.055595  	 900       	 5.39718   	 0         	 1.55021   	 3.48158   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 63)                                                                               	 0.0486497 	 100       	 2.2662    	 0         	 0.14553   	 15.572    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0384281 	 100       	 2.27698   	 0         	 0.157177  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 50)	 0.0312024 	 100       	 42.7692   	 0         	 7.54045   	 5.67197   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 50, r2: 50, leftOrthog: 1)                      	 0.0273395 	 100       	 57.609    	 0         	 13.9725   	 4.12304   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 50)                           	 0.0265127 	 100       	 74.851    	 0         	 10.8356   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0257984 	 100       	 62.7002   	 0         	 4.96154   	 12.6372   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 63, r2: 63, leftOrthog: 1)                      	 0.0253021 	 100       	 78.4324   	 0         	 15.1905   	 5.16326   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 50)                         	 0.0235066 	 100       	 84.4231   	 0         	 10.8555   	 7.77701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 50, n: 50, r2: 63)                         	 0.0195685 	 100       	 101.413   	 0         	 14.6807   	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 63, r: 63, streamingCols: 0)                                 	 0.0108137 	 100       	 91.7582   	 0         	 23.4505   	 3.91285   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 63, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00948245	 200       	 8.5975    	 0         	 1.20121   	 7.15738   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 63)                                                                       	 0.00458086	 100       	 0         	 0         	 55.0115   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 1) 	 0.00455128	 100       	 0.138422  	 0         	 1.10773   	 0.12496   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 63, m: 2500)                                                                                	 0.00452358	 100       	 0         	 0         	 55.7081   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 2, r2: 1)                             	 0.00396163	 100       	 0.318051  	 0         	 1.90871   	 0.166631  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 13)                                                                                                       	 0.00372208	 808       	 0         	 0         	 29.3496   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 63, r: 50, streamingCols: 13)                                  	 0.00307072	 100       	 4.07071   	 0         	 1.62828   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 63, fromLeft: 1)                              	 0.00244865	 800       	 0         	 0         	 20.7474   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 63) 	 0.00195703	 100       	 20.2807   	 0         	 4.19779   	 4.83129   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 63, leftOrthog: 1)                        	 0.00158338	 100       	 19.8942   	 0         	 7.30085   	 2.72491   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 63, r2: 63)                            	 0.00103309	 100       	 38.4186   	 0         	 7.95204   	 4.83129   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000912821	 100       	 0.547753  	 0         	 2.19101   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000904002	 100       	 27.6548   	 0         	 6.63715   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 63)                           	 0.000766902	 100       	 0         	 0         	 6.5719    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000488069	 100       	 0         	 0         	 8.19556   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                        	 0.000467064	 100       	 0         	 0         	 10.7908   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 63)                                                                         	 0.000383504	 100       	 0         	 0         	 13.142    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 13)                                                                                                        	 0.000365707	 101       	 0         	 0         	 2.87224   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 1)                                                                                                        	 0.000348161	 101       	 0         	 0         	 3.017     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000332842	 100       	 0.751107  	 0         	 12.0177   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 50, fromLeft: 1)                              	 0.000227353	 100       	 0         	 0         	 22.1682   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.39044   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.39041   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.44892   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.44759   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.18059   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.664005  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.617481  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.459293  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.32215   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.296522  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.269839  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.25266   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.233731  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.224876  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.100302  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0869429 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0753625 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.055595  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0114615 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00905219	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00490301	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0048464 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.002676  	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00121579	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000912821	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000766902	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000332842	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23112933910400 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23112695408640 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23112494082176 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23112292755712 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23112091429248 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23111890102784 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23111688776320 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23111487449856 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23111286123392 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23111084796928 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23110883470464 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23110682144000 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23110480817536 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23110279491072 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23110078164608 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23109876838144 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23109675511680 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23109474185216 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23109272858752 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23109071532288 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23108870205824 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23108668879360 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23108467552896 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23108266226432 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23108064899968 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23107863573504 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23107662247040 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23107460920576 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23107259594112 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23107058267648 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23106856941184 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23106655614720 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23106454284160 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23106252957696 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23106051631232 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23105850304768 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23105648978304 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23105447651840 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23105246325376 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23105044998912 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23104843672448 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23104642345984 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23104441019520 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23104239693056 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23104038366592 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23103837040128 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23103635713664 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23103434387200 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23103233060736 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23103031734272 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23102830407808 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23102629081344 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23102427754880 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23102226428416 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23102025101952 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23101823775488 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23101622449024 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23101421122560 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23101219796096 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23101018469632 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23100817143168 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23100615816704 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23100414490240 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23112828249856 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23112821659392 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3200, cols: 64, reductionFactor: 37, colBlockingSize: 12)                                	 0.511226  	 1300      	 68.4624   	 0         	 4.24963   	 16.1102   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 64)                                                                               	 0.380904  	 700       	 3.37226   	 0         	 0.181597  	 18.5699   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 64)	 0.242933  	 700       	 49.7177   	 0         	 7.92274   	 6.27531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 64)                           	 0.211169  	 700       	 86.8976   	 0         	 10.9708   	 7.92079   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 64, r2: 64, leftOrthog: 1)                      	 0.202788  	 600       	 77.5621   	 0         	 14.7368   	 5.26316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 64)                         	 0.179356  	 600       	 87.6949   	 0         	 11.0715   	 7.92079   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3200, m: 64)                                                                       	 0.112274  	 700       	 0         	 0         	 20.4301   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3200, Xcols: 64, r: 64, streamingCols: 0)                                 	 0.08962   	 700       	 102.377   	 0         	 25.7223   	 3.9801    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 64, reductionFactor: 37, colBlockingSize: 12)                                	 0.078172  	 200       	 53.8134   	 0         	 3.35867   	 16.0223   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 64, m: 3200)                                                                                	 0.0727648 	 700       	 0         	 0         	 31.5229   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 64)                                                                                	 0.0558111 	 900       	 5.63636   	 0         	 1.59349   	 3.53712   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 64)                                                                               	 0.0469249 	 100       	 2.38679   	 0         	 0.152584  	 15.6425   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0393234 	 100       	 2.22514   	 0         	 0.153598  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 50)	 0.0335084 	 100       	 40.2287   	 0         	 7.11463   	 5.65436   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 50)                           	 0.0284866 	 100       	 71.8934   	 0         	 10.3347   	 6.95652   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 50, r2: 50, leftOrthog: 1)                      	 0.026444  	 100       	 60.5052   	 0         	 14.6725   	 4.12371   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0256228 	 100       	 64.132    	 0         	 5.0736    	 12.6403   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 64, r2: 64, leftOrthog: 1)                      	 0.0250041 	 100       	 81.9066   	 0         	 15.6196   	 5.24384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 50)                         	 0.0233027 	 100       	 87.8867   	 0         	 11.1265   	 7.89889   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 50, n: 50, r2: 64)                         	 0.0211049 	 100       	 97.0389   	 0         	 13.9493   	 6.95652   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 64, r: 64, streamingCols: 0)                                 	 0.0109414 	 100       	 93.5895   	 0         	 23.5471   	 3.97456   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 64, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00975484	 200       	 8.62485   	 0         	 1.1967    	 7.20721   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 64)                                                                       	 0.00515121	 100       	 0         	 0         	 49.6971   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 64, m: 2500)                                                                                	 0.0045626 	 100       	 0         	 0         	 56.1084   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 1) 	 0.00444547	 100       	 0.143967  	 0         	 1.15209   	 0.124961  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 2, r2: 1)                             	 0.00383355	 100       	 0.333894  	 0         	 2.00378   	 0.166632  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 14)                                                                                                       	 0.00381379	 808       	 0         	 0         	 33.2201   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 64, r: 50, streamingCols: 14)                                  	 0.00301475	 100       	 4.14628   	 0         	 1.65851   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 64, fromLeft: 1)                              	 0.00280154	 800       	 0         	 0         	 18.7143   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 64) 	 0.00191543	 100       	 21.3842   	 0         	 4.38376   	 4.87805   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 64, leftOrthog: 1)                        	 0.00167074	 100       	 19.1532   	 0         	 6.99092   	 2.73973   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 64, r2: 64)                            	 0.00098509	 100       	 41.58     	 0         	 8.52389   	 4.87805   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00090711	 100       	 0.551201  	 0         	 2.2048    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000897982	 100       	 27.8402   	 0         	 6.68165   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 64)                           	 0.000756568	 100       	 0         	 0         	 6.7674    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000501464	 100       	 0         	 0         	 7.97664   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 64)                                                                         	 0.000482184	 100       	 0         	 0         	 10.6184   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                        	 0.000468975	 100       	 0         	 0         	 10.9174   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 14)                                                                                                        	 0.000397735	 101       	 0         	 0         	 2.8441    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000351261	 100       	 0.711721  	 0         	 11.3875   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 1)                                                                                                        	 0.000348959	 101       	 0         	 0         	 3.24164   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 50, fromLeft: 1)                              	 0.000233898	 100       	 0         	 0         	 21.8899   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.4601    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.46008   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.4678    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.46646   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.20031   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.704334  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.624776  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.467152  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.325564  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.300363  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.282803  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.255907  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.244474  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.224662  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.117907  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.103576  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0778288 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0558111 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0116597 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0099205 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00502946	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00481849	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00303544	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116689	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00090711	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000756568	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351261	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22958987229056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22958814783488 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22958613457024 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22958412130560 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22958210804096 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22958009477632 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22957808151168 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22957606824704 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22957405498240 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22957204171776 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22957002845312 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22956801518848 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22956600192384 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22956398865920 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22956197539456 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22955996212992 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22955794886528 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22955593560064 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22955392233600 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22955190907136 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22954989580672 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22954788254208 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22954586927744 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22954385601280 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22954184274816 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22953982948352 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22953781621888 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22953580295424 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22953378968960 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22953177642496 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22952976316032 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22952774989568 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22952573659008 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22952372332544 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22952171006080 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22951969679616 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22951768353152 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22951567026688 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22951365700224 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22951164373760 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22950963047296 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22950761720832 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22950560394368 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22950359067904 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22950157741440 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22949956414976 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22949755088512 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22949553762048 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22949352435584 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22949151109120 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22948949782656 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22948748456192 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22948547129728 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22948345803264 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22948144476800 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22947943150336 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22947741823872 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22947540497408 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22947339170944 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22947137844480 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22946936518016 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22946735191552 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22946533865088 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22958709421824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22958703015680 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3250, cols: 65, reductionFactor: 37, colBlockingSize: 12)                                	 0.517755  	 1300      	 70.8176   	 0         	 4.32819   	 16.362    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 65)                                                                               	 0.411209  	 700       	 3.27245   	 0         	 0.173498  	 18.8616   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 65)	 0.263542  	 700       	 47.0465   	 0         	 7.47379   	 6.29487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 65)                           	 0.21855   	 700       	 87.9603   	 0         	 10.9341   	 8.04455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 65, r2: 65, leftOrthog: 1)                      	 0.211088  	 600       	 78.0597   	 0         	 14.6032   	 5.34539   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 65)                         	 0.182954  	 600       	 90.0634   	 0         	 11.1956   	 8.04455   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3250, m: 65)                                                                       	 0.0954785 	 700       	 0         	 0         	 24.7804   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3250, Xcols: 65, r: 65, streamingCols: 0)                                 	 0.0924187 	 700       	 104.004   	 0         	 25.7289   	 4.04229   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 65, m: 3250)                                                                                	 0.0865588 	 700       	 0         	 0         	 27.334    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 65, reductionFactor: 37, colBlockingSize: 12)                                	 0.0794893 	 200       	 54.5883   	 0         	 3.35592   	 16.2663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 65)                                                                                	 0.0605248 	 900       	 5.44486   	 0         	 1.51554   	 3.59268   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 65)                                                                               	 0.0459086 	 100       	 2.47775   	 0         	 0.157705  	 15.7113   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0396624 	 100       	 2.20612   	 0         	 0.152285  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 50, r2: 50, leftOrthog: 1)                      	 0.0317144 	 100       	 51.2386   	 0         	 12.4234   	 4.12437   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 50)	 0.0314479 	 100       	 43.3256   	 0         	 7.68254   	 5.63949   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 50)                           	 0.0274495 	 100       	 76.9594   	 0         	 10.9874   	 7.00431   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 65, r2: 65, leftOrthog: 1)                      	 0.0255893 	 100       	 82.5541   	 0         	 15.5049   	 5.32438   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0250301 	 100       	 66.6765   	 0         	 5.27365   	 12.6433   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 50)                         	 0.0238075 	 100       	 88.7324   	 0         	 11.0629   	 8.02073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 50, n: 50, r2: 65)                         	 0.0223773 	 100       	 94.4039   	 0         	 13.478    	 7.00431   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 65, r: 65, streamingCols: 0)                                 	 0.0109989 	 100       	 96.0319   	 0         	 23.7923   	 4.03626   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 65, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00977872	 200       	 8.87476   	 0         	 1.22306   	 7.25617   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 65)                                                                       	 0.00500528	 100       	 0         	 0         	 51.9452   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 65, m: 2500)                                                                                	 0.00433397	 100       	 0         	 0         	 59.9912   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 1) 	 0.00433285	 100       	 0.150017  	 0         	 1.2005    	 0.124962  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 15)                                                                                                       	 0.00379298	 808       	 0         	 0         	 38.3445   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 2, r2: 1)                             	 0.00373055	 100       	 0.348474  	 0         	 2.09127   	 0.166632  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 65, r: 50, streamingCols: 15)                                  	 0.00316615	 100       	 3.94801   	 0         	 1.5792    	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 65, fromLeft: 1)                              	 0.00270946	 800       	 0         	 0         	 19.9597   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 65) 	 0.00193131	 100       	 21.8764   	 0         	 4.44258   	 4.92424   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 65, leftOrthog: 1)                        	 0.00139007	 100       	 23.3801   	 0         	 8.48876   	 2.75424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 65, r2: 65)                            	 0.00099954	 100       	 42.2694   	 0         	 8.58395   	 4.92424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00096125	 100       	 26.0078   	 0         	 6.24187   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000905626	 100       	 0.552104  	 0         	 2.20842   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 65)                           	 0.000783215	 100       	 0         	 0         	 6.6393    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000484475	 100       	 0         	 0         	 8.25636   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                        	 0.000474267	 100       	 0         	 0         	 10.9643   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 65)                                                                         	 0.000465601	 100       	 0         	 0         	 11.1684   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 15)                                                                                                        	 0.000407336	 101       	 0         	 0         	 2.97543   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000327432	 100       	 0.763517  	 0         	 12.2163   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 1)                                                                                                        	 0.000325841	 101       	 0         	 0         	 3.71961   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 50, fromLeft: 1)                              	 0.00023799	 100       	 0         	 0         	 21.8497   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.55471   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.55469   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.53525   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.53392   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.24671   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.71306   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.632053  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.49678   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.328051  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.305103  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.301254  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.269782  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.25073   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.2301    	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.106584  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.100949  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0913773 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0605248 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0116573 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0085923 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00574062	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00500042	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00294745	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116412	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000905626	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000783215	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327432	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22536900986752 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22536700028928 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22536498702464 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22536297376000 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22536096049536 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22535894723072 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22535693396608 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22535492070144 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22535290743680 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22535089417216 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22534888090752 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22534686764288 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22534485437824 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22534284111360 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22534082784896 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22533881458432 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22533680131968 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22533478805504 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22533277479040 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22533076152576 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22532874826112 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22532673499648 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22532472173184 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22532270846720 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22532069520256 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22531868193792 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22531666867328 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22531465540864 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22531264214400 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22531062887936 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22530861561472 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22530660235008 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22530458904448 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22530257577984 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22530056251520 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22529854925056 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22529653598592 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22529452272128 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22529250945664 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22529049619200 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22528848292736 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22528646966272 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22528445639808 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22528244313344 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22528042986880 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22527841660416 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22527640333952 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22527439007488 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22527237681024 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22527036354560 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22526835028096 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22526633701632 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22526432375168 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22526231048704 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22526029722240 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22525828395776 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22525627069312 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22525425742848 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22525224416384 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22525023089920 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22524821763456 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22524620436992 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22524419110528 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22536795326208 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22536788735744 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3300, cols: 66, reductionFactor: 37, colBlockingSize: 12)                                	 0.522447  	 1300      	 73.4707   	 0         	 4.42231   	 16.6137   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 66)                                                                               	 0.422496  	 700       	 3.33431   	 0         	 0.174086  	 19.1533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 66)	 0.25569   	 700       	 49.7975   	 0         	 7.88359   	 6.31661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 66)                           	 0.224174  	 700       	 89.7726   	 0         	 10.9903   	 8.16832   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 66, r2: 66, leftOrthog: 1)                      	 0.217407  	 600       	 79.343    	 0         	 14.6184   	 5.42763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 66)                         	 0.197604  	 600       	 87.2946   	 0         	 10.687    	 8.16832   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3300, m: 66)                                                                       	 0.108896  	 700       	 0         	 0         	 22.4009   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3300, Xcols: 66, r: 66, streamingCols: 0)                                 	 0.0948957 	 700       	 106.036   	 0         	 25.8342   	 4.10448   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 66, reductionFactor: 37, colBlockingSize: 12)                                	 0.0787173 	 200       	 56.8329   	 0         	 3.44231   	 16.5101   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 66, m: 3300)                                                                                	 0.0698034 	 700       	 0         	 0         	 34.9462   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 66)                                                                                	 0.0613109 	 900       	 5.62698   	 0         	 1.54238   	 3.64824   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 66)                                                                               	 0.0472725 	 100       	 2.44328   	 0         	 0.154847  	 15.7787   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0391131 	 100       	 2.2371    	 0         	 0.154424  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 50)	 0.0348987 	 100       	 39.4857   	 0         	 7.01688   	 5.62725   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 50)                           	 0.0293498 	 100       	 74.2084   	 0         	 10.5241   	 7.05128   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 50, r2: 50, leftOrthog: 1)                      	 0.0287245 	 100       	 57.4423   	 0         	 13.9254   	 4.125     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 66, r2: 66, leftOrthog: 1)                      	 0.0284056 	 100       	 76.675    	 0         	 14.1863   	 5.40487   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0250734 	 100       	 67.5853   	 0         	 5.3443    	 12.6462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 50)                         	 0.0246797 	 100       	 88.2506   	 0         	 10.8382   	 8.14252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 50, n: 50, r2: 66)                         	 0.0205259 	 100       	 106.11    	 0         	 15.0483   	 7.05128   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 66, r: 66, streamingCols: 0)                                 	 0.0116202 	 100       	 93.7158   	 0         	 22.8689   	 4.09795   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 66, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00892491	 200       	 10.0253   	 0         	 1.37252   	 7.30429   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 66)                                                                       	 0.00480581	 100       	 0         	 0         	 54.9335   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 66, m: 2500)                                                                                	 0.00466841	 100       	 0         	 0         	 56.5503   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 1) 	 0.00441824	 100       	 0.149381  	 0         	 1.19541   	 0.124962  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 16)                                                                                                       	 0.0039724 	 808       	 0         	 0         	 41.6571   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 2, r2: 1)                             	 0.00380726	 100       	 0.346706  	 0         	 2.08066   	 0.166633  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 66, r: 50, streamingCols: 16)                                  	 0.0031268 	 100       	 3.9977    	 0         	 1.59908   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 66, fromLeft: 1)                              	 0.00262957	 800       	 0         	 0         	 21.2038   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 66) 	 0.00187966	 100       	 23.1744   	 0         	 4.66298   	 4.96988   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 66, leftOrthog: 1)                        	 0.00135589	 100       	 24.3382   	 0         	 8.79125   	 2.76846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 66, r2: 66)                            	 0.000991131	 100       	 43.9498   	 0         	 8.84323   	 4.96988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000908641	 100       	 27.5136   	 0         	 6.60327   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000784078	 100       	 0.637692  	 0         	 2.55077   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 66)                           	 0.000734454	 100       	 0         	 0         	 7.18901   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000516942	 100       	 0         	 0         	 7.73781   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                        	 0.000472931	 100       	 0         	 0         	 11.1644   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 66)                                                                         	 0.000417294	 100       	 0         	 0         	 12.6529   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 16)                                                                                                        	 0.000396865	 101       	 0         	 0         	 3.25753   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000339196	 100       	 0.737037  	 0         	 11.7926   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 1)                                                                                                        	 0.000336124	 101       	 0         	 0         	 3.8462    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 50, fromLeft: 1)                              	 0.000233498	 100       	 0         	 0         	 22.6126   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.57554   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.57551   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.54994   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.5487    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.27008   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.717529  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.635163  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.508881  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.331867  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.30452   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.296887  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.275893  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.258323  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.243718  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.114119  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.109643  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0749887 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0613109 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0118411 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00954644	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00517832	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00504915	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00286307	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0012646 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000784078	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000734454	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339196	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23111824914304 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23111621666816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23111420340352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23111219013888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23111017687424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23110816360960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23110615034496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23110413708032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23110212381568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23110011055104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23109809728640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23109608402176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23109407075712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23109205749248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23109004422784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23108803096320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23108601769856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23108400443392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23108199116928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23107997790464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23107796464000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23107595137536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23107393811072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23107192484608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23106991158144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23106789831680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23106588505216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23106387178752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23106185852288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23105984525824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23105783199360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23105581872896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23105380542336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23105179215872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23104977889408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23104776562944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23104575236480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23104373910016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23104172583552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23103971257088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23103769930624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23103568604160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23103367277696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23103165951232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23102964624768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23102763298304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23102561971840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23102360645376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23102159318912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23101957992448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23101756665984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23101555339520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23101354013056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23101152686592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23100951360128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23100750033664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23100548707200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23100347380736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23100146054272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23099944727808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23099743401344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23099542074880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23099340748416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23111719253760 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23111712663296 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3350, cols: 67, reductionFactor: 37, colBlockingSize: 12)                                	 0.553817  	 1300      	 72.5075   	 0         	 4.29919   	 16.8654   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 67)                                                                               	 0.430825  	 700       	 3.42074   	 0         	 0.175919  	 19.4449   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 67)	 0.266016  	 700       	 49.1715   	 0         	 7.75509   	 6.34055   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 67)                           	 0.233847  	 700       	 90.0306   	 0         	 10.8574   	 8.29208   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 67, r2: 67, leftOrthog: 1)                      	 0.217607  	 600       	 82.9285   	 0         	 15.0509   	 5.50987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 67)                         	 0.200722  	 600       	 89.9043   	 0         	 10.8422   	 8.29208   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3350, Xcols: 67, r: 67, streamingCols: 0)                                 	 0.0974956 	 700       	 107.971   	 0         	 25.913    	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3350, m: 67)                                                                       	 0.0830007 	 700       	 0         	 0         	 30.287    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 67, reductionFactor: 37, colBlockingSize: 12)                                	 0.082914  	 200       	 55.6037   	 0         	 3.31889   	 16.7537   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 67, m: 3350)                                                                                	 0.0732417 	 700       	 0         	 0         	 34.3225   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 67)                                                                                	 0.0657628 	 900       	 5.48812   	 0         	 1.48176   	 3.70378   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 67)                                                                               	 0.0476924 	 100       	 2.45846   	 0         	 0.155161  	 15.8446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.042157  	 100       	 2.07558   	 0         	 0.143274  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 50)	 0.0332591 	 100       	 41.9283   	 0         	 7.46382   	 5.61755   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 50, r2: 50, leftOrthog: 1)                      	 0.0296352 	 100       	 56.5206   	 0         	 13.6999   	 4.12562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 50)                           	 0.028639  	 100       	 78.3721   	 0         	 11.0423   	 7.09746   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 67, r2: 67, leftOrthog: 1)                      	 0.027735  	 100       	 80.9266   	 0         	 14.7533   	 5.48533   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0258045 	 100       	 66.6654   	 0         	 5.27039   	 12.649    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 50)                         	 0.0244222 	 100       	 91.9039   	 0         	 11.1207   	 8.26426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 50, n: 50, r2: 67)                         	 0.022138  	 100       	 101.387   	 0         	 14.2849   	 7.09746   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 67, r: 67, streamingCols: 0)                                 	 0.0115528 	 100       	 97.1408   	 0         	 23.3532   	 4.15963   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 67, reductionFactor: 37, colBlockingSize: 12)                                  	 0.010311  	 200       	 8.94252   	 0         	 1.21641   	 7.35158   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 67)                                                                       	 0.00475831	 100       	 0         	 0         	 56.3225   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 67, m: 2500)                                                                                	 0.00468431	 100       	 0         	 0         	 57.2122   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 1) 	 0.00443385	 100       	 0.15111   	 0         	 1.20924   	 0.124963  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 17)                                                                                                       	 0.00409228	 808       	 0         	 0         	 45.6493   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 2, r2: 1)                             	 0.00384661	 100       	 0.348359  	 0         	 2.09057   	 0.166634  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 67, r: 50, streamingCols: 17)                                  	 0.0030906 	 100       	 4.04452   	 0         	 1.61781   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 67, fromLeft: 1)                              	 0.00283831	 800       	 0         	 0         	 20.2442   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 67) 	 0.00211696	 100       	 21.205    	 0         	 4.22834   	 5.01497   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 67, leftOrthog: 1)                        	 0.00152482	 100       	 21.9698   	 0         	 7.89602   	 2.78239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 67, r2: 67)                            	 0.0010218 	 100       	 43.9322   	 0         	 8.76021   	 5.01497   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 67)                           	 0.000939251	 100       	 0         	 0         	 5.70667   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000923682	 100       	 27.0656   	 0         	 6.49574   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000878848	 100       	 0.568927  	 0         	 2.27571   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 67)                                                                         	 0.000525219	 100       	 0         	 0         	 10.2053   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00048754	 100       	 0         	 0         	 8.20446   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                        	 0.000481175	 100       	 0         	 0         	 11.1394   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 17)                                                                                                        	 0.000390119	 101       	 0         	 0         	 3.52098   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 1)                                                                                                        	 0.000352202	 101       	 0         	 0         	 3.90003   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000334895	 100       	 0.746503  	 0         	 11.944    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 50, fromLeft: 1)                              	 0.000241809	 100       	 0         	 0         	 22.1663   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.6332    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.63317   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.59972   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.5984    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.30777   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.718301  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.672847  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.520674  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.348308  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.325654  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.305826  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.276502  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.267355  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.248206  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.112139  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0882842 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0784136 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0657628 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0122069 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00855614	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00531578	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00493788	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00308012	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00124229	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000939251	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000878848	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334895	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23430648166272 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23430455879680 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23430254553216 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23430053226752 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23429851900288 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23429650573824 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23429449247360 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23429247920896 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23429046594432 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23428845267968 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23428643941504 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23428442615040 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23428241288576 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23428039962112 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23427838635648 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23427637309184 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23427435982720 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23427234656256 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23427033329792 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23426832003328 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23426630676864 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23426429350400 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23426228023936 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23426026697472 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23425825371008 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23425624044544 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23425422718080 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23425221391616 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23425020065152 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23424818738688 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23424617412224 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23424416085760 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23424214755200 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23424013428736 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23423812102272 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23423610775808 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23423409449344 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23423208122880 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23423006796416 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23422805469952 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23422604143488 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23422402817024 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23422201490560 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23422000164096 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23421798837632 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23421597511168 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23421396184704 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23421194858240 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23420993531776 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23420792205312 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23420590878848 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23420389552384 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23420188225920 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23419986899456 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23419785572992 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23419584246528 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23419382920064 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23419181593600 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23418980267136 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23418778940672 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23418577614208 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23418376287744 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23418174961280 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23430542505728 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23430535915264 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3400, cols: 68, reductionFactor: 37, colBlockingSize: 12)                                	 0.545942  	 1300      	 76.8963   	 0         	 4.49236   	 17.1171   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 68)                                                                               	 0.431151  	 700       	 3.5735    	 0         	 0.18106   	 19.7366   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 68)	 0.270807  	 700       	 49.6377   	 0         	 7.79646   	 6.3667    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 68)                           	 0.238586  	 700       	 92.2528   	 0         	 10.9618   	 8.41584   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 68, r2: 68, leftOrthog: 1)                      	 0.220656  	 600       	 85.4994   	 0         	 15.2893   	 5.59211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 68)                         	 0.198978  	 600       	 94.8143   	 0         	 11.2662   	 8.41584   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3400, m: 68)                                                                       	 0.110338  	 700       	 0         	 0         	 23.4682   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3400, Xcols: 68, r: 68, streamingCols: 0)                                 	 0.10713   	 700       	 102.726   	 0         	 24.2918   	 4.22886   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 68, reductionFactor: 37, colBlockingSize: 12)                                	 0.08314   	 200       	 57.1202   	 0         	 3.36058   	 16.9971   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 68, m: 3400)                                                                                	 0.0768066 	 700       	 0         	 0         	 33.7138   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 68)                                                                                	 0.0653043 	 900       	 5.77784   	 0         	 1.53693   	 3.75934   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 68)                                                                               	 0.0461759 	 100       	 2.5771    	 0         	 0.161989  	 15.9091   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0389933 	 100       	 2.24398   	 0         	 0.154898  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 50)	 0.034965  	 100       	 40.3832   	 0         	 7.19805   	 5.6103    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 50, r2: 50, leftOrthog: 1)                      	 0.0298351 	 100       	 56.9798   	 0         	 13.8092   	 4.12621   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 50)                           	 0.0293061 	 100       	 78.8913   	 0         	 11.0448   	 7.14286   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 68, r2: 68, leftOrthog: 1)                      	 0.0276033 	 100       	 83.7581   	 0         	 15.0489   	 5.56574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 50)                         	 0.0253126 	 100       	 91.338    	 0         	 10.8918   	 8.38595   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0252685 	 100       	 69.0957   	 0         	 5.46134   	 12.6518   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 50, n: 50, r2: 68)                         	 0.0225193 	 100       	 102.668   	 0         	 14.3735   	 7.14286   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 68, r: 68, streamingCols: 0)                                 	 0.0118688 	 100       	 97.398    	 0         	 23.073    	 4.2213    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 68, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00969547	 200       	 9.79627   	 0         	 1.32416   	 7.39808   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 68)                                                                       	 0.00629613	 100       	 0         	 0         	 43.2012   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 68, m: 2500)                                                                                	 0.00513521	 100       	 0         	 0         	 52.9676   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 1) 	 0.00491871	 100       	 0.138248  	 0         	 1.10631   	 0.124963  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 18)                                                                                                       	 0.00431251	 808       	 0         	 0         	 48.5642   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 2, r2: 1)                             	 0.00429729	 100       	 0.316479  	 0         	 1.89924   	 0.166634  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 68, r: 50, streamingCols: 18)                                  	 0.00307569	 100       	 4.06413   	 0         	 1.62565   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 68, fromLeft: 1)                              	 0.0028619 	 800       	 0         	 0         	 20.6811   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 68) 	 0.00198083	 100       	 23.3437   	 0         	 4.61381   	 5.05952   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 68, leftOrthog: 1)                        	 0.0013291 	 100       	 25.5813   	 0         	 9.14908   	 2.79605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 68, r2: 68)                            	 0.00108343	 100       	 42.6795   	 0         	 8.43547   	 5.05952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000922105	 100       	 27.1119   	 0         	 6.50685   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000879896	 100       	 0.568249  	 0         	 2.273     	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 68)                           	 0.000727062	 100       	 0         	 0         	 7.48217   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00049311	 100       	 0         	 0         	 8.11178   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                        	 0.000454062	 100       	 0         	 0         	 11.9807   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 68)                                                                         	 0.000447413	 100       	 0         	 0         	 12.1588   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 18)                                                                                                        	 0.000390811	 101       	 0         	 0         	 3.72149   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 1)                                                                                                        	 0.0003315 	 101       	 0         	 0         	 4.38733   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032327	 100       	 0.773347  	 0         	 12.3736   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 50, fromLeft: 1)                              	 0.000239496	 100       	 0         	 0         	 22.7144   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.6822    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.68216   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.60189   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.60058   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.30713   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.758998  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.664046  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.51632   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.346517  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.318666  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.312672  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.279423  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.273273  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.247731  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.122075  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.117082  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0824349 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0653043 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0122513 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0100532 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00548888	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00480172	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00310139	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.001194  	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000879896	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000727062	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032327	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22521997551488 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22521801861120 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22521600534656 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22521399208192 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22521197881728 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22520996555264 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22520795228800 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22520593902336 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22520392575872 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22520191249408 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22519989922944 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22519788596480 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22519587270016 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22519385943552 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22519184617088 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22518983290624 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22518781964160 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22518580637696 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22518379311232 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22518177984768 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22517976658304 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22517775331840 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22517574005376 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22517372678912 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22517171352448 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22516970025984 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22516768699520 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22516567373056 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22516366046592 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22516164720128 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22515963393664 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22515762067200 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22515560736640 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22515359410176 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22515158083712 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22514956757248 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22514755430784 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22514554104320 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22514352777856 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22514151451392 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22513950124928 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22513748798464 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22513547472000 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22513346145536 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22513144819072 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22512943492608 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22512742166144 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22512540839680 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22512339513216 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22512138186752 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22511936860288 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22511735533824 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22511534207360 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22511332880896 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22511131554432 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22510930227968 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22510728901504 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22510527575040 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22510326248576 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22510124922112 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22509923595648 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22509722269184 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22509520942720 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22521891890944 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22521885300480 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3450, cols: 69, reductionFactor: 37, colBlockingSize: 12)                                	 0.561711  	 1300      	 78.0836   	 0         	 4.49561   	 17.3688   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 69)                                                                               	 0.435001  	 700       	 3.70044   	 0         	 0.184761  	 20.0282   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 69)	 0.276002  	 700       	 50.0671   	 0         	 7.82901   	 6.39508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 69)                           	 0.243437  	 700       	 94.4622   	 0         	 11.0617   	 8.5396    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 69, r2: 69, leftOrthog: 1)                      	 0.224591  	 600       	 87.7618   	 0         	 15.4664   	 5.67434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 69)                         	 0.203039  	 600       	 97.0777   	 0         	 11.3679   	 8.5396    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3450, Xcols: 69, r: 69, streamingCols: 0)                                 	 0.104824  	 700       	 109.687   	 0         	 25.5619   	 4.29104   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3450, m: 69)                                                                       	 0.0871563 	 700       	 0         	 0         	 30.5906   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 69, reductionFactor: 37, colBlockingSize: 12)                                	 0.085148  	 200       	 57.4256   	 0         	 3.33088   	 17.2404   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 69, m: 3450)                                                                                	 0.0751477 	 700       	 0         	 0         	 35.4789   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 69)                                                                                	 0.0690804 	 900       	 5.70655   	 0         	 1.49586   	 3.8149    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 69)                                                                               	 0.0457341 	 100       	 2.64026   	 0         	 0.165303  	 15.9722   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0397192 	 100       	 2.20296   	 0         	 0.152068  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 50)	 0.0319253 	 100       	 44.8077   	 0         	 7.99365   	 5.60541   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 69, r2: 69, leftOrthog: 1)                      	 0.0264961 	 100       	 89.8435   	 0         	 15.9125   	 5.64611   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 50, r2: 50, leftOrthog: 1)                      	 0.0264311 	 100       	 65.264    	 0         	 15.8147   	 4.12679   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0262998 	 100       	 67.3625   	 0         	 5.32323   	 12.6544   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 50)                           	 0.0257471 	 100       	 92.457    	 0         	 12.8636   	 7.1875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 50)                         	 0.0246896 	 100       	 96.4173   	 0         	 11.3331   	 8.5076    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 50, n: 50, r2: 69)                         	 0.0213247 	 100       	 111.631   	 0         	 15.5313   	 7.1875    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 69, r: 69, streamingCols: 0)                                 	 0.0120085 	 100       	 99.1172   	 0         	 23.1423   	 4.28295   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 69, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0103807 	 200       	 9.42073   	 0         	 1.26558   	 7.44379   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 69, m: 2500)                                                                                	 0.00483691	 100       	 0         	 0         	 57.0612   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 69)                                                                       	 0.00474571	 100       	 0         	 0         	 58.1578   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 1) 	 0.00461219	 100       	 0.149604  	 0         	 1.19718   	 0.124964  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 19)                                                                                                       	 0.0044364 	 808       	 0         	 0         	 52.599    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 2, r2: 1)                             	 0.0039511 	 100       	 0.34927   	 0         	 2.09602   	 0.166634  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 69, r: 50, streamingCols: 19)                                  	 0.00313796	 100       	 3.98348   	 0         	 1.59339   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 69, fromLeft: 1)                              	 0.00286279	 800       	 0         	 0         	 21.2872   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 69) 	 0.00204211	 100       	 23.3142   	 0         	 4.56823   	 5.10355   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 69, leftOrthog: 1)                        	 0.0015197 	 100       	 22.7019   	 0         	 8.08056   	 2.80945   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 69, r2: 69)                            	 0.00109913	 100       	 43.3162   	 0         	 8.48747   	 5.10355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000918418	 100       	 27.2207   	 0         	 6.53297   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000792951	 100       	 0.630556  	 0         	 2.52222   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 69)                           	 0.000755904	 100       	 0         	 0         	 7.30251   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000514218	 100       	 0         	 0         	 7.7788    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                        	 0.000500968	 100       	 0         	 0         	 11.0187   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 19)                                                                                                        	 0.000470342	 101       	 0         	 0         	 3.26401   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 69)                                                                         	 0.000447094	 100       	 0         	 0         	 12.3464   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000350228	 100       	 0.713821  	 0         	 11.4211   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 1)                                                                                                        	 0.000330988	 101       	 0         	 0         	 4.63823   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 50, fromLeft: 1)                              	 0.000249719	 100       	 0         	 0         	 22.1048   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.68603   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.686     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.62373   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.6225    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.32636   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.739413  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.683539  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.520454  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.352449  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.33238   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.314582  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.279038  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.274235  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.249971  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.11997   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0923491 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0804989 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0690804 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0125059 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00957712	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0057387 	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0047941 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00311251	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00131264	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000792951	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000755904	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000350228	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22929345259392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22929152665600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22928951339136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22928750012672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22928548686208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22928347359744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22928146033280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22927944706816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22927743380352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22927542053888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22927340727424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22927139400960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22926938074496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22926736748032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22926535421568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22926334095104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22926132768640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22925931442176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22925730115712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22925528789248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22925327462784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22925126136320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22924924809856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22924723483392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22924522156928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22924320830464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22924119504000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22923918177536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22923716851072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22923515524608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22923314198144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22923112871680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22922911541120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22922710214656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22922508888192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22922307561728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22922106235264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22921904908800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22921703582336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22921502255872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22921300929408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22921099602944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22920898276480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22920696950016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22920495623552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22920294297088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22920092970624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22919891644160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22919690317696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22919488991232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22919287664768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22919086338304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22918885011840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22918683685376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22918482358912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22918281032448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22918079705984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22917878379520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22917677053056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22917475726592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22917274400128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22917073073664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22916871747200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22929239598848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22929233008384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3500, cols: 70, reductionFactor: 37, colBlockingSize: 12)                                	 0.558915  	 1300      	 81.9357   	 0         	 4.65001   	 17.6206   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 70)                                                                               	 0.441876  	 700       	 3.80356   	 0         	 0.187184  	 20.3199   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 70)	 0.281058  	 700       	 50.559    	 0         	 7.86828   	 6.42568   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 70)                           	 0.248185  	 700       	 96.7424   	 0         	 11.1668   	 8.66337   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 70, r2: 70, leftOrthog: 1)                      	 0.234236  	 600       	 87.86     	 0         	 15.2625   	 5.75658   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 70)                         	 0.211494  	 600       	 97.3077   	 0         	 11.2321   	 8.66337   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3500, Xcols: 70, r: 70, streamingCols: 0)                                 	 0.103493  	 700       	 115.998   	 0         	 26.6464   	 4.35323   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3500, m: 70)                                                                       	 0.0915169 	 700       	 0         	 0         	 29.9835   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 70, reductionFactor: 37, colBlockingSize: 12)                                	 0.0898986 	 200       	 55.979    	 0         	 3.20183   	 17.4834   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 70)                                                                                	 0.0692246 	 900       	 5.94584   	 0         	 1.53622   	 3.87045   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 70, m: 3500)                                                                                	 0.0682097 	 700       	 0         	 0         	 40.2289   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 70)                                                                               	 0.0479725 	 100       	 2.55355   	 0         	 0.159258  	 16.034    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0412289 	 100       	 2.1223    	 0         	 0.146499  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 50)	 0.0367111 	 100       	 39.4976   	 0         	 7.04964   	 5.60278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 50)                           	 0.0302694 	 100       	 80.9399   	 0         	 11.1928   	 7.2314    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 70, r2: 70, leftOrthog: 1)                      	 0.0299816 	 100       	 81.7168   	 0         	 14.2701   	 5.72644   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 50)                         	 0.0264759 	 100       	 92.537    	 0         	 10.7237   	 8.62919   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0250048 	 100       	 71.8781   	 0         	 5.67891   	 12.657    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 50, r2: 50, leftOrthog: 1)                      	 0.0237276 	 100       	 73.7539   	 0         	 17.8695   	 4.12736   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 50, n: 50, r2: 70)                         	 0.0185956 	 100       	 131.751   	 0         	 18.2193   	 7.2314    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 70, r: 70, streamingCols: 0)                                 	 0.0122715 	 100       	 99.8245   	 0         	 22.9768   	 4.34459   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 70, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0112018 	 200       	 8.98508   	 0         	 1.19981   	 7.48874   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 1) 	 0.00456201	 100       	 0.153441  	 0         	 1.22788   	 0.124964  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 20)                                                                                                       	 0.00454561	 808       	 0         	 0         	 56.8813   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 70, m: 2500)                                                                                	 0.00433282	 100       	 0         	 0         	 64.623    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 70)                                                                       	 0.00431427	 100       	 0         	 0         	 64.9009   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 2, r2: 1)                             	 0.00396296	 100       	 0.353271  	 0         	 2.12003   	 0.166635  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 70, r: 50, streamingCols: 20)                                  	 0.00319524	 100       	 3.91207   	 0         	 1.56483   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 70, fromLeft: 1)                              	 0.00296865	 800       	 0         	 0         	 21.1274   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 70) 	 0.00196861	 100       	 24.8906   	 0         	 4.83589   	 5.14706   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 70, leftOrthog: 1)                        	 0.00153266	 100       	 22.8361   	 0         	 8.09049   	 2.82258   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 70, r2: 70)                            	 0.00104017	 100       	 47.1076   	 0         	 9.15233   	 5.14706   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000915862	 100       	 27.2967   	 0         	 6.55121   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000807248	 100       	 0.619388  	 0         	 2.47755   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 70)                           	 0.000755476	 100       	 0         	 0         	 7.41255   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000514653	 100       	 0         	 0         	 7.77223   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                        	 0.000478329	 100       	 0         	 0         	 11.7074   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 20)                                                                                                        	 0.000452901	 101       	 0         	 0         	 3.56811   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 70)                                                                         	 0.000450803	 100       	 0         	 0         	 12.4223   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000349932	 100       	 0.714425  	 0         	 11.4308   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 1)                                                                                                        	 0.000342885	 101       	 0         	 0         	 4.71295   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 50, fromLeft: 1)                              	 0.000250261	 100       	 0         	 0         	 22.3766   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.72354   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.72351   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.65734   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.65608   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.35811   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.735086  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.685021  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.531077  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.354476  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.331652  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.324299  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.289478  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.283457  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.257481  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.11896   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0962819 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0730572 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0692246 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0123273 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0102846 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00581972	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0045013 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00321891	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00120524	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000807248	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000755476	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000349932	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23337884297088 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23337711429632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23337510103168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23337308776704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23337107450240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23336906123776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23336704797312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23336503470848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23336302144384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23336100817920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23335899491456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23335698164992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23335496838528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23335295512064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23335094185600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23334892859136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23334691532672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23334490206208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23334288879744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23334087553280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23333886226816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23333684900352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23333483573888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23333282247424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23333080920960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23332879594496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23332678268032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23332476941568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23332275615104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23332074288640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23331872962176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23331671635712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23331470305152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23331268978688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23331067652224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23330866325760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23330664999296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23330463672832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23330262346368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23330061019904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23329859693440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23329658366976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23329457040512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23329255714048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23329054387584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23328853061120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23328651734656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23328450408192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23328249081728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23328047755264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23327846428800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23327645102336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23327443775872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23327242449408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23327041122944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23326839796480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23326638470016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23326437143552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23326235817088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23326034490624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23325833164160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23325631837696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23325430511232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23337606567680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23337600063232 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3550, cols: 71, reductionFactor: 37, colBlockingSize: 12)                                	 0.579751  	 1300      	 82.425    	 0         	 4.61189   	 17.8723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 71)                                                                               	 0.459652  	 700       	 3.81542   	 0         	 0.185111  	 20.6116   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 71)	 0.287204  	 700       	 50.8933   	 0         	 7.88007   	 6.45848   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 71, r2: 71, leftOrthog: 1)                      	 0.259484  	 600       	 82.7592   	 0         	 14.174    	 5.83882   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 71)                           	 0.253955  	 700       	 98.6545   	 0         	 11.2272   	 8.78713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 71)                         	 0.216321  	 600       	 99.272    	 0         	 11.2974   	 8.78713   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3550, Xcols: 71, r: 71, streamingCols: 0)                                 	 0.107135  	 700       	 116.926   	 0         	 26.4812   	 4.41542   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3550, m: 71)                                                                       	 0.0992835 	 700       	 0         	 0         	 28.4333   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 71, reductionFactor: 37, colBlockingSize: 12)                                	 0.0895954 	 200       	 57.7847   	 0         	 3.25983   	 17.7263   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 71, m: 3550)                                                                                	 0.0838498 	 700       	 0         	 0         	 33.6668   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 71)                                                                                	 0.0727    	 900       	 5.90774   	 0         	 1.50477   	 3.92601   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 50)	 0.0491921 	 100       	 29.893    	 0         	 5.33582   	 5.60233   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 71)                                                                               	 0.0475888 	 100       	 2.61091   	 0         	 0.162223  	 16.0946   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 50)                           	 0.0441537 	 100       	 57.0847   	 0         	 7.84714   	 7.27459   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0387946 	 100       	 2.25547   	 0         	 0.155692  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 50, r2: 50, leftOrthog: 1)                      	 0.0318377 	 100       	 55.7515   	 0         	 13.506    	 4.12791   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 71, r2: 71, leftOrthog: 1)                      	 0.0295236 	 100       	 85.3722   	 0         	 14.7023   	 5.80673   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 50)                         	 0.0252933 	 100       	 99.6509   	 0         	 11.3877   	 8.75074   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0252809 	 100       	 72.1087   	 0         	 5.696     	 12.6595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 50, n: 50, r2: 71)                         	 0.0235404 	 100       	 107.071   	 0         	 14.7185   	 7.27459   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 71, r: 71, streamingCols: 0)                                 	 0.0123516 	 100       	 102.031   	 0         	 23.1562   	 4.40622   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 71, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0119126 	 200       	 8.69204   	 0         	 1.15387   	 7.53295   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 71)                                                                       	 0.00556209	 100       	 0         	 0         	 51.0599   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 1) 	 0.0047283 	 100       	 0.15016   	 0         	 1.20162   	 0.124965  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 21)                                                                                                       	 0.00446176	 808       	 0         	 0         	 63.8901   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 71, m: 2500)                                                                                	 0.00441983	 100       	 0         	 0         	 64.2558   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 2, r2: 1)                             	 0.00413831	 100       	 0.343135  	 0         	 2.0592    	 0.166635  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 71, r: 50, streamingCols: 21)                                  	 0.0033005 	 100       	 3.78731   	 0         	 1.51492   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 71, fromLeft: 1)                              	 0.00304883	 800       	 0         	 0         	 21.1638   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 71) 	 0.00202901	 100       	 24.8446   	 0         	 4.78696   	 5.19006   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 71, leftOrthog: 1)                        	 0.00156657	 100       	 22.661    	 0         	 7.99199   	 2.83546   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 71, r2: 71)                            	 0.00108354	 100       	 46.5235   	 0         	 8.96397   	 5.19006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000925089	 100       	 27.0244   	 0         	 6.48586   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000877488	 100       	 0.569808  	 0         	 2.27923   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 71)                           	 0.000764986	 100       	 0         	 0         	 7.42497   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                        	 0.000500594	 100       	 0         	 0         	 11.3465   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000486205	 100       	 0         	 0         	 8.22698   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 21)                                                                                                        	 0.000476727	 101       	 0         	 0         	 3.55927   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 71)                                                                         	 0.000446257	 100       	 0         	 0         	 12.7281   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 1)                                                                                                        	 0.000369529	 101       	 0         	 0         	 4.59179   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330913	 100       	 0.755486  	 0         	 12.0878   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 50, fromLeft: 1)                              	 0.000265754	 100       	 0         	 0         	 21.3731   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.89116   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.89113   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.75852   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.75722   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.42903   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.782719  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.70654   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.546035  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.366021  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.343154  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.3416    	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.322411  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.30333   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.26608   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.122787  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.105292  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0887559 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0727    	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0127431 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.009877  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00580861	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00540419	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00331459	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00112735	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000877488	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000764986	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330913	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22509864912768 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22509655156736 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22509453830272 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22509252503808 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22509051177344 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22508849850880 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22508648524416 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22508447197952 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22508245871488 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22508044545024 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22507843218560 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22507641892096 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22507440565632 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22507239239168 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22507037912704 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22506836586240 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22506635259776 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22506433933312 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22506232606848 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22506031280384 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22505829953920 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22505628627456 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22505427300992 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22505225974528 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22505024648064 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22504823321600 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22504621995136 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22504420668672 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22504219342208 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22504018015744 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22503816689280 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22503615362816 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22503414032256 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22503212705792 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22503011379328 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22502810052864 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22502608726400 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22502407399936 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22502206073472 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22502004747008 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22501803420544 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22501602094080 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22501400767616 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22501199441152 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22500998114688 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22500796788224 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22500595461760 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22500394135296 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22500192808832 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22499991482368 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22499790155904 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22499588829440 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22499387502976 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22499186176512 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22498984850048 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22498783523584 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22498582197120 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22498380870656 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22498179544192 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22497978217728 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22497776891264 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22497575564800 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22497374238336 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22509759252224 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22509752661760 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3600, cols: 72, reductionFactor: 37, colBlockingSize: 12)                                	 0.597942  	 1300      	 83.3419   	 0         	 4.59843   	 18.124    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 72)                                                                               	 0.458372  	 700       	 3.99002   	 0         	 0.190881  	 20.9032   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 72)	 0.289304  	 700       	 51.9846   	 0         	 8.00566   	 6.49348   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 72, r2: 72, leftOrthog: 1)                      	 0.259305  	 600       	 86.3651   	 0         	 14.5861   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 72)                           	 0.255457  	 700       	 102.277   	 0         	 11.4778   	 8.91089   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 72)                         	 0.219834  	 600       	 101.872   	 0         	 11.4323   	 8.91089   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3600, Xcols: 72, r: 72, streamingCols: 0)                                 	 0.107765  	 700       	 121.224   	 0         	 27.0733   	 4.47761   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3600, m: 72)                                                                       	 0.0952053 	 700       	 0         	 0         	 30.4924   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 72, reductionFactor: 37, colBlockingSize: 12)                                	 0.088837  	 200       	 59.9312   	 0         	 3.33526   	 17.969    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 72, m: 3600)                                                                                	 0.0780724 	 700       	 0         	 0         	 37.1839   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 72)                                                                                	 0.0714925 	 900       	 6.26496   	 0         	 1.57349   	 3.98157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 72)                                                                               	 0.0463039 	 100       	 2.72115   	 0         	 0.168452  	 16.1538   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0380741 	 100       	 2.29815   	 0         	 0.158638  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 50)	 0.0376544 	 100       	 39.6236   	 0         	 7.07063   	 5.60397   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 50)                           	 0.0307595 	 100       	 84.2667   	 0         	 11.5164   	 7.31707   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 72, r2: 72, leftOrthog: 1)                      	 0.0285581 	 100       	 90.7625   	 0         	 15.4175   	 5.88697   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 50, r2: 50, leftOrthog: 1)                      	 0.0285061 	 100       	 63.1444   	 0         	 15.295    	 4.12844   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 50)                         	 0.0252555 	 100       	 102.631   	 0         	 11.5677   	 8.87224   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0252535 	 100       	 73.2035   	 0         	 5.78137   	 12.662    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 50, n: 50, r2: 72)                         	 0.0233208 	 100       	 111.145   	 0         	 15.1899   	 7.31707   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 72, r: 72, streamingCols: 0)                                 	 0.0191342 	 100       	 67.732    	 0         	 15.1599   	 4.46783   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 72, reductionFactor: 37, colBlockingSize: 12)                                  	 0.011002  	 200       	 9.67847   	 0         	 1.27744   	 7.57643   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 72)                                                                       	 0.00604471	 100       	 0         	 0         	 47.6449   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 72, m: 2500)                                                                                	 0.00521596	 100       	 0         	 0         	 55.2151   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 22)                                                                                                       	 0.0048869 	 808       	 0         	 0         	 64.0197   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 1) 	 0.00444312	 100       	 0.162048  	 0         	 1.29675   	 0.124965  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 2, r2: 1)                             	 0.00381045	 100       	 0.377908  	 0         	 2.26787   	 0.166636  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 72, fromLeft: 1)                              	 0.00305443	 800       	 0         	 0         	 21.7243   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 72, r: 50, streamingCols: 22)                                  	 0.00301743	 100       	 4.1426    	 0         	 1.65704   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 72) 	 0.00201611	 100       	 25.7129   	 0         	 4.91402   	 5.23256   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 72, leftOrthog: 1)                        	 0.0014175 	 100       	 25.3969   	 0         	 8.91712   	 2.8481    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 72, r2: 72)                            	 0.00109683	 100       	 47.2637   	 0         	 9.03262   	 5.23256   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000864945	 100       	 28.9036   	 0         	 6.93686   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000819889	 100       	 0.609839  	 0         	 2.43935   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 72)                           	 0.000734268	 100       	 0         	 0         	 7.84455   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 72)                                                                         	 0.000513414	 100       	 0         	 0         	 11.219    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000490929	 100       	 0         	 0         	 8.14782   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                        	 0.000481619	 100       	 0         	 0         	 11.9597   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 22)                                                                                                        	 0.000452822	 101       	 0         	 0         	 3.9256    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 1)                                                                                                        	 0.000335311	 101       	 0         	 0         	 5.30135   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330411	 100       	 0.756633  	 0         	 12.1061   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 50, fromLeft: 1)                              	 0.000252356	 100       	 0         	 0         	 22.8249   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.88182   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.88179   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.75462   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.75337   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.43287   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.789031  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.723035  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.54275   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.376042  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.348094  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.333418  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.317786  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.291123  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.269275  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.129917  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.101763  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0837793 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0714925 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.012891  	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0098785 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00615665	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00481354	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00330678	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0012282 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000819889	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000734268	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330411	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22721578899328 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22721383622656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22721182296192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22720980969728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22720779643264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22720578316800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22720376990336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22720175663872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22719974337408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22719773010944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22719571684480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22719370358016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22719169031552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22718967705088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22718766378624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22718565052160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22718363725696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22718162399232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22717961072768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22717759746304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22717558419840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22717357093376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22717155766912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22716954440448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22716753113984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22716551787520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22716350461056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22716149134592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22715947808128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22715746481664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22715545155200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22715343828736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22715142498176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22714941171712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22714739845248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22714538518784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22714337192320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22714135865856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22713934539392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22713733212928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22713531886464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22713330560000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22713129233536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22712927907072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22712726580608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22712525254144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22712323927680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22712122601216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22711921274752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22711719948288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22711518621824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22711317295360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22711115968896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22710914642432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22710713315968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22710511989504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22710310663040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22710109336576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22709908010112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22709706683648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22709505357184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22709304030720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22709102704256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22721473238784 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22721466648320 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3650, cols: 73, reductionFactor: 37, colBlockingSize: 12)                                	 0.622699  	 1300      	 83.4095   	 0         	 4.53911   	 18.3757   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 73)                                                                               	 0.506508  	 700       	 3.76338   	 0         	 0.177561  	 21.1949   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 73)	 0.308156  	 700       	 50.2284   	 0         	 7.69117   	 6.53065   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 73, r2: 73, leftOrthog: 1)                      	 0.280792  	 600       	 83.1257   	 0         	 13.8467   	 6.00329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 73)                           	 0.272636  	 700       	 99.8812   	 0         	 11.0553   	 9.03465   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 73)                         	 0.235894  	 600       	 98.9471   	 0         	 10.952    	 9.03465   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3650, Xcols: 73, r: 73, streamingCols: 0)                                 	 0.111413  	 700       	 122.209   	 0         	 26.9194   	 4.5398    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 73, reductionFactor: 37, colBlockingSize: 12)                                	 0.0949839 	 200       	 57.6206   	 0         	 3.16397   	 18.2115   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 73, m: 3650)                                                                                	 0.0908844 	 700       	 0         	 0         	 32.8355   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3650, m: 73)                                                                       	 0.0810587 	 700       	 0         	 0         	 36.8158   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 73)                                                                                	 0.076826  	 900       	 6.07632   	 0         	 1.50512   	 4.03711   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 73)                                                                               	 0.0474639 	 100       	 2.69152   	 0         	 0.166021  	 16.2119   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0395576 	 100       	 2.21196   	 0         	 0.152689  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 50)	 0.038514  	 100       	 39.3234   	 0         	 7.01252   	 5.6076    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 50)                           	 0.032301  	 100       	 82.4897   	 0         	 11.2096   	 7.35887   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0313543 	 100       	 58.2057   	 0         	 14.0969   	 4.12896   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 73, r2: 73, leftOrthog: 1)                      	 0.0296129 	 100       	 89.9777   	 0         	 15.0788   	 5.96717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 50)                         	 0.02908   	 100       	 91.6265   	 0         	 10.1879   	 8.99369   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0255775 	 100       	 73.2801   	 0         	 5.78633   	 12.6644   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 50, n: 50, r2: 73)                         	 0.0237876 	 100       	 112.012   	 0         	 15.2214   	 7.35887   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 73, r: 73, streamingCols: 0)                                 	 0.0196119 	 100       	 67.9309   	 0         	 14.9976   	 4.52944   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 73, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0133113 	 200       	 8.22313   	 0         	 1.07926   	 7.6192    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 23)                                                                                                       	 0.00505637	 808       	 0         	 0         	 67.6267   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 73)                                                                       	 0.00492156	 100       	 0         	 0         	 59.3308   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 73, m: 2500)                                                                                	 0.00458862	 100       	 0         	 0         	 63.6357   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 1) 	 0.00452329	 100       	 0.161387  	 0         	 1.29145   	 0.124966  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 2, r2: 1)                             	 0.00392333	 100       	 0.372133  	 0         	 2.2332    	 0.166636  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 73, fromLeft: 1)                              	 0.00374234	 800       	 0         	 0         	 18.2269   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 73, r: 50, streamingCols: 23)                                  	 0.0033247 	 100       	 3.75974   	 0         	 1.5039    	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 73, leftOrthog: 1)                        	 0.00323706	 100       	 11.2757   	 0         	 3.94185   	 2.8605    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 73) 	 0.00217424	 100       	 24.5097   	 0         	 4.64677   	 5.27457   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 73, r2: 73)                            	 0.00123515	 100       	 43.1445   	 0         	 8.17972   	 5.27457   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00091137	 100       	 27.4312   	 0         	 6.5835    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000865962	 100       	 0.577393  	 0         	 2.30957   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 73)                           	 0.000742271	 100       	 0         	 0         	 7.86775   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000498001	 100       	 0         	 0         	 8.03211   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                        	 0.000475727	 100       	 0         	 0         	 12.2759   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 23)                                                                                                        	 0.000440897	 101       	 0         	 0         	 4.21504   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 73)                                                                         	 0.00041289	 100       	 0         	 0         	 14.1442   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000344726	 100       	 0.725214  	 0         	 11.6034   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 1)                                                                                                        	 0.000329328	 101       	 0         	 0         	 5.64301   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 50, fromLeft: 1)                              	 0.000266355	 100       	 0         	 0         	 21.9256   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.05706   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.05703   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.88343   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.88213   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.53172   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.813852  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.756572  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.593529  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.392544  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.365202  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.353368  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.344996  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.310095  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.289673  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.134349  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0959711 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0863931 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.076826  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0128551 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00790778	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00630232	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0053229 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00400869	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122141	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000865962	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000742271	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344726	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23215794476928 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23215573297152 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23215371970688 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23215170644224 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23214969317760 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23214767991296 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23214566664832 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23214365338368 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23214164011904 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23213962685440 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23213761358976 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23213560032512 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23213358706048 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23213157379584 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23212956053120 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23212754726656 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23212553400192 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23212352073728 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23212150747264 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23211949420800 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23211748094336 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23211546767872 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23211345441408 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23211144114944 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23210942788480 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23210741462016 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23210540135552 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23210338809088 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23210137482624 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23209936156160 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23209734829696 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23209533503232 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23209332172672 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23209130846208 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23208929519744 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23208728193280 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23208526866816 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23208325540352 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23208124213888 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23207922887424 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23207721560960 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23207520234496 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23207318908032 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23207117581568 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23206916255104 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23206714928640 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23206513602176 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23206312275712 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23206110949248 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23205909622784 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23205708296320 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23205506969856 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23205305643392 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23205104316928 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23204902990464 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23204701664000 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23204500337536 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23204299011072 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23204097684608 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23203896358144 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23203695031680 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23203493705216 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23203292378752 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23215688816384 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23215682225920 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3700, cols: 74, reductionFactor: 37, colBlockingSize: 12)                                	 0.639743  	 1300      	 84.5696   	 0         	 4.54005   	 18.6275   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 74)                                                                               	 0.512783  	 700       	 3.8722    	 0         	 0.180215  	 21.4865   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 74)	 0.315146  	 700       	 50.5596   	 0         	 7.69555   	 6.56998   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 74, r2: 74, leftOrthog: 1)                      	 0.309137  	 600       	 78.6494   	 0         	 12.924    	 6.08553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 74)                           	 0.276819  	 700       	 102.47    	 0         	 11.1886   	 9.15842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 74)                         	 0.243269  	 600       	 99.9448   	 0         	 10.9129   	 9.15842   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3700, Xcols: 74, r: 74, streamingCols: 0)                                 	 0.121881  	 700       	 116.367   	 0         	 25.2861   	 4.60199   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3700, m: 74)                                                                       	 0.111074  	 700       	 0         	 0         	 27.6083   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 74, reductionFactor: 37, colBlockingSize: 12)                                	 0.0948924 	 200       	 59.2671   	 0         	 3.21165   	 18.4538   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 74)                                                                                	 0.0781631 	 900       	 6.2212    	 0         	 1.52008   	 4.09267   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 74, m: 3700)                                                                                	 0.076125  	 700       	 0         	 0         	 40.2832   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 74)                                                                               	 0.0481559 	 100       	 2.68918   	 0         	 0.165296  	 16.2688   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 50)	 0.0436582 	 100       	 35.2282   	 0         	 6.27603   	 5.61314   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0404445 	 100       	 2.16346   	 0         	 0.14934   	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 50)                           	 0.0381156 	 100       	 71.8341   	 0         	 9.70731   	 7.4       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 74, r2: 74, leftOrthog: 1)                      	 0.0320345 	 100       	 85.4705   	 0         	 14.1336   	 6.04733   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 50, r2: 50, leftOrthog: 1)                      	 0.0296902 	 100       	 62.3101   	 0         	 15.0891   	 4.12946   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0278906 	 100       	 68.1233   	 0         	 5.37816   	 12.6667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 50)                         	 0.0278117 	 100       	 98.4477   	 0         	 10.8005   	 9.1151    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 50, n: 50, r2: 74)                         	 0.0215882 	 100       	 126.829   	 0         	 17.139    	 7.4       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 74, r: 74, streamingCols: 0)                                 	 0.013373  	 100       	 102.371   	 0         	 22.298    	 4.59103   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 74, reductionFactor: 37, colBlockingSize: 12)                                  	 0.011856  	 200       	 9.48722   	 0         	 1.23833   	 7.66129   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 24)                                                                                                       	 0.00507726	 808       	 0         	 0         	 73.3321   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 74)                                                                       	 0.00501846	 100       	 0         	 0         	 58.9823   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 74, m: 2500)                                                                                	 0.00482866	 100       	 0         	 0         	 61.3007   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 1) 	 0.00468194	 100       	 0.158054  	 0         	 1.26477   	 0.124966  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 2, r2: 1)                             	 0.0040487 	 100       	 0.365549  	 0         	 2.19369   	 0.166637  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 74, fromLeft: 1)                              	 0.00347976	 800       	 0         	 0         	 20.143    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 74, r: 50, streamingCols: 24)                                  	 0.00312553	 100       	 3.99932   	 0         	 1.59973   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 74) 	 0.00213285	 100       	 25.6746   	 0         	 4.82959   	 5.31609   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 74, leftOrthog: 1)                        	 0.00157012	 100       	 23.5651   	 0         	 8.20321   	 2.87267   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 74, r2: 74)                            	 0.0011707 	 100       	 46.7754   	 0         	 8.79884   	 5.31609   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000947736	 100       	 26.3787   	 0         	 6.33088   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000896444	 100       	 0.557759  	 0         	 2.23104   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 74)                           	 0.000789986	 100       	 0         	 0         	 7.4938    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                        	 0.00048854	 100       	 0         	 0         	 12.1177   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000483341	 100       	 0         	 0         	 8.27573   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 24)                                                                                                        	 0.000444901	 101       	 0         	 0         	 4.35872   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 74)                                                                         	 0.00040506	 100       	 0         	 0         	 14.6151   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 1)                                                                                                        	 0.000372439	 101       	 0         	 0         	 5.20676   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333555	 100       	 0.749502  	 0         	 11.992    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 50, fromLeft: 1)                              	 0.000265561	 100       	 0         	 0         	 22.2924   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.1675    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.16748   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.93638   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.93506   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.59871   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.847335  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.774382  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.601383  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.404041  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.372432  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.371583  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.365619  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.320154  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.293616  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.138379  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.116497  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.081437  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0781631 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0132166 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.010444  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00638314	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00537464	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00374533	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00115523	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000896444	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000789986	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333555	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23128144201600 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23127929120768 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23127727794304 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23127526467840 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23127325141376 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23127123814912 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23126922488448 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23126721161984 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23126519835520 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23126318509056 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23126117182592 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23125915856128 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23125714529664 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23125513203200 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23125311876736 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23125110550272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23124909223808 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23124707897344 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23124506570880 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23124305244416 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23124103917952 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23123902591488 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23123701265024 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23123499938560 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23123298612096 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23123097285632 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23122895959168 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23122694632704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23122493306240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23122291979776 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23122090653312 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23121889326848 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23121687996288 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23121486669824 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23121285343360 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23121084016896 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23120882690432 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23120681363968 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23120480037504 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23120278711040 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23120077384576 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23119876058112 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23119674731648 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23119473405184 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23119272078720 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23119070752256 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23118869425792 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23118668099328 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23118466772864 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23118265446400 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23118064119936 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23117862793472 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23117661467008 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23117460140544 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23117258814080 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23117057487616 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23116856161152 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23116654834688 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23116453508224 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23116252181760 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23116050855296 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23115849528832 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23115648202368 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23128038541056 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23128031950592 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750, cols: 75, reductionFactor: 37, colBlockingSize: 12)                                	 0.654375  	 1300      	 86.0761   	 0         	 4.55931   	 18.8792   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 75)                                                                               	 0.513863  	 700       	 4.02284   	 0         	 0.184719  	 21.7782   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 75)	 0.320482  	 700       	 51.1925   	 0         	 7.74303   	 6.61142   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 75)                           	 0.282951  	 700       	 104.369   	 0         	 11.244    	 9.28218   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 75, r2: 75, leftOrthog: 1)                      	 0.267428  	 600       	 94.6515   	 0         	 15.3462   	 6.16776   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 75)                         	 0.240941  	 600       	 105.057   	 0         	 11.3181   	 9.28218   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3750, Xcols: 75, r: 75, streamingCols: 0)                                 	 0.114181  	 700       	 129.318   	 0         	 27.7258   	 4.66418   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3750, m: 75)                                                                       	 0.106316  	 700       	 0         	 0         	 29.6286   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 75, reductionFactor: 37, colBlockingSize: 12)                                	 0.0964907 	 200       	 59.8714   	 0         	 3.20238   	 18.6959   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 75)                                                                                	 0.0828728 	 900       	 6.10876   	 0         	 1.47262   	 4.14823   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 75, m: 3750)                                                                                	 0.0821016 	 700       	 0         	 0         	 38.3671   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 75)                                                                               	 0.0479102 	 100       	 2.7395    	 0         	 0.167814  	 16.3246   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0398054 	 100       	 2.19819   	 0         	 0.151738  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 50)	 0.0387986 	 100       	 40.2721   	 0         	 7.16521   	 5.6205    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 50)                           	 0.0326804 	 100       	 86.0608   	 0         	 11.5666   	 7.44048   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 75, r2: 75, leftOrthog: 1)                      	 0.030387  	 100       	 92.5559   	 0         	 15.1051   	 6.12745   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0297375 	 100       	 63.0518   	 0         	 15.2669   	 4.12996   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 50)                         	 0.0265153 	 100       	 106.071   	 0         	 11.4839   	 9.23645   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0252568 	 100       	 76.2439   	 0         	 6.01818   	 12.6689   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 50, n: 50, r2: 75)                         	 0.0251626 	 100       	 111.773   	 0         	 15.0223   	 7.44048   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 75, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0139596 	 200       	 8.2768    	 0         	 1.07453   	 7.7027    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 75, r: 75, streamingCols: 0)                                 	 0.0132223 	 100       	 106.355   	 0         	 22.8591   	 4.65261   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 75)                                                                       	 0.00677575	 100       	 0         	 0         	 44.2756   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 25)                                                                                                       	 0.00538705	 808       	 0         	 0         	 74.9946   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 75, m: 2500)                                                                                	 0.00479231	 100       	 0         	 0         	 62.6003   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 1) 	 0.00459938	 100       	 0.163066  	 0         	 1.30487   	 0.124967  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 2, r2: 1)                             	 0.00397476	 100       	 0.377381  	 0         	 2.26469   	 0.166637  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 75, fromLeft: 1)                              	 0.00337782	 800       	 0         	 0         	 21.3155   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 75, r: 50, streamingCols: 25)                                  	 0.00314616	 100       	 3.97309   	 0         	 1.58924   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 75) 	 0.00213698	 100       	 26.3221   	 0         	 4.91347   	 5.35714   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 75, leftOrthog: 1)                        	 0.00152079	 100       	 24.6583   	 0         	 8.54821   	 2.88462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 75, r2: 75)                            	 0.00120015	 100       	 46.8691   	 0         	 8.74891   	 5.35714   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000884925	 100       	 0.56502   	 0         	 2.26008   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000852863	 100       	 29.313    	 0         	 7.03513   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 75)                           	 0.000765131	 100       	 0         	 0         	 7.84179   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 25)                                                                                                        	 0.000500388	 101       	 0         	 0         	 4.03687   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000486265	 100       	 0         	 0         	 8.22597   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                        	 0.000475829	 100       	 0         	 0         	 12.6096   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 75)                                                                         	 0.000425455	 100       	 0         	 0         	 14.1025   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 1)                                                                                                        	 0.000353058	 101       	 0         	 0         	 5.72144   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000324899	 100       	 0.76947   	 0         	 12.3115   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 50, fromLeft: 1)                              	 0.000275025	 100       	 0         	 0         	 21.8162   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.11425   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.11422   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.89361   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.89232   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.55833   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.848502  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.790082  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.601578  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.409228  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.382076  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.366017  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.329074  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.320806  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.293472  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.130549  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.113517  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0873802 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0828728 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0133294 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00793894	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00671633	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00445961	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00365284	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00106748	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000884925	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000765131	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324899	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23304544262016 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23304358324224 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23304156997760 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23303955671296 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23303754344832 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23303553018368 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23303351691904 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23303150365440 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23302949038976 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23302747712512 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23302546386048 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23302345059584 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23302143733120 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23301942406656 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23301741080192 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23301539753728 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23301338427264 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23301137100800 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23300935774336 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23300734447872 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23300533121408 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23300331794944 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23300130468480 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23299929142016 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23299727815552 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23299526489088 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23299325162624 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23299123836160 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23298922509696 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23298721183232 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23298519856768 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23298318530304 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23298117199744 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23297915873280 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23297714546816 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23297513220352 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23297311893888 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23297110567424 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23296909240960 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23296707914496 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23296506588032 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23296305261568 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23296103935104 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23295902608640 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23295701282176 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23295499955712 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23295298629248 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23295097302784 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23294895976320 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23294694649856 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23294493323392 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23294291996928 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23294090670464 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23293889344000 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23293688017536 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23293486691072 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23293285364608 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23293084038144 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23292882711680 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23292681385216 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23292480058752 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23292278732288 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23292077405824 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23304438601472 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23304432011008 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3800, cols: 76, reductionFactor: 37, colBlockingSize: 12)                                	 0.657409  	 1300      	 89.1518   	 0         	 4.6601    	 19.1309   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 76)                                                                               	 0.517512  	 700       	 4.15639   	 0         	 0.188329  	 22.0699   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 76)	 0.321546  	 700       	 52.5471   	 0         	 7.89592   	 6.65496   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 76)                           	 0.28368   	 700       	 108.32    	 0         	 11.5162   	 9.40594   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 76, r2: 76, leftOrthog: 1)                      	 0.274753  	 600       	 95.8628   	 0         	 15.338    	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 76)                         	 0.239892  	 600       	 109.793   	 0         	 11.6728   	 9.40594   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3800, Xcols: 76, r: 76, streamingCols: 0)                                 	 0.117783  	 700       	 130.445   	 0         	 27.5993   	 4.72637   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 76, m: 3800)                                                                                	 0.103677  	 700       	 0         	 0         	 31.1984   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 76, reductionFactor: 37, colBlockingSize: 12)                                	 0.0981127 	 200       	 60.4622   	 0         	 3.19267   	 18.9378   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3800, m: 76)                                                                       	 0.0906838 	 700       	 0         	 0         	 35.6685   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 76)                                                                                	 0.0795535 	 900       	 6.62158   	 0         	 1.57515   	 4.20377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 76)                                                                               	 0.047403  	 100       	 2.80573   	 0         	 0.171297  	 16.3793   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0396558 	 100       	 2.20649   	 0         	 0.152311  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 50)	 0.0381429 	 100       	 41.633    	 0         	 7.39536   	 5.62961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 50)                           	 0.0316005 	 100       	 91.3909   	 0         	 12.2175   	 7.48031   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 76, r2: 76, leftOrthog: 1)                      	 0.0313724 	 100       	 92.0556   	 0         	 14.8297   	 6.20753   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 50, r2: 50, leftOrthog: 1)                      	 0.0304705 	 100       	 62.3554   	 0         	 15.0966   	 4.13043   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 50)                         	 0.0261004 	 100       	 110.65    	 0         	 11.8244   	 9.35776   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.025519  	 100       	 76.4666   	 0         	 6.03471   	 12.6711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 50, n: 50, r2: 76)                         	 0.0248522 	 100       	 116.207   	 0         	 15.535    	 7.48031   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 76, r: 76, streamingCols: 0)                                 	 0.013288  	 100       	 108.669   	 0         	 23.0516   	 4.71417   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 76, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0121199 	 200       	 9.78907   	 0         	 1.26417   	 7.74346   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 76, m: 2500)                                                                                	 0.00882863	 100       	 0         	 0         	 34.4334   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 26)                                                                                                       	 0.00600826	 808       	 0         	 0         	 72.7276   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 76)                                                                       	 0.0053332 	 100       	 0         	 0         	 57.0014   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 1) 	 0.00465534	 100       	 0.163253  	 0         	 1.30637   	 0.124967  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 2, r2: 1)                             	 0.00405278	 100       	 0.375051  	 0         	 2.2507    	 0.166637  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 76, fromLeft: 1)                              	 0.0036733 	 800       	 0         	 0         	 20.1271   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 76, r: 50, streamingCols: 26)                                  	 0.00321529	 100       	 3.88767   	 0         	 1.55507   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 76) 	 0.00209099	 100       	 27.6233   	 0         	 5.11759   	 5.39773   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 76, leftOrthog: 1)                        	 0.00138952	 100       	 27.3475   	 0         	 9.4421    	 2.89634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 76, r2: 76)                            	 0.00117768	 100       	 49.0457   	 0         	 9.08637   	 5.39773   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000852967	 100       	 29.3095   	 0         	 7.03427   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000807774	 100       	 0.618985  	 0         	 2.47594   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 76)                           	 0.000726355	 100       	 0         	 0         	 8.37056   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00050339	 100       	 0         	 0         	 7.94613   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                        	 0.000470413	 100       	 0         	 0         	 12.9248   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 26)                                                                                                        	 0.000448743	 101       	 0         	 0         	 4.68152   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 76)                                                                         	 0.000385584	 100       	 0         	 0         	 15.7683   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 1)                                                                                                        	 0.000345066	 101       	 0         	 0         	 6.08811   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000324637	 100       	 0.770091  	 0         	 12.3215   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 50, fromLeft: 1)                              	 0.000278149	 100       	 0         	 0         	 21.8588   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.14424   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.14421   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.91255   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.91132   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.57033   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.858567  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.793161  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.604571  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.410664  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.383669  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.366436  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.337985  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.320511  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.291698  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.134286  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.113009  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0964026 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0795535 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0134591 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00788831	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00727248	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00472197	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00395145	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00115464	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000807774	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000726355	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324637	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23271339698048 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23271139436544 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23270938110080 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23270736783616 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23270535457152 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23270334130688 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23270132804224 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23269931477760 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23269730151296 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23269528824832 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23269327498368 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23269126171904 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23268924845440 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23268723518976 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23268522192512 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23268320866048 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23268119539584 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23267918213120 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23267716886656 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23267515560192 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23267314233728 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23267112907264 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23266911580800 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23266710254336 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23266508927872 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23266307601408 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23266106274944 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23265904948480 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23265703622016 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23265502295552 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23265300969088 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23265099642624 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23264898312064 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23264696985600 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23264495659136 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23264294332672 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23264093006208 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23263891679744 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23263690353280 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23263489026816 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23263287700352 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23263086373888 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23262885047424 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23262683720960 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23262482394496 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23262281068032 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23262079741568 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23261878415104 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23261677088640 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23261475762176 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23261274435712 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23261073109248 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23260871782784 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23260670456320 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23260469129856 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23260267803392 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23260066476928 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23259865150464 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23259663824000 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23259462497536 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23259261171072 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23259059844608 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23258858518144 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23271234037504 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23271227447040 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3850, cols: 77, reductionFactor: 37, colBlockingSize: 12)                                	 0.669865  	 1300      	 90.9935   	 0         	 4.69459   	 19.3826   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 77)                                                                               	 0.559651  	 700       	 3.99715   	 0         	 0.178751  	 22.3615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 77)	 0.332125  	 700       	 52.4028   	 0         	 7.82067   	 6.70056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 77)                           	 0.293978  	 700       	 108.706   	 0         	 11.4071   	 9.5297    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 77, r2: 77, leftOrthog: 1)                      	 0.276424  	 600       	 99.0942   	 0         	 15.6492   	 6.33224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 77)                         	 0.247611  	 600       	 110.625   	 0         	 11.6084   	 9.5297    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3850, Xcols: 77, r: 77, streamingCols: 0)                                 	 0.121223  	 700       	 131.812   	 0         	 27.5264   	 4.78856   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 77, reductionFactor: 37, colBlockingSize: 12)                                	 0.0985643 	 200       	 61.7794   	 0         	 3.22111   	 19.1795   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3850, m: 77)                                                                       	 0.0877128 	 700       	 0         	 0         	 37.8535   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 77)                                                                                	 0.0864025 	 900       	 6.34054   	 0         	 1.48862   	 4.25933   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 77, m: 3850)                                                                                	 0.0824586 	 700       	 0         	 0         	 40.2655   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 77)                                                                               	 0.0472385 	 100       	 2.85254   	 0         	 0.173587  	 16.4329   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0383973 	 100       	 2.27881   	 0         	 0.157303  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 50)	 0.0376093 	 100       	 42.9282   	 0         	 7.61089   	 5.64037   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 77, r2: 77, leftOrthog: 1)                      	 0.0313438 	 100       	 94.58     	 0         	 15.0424   	 6.28756   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 50)                           	 0.030917  	 100       	 95.8856   	 0         	 12.7515   	 7.51953   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 50, r2: 50, leftOrthog: 1)                      	 0.0303086 	 100       	 63.5134   	 0         	 15.3752   	 4.1309    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 50)                         	 0.0270084 	 100       	 109.762   	 0         	 11.5795   	 9.47902   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0254043 	 100       	 77.8227   	 0         	 6.1407    	 12.6733   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 50, n: 50, r2: 77)                         	 0.0249673 	 100       	 118.735   	 0         	 15.7903   	 7.51953   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 77, r: 77, streamingCols: 0)                                 	 0.013256  	 100       	 111.818   	 0         	 23.4138   	 4.77573   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 77, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0117682 	 200       	 10.3486   	 0         	 1.32955   	 7.78357   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 77)                                                                       	 0.00620157	 100       	 0         	 0         	 49.6649   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 27)                                                                                                       	 0.00581148	 808       	 0         	 0         	 81.0853   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 1) 	 0.00487869	 100       	 0.157829  	 0         	 1.26296   	 0.124968  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 77, m: 2500)                                                                                	 0.00486472	 100       	 0         	 0         	 63.3129   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 2, r2: 1)                             	 0.00424967	 100       	 0.362381  	 0         	 2.17466   	 0.166638  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 77, fromLeft: 1)                              	 0.00380885	 800       	 0         	 0         	 19.925    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 77, r: 50, streamingCols: 27)                                  	 0.00306201	 100       	 4.08228   	 0         	 1.63291   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 77) 	 0.00209435	 100       	 28.3095   	 0         	 5.20601   	 5.43785   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 77, leftOrthog: 1)                        	 0.00144945	 100       	 26.5619   	 0         	 9.13453   	 2.90785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 77, r2: 77)                            	 0.00117969	 100       	 50.2591   	 0         	 9.24246   	 5.43785   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000875176	 100       	 0.571314  	 0         	 2.28525   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0008301 	 100       	 30.1169   	 0         	 7.22804   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 77)                           	 0.000740097	 100       	 0         	 0         	 8.32323   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 27)                                                                                                        	 0.000487185	 101       	 0         	 0         	 4.47797   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000486351	 100       	 0         	 0         	 8.22451   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                        	 0.000477181	 100       	 0         	 0         	 12.9091   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 77)                                                                         	 0.000404295	 100       	 0         	 0         	 15.2364   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 1)                                                                                                        	 0.000322671	 101       	 0         	 0         	 6.76107   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000320989	 100       	 0.778843  	 0         	 12.4615   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 50, fromLeft: 1)                              	 0.000276446	 100       	 0         	 0         	 22.2828   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.19654   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.19651   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.95814   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.95685   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.61979   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.853952  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.805602  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.645287  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.421742  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.384966  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.376708  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.339525  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.330325  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.300417  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.137541  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0943187 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0878097 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0864025 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0137844 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00709852	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00639818	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00457871	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00408529	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00117192	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000875176	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000740097	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000320989	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23086668806016 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23086455842816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23086254516352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23086053189888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23085851863424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23085650536960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23085449210496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23085247884032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23085046557568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23084845231104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23084643904640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23084442578176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23084241251712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23084039925248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23083838598784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23083637272320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23083435945856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23083234619392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23083033292928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23082831966464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23082630640000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23082429313536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23082227987072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23082026660608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23081825334144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23081624007680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23081422681216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23081221354752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23081020028288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23080818701824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23080617375360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23080416048896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23080214718336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23080013391872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23079812065408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23079610738944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23079409412480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23079208086016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23079006759552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23078805433088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23078604106624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23078402780160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23078201453696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23078000127232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23077798800768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23077597474304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23077396147840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23077194821376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23076993494912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23076792168448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23076590841984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23076389515520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23076188189056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23075986862592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23075785536128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23075584209664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23075382883200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23075181556736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23074980230272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23074778903808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23074577577344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23074376250880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23074174924416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23086563145472 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23086556555008 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3900, cols: 78, reductionFactor: 37, colBlockingSize: 12)                                	 0.680996  	 1300      	 93.0388   	 0         	 4.73858   	 19.6343   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 78)                                                                               	 0.538256  	 700       	 4.32007   	 0         	 0.190705  	 22.6532   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 78)	 0.349897  	 700       	 51.2455   	 0         	 7.59397   	 6.74817   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 78, r2: 78, leftOrthog: 1)                      	 0.308902  	 600       	 92.1753   	 0         	 14.3699   	 6.41447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 78)                           	 0.307675  	 700       	 107.967   	 0         	 11.1842   	 9.65347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 78)                         	 0.254682  	 600       	 111.799   	 0         	 11.5812   	 9.65347   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3900, Xcols: 78, r: 78, streamingCols: 0)                                 	 0.128896  	 700       	 128.858   	 0         	 26.5646   	 4.85075   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3900, m: 78)                                                                       	 0.115429  	 700       	 0         	 0         	 29.5163   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 78, reductionFactor: 37, colBlockingSize: 12)                                	 0.100402  	 200       	 62.2342   	 0         	 3.20447   	 19.4211   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 78)                                                                                	 0.0888438 	 900       	 6.40971   	 0         	 1.48548   	 4.31489   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 78, m: 3900)                                                                                	 0.087062  	 700       	 0         	 0         	 39.1335   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 78)                                                                               	 0.0493324 	 100       	 2.76694   	 0         	 0.167841  	 16.4855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 50)	 0.0393322 	 100       	 41.7469   	 0         	 7.38529   	 5.65271   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0388709 	 100       	 2.25104   	 0         	 0.155386  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 50)                           	 0.0329553 	 100       	 92.3068   	 0         	 12.2129   	 7.55814   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 78, r2: 78, leftOrthog: 1)                      	 0.0326382 	 100       	 93.2038   	 0         	 14.6373   	 6.36755   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 50, r2: 50, leftOrthog: 1)                      	 0.0308585 	 100       	 63.1917   	 0         	 15.2956   	 4.13136   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 50)                         	 0.0272208 	 100       	 111.753   	 0         	 11.6406   	 9.60024   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.02562   	 100       	 78.1695   	 0         	 6.16706   	 12.6753   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 50, n: 50, r2: 78)                         	 0.0244723 	 100       	 124.304   	 0         	 16.4464   	 7.55814   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 78, r: 78, streamingCols: 0)                                 	 0.0137977 	 100       	 110.236   	 0         	 22.7888   	 4.83727   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 78, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0118628 	 200       	 10.5345   	 0         	 1.3466    	 7.82306   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 28)                                                                                                       	 0.0057882 	 808       	 0         	 0         	 87.5536   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 78)                                                                       	 0.00566557	 100       	 0         	 0         	 55.0695   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 78, m: 2500)                                                                                	 0.00511793	 100       	 0         	 0         	 60.9622   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 1) 	 0.00472845	 100       	 0.164959  	 0         	 1.32001   	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 2, r2: 1)                             	 0.0040914 	 100       	 0.381288  	 0         	 2.28812   	 0.166638  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 78, fromLeft: 1)                              	 0.00357939	 800       	 0         	 0         	 21.7566   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 78, r: 50, streamingCols: 28)                                  	 0.00300703	 100       	 4.15693   	 0         	 1.66277   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 78) 	 0.00210336	 100       	 28.9252   	 0         	 5.2807    	 5.47753   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 78, leftOrthog: 1)                        	 0.00149284	 100       	 26.1246   	 0         	 8.94937   	 2.91916   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 78, r2: 78)                            	 0.00116584	 100       	 52.1855   	 0         	 9.52719   	 5.47753   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000868621	 100       	 0.575625  	 0         	 2.3025    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000833273	 100       	 30.0022   	 0         	 7.20052   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 78)                           	 0.000767788	 100       	 0         	 0         	 8.12724   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                        	 0.000481801	 100       	 0         	 0         	 12.9514   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000480604	 100       	 0         	 0         	 8.32286   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 28)                                                                                                        	 0.000448242	 101       	 0         	 0         	 5.04727   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 78)                                                                         	 0.000403303	 100       	 0         	 0         	 15.4722   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 1)                                                                                                        	 0.00035351	 101       	 0         	 0         	 6.39982   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000317302	 100       	 0.787893  	 0         	 12.6063   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 50, fromLeft: 1)                              	 0.000282737	 100       	 0         	 0         	 22.07     	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.32308   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.32306   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.02116   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.01988   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.65566   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.901655  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.818881  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.626459  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.425006  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.396061  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.394837  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.373891  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.345888  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.307208  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.145701  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.121498  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0926605 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0888438 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0141055 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00995978	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00707175	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00511949	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00386212	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00125623	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000868621	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000767788	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000317302	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23382595839872 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23382405933056 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23382204606592 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23382003280128 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23381801953664 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23381600627200 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23381399300736 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23381197974272 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23380996647808 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23380795321344 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23380593994880 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23380392668416 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23380191341952 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23379990015488 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23379788689024 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23379587362560 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23379386036096 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23379184709632 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23378983383168 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23378782056704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23378580730240 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23378379403776 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23378178077312 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23377976750848 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23377775424384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23377574097920 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23377372771456 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23377171444992 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23376970118528 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23376768792064 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23376567465600 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23376366139136 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23376164808576 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23375963482112 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23375762155648 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23375560829184 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23375359502720 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23375158176256 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23374956849792 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23374755523328 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23374554196864 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23374352870400 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23374151543936 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23373950217472 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23373748891008 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23373547564544 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23373346238080 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23373144911616 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23372943585152 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23372742258688 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23372540932224 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23372339605760 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23372138279296 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23371936952832 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23371735626368 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23371534299904 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23371332973440 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23371131646976 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23370930320512 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23370728994048 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23370527667584 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23370326341120 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23370125014656 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23382490179328 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23382483588864 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3950, cols: 79, reductionFactor: 37, colBlockingSize: 12)                                	 0.691471  	 1300      	 95.199    	 0         	 4.78722   	 19.8861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 79)                                                                               	 0.556816  	 700       	 4.33876   	 0         	 0.189095  	 22.9448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 79)	 0.357765  	 700       	 51.642    	 0         	 7.5969    	 6.79777   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 79)                           	 0.314857  	 700       	 109.614   	 0         	 11.2112   	 9.77723   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 79, r2: 79, leftOrthog: 1)                      	 0.305287  	 600       	 96.9002   	 0         	 14.9153   	 6.49671   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 79)                         	 0.262602  	 600       	 112.651   	 0         	 11.5218   	 9.77723   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3950, Xcols: 79, r: 79, streamingCols: 0)                                 	 0.127455  	 700       	 135.392   	 0         	 27.5583   	 4.91294   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 79, reductionFactor: 37, colBlockingSize: 12)                                	 0.103164  	 200       	 62.1309   	 0         	 3.15987   	 19.6625   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3950, m: 79)                                                                       	 0.0931982 	 700       	 0         	 0         	 37.5003   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 79, m: 3950)                                                                                	 0.0926342 	 700       	 0         	 0         	 37.7286   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 79)                                                                                	 0.0918193 	 900       	 6.44359   	 0         	 1.47436   	 4.37044   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 79)                                                                               	 0.0490205 	 100       	 2.82025   	 0         	 0.170541  	 16.5371   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 50)	 0.0395488 	 100       	 42.239    	 0         	 7.45408   	 5.66655   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0388876 	 100       	 2.25007   	 0         	 0.155319  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 50)                           	 0.0331364 	 100       	 94.1714   	 0         	 12.3972   	 7.59615   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 79, r2: 79, leftOrthog: 1)                      	 0.0324209 	 100       	 96.2498   	 0         	 14.9282   	 6.44751   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 50)                         	 0.0273118 	 100       	 114.255   	 0         	 11.7529   	 9.7214    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0254545 	 100       	 79.6864   	 0         	 6.28573   	 12.6774   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 50, r2: 50, leftOrthog: 1)                      	 0.023357  	 100       	 84.5572   	 0         	 20.465    	 4.1318    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 50, n: 50, r2: 79)                         	 0.0226325 	 100       	 137.877   	 0         	 18.1509   	 7.59615   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 79, r: 79, streamingCols: 0)                                 	 0.0138998 	 100       	 112.25    	 0         	 22.9138   	 4.8988    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 79, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0116807 	 200       	 10.9748   	 0         	 1.39594   	 7.86193   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 29)                                                                                                       	 0.00633381	 808       	 0         	 0         	 85.8286   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 79)                                                                       	 0.00537247	 100       	 0         	 0         	 58.8183   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 79, m: 2500)                                                                                	 0.0050282 	 100       	 0         	 0         	 62.8456   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 1) 	 0.00450055	 100       	 0.175534  	 0         	 1.40463   	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 2, r2: 1)                             	 0.0038546 	 100       	 0.4099    	 0         	 2.45981   	 0.166639  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 79, fromLeft: 1)                              	 0.00379182	 800       	 0         	 0         	 21.0677   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 79, r: 50, streamingCols: 29)                                  	 0.00321001	 100       	 3.89407   	 0         	 1.55763   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 79) 	 0.00214404	 100       	 29.1085   	 0         	 5.27638   	 5.51676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 79, leftOrthog: 1)                        	 0.00162426	 100       	 24.3187   	 0         	 8.29914   	 2.93027   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 79, r2: 79)                            	 0.00118186	 100       	 52.8065   	 0         	 9.57202   	 5.51676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000834514	 100       	 29.9576   	 0         	 7.18981   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000791115	 100       	 0.632019  	 0         	 2.52808   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 79)                           	 0.000769115	 100       	 0         	 0         	 8.21724   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000511432	 100       	 0         	 0         	 7.82118   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                        	 0.000475006	 100       	 0         	 0         	 13.3051   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 29)                                                                                                        	 0.000439891	 101       	 0         	 0         	 5.32677   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 79)                                                                         	 0.000412902	 100       	 0         	 0         	 15.3063   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 1)                                                                                                        	 0.000356848	 101       	 0         	 0         	 6.56638   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333439	 100       	 0.749762  	 0         	 11.9962   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 50, fromLeft: 1)                              	 0.000299979	 100       	 0         	 0         	 21.0681   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.36995   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.36992   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.05911   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.05789   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.68587   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.898285  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.83177   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.644724  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.43547   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.403959  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.397641  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.362689  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.353029  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.313381  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.144564  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0989835 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0981738 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0918193 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0143631 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00952517	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00760556	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00506687	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0040918 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0011025 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000791115	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000769115	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333439	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23199132583808 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23198930298880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23198728972416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23198527645952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23198326319488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23198124993024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23197923666560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23197722340096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23197521013632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23197319687168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23197118360704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23196917034240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23196715707776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23196514381312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23196313054848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23196111728384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23195910401920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23195709075456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23195507748992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23195306422528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23195105096064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23194903769600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23194702443136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23194501116672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23194299790208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23194098463744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23193897137280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23193695810816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23193494484352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23193293157888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23193091831424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23192890504960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23192689174400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23192487847936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23192286521472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23192085195008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23191883868544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23191682542080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23191481215616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23191279889152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23191078562688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23190877236224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23190675909760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23190474583296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23190273256832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23190071930368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23189870603904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23189669277440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23189467950976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23189266624512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23189065298048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23188863971584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23188662645120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23188461318656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23188259992192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23188058665728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23187857339264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23187656012800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23187454686336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23187253359872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23187052033408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23186850706944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23186649380480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23199026923264 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23199020332800 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4000, cols: 80, reductionFactor: 37, colBlockingSize: 12)                                	 0.722207  	 1300      	 94.6528   	 0         	 4.70026   	 20.1378   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 80)                                                                               	 0.56571   	 700       	 4.43478   	 0         	 0.190854  	 23.2365   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 80)	 0.40605   	 700       	 46.8907   	 0         	 6.84605   	 6.84932   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 80, r2: 80, leftOrthog: 1)                      	 0.340193  	 600       	 90.3017   	 0         	 13.7259   	 6.57895   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 80)                           	 0.327836  	 700       	 109.323   	 0         	 11.0416   	 9.90099   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 80)                         	 0.267251  	 600       	 114.948   	 0         	 11.6098   	 9.90099   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4000, Xcols: 80, r: 80, streamingCols: 0)                                 	 0.131387  	 700       	 136.391   	 0         	 27.4145   	 4.97512   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 80, reductionFactor: 37, colBlockingSize: 12)                                	 0.106515  	 200       	 61.7092   	 0         	 3.1004    	 19.9036   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 80)                                                                                	 0.0923182 	 900       	 6.65523   	 0         	 1.50367   	 4.426     
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 80, m: 4000)                                                                                	 0.0906717 	 700       	 0         	 0         	 39.5272   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 80)                                                                               	 0.0489909 	 100       	 2.85767   	 0         	 0.172277  	 16.5877   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4000, m: 80)                                                                       	 0.044441  	 700       	 0         	 0         	 80.6463   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0379945 	 100       	 2.30297   	 0         	 0.15897   	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 50)	 0.0378831 	 100       	 44.8749   	 0         	 7.89797   	 5.68182   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 80, r2: 80, leftOrthog: 1)                      	 0.0333655 	 100       	 95.9075   	 0         	 14.693    	 6.52742   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 50)                           	 0.0324594 	 100       	 98.5848   	 0         	 12.9146   	 7.63359   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 50, r2: 50, leftOrthog: 1)                      	 0.0320249 	 100       	 62.4513   	 0         	 15.1132   	 4.13223   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 50)                         	 0.030894  	 100       	 103.58    	 0         	 10.5237   	 9.84252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 50, n: 50, r2: 80)                         	 0.0270528 	 100       	 118.287   	 0         	 15.4956   	 7.63359   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0257822 	 100       	 79.6695   	 0         	 6.28341   	 12.6793   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 80, r: 80, streamingCols: 0)                                 	 0.0180365 	 100       	 88.7088   	 0         	 17.8837   	 4.96032   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 80, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0134374 	 200       	 9.78307   	 0         	 1.23833   	 7.90021   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 30)                                                                                                       	 0.00671337	 808       	 0         	 0         	 86.657    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 80, m: 2500)                                                                                	 0.00582978	 100       	 0         	 0         	 54.8906   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 80)                                                                       	 0.00551896	 100       	 0         	 0         	 57.9819   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 1) 	 0.00455231	 100       	 0.175735  	 0         	 1.40623   	 0.124969  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 80, fromLeft: 1)                              	 0.00394683	 800       	 0         	 0         	 20.7559   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 2, r2: 1)                             	 0.00393763	 100       	 0.406336  	 0         	 2.43842   	 0.166639  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 80, r: 50, streamingCols: 30)                                  	 0.00312358	 100       	 4.00182   	 0         	 1.60073   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 80) 	 0.00210478	 100       	 30.407    	 0         	 5.47326   	 5.55556   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 80, leftOrthog: 1)                        	 0.00153117	 100       	 26.1239   	 0         	 8.88213   	 2.94118   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 80, r2: 80)                            	 0.0011768 	 100       	 54.3847   	 0         	 9.78925   	 5.55556   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000877821	 100       	 0.569592  	 0         	 2.27837   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000871495	 100       	 28.6863   	 0         	 6.88472   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 80)                           	 0.000767731	 100       	 0         	 0         	 8.33625   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 30)                                                                                                        	 0.000487934	 101       	 0         	 0         	 4.96789   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000483959	 100       	 0         	 0         	 8.26516   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                        	 0.000476027	 100       	 0         	 0         	 13.4446   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 80)                                                                         	 0.000412323	 100       	 0         	 0         	 15.5218   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 1)                                                                                                        	 0.000360828	 101       	 0         	 0         	 6.71788   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000324287	 100       	 0.770922  	 0         	 12.3348   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 50, fromLeft: 1)                              	 0.0002896 	 100       	 0         	 0         	 22.0994   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.48058   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.48055   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.15017   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.14887   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.74653   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.867942  	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.867811  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.652695  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.457385  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.450591  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.411718  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.407114  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.36541   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.326069  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.152547  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0969855 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0923182 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0503723 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0145673 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00803815	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00466861	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00423643	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00276584	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00235819	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000877821	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000767731	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324287	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22862867109760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22862647781376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22862446454912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22862245128448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22862043801984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22861842475520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22861641149056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22861439822592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22861238496128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22861037169664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22860835843200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22860634516736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22860433190272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22860231863808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22860030537344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22859829210880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22859627884416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22859426557952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22859225231488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22859023905024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22858822578560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22858621252096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22858419925632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22858218599168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22858017272704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22857815946240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22857614619776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22857413293312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22857211966848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22857010640384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22856809313920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22856607987456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22856406656896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22856205330432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22856004003968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22855802677504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22855601351040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22855400024576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22855198698112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22854997371648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22854796045184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22854594718720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22854393392256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22854192065792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22853990739328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22853789412864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22853588086400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22853386759936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22853185433472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22852984107008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22852782780544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22852581454080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22852380127616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22852178801152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22851977474688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22851776148224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22851574821760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22851373495296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22851172168832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22850970842368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22850769515904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22850568189440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22850366862976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22862761449216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22862754858752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4050, cols: 81, reductionFactor: 37, colBlockingSize: 12)                                	 0.740989  	 1300      	 95.7566   	 0         	 4.69636   	 20.3895   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 81)                                                                               	 0.610909  	 700       	 4.2626    	 0         	 0.18117   	 23.5282   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 81)	 0.381902  	 700       	 51.3846   	 0         	 7.44406   	 6.90276   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 81)                           	 0.338765  	 700       	 109.813   	 0         	 10.9542   	 10.0248   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 81, r2: 81, leftOrthog: 1)                      	 0.332981  	 600       	 95.7607   	 0         	 14.3759   	 6.66118   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 81)                         	 0.276436  	 600       	 115.349   	 0         	 11.5064   	 10.0248   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4050, Xcols: 81, r: 81, streamingCols: 0)                                 	 0.132463  	 700       	 140.42    	 0         	 27.8759   	 5.03731   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 81, reductionFactor: 37, colBlockingSize: 12)                                	 0.110434  	 200       	 61.0166   	 0         	 3.02893   	 20.1446   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 81, m: 4050)                                                                                	 0.0976712 	 700       	 0         	 0         	 37.6176   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 81)                                                                                	 0.0962193 	 900       	 6.62787   	 0         	 1.47892   	 4.48156   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4050, m: 81)                                                                       	 0.0954516 	 700       	 0         	 0         	 38.4924   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 81)                                                                               	 0.0484042 	 100       	 2.92847   	 0         	 0.176018  	 16.6373   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 50)	 0.0417432 	 100       	 41.4559   	 0         	 7.27496   	 5.69843   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0389158 	 100       	 2.24844   	 0         	 0.155207  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 50)                           	 0.0352507 	 100       	 93.062    	 0         	 12.1325   	 7.67045   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 50, r2: 50, leftOrthog: 1)                      	 0.0347473 	 100       	 58.278    	 0         	 14.1018   	 4.13265   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 81, r2: 81, leftOrthog: 1)                      	 0.0332174 	 100       	 98.7586   	 0         	 14.9469   	 6.60728   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 50)                         	 0.0301257 	 100       	 108.894   	 0         	 10.9291   	 9.96359   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0260423 	 100       	 79.8596   	 0         	 6.29744   	 12.6813   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 50, n: 50, r2: 81)                         	 0.0260119 	 100       	 126.115   	 0         	 16.4417   	 7.67045   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 81, r: 81, streamingCols: 0)                                 	 0.0146281 	 100       	 112.13    	 0         	 22.3286   	 5.02182   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 81, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0146255 	 200       	 9.21448   	 0         	 1.16082   	 7.9379    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 31)                                                                                                       	 0.00693842	 808       	 0         	 0         	 89.529    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 81)                                                                       	 0.00588414	 100       	 0         	 0         	 55.0633   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 81, m: 2500)                                                                                	 0.00557197	 100       	 0         	 0         	 58.1482   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 1) 	 0.00487252	 100       	 0.166238  	 0         	 1.33024   	 0.124969  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 2, r2: 1)                             	 0.00418603	 100       	 0.387001  	 0         	 2.32239   	 0.166639  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 81, fromLeft: 1)                              	 0.00391146	 800       	 0         	 0         	 21.4705   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 81, r: 50, streamingCols: 31)                                  	 0.00313111	 100       	 3.99219   	 0         	 1.59688   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 81) 	 0.00217873	 100       	 30.1139   	 0         	 5.38332   	 5.59392   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 81, leftOrthog: 1)                        	 0.00161276	 100       	 25.1123   	 0         	 8.50717   	 2.9519    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 81, r2: 81)                            	 0.00122195	 100       	 53.6929   	 0         	 9.59843   	 5.59392   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000921702	 100       	 0.542475  	 0         	 2.1699    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000893488	 100       	 27.9802   	 0         	 6.71526   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 81)                           	 0.000781262	 100       	 0         	 0         	 8.29427   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                        	 0.000485944	 100       	 0         	 0         	 13.3349   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000483627	 100       	 0         	 0         	 8.27084   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 31)                                                                                                        	 0.000472855	 101       	 0         	 0         	 5.29718   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 81)                                                                         	 0.000472446	 100       	 0         	 0         	 13.7159   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 1)                                                                                                        	 0.000375411	 101       	 0         	 0         	 6.67215   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000359815	 100       	 0.694801  	 0         	 11.1168   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 50, fromLeft: 1)                              	 0.00029676	 100       	 0         	 0         	 21.8358   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.60395   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.60393   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.21625   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.21487   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.81279   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.95009   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.892091  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.698229  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.467432  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.430696  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.425881  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.402558  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.379424  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.333467  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.150222  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.103727  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.101808  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0962193 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0147975 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00883916	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00827263	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00560771	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00420822	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0011119 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000921702	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000781262	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000359815	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22581336266624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22581126096896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22580924770432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22580723443968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22580522117504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22580320791040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22580119464576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22579918138112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22579716811648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22579515485184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22579314158720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22579112832256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22578911505792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22578710179328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22578508852864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22578307526400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22578106199936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22577904873472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22577703547008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22577502220544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22577300894080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22577099567616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22576898241152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22576696914688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22576495588224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22576294261760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22576092935296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22575891608832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22575690282368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22575488955904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22575287629440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22575086302976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22574884972416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22574683645952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22574482319488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22574280993024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22574079666560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22573878340096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22573677013632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22573475687168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22573274360704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22573073034240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22572871707776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22572670381312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22572469054848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22572267728384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22572066401920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22571865075456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22571663748992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22571462422528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22571261096064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22571059769600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22570858443136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22570657116672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22570455790208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22570254463744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22570053137280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22569851810816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22569650484352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22569449157888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22569247831424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22569046504960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22568845178496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22581230606080 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22581224015616 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4100, cols: 82, reductionFactor: 37, colBlockingSize: 12)                                	 0.740809  	 1300      	 99.3713   	 0         	 4.81421   	 20.6412   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 82)                                                                               	 0.616471  	 700       	 4.38253   	 0         	 0.183987  	 23.8198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 82)	 0.376753  	 700       	 53.6897   	 0         	 7.71618   	 6.95807   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 82)                           	 0.333107  	 700       	 115.866   	 0         	 11.417    	 10.1485   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 82, r2: 82, leftOrthog: 1)                      	 0.319874  	 600       	 103.422   	 0         	 15.3367   	 6.74342   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 82)                         	 0.280189  	 600       	 118.071   	 0         	 11.6343   	 10.1485   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4100, Xcols: 82, r: 82, streamingCols: 0)                                 	 0.13487   	 700       	 143.085   	 0         	 28.0587   	 5.0995    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 82, reductionFactor: 37, colBlockingSize: 12)                                	 0.109722  	 200       	 62.9382   	 0         	 3.08741   	 20.3854   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 82)                                                                                	 0.0972347 	 900       	 6.80457   	 0         	 1.49976   	 4.5371    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 82, m: 4100)                                                                                	 0.0958279 	 700       	 0         	 0         	 39.2938   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4100, m: 82)                                                                       	 0.0576291 	 700       	 0         	 0         	 65.3392   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 82)                                                                               	 0.0485284 	 100       	 2.95703   	 0         	 0.177216  	 16.686    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 50)	 0.0403721 	 100       	 43.644    	 0         	 7.63497   	 5.71632   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0380413 	 100       	 2.30013   	 0         	 0.158775  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 50, r2: 50, leftOrthog: 1)                      	 0.0354292 	 100       	 57.8619   	 0         	 13.9998   	 4.13306   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 50)                           	 0.0344601 	 100       	 97.5621   	 0         	 12.6593   	 7.70677   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 82, r2: 82, leftOrthog: 1)                      	 0.0319685 	 100       	 105.166   	 0         	 15.7267   	 6.68711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 50)                         	 0.028774  	 100       	 116.842   	 0         	 11.5861   	 10.0846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 50, n: 50, r2: 82)                         	 0.0255516 	 100       	 131.577   	 0         	 17.0729   	 7.70677   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0252735 	 100       	 83.3047   	 0         	 6.56813   	 12.6832   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 82, r: 82, streamingCols: 0)                                 	 0.0148838 	 100       	 112.942   	 0         	 22.2181   	 5.08332   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 82, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0135594 	 200       	 10.1859   	 0         	 1.27723   	 7.97502   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 32)                                                                                                       	 0.00729391	 808       	 0         	 0         	 90.7488   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 82)                                                                       	 0.00584734	 100       	 0         	 0         	 56.0939   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 82, m: 2500)                                                                                	 0.00562964	 100       	 0         	 0         	 58.2631   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 1) 	 0.00483543	 100       	 0.169582  	 0         	 1.35698   	 0.12497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 2, r2: 1)                             	 0.00420381	 100       	 0.390123  	 0         	 2.34112   	 0.16664   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 82, fromLeft: 1)                              	 0.00402962	 800       	 0         	 0         	 21.3586   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 82, r: 50, streamingCols: 32)                                  	 0.00315697	 100       	 3.95949   	 0         	 1.5838    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 82) 	 0.0021075 	 100       	 31.9051   	 0         	 5.6651    	 5.63187   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 82, leftOrthog: 1)                        	 0.00168212	 100       	 24.374    	 0         	 8.22771   	 2.96243   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 82, r2: 82)                            	 0.00119296	 100       	 56.3642   	 0         	 10.0081   	 5.63187   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00102694	 100       	 0.486884  	 0         	 1.94754   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000893731	 100       	 27.9726   	 0         	 6.71343   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 82)                           	 0.000732039	 100       	 0         	 0         	 8.96127   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 32)                                                                                                        	 0.000487177	 101       	 0         	 0         	 5.30731   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000474919	 100       	 0         	 0         	 8.42249   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                        	 0.000467752	 100       	 0         	 0         	 14.0245   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 82)                                                                         	 0.000401079	 100       	 0         	 0         	 16.3559   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 1)                                                                                                        	 0.00035575	 101       	 0         	 0         	 7.26803   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335543	 100       	 0.745061  	 0         	 11.921    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 50, fromLeft: 1)                              	 0.000293918	 100       	 0         	 0         	 22.3192   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.52138   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.52135   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.18367   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.18221   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.79354   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.911034  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.889364  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.703041  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.464904  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.425651  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.424068  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.388954  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.372964  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.335408  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.15291   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.101932  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0972347 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0638775 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0149332 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00860459	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00494124	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00432354	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00313351	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00129265	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00102694	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000732039	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335543	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23443784279936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23443609217024 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23443407890560 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23443206564096 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23443005237632 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23442803911168 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23442602584704 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23442401258240 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23442199931776 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23441998605312 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23441797278848 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23441595952384 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23441394625920 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23441193299456 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23440991972992 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23440790646528 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23440589320064 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23440387993600 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23440186667136 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23439985340672 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23439784014208 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23439582687744 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23439381361280 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23439180034816 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23438978708352 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23438777381888 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23438576055424 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23438374728960 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23438173402496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23437972076032 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23437770749568 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23437569423104 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23437368092544 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23437166766080 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23436965439616 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23436764113152 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23436562786688 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23436361460224 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23436160133760 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23435958807296 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23435757480832 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23435556154368 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23435354827904 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23435153501440 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23434952174976 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23434750848512 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23434549522048 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23434348195584 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23434146869120 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23433945542656 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23433744216192 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23433542889728 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23433341563264 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23433140236800 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23432938910336 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23432737583872 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23432536257408 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23432334930944 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23432133604480 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23431932278016 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23431730951552 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23431529625088 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23431328298624 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23443678619392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23443500070656 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4150, cols: 83, reductionFactor: 37, colBlockingSize: 12)                                	 0.767162  	 1300      	 99.5113   	 0         	 4.76291   	 20.893    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 83)                                                                               	 0.647052  	 700       	 4.33003   	 0         	 0.179584  	 24.1115   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 83)	 0.385654  	 700       	 54.0694   	 0         	 7.70747   	 7.01519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 83, r2: 83, leftOrthog: 1)                      	 0.343901  	 600       	 99.759    	 0         	 14.6153   	 6.82566   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 83)                           	 0.340824  	 700       	 117.436   	 0         	 11.4323   	 10.2723   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 83)                         	 0.298347  	 600       	 114.991   	 0         	 11.1943   	 10.2723   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4150, Xcols: 83, r: 83, streamingCols: 0)                                 	 0.136796  	 700       	 146.294   	 0         	 28.3424   	 5.16169   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 83, reductionFactor: 37, colBlockingSize: 12)                                	 0.111659  	 200       	 63.3645   	 0         	 3.07206   	 20.626    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 83)                                                                                	 0.106254  	 900       	 6.45761   	 0         	 1.40607   	 4.59266   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4150, m: 83)                                                                       	 0.0997285 	 700       	 0         	 0         	 38.6834   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 83, m: 4150)                                                                                	 0.0992057 	 700       	 0         	 0         	 38.8873   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 83)                                                                               	 0.0478017 	 100       	 3.03859   	 0         	 0.181583  	 16.7339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 50)	 0.0415814 	 100       	 43.1563   	 0         	 7.52452   	 5.73543   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0382071 	 100       	 2.29015   	 0         	 0.158086  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 50, r2: 50, leftOrthog: 1)                      	 0.0379631 	 100       	 54.6584   	 0         	 13.2234   	 4.13347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 50)                           	 0.0350391 	 100       	 98.3043   	 0         	 12.6967   	 7.74254   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 83, r2: 83, leftOrthog: 1)                      	 0.0335502 	 100       	 102.667   	 0         	 15.1719   	 6.76689   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 50)                         	 0.0291277 	 100       	 118.255   	 0         	 11.5873   	 10.2056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 50, n: 50, r2: 83)                         	 0.0273823 	 100       	 125.793   	 0         	 16.247    	 7.74254   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.02653   	 100       	 80.3273   	 0         	 6.33246   	 12.685    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 83, r: 83, streamingCols: 0)                                 	 0.0148226 	 100       	 116.191   	 0         	 22.5841   	 5.1448    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 83, reductionFactor: 37, colBlockingSize: 12)                                  	 0.012944  	 200       	 10.932    	 0         	 1.36453   	 8.01158   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 33)                                                                                                       	 0.007454  	 808       	 0         	 0         	 94.4365   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 83)                                                                       	 0.00612648	 100       	 0         	 0         	 54.191    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 83, m: 2500)                                                                                	 0.00556101	 100       	 0         	 0         	 59.7014   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 1) 	 0.00481371	 100       	 0.172424  	 0         	 1.37972   	 0.12497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 2, r2: 1)                             	 0.00412162	 100       	 0.402754  	 0         	 2.41691   	 0.16664   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 83, fromLeft: 1)                              	 0.00410457	 800       	 0         	 0         	 21.4832   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 83, r: 50, streamingCols: 33)                                  	 0.00320077	 100       	 3.90531   	 0         	 1.56212   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 83) 	 0.00216205	 100       	 31.8632   	 0         	 5.62021   	 5.6694    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 83, leftOrthog: 1)                        	 0.00164085	 100       	 25.2918   	 0         	 8.50779   	 2.97278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 83, r2: 83)                            	 0.00121173	 100       	 56.8526   	 0         	 10.028    	 5.6694    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000858594	 100       	 29.1174   	 0         	 6.98817   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000801031	 100       	 0.624196  	 0         	 2.49678   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 83)                           	 0.000759849	 100       	 0         	 0         	 8.73858   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000479015	 100       	 0         	 0         	 8.35047   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                        	 0.000478924	 100       	 0         	 0         	 13.8644   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 33)                                                                                                        	 0.000466251	 101       	 0         	 0         	 5.71881   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 83)                                                                         	 0.000435405	 100       	 0         	 0         	 15.2502   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 1)                                                                                                        	 0.000368999	 101       	 0         	 0         	 7.22604   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000327011	 100       	 0.7645    	 0         	 12.232    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 50, fromLeft: 1)                              	 0.000304541	 100       	 0         	 0         	 21.8033   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.73802   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.73799   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.31844   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.31721   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.89087   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.978337  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.918295  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.733061  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.479212  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.440667  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.434211  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.417055  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.381197  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.355716  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.15482   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.10629   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.106254  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.105246  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0154836 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00876818	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00794019	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00504424	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00440911	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00120615	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000801031	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000759849	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327011	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22911063508864 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22910831945728 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22910630619264 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22910429292800 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22910227966336 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22910026639872 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22909825313408 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22909623986944 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22909422660480 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22909221334016 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22909020007552 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22908818681088 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22908617354624 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22908416028160 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22908214701696 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22908013375232 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22907812048768 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22907610722304 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22907409395840 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22907208069376 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22907006742912 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22906805416448 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22906604089984 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22906402763520 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22906201437056 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22906000110592 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22905798784128 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22905597457664 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22905396131200 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22905194804736 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22904993478272 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22904792151808 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22904590821248 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22904389494784 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22904188168320 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22903986841856 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22903785515392 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22903584188928 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22903382862464 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22903181536000 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22902980209536 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22902778883072 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22902577556608 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22902376230144 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22902174903680 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22901973577216 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22901772250752 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22901570924288 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22901369597824 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22901168271360 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22900966944896 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22900765618432 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22900564291968 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22900362965504 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22900161639040 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22899960312576 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22899758986112 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22899557659648 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22899356333184 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22899155006720 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22898953680256 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22898752353792 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22898551027328 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22910957848320 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22910951257856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4200, cols: 84, reductionFactor: 37, colBlockingSize: 12)                                	 0.812331  	 1300      	 97.416    	 0         	 4.60712   	 21.1447   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 84)                                                                               	 0.641937  	 700       	 4.5242    	 0         	 0.185394  	 24.4032   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 84)	 0.39217   	 700       	 54.8162   	 0         	 7.74886   	 7.07409   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 84)                           	 0.345683  	 700       	 120.021   	 0         	 11.5449   	 10.396    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 84, r2: 84, leftOrthog: 1)                      	 0.34444   	 600       	 103.247   	 0         	 14.9462   	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 84)                         	 0.296797  	 600       	 119.82    	 0         	 11.5255   	 10.396    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4200, Xcols: 84, r: 84, streamingCols: 0)                                 	 0.141242  	 700       	 146.873   	 0         	 28.1157   	 5.22388   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 84, reductionFactor: 37, colBlockingSize: 12)                                	 0.119092  	 200       	 60.8494   	 0         	 2.91613   	 20.8665   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4200, m: 84)                                                                       	 0.112821  	 700       	 0         	 0         	 35.0232   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 84, m: 4200)                                                                                	 0.0995513 	 700       	 0         	 0         	 39.6917   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 84)                                                                                	 0.0995324 	 900       	 7.14586   	 0         	 1.53733   	 4.64822   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 84)                                                                               	 0.0511747 	 100       	 2.87251   	 0         	 0.171178  	 16.7808   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 50)	 0.0433807 	 100       	 42.1385   	 0         	 7.32122   	 5.75567   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0383789 	 100       	 2.2799    	 0         	 0.157378  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 50)                           	 0.0352605 	 100       	 100.055   	 0         	 12.8643   	 7.77778   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 84, r2: 84, leftOrthog: 1)                      	 0.0348866 	 100       	 101.128   	 0         	 14.7704   	 6.84664   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 50, r2: 50, leftOrthog: 1)                      	 0.033925  	 100       	 61.9013   	 0         	 14.9742   	 4.13386   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 50)                         	 0.0296975 	 100       	 118.798   	 0         	 11.5042   	 10.3265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 50, n: 50, r2: 84)                         	 0.027566  	 100       	 127.984   	 0         	 16.4551   	 7.77778   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0267102 	 100       	 80.7465   	 0         	 6.3646    	 12.6868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 84, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0160154 	 200       	 9.04966   	 0         	 1.12452   	 8.0476    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 84, r: 84, streamingCols: 0)                                 	 0.0149655 	 100       	 117.871   	 0         	 22.6403   	 5.20627   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 34)                                                                                                       	 0.00766831	 808       	 0         	 0         	 97.445    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 84, m: 2500)                                                                                	 0.00610708	 100       	 0         	 0         	 55.0181   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 84)                                                                       	 0.00587709	 100       	 0         	 0         	 57.1712   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 1) 	 0.00455227	 100       	 0.184523  	 0         	 1.47654   	 0.12497   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 84, fromLeft: 1)                              	 0.004211  	 800       	 0         	 0         	 21.4478   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 2, r2: 1)                             	 0.00391247	 100       	 0.429396  	 0         	 2.57679   	 0.16664   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 84, r: 50, streamingCols: 34)                                  	 0.00326775	 100       	 3.82526   	 0         	 1.5301    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 84) 	 0.00221252	 100       	 31.8912   	 0         	 5.58856   	 5.70652   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 84, leftOrthog: 1)                        	 0.00163501	 100       	 25.6879   	 0         	 8.61156   	 2.98295   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 84, r2: 84)                            	 0.00125982	 100       	 56.0081   	 0         	 9.81476   	 5.70652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000934331	 100       	 26.7571   	 0         	 6.42171   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000818479	 100       	 0.610889  	 0         	 2.44356   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 84)                           	 0.000789682	 100       	 0         	 0         	 8.50975   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000491452	 100       	 0         	 0         	 8.13915   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                        	 0.000485824	 100       	 0         	 0         	 13.8322   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 34)                                                                                                        	 0.000456853	 101       	 0         	 0         	 6.01331   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 84)                                                                         	 0.000440644	 100       	 0         	 0         	 15.2504   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 1)                                                                                                        	 0.000396214	 101       	 0         	 0         	 6.93363   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000344757	 100       	 0.725148  	 0         	 11.6024   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 50, fromLeft: 1)                              	 0.000305721	 100       	 0         	 0         	 21.9808   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.82005   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.82002   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.34255   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.34128   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.92432   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.02474   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.974149  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.73149   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.504787  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.470471  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.442316  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.414887  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.386116  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.354995  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.159475  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.119139  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.10615   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0995324 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0155952 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0100842 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0090072 	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00501381	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00451672	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00126447	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000818479	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000789682	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344757	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23281992230784 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23281809745920 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23281608419456 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23281407092992 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23281205766528 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23281004440064 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23280803113600 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23280601787136 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23280400460672 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23280199134208 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23279997807744 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23279796481280 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23279595154816 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23279393828352 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23279192501888 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23278991175424 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23278789848960 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23278588522496 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23278387196032 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23278185869568 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23277984543104 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23277783216640 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23277581890176 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23277380563712 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23277179237248 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23276977910784 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23276776584320 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23276575257856 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23276373931392 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23276172604928 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23275971278464 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23275769952000 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23275568621440 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23275367294976 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23275165968512 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23274964642048 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23274763315584 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23274561989120 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23274360662656 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23274159336192 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23273958009728 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23273756683264 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23273555356800 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23273354030336 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23273152703872 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23272951377408 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23272750050944 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23272548724480 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23272347398016 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23272146071552 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23271944745088 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23271743418624 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23271542092160 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23271340765696 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23271139439232 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23270938112768 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23270736786304 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23270535459840 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23270334133376 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23270132806912 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23269931480448 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23269730153984 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23269528827520 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23281886570240 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23281879979776 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4250, cols: 85, reductionFactor: 37, colBlockingSize: 12)                                	 0.810522  	 1300      	 101.162   	 0         	 4.72799   	 21.3964   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 85)                                                                               	 0.6803    	 700       	 4.42336   	 0         	 0.179121  	 24.6948   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 85)	 0.414234  	 700       	 53.5054   	 0         	 7.49929   	 7.13473   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 85)                           	 0.365994  	 700       	 117.457   	 0         	 11.1654   	 10.5198   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 85, r2: 85, leftOrthog: 1)                      	 0.328048  	 600       	 112.323   	 0         	 16.0689   	 6.99013   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 85)                         	 0.301383  	 600       	 122.261   	 0         	 11.622    	 10.5198   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4250, Xcols: 85, r: 85, streamingCols: 0)                                 	 0.145947  	 700       	 147.275   	 0         	 27.861    	 5.28607   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 85, reductionFactor: 37, colBlockingSize: 12)                                	 0.1188    	 200       	 62.4601   	 0         	 2.95926   	 21.1067   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 85)                                                                                	 0.107729  	 900       	 6.84077   	 0         	 1.45432   	 4.70377   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 85, m: 4250)                                                                                	 0.0828279 	 700       	 0         	 0         	 48.8483   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4250, m: 85)                                                                       	 0.0724663 	 700       	 0         	 0         	 55.8328   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 85)                                                                               	 0.0491535 	 100       	 3.02624   	 0         	 0.179845  	 16.8269   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 50)	 0.0449768 	 100       	 41.4102   	 0         	 7.16814   	 5.77699   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0375884 	 100       	 2.32785   	 0         	 0.160688  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 50)                           	 0.0364929 	 100       	 98.9919   	 0         	 12.671    	 7.8125    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 50, r2: 50, leftOrthog: 1)                      	 0.0363327 	 100       	 58.4873   	 0         	 14.147    	 4.13424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 50)                         	 0.035924  	 100       	 100.559   	 0         	 9.62532   	 10.4474   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 85, r2: 85, leftOrthog: 1)                      	 0.0352746 	 100       	 102.411   	 0         	 14.7857   	 6.92634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 50, n: 50, r2: 85)                         	 0.0284057 	 100       	 127.175   	 0         	 16.2784   	 7.8125    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0264743 	 100       	 82.4359   	 0         	 6.49687   	 12.6886   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 85, r: 85, streamingCols: 0)                                 	 0.0152939 	 100       	 118.103   	 0         	 22.4201   	 5.26772   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 85, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0140066 	 200       	 10.5954   	 0         	 1.31081   	 8.08308   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 35)                                                                                                       	 0.00797437	 808       	 0         	 0         	 99.2981   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 85)                                                                       	 0.00574624	 100       	 0         	 0         	 59.1691   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 85, m: 2500)                                                                                	 0.00523374	 100       	 0         	 0         	 64.9631   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 85, fromLeft: 1)                              	 0.00470035	 800       	 0         	 0         	 19.6751   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 1) 	 0.00466265	 100       	 0.1823    	 0         	 1.45874   	 0.124971  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 2, r2: 1)                             	 0.00397303	 100       	 0.427885  	 0         	 2.56771   	 0.166641  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 85, r: 50, streamingCols: 35)                                  	 0.00316589	 100       	 3.94834   	 0         	 1.57933   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 85) 	 0.00225805	 100       	 31.9966   	 0         	 5.57117   	 5.74324   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 85, leftOrthog: 1)                        	 0.00183018	 100       	 23.2218   	 0         	 7.7588    	 2.99296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 85, r2: 85)                            	 0.00128006	 100       	 56.4428   	 0         	 9.82769   	 5.74324   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000905682	 100       	 27.6035   	 0         	 6.62484   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000796998	 100       	 0.627354  	 0         	 2.50942   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 85)                           	 0.000789748	 100       	 0         	 0         	 8.61034   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 85)                                                                         	 0.000527753	 100       	 0         	 0         	 12.8848   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000483664	 100       	 0         	 0         	 8.2702    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                        	 0.000474825	 100       	 0         	 0         	 14.3211   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 35)                                                                                                        	 0.000469621	 101       	 0         	 0         	 6.02188   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 1)                                                                                                        	 0.000384544	 101       	 0         	 0         	 7.35416   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000342751	 100       	 0.729392  	 0         	 11.6703   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 50, fromLeft: 1)                              	 0.000332873	 100       	 0         	 0         	 20.4282   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.79417   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.79414   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.34032   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.33908   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.94192   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.981485  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.969803  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.767042  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.508498  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.466131  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.462717  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.40774   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.401486  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.366619  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.164407  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.107729  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0885453 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0787403 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0163029 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00930336	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00503322	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00470562	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00441577	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00115089	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000796998	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000789748	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000342751	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22543210469248 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22543008262144 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22542806935680 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22542605609216 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22542404282752 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22542202956288 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22542001629824 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22541800303360 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22541598976896 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22541397650432 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22541196323968 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22540994997504 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22540793671040 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22540592344576 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22540391018112 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22540189691648 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22539988365184 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22539787038720 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22539585712256 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22539384385792 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22539183059328 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22538981732864 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22538780406400 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22538579079936 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22538377753472 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22538176427008 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22537975100544 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22537773774080 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22537572447616 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22537371121152 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22537169794688 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22536968468224 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22536767137664 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22536565811200 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22536364484736 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22536163158272 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22535961831808 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22535760505344 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22535559178880 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22535357852416 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22535156525952 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22534955199488 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22534753873024 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22534552546560 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22534351220096 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22534149893632 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22533948567168 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22533747240704 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22533545914240 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22533344587776 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22533143261312 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22532941934848 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22532740608384 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22532539281920 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22532337955456 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22532136628992 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22531935302528 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22531733976064 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22531532649600 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22531331323136 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22531129996672 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22530928670208 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22530727343744 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22543104808704 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22543098218240 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4300, cols: 86, reductionFactor: 37, colBlockingSize: 12)                                	 0.841352  	 1300      	 100.935   	 0         	 4.66254   	 21.6481   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 86)                                                                               	 0.670893  	 700       	 4.64556   	 0         	 0.185923  	 24.9865   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 86)	 0.407881  	 700       	 56.026    	 0         	 7.78457   	 7.19705   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 86, r2: 86, leftOrthog: 1)                      	 0.363779  	 600       	 104.908   	 0         	 14.8335   	 7.07237   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 86)                           	 0.359389  	 700       	 123.888   	 0         	 11.6397   	 10.6436   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 86)                         	 0.307689  	 600       	 124.032   	 0         	 11.6533   	 10.6436   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4300, Xcols: 86, r: 86, streamingCols: 0)                                 	 0.150986  	 700       	 147.444   	 0         	 27.5686   	 5.34826   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 86, reductionFactor: 37, colBlockingSize: 12)                                	 0.125156  	 200       	 60.6912   	 0         	 2.84311   	 21.3468   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 86)                                                                                	 0.108785  	 900       	 7.01627   	 0         	 1.47422   	 4.75933   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 86, m: 4300)                                                                                	 0.099392  	 700       	 0         	 0         	 41.671    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4300, m: 86)                                                                       	 0.0974151 	 700       	 0         	 0         	 42.5166   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 86)                                                                               	 0.0491955 	 100       	 3.05922   	 0         	 0.181318  	 16.8722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 50)	 0.0450384 	 100       	 42.1418   	 0         	 7.26669   	 5.79932   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 86, r2: 86, leftOrthog: 1)                      	 0.038707  	 100       	 95.5384   	 0         	 13.6367   	 7.006     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0386291 	 100       	 2.26513   	 0         	 0.156359  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 50)                           	 0.0360468 	 100       	 102.589   	 0         	 13.0741   	 7.84672   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 50, r2: 50, leftOrthog: 1)                      	 0.0335551 	 100       	 64.0736   	 0         	 15.4969   	 4.13462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 50)                         	 0.0299057 	 100       	 123.655   	 0         	 11.7007   	 10.5682   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 50, n: 50, r2: 86)                         	 0.0286439 	 100       	 129.102   	 0         	 16.4531   	 7.84672   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0256518 	 100       	 86.0799   	 0         	 6.78314   	 12.6903   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 86, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0167025 	 200       	 9.09552   	 0         	 1.12041   	 8.11804   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 86, r: 86, streamingCols: 0)                                 	 0.0152749 	 100       	 121.048   	 0         	 22.7142   	 5.32917   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 36)                                                                                                       	 0.00827167	 808       	 0         	 0         	 101.277   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 86, m: 2500)                                                                                	 0.00544231	 100       	 0         	 0         	 63.2084   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 86)                                                                       	 0.00542699	 100       	 0         	 0         	 63.3869   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 1) 	 0.0046184 	 100       	 0.186212  	 0         	 1.49004   	 0.124971  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 86, fromLeft: 1)                              	 0.00455155	 800       	 0         	 0         	 20.7992   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 2, r2: 1)                             	 0.0039629 	 100       	 0.434025  	 0         	 2.60456   	 0.166641  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 86, r: 50, streamingCols: 36)                                  	 0.00308421	 100       	 4.0529    	 0         	 1.62116   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 86) 	 0.00219939	 100       	 33.6274   	 0         	 5.81833   	 5.77957   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 86, leftOrthog: 1)                        	 0.00176456	 100       	 24.3687   	 0         	 8.11535   	 3.00279   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 86, r2: 86)                            	 0.00127503	 100       	 58.0065   	 0         	 10.0365   	 5.77957   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0009154 	 100       	 27.3105   	 0         	 6.55451   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000821782	 100       	 0.608434  	 0         	 2.43374   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 86)                           	 0.000760483	 100       	 0         	 0         	 9.04688   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                        	 0.000515588	 100       	 0         	 0         	 13.344    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 36)                                                                                                        	 0.000507824	 101       	 0         	 0         	 5.72797   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00048052	 100       	 0         	 0         	 8.32432   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 86)                                                                         	 0.000471332	 100       	 0         	 0         	 14.5969   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 1)                                                                                                        	 0.000345822	 101       	 0         	 0         	 8.41126   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329319	 100       	 0.759142  	 0         	 12.1463   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 50, fromLeft: 1)                              	 0.000305281	 100       	 0         	 0         	 22.5366   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.94819   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.94816   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.42961   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.42837   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.98764   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.05387   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.00886   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.758718  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.531012  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.479198  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.459737  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.437805  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.400674  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.367154  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.169345  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.108785  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.105315  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.103313  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0161632 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00964091	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00913342	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0053663 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00485683	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00115115	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000821782	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000760483	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329319	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22993151072128 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22992973195264 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22992771868800 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22992570542336 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22992369215872 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22992167889408 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22991966562944 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22991765236480 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22991563910016 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22991362583552 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22991161257088 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22990959930624 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22990758604160 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22990557277696 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22990355951232 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22990154624768 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22989953298304 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22989751971840 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22989550645376 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22989349318912 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22989147992448 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22988946665984 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22988745339520 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22988544013056 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22988342686592 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22988141360128 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22987940033664 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22987738707200 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22987537380736 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22987336054272 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22987134727808 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22986933401344 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22986732070784 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22986530744320 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22986329417856 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22986128091392 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22985926764928 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22985725438464 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22985524112000 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22985322785536 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22985121459072 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22984920132608 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22984718806144 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22984517479680 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22984316153216 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22984114826752 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22983913500288 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22983712173824 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22983510847360 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22983309520896 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22983108194432 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22982906867968 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22982705541504 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22982504215040 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22982302888576 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22982101562112 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22981900235648 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22981698909184 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22981497582720 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22981296256256 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22981094929792 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22980893603328 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22980692276864 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22993045411584 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22992866801408 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4350, cols: 87, reductionFactor: 37, colBlockingSize: 12)                                	 0.843422  	 1300      	 104.241   	 0         	 4.75989   	 21.8998   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 87)                                                                               	 0.682139  	 700       	 4.73021   	 0         	 0.187127  	 25.2781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 87)	 0.423303  	 700       	 55.6628   	 0         	 7.66597   	 7.26102   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 87)                           	 0.373411  	 700       	 123.444   	 0         	 11.4646   	 10.7673   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 87, r2: 87, leftOrthog: 1)                      	 0.370499  	 600       	 106.64    	 0         	 14.9051   	 7.15461   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 87)                         	 0.315465  	 600       	 125.244   	 0         	 11.6319   	 10.7673   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4350, Xcols: 87, r: 87, streamingCols: 0)                                 	 0.151676  	 700       	 151.953   	 0         	 28.0851   	 5.41045   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 87, reductionFactor: 37, colBlockingSize: 12)                                	 0.121424  	 200       	 64.02     	 0         	 2.96573   	 21.5866   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4350, m: 87)                                                                       	 0.116298  	 700       	 0         	 0         	 36.4464   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 87)                                                                                	 0.115863  	 900       	 6.82013   	 0         	 1.41647   	 4.81489   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 87, m: 4350)                                                                                	 0.0987218 	 700       	 0         	 0         	 42.9352   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 87)                                                                               	 0.0555191 	 100       	 2.7423    	 0         	 0.162106  	 16.9167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 50)	 0.0456606 	 100       	 42.3669   	 0         	 7.27629   	 5.8226    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0383196 	 100       	 2.28342   	 0         	 0.157622  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 50)                           	 0.0362647 	 100       	 104.358   	 0         	 13.2426   	 7.88043   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 87, r2: 87, leftOrthog: 1)                      	 0.0362234 	 100       	 104.477   	 0         	 14.7449   	 7.08561   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 50, r2: 50, leftOrthog: 1)                      	 0.0350772 	 100       	 62.0061   	 0         	 14.9955   	 4.13498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 50)                         	 0.0300469 	 100       	 125.953   	 0         	 11.7834   	 10.689    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 50, n: 50, r2: 87)                         	 0.0294714 	 100       	 128.413   	 0         	 16.2951   	 7.88043   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0260055 	 100       	 85.8965   	 0         	 6.76779   	 12.692    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 87, r: 87, streamingCols: 0)                                 	 0.0153768 	 100       	 123.059   	 0         	 22.8284   	 5.3906    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 87, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0144863 	 200       	 10.7323   	 0         	 1.31645   	 8.1525    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 37)                                                                                                       	 0.00871084	 808       	 0         	 0         	 101.589   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 87)                                                                       	 0.00610645	 100       	 0         	 0         	 56.9889   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 87, m: 2500)                                                                                	 0.00550609	 100       	 0         	 0         	 63.2027   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 1) 	 0.00473327	 100       	 0.183805  	 0         	 1.47078   	 0.124971  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 87, fromLeft: 1)                              	 0.00472339	 800       	 0         	 0         	 20.5114   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 2, r2: 1)                             	 0.00409217	 100       	 0.425203  	 0         	 2.55161   	 0.166641  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 87, r: 50, streamingCols: 37)                                  	 0.00310032	 100       	 4.03184   	 0         	 1.61274   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 87) 	 0.00220545	 100       	 34.3195   	 0         	 5.90137   	 5.81551   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 87, leftOrthog: 1)                        	 0.0016433 	 100       	 26.4711   	 0         	 8.78718   	 3.01247   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 87, r2: 87)                            	 0.00123843	 100       	 61.1179   	 0         	 10.5095   	 5.81551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000899069	 100       	 27.8065   	 0         	 6.67357   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00089045	 100       	 0.561514  	 0         	 2.24606   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 87)                           	 0.000792042	 100       	 0         	 0         	 8.78741   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 37)                                                                                                        	 0.000514818	 101       	 0         	 0         	 5.8071    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                        	 0.000475103	 100       	 0         	 0         	 14.6495   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000468373	 100       	 0         	 0         	 8.5402    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 87)                                                                         	 0.000415699	 100       	 0         	 0         	 16.7429   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 1)                                                                                                        	 0.000340959	 101       	 0         	 0         	 8.76821   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000326624	 100       	 0.765406  	 0         	 12.2465   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 50, fromLeft: 1)                              	 0.000319507	 100       	 0         	 0         	 21.7836   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.01779   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.01777   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.46319   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.46189   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.01931   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.06839   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.00534   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.775978  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.526962  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.479583  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.475902  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.443443  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.415007  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.375882  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.170153  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.12282   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.115863  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.104696  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.016315  	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0100417 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00935077	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0050429 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00500059	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00123028	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00089045	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000792042	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326624	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23322100836224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23321873737728 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23321672411264 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23321471084800 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23321269758336 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23321068431872 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23320867105408 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23320665778944 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23320464452480 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23320263126016 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23320061799552 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23319860473088 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23319659146624 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23319457820160 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23319256493696 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23319055167232 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23318853840768 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23318652514304 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23318451187840 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23318249861376 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23318048534912 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23317847208448 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23317645881984 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23317444555520 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23317243229056 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23317041902592 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23316840576128 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23316639249664 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23316437923200 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23316236596736 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23316035270272 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23315833943808 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23315632613248 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23315431286784 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23315229960320 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23315028633856 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23314827307392 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23314625980928 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23314424654464 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23314223328000 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23314022001536 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23313820675072 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23313619348608 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23313418022144 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23313216695680 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23313015369216 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23312814042752 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23312612716288 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23312411389824 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23312210063360 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23312008736896 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23311807410432 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23311606083968 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23311404757504 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23311203431040 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23311002104576 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23310800778112 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23310599451648 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23310398125184 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23310196798720 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23309995472256 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23309794145792 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23309592819328 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23321995175680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23321988585216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4400, cols: 88, reductionFactor: 37, colBlockingSize: 12)                                	 0.868592  	 1300      	 104.751   	 0         	 4.72882   	 22.1516   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 88)                                                                               	 0.685109  	 700       	 4.87399   	 0         	 0.190615  	 25.5698   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 88)	 0.43057   	 700       	 56.4253   	 0         	 7.70144   	 7.3266    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 88, r2: 88, leftOrthog: 1)                      	 0.380812  	 600       	 107.371   	 0         	 14.8368   	 7.23684   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 88)                           	 0.379921  	 700       	 125.56    	 0         	 11.5287   	 10.8911   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 88)                         	 0.325271  	 600       	 125.705   	 0         	 11.542    	 10.8911   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4400, Xcols: 88, r: 88, streamingCols: 0)                                 	 0.153447  	 700       	 155.438   	 0         	 28.4027   	 5.47264   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 88, reductionFactor: 37, colBlockingSize: 12)                                	 0.124114  	 200       	 64.0807   	 0         	 2.93594   	 21.8263   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4400, m: 88)                                                                       	 0.119421  	 700       	 0         	 0         	 36.3139   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 88)                                                                                	 0.109685  	 900       	 7.45561   	 0         	 1.53079   	 4.87043   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 88, m: 4400)                                                                                	 0.106589  	 700       	 0         	 0         	 40.6857   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 88)                                                                               	 0.0493139 	 100       	 3.12285   	 0         	 0.184127  	 16.9604   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 50)	 0.0471353 	 100       	 41.837    	 0         	 7.15557   	 5.84677   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0404275 	 100       	 2.16437   	 0         	 0.149403  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 50)                           	 0.0370618 	 100       	 104.474   	 0         	 13.2017   	 7.91367   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 88, r2: 88, leftOrthog: 1)                      	 0.0368717 	 100       	 105.013   	 0         	 14.656    	 7.16519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 50, r2: 50, leftOrthog: 1)                      	 0.0358049 	 100       	 61.4441   	 0         	 14.8583   	 4.13534   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 50)                         	 0.0301583 	 100       	 128.389   	 0         	 11.8772   	 10.8097   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 50, n: 50, r2: 88)                         	 0.0293652 	 100       	 131.857   	 0         	 16.6619   	 7.91367   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0262687 	 100       	 86.0133   	 0         	 6.77612   	 12.6936   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 88, r: 88, streamingCols: 0)                                 	 0.0159646 	 100       	 121.268   	 0         	 22.2428   	 5.45202   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 88, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0136843 	 200       	 11.624    	 0         	 1.4199    	 8.18645   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 38)                                                                                                       	 0.00925801	 808       	 0         	 0         	 100.821   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 88, m: 2500)                                                                                	 0.00620627	 100       	 0         	 0         	 56.7168   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 88)                                                                       	 0.00598136	 100       	 0         	 0         	 58.8495   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 88, fromLeft: 1)                              	 0.00494602	 800       	 0         	 0         	 20.041    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 1) 	 0.00468883	 100       	 0.18768   	 0         	 1.50178   	 0.124972  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 2, r2: 1)                             	 0.00404479	 100       	 0.435128  	 0         	 2.61116   	 0.166641  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 88, r: 50, streamingCols: 38)                                  	 0.00302793	 100       	 4.12824   	 0         	 1.65129   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 88) 	 0.00219521	 100       	 35.2768   	 0         	 6.02912   	 5.85106   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 88, leftOrthog: 1)                        	 0.00176245	 100       	 24.9652   	 0         	 8.26122   	 3.02198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 88, r2: 88)                            	 0.00126623	 100       	 61.158    	 0         	 10.4525   	 5.85106   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000877524	 100       	 28.4892   	 0         	 6.83742   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00080635	 100       	 0.620078  	 0         	 2.48031   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 88)                           	 0.000761224	 100       	 0         	 0         	 9.24826   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000523688	 100       	 0.477383  	 0         	 7.63814   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                        	 0.000477658	 100       	 0         	 0         	 14.7386   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000475039	 100       	 0         	 0         	 8.42036   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 38)                                                                                                        	 0.000462054	 101       	 0         	 0         	 6.64511   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 88)                                                                         	 0.000459647	 100       	 0         	 0         	 15.3161   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 1)                                                                                                        	 0.000378305	 101       	 0         	 0         	 8.1162    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 50, fromLeft: 1)                              	 0.000328372	 100       	 0         	 0         	 21.4391   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.10029   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.10026   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.49802   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.49659   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.03947   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.1081    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.03266   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.77485   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.543962  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.490049  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.484589  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.455251  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.422294  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.385672  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.17244   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.125862  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.11327   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.109685  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0169212 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.010576  	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0105156 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00527439	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00520078	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122261	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00080635	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000761224	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000523688	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23206897624960 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23206714927104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23206513600640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23206312274176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23206110947712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23205909621248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23205708294784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23205506968320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23205305641856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23205104315392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23204902988928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23204701662464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23204500336000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23204299009536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23204097683072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23203896356608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23203695030144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23203493703680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23203292377216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23203091050752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23202889724288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23202688397824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23202487071360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23202285744896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23202084418432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23201883091968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23201681765504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23201480439040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23201279112576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23201077786112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23200876459648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23200675133184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23200473802624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23200272476160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23200071149696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23199869823232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23199668496768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23199467170304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23199265843840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23199064517376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23198863190912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23198661864448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23198460537984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23198259211520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23198057885056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23197856558592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23197655232128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23197453905664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23197252579200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23197051252736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23196849926272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23196648599808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23196447273344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23196245946880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23196044620416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23195843293952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23195641967488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23195440641024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23195239314560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23195037988096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23194836661632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23194635335168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23194434008704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23206791964416 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23206785373952 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4450, cols: 89, reductionFactor: 37, colBlockingSize: 12)                                	 0.8892    	 1300      	 105.851   	 0         	 4.72481   	 22.4033   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 89)                                                                               	 0.709064  	 700       	 4.8717    	 0         	 0.188377  	 25.8615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 89)	 0.450231  	 700       	 55.64     	 0         	 7.52529   	 7.39373   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 89)                           	 0.396163  	 700       	 124.564   	 0         	 11.3088   	 11.0149   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 89, r2: 89, leftOrthog: 1)                      	 0.393056  	 600       	 107.613   	 0         	 14.7031   	 7.31908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 89)                         	 0.338877  	 600       	 124.818   	 0         	 11.3318   	 11.0149   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4450, Xcols: 89, r: 89, streamingCols: 0)                                 	 0.158192  	 700       	 155.975   	 0         	 28.1806   	 5.53483   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 89, reductionFactor: 37, colBlockingSize: 12)                                	 0.127814  	 200       	 63.6477   	 0         	 2.88445   	 22.0658   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 89)                                                                                	 0.12445   	 900       	 6.79761   	 0         	 1.37995   	 4.92599   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4450, m: 89)                                                                       	 0.103437  	 700       	 0         	 0         	 42.8837   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 89, m: 4450)                                                                                	 0.101     	 700       	 0         	 0         	 43.9185   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 89)                                                                               	 0.0500929 	 100       	 3.10922   	 0         	 0.18286   	 17.0033   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 50)	 0.0472019 	 100       	 42.5937   	 0         	 7.25395   	 5.87179   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0386845 	 100       	 2.26189   	 0         	 0.156135  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 89, r2: 89, leftOrthog: 1)                      	 0.0385504 	 100       	 102.736   	 0         	 14.1807   	 7.24473   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 50)                           	 0.0377966 	 100       	 104.784   	 0         	 13.1864   	 7.94643   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 50)                         	 0.0313687 	 100       	 126.257   	 0         	 11.5509   	 10.9304   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 50, r2: 50, leftOrthog: 1)                      	 0.0290098 	 100       	 76.6982   	 0         	 18.5454   	 4.13569   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 50, n: 50, r2: 89)                         	 0.027698  	 100       	 142.989   	 0         	 17.9941   	 7.94643   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0265125 	 100       	 86.1907   	 0         	 6.78924   	 12.6952   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 89, r: 89, streamingCols: 0)                                 	 0.0158894 	 100       	 124.627   	 0         	 22.6043   	 5.51343   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 89, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0149421 	 200       	 10.8888   	 0         	 1.32469   	 8.21991   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 39)                                                                                                       	 0.00930827	 808       	 0         	 0         	 105.624   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 89)                                                                       	 0.00589206	 100       	 0         	 0         	 60.4202   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 89, m: 2500)                                                                                	 0.00561296	 100       	 0         	 0         	 63.4247   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 89, fromLeft: 1)                              	 0.00511712	 800       	 0         	 0         	 19.8137   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 1) 	 0.00472128	 100       	 0.188508  	 0         	 1.5084    	 0.124972  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 2, r2: 1)                             	 0.00402903	 100       	 0.441794  	 0         	 2.65116   	 0.166642  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 89, r: 50, streamingCols: 39)                                  	 0.00307087	 100       	 4.07051   	 0         	 1.6282    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 89) 	 0.00232638	 100       	 34.0485   	 0         	 5.78443   	 5.88624   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 89, leftOrthog: 1)                        	 0.00167305	 100       	 26.5982   	 0         	 8.77442   	 3.03134   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 89, r2: 89)                            	 0.00134598	 100       	 58.8492   	 0         	 9.99776   	 5.88624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000864933	 100       	 28.904    	 0         	 6.93695   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000845501	 100       	 0.591365  	 0         	 2.36546   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 89)                           	 0.000786376	 100       	 0         	 0         	 9.05419   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000523004	 100       	 0         	 0         	 7.64813   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                        	 0.000511958	 100       	 0         	 0         	 13.9074   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 89)                                                                         	 0.000447647	 100       	 0         	 0         	 15.9054   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 39)                                                                                                        	 0.000438181	 101       	 0         	 0         	 7.19155   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 1)                                                                                                        	 0.000371252	 101       	 0         	 0         	 8.48804   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 50, fromLeft: 1)                              	 0.0003541 	 100       	 0         	 0         	 20.1073   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000338198	 100       	 0.739212  	 0         	 11.8274   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.20977   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.20974   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.59398   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.59271   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.11853   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.10392   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.05847   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.797842  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.555089  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.504497  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.50448   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.46229   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.439335  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.398809  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.177152  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.12445   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.109777  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.107136  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0172311 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0106297 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00968219	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0054907 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00547122	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00127158	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000845501	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000786376	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338198	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23019154986880 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23018944325632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23018742999168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23018541672704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23018340346240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23018139019776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23017937693312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23017736366848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23017535040384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23017333713920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23017132387456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23016931060992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23016729734528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23016528408064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23016327081600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23016125755136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23015924428672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23015723102208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23015521775744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23015320449280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23015119122816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23014917796352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23014716469888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23014515143424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23014313816960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23014112490496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23013911164032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23013709837568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23013508511104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23013307184640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23013105858176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23012904531712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23012703201152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23012501874688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23012300548224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23012099221760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23011897895296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23011696568832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23011495242368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23011293915904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23011092589440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23010891262976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23010689936512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23010488610048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23010287283584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23010085957120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23009884630656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23009683304192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23009481977728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23009280651264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23009079324800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23008877998336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23008676671872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23008475345408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23008274018944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23008072692480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23007871366016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23007670039552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23007468713088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23007267386624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23007066060160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23006864733696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23006663407232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23019049326336 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23019042735872 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4500, cols: 90, reductionFactor: 37, colBlockingSize: 12)                                	 0.90601   	 1300      	 107.429   	 0         	 4.74193   	 22.655    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 90)                                                                               	 0.720414  	 700       	 4.9584    	 0         	 0.189591  	 26.1531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 90)	 0.45372   	 700       	 56.9294   	 0         	 7.62885   	 7.46238   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 90, r2: 90, leftOrthog: 1)                      	 0.406271  	 600       	 107.662   	 0         	 14.5463   	 7.40132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 90)                           	 0.399514  	 700       	 127.73    	 0         	 11.4673   	 11.1386   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 90)                         	 0.34057   	 600       	 128.432   	 0         	 11.5303   	 11.1386   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4500, Xcols: 90, r: 90, streamingCols: 0)                                 	 0.162437  	 700       	 157.076   	 0         	 28.0643   	 5.59701   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 90, reductionFactor: 37, colBlockingSize: 12)                                	 0.130222  	 200       	 63.8826   	 0         	 2.86403   	 22.3051   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 90)                                                                                	 0.12182   	 900       	 7.18108   	 0         	 1.44154   	 4.98155   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4500, m: 90)                                                                       	 0.116099  	 700       	 0         	 0         	 39.0702   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 90, m: 4500)                                                                                	 0.10018   	 700       	 0         	 0         	 45.2783   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 50)	 0.0499622 	 100       	 41.031    	 0         	 6.95726   	 5.89758   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 90)                                                                               	 0.0494889 	 100       	 3.18253   	 0         	 0.186709  	 17.0455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 50)                           	 0.0388204 	 100       	 104.327   	 0         	 13.0756   	 7.97872   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 90, r2: 90, leftOrthog: 1)                      	 0.038287  	 100       	 105.78    	 0         	 14.4425   	 7.32422   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.038043  	 100       	 2.30003   	 0         	 0.158768  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 50, r2: 50, leftOrthog: 1)                      	 0.0371641 	 100       	 60.5423   	 0         	 14.6378   	 4.13603   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 50)                         	 0.0365307 	 100       	 110.866   	 0         	 10.0321   	 11.0511   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 50, n: 50, r2: 90)                         	 0.0299355 	 100       	 135.291   	 0         	 16.9565   	 7.97872   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0269841 	 100       	 85.6359   	 0         	 6.74471   	 12.6968   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 90, r: 90, streamingCols: 0)                                 	 0.0162364 	 100       	 124.72    	 0         	 22.372    	 5.57483   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 90, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0149955 	 200       	 11.0952   	 0         	 1.3444    	 8.2529    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 40)                                                                                                       	 0.0100242 	 808       	 0         	 0         	 103.175   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 90)                                                                       	 0.00598687	 100       	 0         	 0         	 60.1315   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 90, m: 2500)                                                                                	 0.0056774 	 100       	 0         	 0         	 63.4094   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 90, fromLeft: 1)                              	 0.00489281	 800       	 0         	 0         	 21.1903   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 1) 	 0.00464778	 100       	 0.193641  	 0         	 1.54947   	 0.124972  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 2, r2: 1)                             	 0.00396517	 100       	 0.453953  	 0         	 2.72412   	 0.166642  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 90, r: 50, streamingCols: 40)                                  	 0.0029776 	 100       	 4.19801   	 0         	 1.67921   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 90) 	 0.00223559	 100       	 36.2321   	 0         	 6.1192    	 5.92105   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 90, leftOrthog: 1)                        	 0.00167722	 100       	 26.83     	 0         	 8.8241    	 3.04054   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 90, r2: 90)                            	 0.00128555	 100       	 63.0082   	 0         	 10.6414   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000912805	 100       	 27.3881   	 0         	 6.57315   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000875053	 100       	 0.571394  	 0         	 2.28558   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 90)                           	 0.000787655	 100       	 0         	 0         	 9.14106   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 40)                                                                                                        	 0.000479564	 101       	 0         	 0         	 6.73946   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 90)                                                                         	 0.000476652	 100       	 0         	 0         	 15.1054   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00047573	 100       	 0         	 0         	 8.40813   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                        	 0.000473885	 100       	 0         	 0         	 15.1936   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 1)                                                                                                        	 0.000366255	 101       	 0         	 0         	 8.82445   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000325071	 100       	 0.769063  	 0         	 12.305    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 50, fromLeft: 1)                              	 0.000323364	 100       	 0         	 0         	 22.2659   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.29193   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.2919    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.63953   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.63823   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.15976   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.12978   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.07821   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.807946  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.561894  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.517465  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.510565  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.4834    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.443586  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.407949  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.181651  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.122562  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.12182   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.106333  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0173529 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0116123 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0113439 	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00525749	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00521618	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122561	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000875053	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000787655	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000325071	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22606973388672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22606761682944 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22606560356480 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22606359030016 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22606157703552 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22605956377088 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22605755050624 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22605553724160 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22605352397696 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22605151071232 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22604949744768 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22604748418304 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22604547091840 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22604345765376 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22604144438912 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22603943112448 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22603741785984 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22603540459520 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22603339133056 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22603137806592 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22602936480128 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22602735153664 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22602533827200 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22602332500736 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22602131174272 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22601929847808 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22601728521344 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22601527194880 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22601325868416 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22601124541952 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22600923215488 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22600721889024 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22600520558464 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22600319232000 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22600117905536 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22599916579072 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22599715252608 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22599513926144 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22599312599680 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22599111273216 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22598909946752 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22598708620288 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22598507293824 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22598305967360 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22598104640896 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22597903314432 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22597701987968 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22597500661504 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22597299335040 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22597098008576 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22596896682112 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22596695355648 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22596494029184 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22596292702720 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22596091376256 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22595890049792 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22595688723328 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22595487396864 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22595286070400 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22595084743936 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22594883417472 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22594682091008 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22594480764544 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22606867728128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22606861137664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4550, cols: 91, reductionFactor: 37, colBlockingSize: 12)                                	 0.91332   	 1300      	 110.161   	 0         	 4.80909   	 22.9067   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 91)                                                                               	 0.742098  	 700       	 4.97576   	 0         	 0.188156  	 26.4448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 91)	 0.464382  	 700       	 57.3514   	 0         	 7.61385   	 7.53252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 91)                           	 0.408124  	 700       	 129.25    	 0         	 11.4762   	 11.2624   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 91, r2: 91, leftOrthog: 1)                      	 0.400655  	 600       	 112.851   	 0         	 15.0798   	 7.48355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 91)                         	 0.345775  	 600       	 130.762   	 0         	 11.6105   	 11.2624   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4550, Xcols: 91, r: 91, streamingCols: 0)                                 	 0.163381  	 700       	 161.432   	 0         	 28.5256   	 5.6592    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 91, reductionFactor: 37, colBlockingSize: 12)                                	 0.130878  	 200       	 64.9829   	 0         	 2.88246   	 22.5443   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 91)                                                                                	 0.129521  	 900       	 6.98176   	 0         	 1.38607   	 5.0371    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4550, m: 91)                                                                       	 0.127497  	 700       	 0         	 0         	 36.3722   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 91, m: 4550)                                                                                	 0.106944  	 700       	 0         	 0         	 43.3625   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 91)                                                                               	 0.0513039 	 100       	 3.10405   	 0         	 0.181663  	 17.0869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 50)	 0.0492289 	 100       	 42.4649   	 0         	 7.16815   	 5.92411   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 50)                           	 0.0385135 	 100       	 107.508   	 0         	 13.4207   	 8.01056   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 50, r2: 50, leftOrthog: 1)                      	 0.0376414 	 100       	 60.4387   	 0         	 14.6116   	 4.13636   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0374416 	 100       	 2.33698   	 0         	 0.161318  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 91, r2: 91, leftOrthog: 1)                      	 0.0365481 	 100       	 113.289   	 0         	 15.3018   	 7.40367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 50, n: 50, r2: 91)                         	 0.0324739 	 100       	 127.502   	 0         	 15.9168   	 8.01056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 50)                         	 0.0314823 	 100       	 131.518   	 0         	 11.7725   	 11.1717   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0266856 	 100       	 87.5559   	 0         	 6.89509   	 12.6983   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 91, r: 91, streamingCols: 0)                                 	 0.0164885 	 100       	 125.557   	 0         	 22.2768   	 5.63621   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 91, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0147844 	 200       	 11.5051   	 0         	 1.3886    	 8.28541   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 41)                                                                                                       	 0.0104044 	 808       	 0         	 0         	 104.436   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 91, m: 2500)                                                                                	 0.00684642	 100       	 0         	 0         	 53.1665   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 91)                                                                       	 0.00613087	 100       	 0         	 0         	 59.3717   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 91, fromLeft: 1)                              	 0.00499964	 800       	 0         	 0         	 21.2009   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 1) 	 0.004743  	 100       	 0.191862  	 0         	 1.53523   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 2, r2: 1)                             	 0.00410674	 100       	 0.443174  	 0         	 2.65943   	 0.166642  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 91, r: 50, streamingCols: 41)                                  	 0.00313128	 100       	 3.99198   	 0         	 1.59679   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 91) 	 0.0022697 	 100       	 36.485    	 0         	 6.12628   	 5.9555    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 91, leftOrthog: 1)                        	 0.00193467	 100       	 23.5183   	 0         	 7.71192   	 3.0496    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 91, r2: 91)                            	 0.00132867	 100       	 62.3257   	 0         	 10.4652   	 5.9555    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000891522	 100       	 28.0419   	 0         	 6.73006   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000829186	 100       	 0.603001  	 0         	 2.412     	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 91)                           	 0.000751581	 100       	 0         	 0         	 9.68625   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                        	 0.000490004	 100       	 0         	 0         	 14.857    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 41)                                                                                                        	 0.000486114	 101       	 0         	 0         	 6.81486   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00047323	 100       	 0         	 0         	 8.45255   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 91)                                                                         	 0.000446666	 100       	 0         	 0         	 16.2985   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 1)                                                                                                        	 0.000379765	 101       	 0         	 0         	 8.72329   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 50, fromLeft: 1)                              	 0.0003208 	 100       	 0         	 0         	 22.6933   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000319587	 100       	 0.78226   	 0         	 12.5162   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.3529    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.35287   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.65673   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.65549   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.17357   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.16604   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.08567   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.830843  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.570643  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.520624  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.516225  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.476779  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.452073  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.410623  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.183001  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.134075  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.129521  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.114264  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0177141 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0117603 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0108631 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00532044	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00512664	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00124768	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000829186	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000751581	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000319587	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22972316301184 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22972102338560 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22971901012096 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22971699685632 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22971498359168 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22971297032704 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22971095706240 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22970894379776 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22970693053312 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22970491726848 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22970290400384 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22970089073920 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22969887747456 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22969686420992 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22969485094528 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22969283768064 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22969082441600 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22968881115136 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22968679788672 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22968478462208 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22968277135744 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22968075809280 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22967874482816 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22967673156352 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22967471829888 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22967270503424 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22967069176960 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22966867850496 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22966666524032 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22966465197568 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22966263871104 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22966062544640 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22965861214080 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22965659887616 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22965458561152 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22965257234688 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22965055908224 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22964854581760 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22964653255296 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22964451928832 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22964250602368 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22964049275904 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22963847949440 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22963646622976 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22963445296512 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22963243970048 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22963042643584 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22962841317120 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22962639990656 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22962438664192 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22962237337728 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22962036011264 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22961834684800 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22961633358336 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22961432031872 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22961230705408 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22961029378944 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22960828052480 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22960626726016 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22960425399552 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22960224073088 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22960022746624 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22959821420160 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22972210640640 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22972204050176 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4600, cols: 92, reductionFactor: 37, colBlockingSize: 12)                                	 0.937214  	 1300      	 110.93    	 0         	 4.79005   	 23.1585   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 92)                                                                               	 0.750306  	 700       	 5.08535   	 0         	 0.190203  	 26.7365   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 92)	 0.470125  	 700       	 58.4104   	 0         	 7.68145   	 7.60408   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 92)                           	 0.415159  	 700       	 131.295   	 0         	 11.5311   	 11.3861   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 92, r2: 92, leftOrthog: 1)                      	 0.413208  	 600       	 113.07    	 0         	 14.9449   	 7.56579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 92)                         	 0.348992  	 600       	 133.875   	 0         	 11.7577   	 11.3861   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4600, Xcols: 92, r: 92, streamingCols: 0)                                 	 0.168242  	 700       	 161.994   	 0         	 28.3137   	 5.72139   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4600, m: 92)                                                                       	 0.138694  	 700       	 0         	 0         	 34.1747   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 92, reductionFactor: 37, colBlockingSize: 12)                                	 0.135965  	 200       	 63.9337   	 0         	 2.80618   	 22.7832   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 92)                                                                                	 0.123268  	 900       	 7.58045   	 0         	 1.48851   	 5.09266   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 92, m: 4600)                                                                                	 0.107025  	 700       	 0         	 0         	 44.2872   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 50)	 0.0526726 	 100       	 40.4764   	 0         	 6.80125   	 5.95132   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 92)                                                                               	 0.05091   	 100       	 3.16244   	 0         	 0.184639  	 17.1277   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 50)                           	 0.0429845 	 100       	 98.4541   	 0         	 12.2425   	 8.04196   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 92, r2: 92, leftOrthog: 1)                      	 0.0407347 	 100       	 103.892   	 0         	 13.8836   	 7.48308   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 50, r2: 50, leftOrthog: 1)                      	 0.039742  	 100       	 57.8732   	 0         	 13.9902   	 4.13669   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0378389 	 100       	 2.31243   	 0         	 0.159624  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 50, n: 50, r2: 92)                         	 0.0323123 	 100       	 130.972   	 0         	 16.2861   	 8.04196   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 50)                         	 0.031744  	 100       	 133.316   	 0         	 11.806    	 11.2922   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0262679 	 100       	 89.9258   	 0         	 7.08088   	 12.6998   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 92, r: 92, streamingCols: 0)                                 	 0.0166856 	 100       	 126.816   	 0         	 22.2579   	 5.69758   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 92, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0157171 	 200       	 11.0616   	 0         	 1.32992   	 8.31747   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 42)                                                                                                       	 0.0104523 	 808       	 0         	 0         	 109.091   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 92, m: 2500)                                                                                	 0.00662266	 100       	 0         	 0         	 55.5668   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 92)                                                                       	 0.00591789	 100       	 0         	 0         	 62.1843   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 92, fromLeft: 1)                              	 0.00519683	 800       	 0         	 0         	 20.8472   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 1) 	 0.00460528	 100       	 0.199771  	 0         	 1.59851   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 2, r2: 1)                             	 0.00393618	 100       	 0.467458  	 0         	 2.80515   	 0.166643  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 92, r: 50, streamingCols: 42)                                  	 0.00305592	 100       	 4.09042   	 0         	 1.63617   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 92) 	 0.00238542	 100       	 35.4822   	 0         	 5.92399   	 5.98958   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 92, leftOrthog: 1)                        	 0.00171885	 100       	 26.7621   	 0         	 8.75003   	 3.05851   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 92, r2: 92)                            	 0.00142709	 100       	 59.3093   	 0         	 9.90208   	 5.98958   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000879886	 100       	 0.568255  	 0         	 2.27302   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000876311	 100       	 28.5287   	 0         	 6.84688   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 92)                           	 0.000777082	 100       	 0         	 0         	 9.47133   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000485375	 100       	 0         	 0         	 8.24105   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                        	 0.00048191	 100       	 0         	 0         	 15.2726   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 42)                                                                                                        	 0.000470695	 101       	 0         	 0         	 7.20976   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 92)                                                                         	 0.000435076	 100       	 0         	 0         	 16.9166   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 1)                                                                                                        	 0.000375871	 101       	 0         	 0         	 9.02863   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 50, fromLeft: 1)                              	 0.000352492	 100       	 0         	 0         	 20.8799   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000349561	 100       	 0.715183  	 0         	 11.4429   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.43618   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.43615   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.70303   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.7017    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.22088   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.19531   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.11516   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.839055  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.589557  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.529788  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.526759  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.495404  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.463506  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.413925  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.187983  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.145047  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.123268  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.114133  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0178933 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0117808 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0109986 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00554932	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00504277	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00113981	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000879886	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000777082	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000349561	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22586882348928 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22586696132608 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22586494806144 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22586293479680 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22586092153216 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22585890826752 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22585689500288 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22585488173824 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22585286847360 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22585085520896 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22584884194432 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22584682867968 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22584481541504 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22584280215040 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22584078888576 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22583877562112 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22583676235648 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22583474909184 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22583273582720 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22583072256256 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22582870929792 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22582669603328 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22582468276864 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22582266950400 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22582065623936 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22581864297472 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22581662971008 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22581461644544 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22581260318080 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22581058991616 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22580857665152 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22580656338688 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22580455008128 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22580253681664 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22580052355200 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22579851028736 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22579649702272 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22579448375808 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22579247049344 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22579045722880 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22578844396416 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22578643069952 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22578441743488 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22578240417024 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22578039090560 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22577837764096 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22577636437632 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22577435111168 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22577233784704 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22577032458240 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22576831131776 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22576629805312 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22576428478848 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22576227152384 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22576025825920 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22575824499456 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22575623172992 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22575421846528 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22575220520064 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22575019193600 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22574817867136 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22574616540672 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22574415214208 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22586776688384 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22586770097920 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4650, cols: 93, reductionFactor: 37, colBlockingSize: 12)                                	 0.952759  	 1300      	 112.717   	 0         	 4.81489   	 23.4102   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 93)                                                                               	 0.769344  	 700       	 5.123     	 0         	 0.189543  	 27.0281   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 93)	 0.487224  	 700       	 58.1088   	 0         	 7.56915   	 7.67705   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 93, r2: 93, leftOrthog: 1)                      	 0.441935  	 600       	 109.205   	 0         	 14.2788   	 7.64803   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 93)                           	 0.428954  	 700       	 131.261   	 0         	 11.4042   	 11.5099   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 93)                         	 0.362909  	 600       	 132.985   	 0         	 11.5539   	 11.5099   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4650, Xcols: 93, r: 93, streamingCols: 0)                                 	 0.173985  	 700       	 161.81    	 0         	 27.9774   	 5.78358   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 93, reductionFactor: 37, colBlockingSize: 12)                                	 0.141468  	 200       	 62.7899   	 0         	 2.72739   	 23.022    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 93)                                                                                	 0.134686  	 900       	 7.16649   	 0         	 1.39203   	 5.14821   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4650, m: 93)                                                                       	 0.133258  	 700       	 0         	 0         	 36.3463   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 93, m: 4650)                                                                                	 0.105351  	 700       	 0         	 0         	 45.9742   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 93)                                                                               	 0.0512806 	 100       	 3.17371   	 0         	 0.184865  	 17.1677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 50)	 0.0501601 	 100       	 43.3512   	 0         	 7.25038   	 5.97916   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 93, r2: 93, leftOrthog: 1)                      	 0.0406949 	 100       	 106.266   	 0         	 14.0518   	 7.56245   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0399026 	 100       	 2.19284   	 0         	 0.151368  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 50)                           	 0.0396663 	 100       	 109.022   	 0         	 13.5047   	 8.07292   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 50)                         	 0.03332   	 100       	 129.787   	 0         	 11.3721   	 11.4127   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0309501 	 100       	 75.1208   	 0         	 18.1582   	 4.13701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 50, n: 50, r2: 93)                         	 0.0293319 	 100       	 147.433   	 0         	 18.2627   	 8.07292   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0265477 	 100       	 89.9453   	 0         	 7.08161   	 12.7013   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 93, r: 93, streamingCols: 0)                                 	 0.0170329 	 100       	 126.945   	 0         	 22.0432   	 5.75894   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 93, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0161514 	 200       	 10.9994   	 0         	 1.31744   	 8.34908   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 43)                                                                                                       	 0.0110345 	 808       	 0         	 0         	 108.314   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 93)                                                                       	 0.00725971	 100       	 0         	 0         	 51.2417   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 93, fromLeft: 1)                              	 0.00635199	 800       	 0         	 0         	 17.4287   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 93, m: 2500)                                                                                	 0.00584784	 100       	 0         	 0         	 63.6132   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 1) 	 0.00458445	 100       	 0.20286   	 0         	 1.62323   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 2, r2: 1)                             	 0.00390216	 100       	 0.476659  	 0         	 2.86036   	 0.166643  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 93, r: 50, streamingCols: 43)                                  	 0.00299695	 100       	 4.1709    	 0         	 1.66836   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 93) 	 0.00230105	 100       	 37.5871   	 0         	 6.24027   	 6.02332   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 93, leftOrthog: 1)                        	 0.00184668	 100       	 25.1803   	 0         	 8.20931   	 3.06728   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 93, r2: 93)                            	 0.00134393	 100       	 64.356    	 0         	 10.6845   	 6.02332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000864803	 100       	 28.9083   	 0         	 6.938     	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000799901	 100       	 0.625077  	 0         	 2.50031   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 93)                           	 0.000773656	 100       	 0         	 0         	 9.61668   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 43)                                                                                                        	 0.000513223	 101       	 0         	 0         	 6.76977   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000493916	 100       	 0         	 0         	 8.09854   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                        	 0.000486273	 100       	 0         	 0         	 15.3      	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 93)                                                                         	 0.000459822	 100       	 0         	 0         	 16.1802   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 50, fromLeft: 1)                              	 0.000386948	 100       	 0         	 0         	 19.2274   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 1)                                                                                                        	 0.000386894	 101       	 0         	 0         	 8.98024   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000327319	 100       	 0.763781  	 0         	 12.2205   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.58113   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.5811    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.81401   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.81278   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.30253   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.21417   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.13693   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.860527  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.593549  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.544524  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.54427   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.515427  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.473866  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.426426  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.194015  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.140978  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.134686  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.111693  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0182771 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0124209 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0108422 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00673894	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0059038 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00127202	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000799901	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000773656	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327319	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22501689493376 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22501467875328 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22501266548864 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22501065222400 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22500863895936 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22500662569472 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22500461243008 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22500259916544 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22500058590080 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22499857263616 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22499655937152 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22499454610688 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22499253284224 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22499051957760 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22498850631296 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22498649304832 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22498447978368 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22498246651904 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22498045325440 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22497843998976 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22497642672512 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22497441346048 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22497240019584 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22497038693120 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22496837366656 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22496636040192 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22496434713728 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22496233387264 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22496032060800 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22495830734336 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22495629407872 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22495428081408 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22495226750848 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22495025424384 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22494824097920 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22494622771456 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22494421444992 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22494220118528 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22494018792064 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22493817465600 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22493616139136 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22493414812672 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22493213486208 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22493012159744 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22492810833280 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22492609506816 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22492408180352 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22492206853888 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22492005527424 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22491804200960 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22491602874496 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22491401548032 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22491200221568 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22490998895104 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22490797568640 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22490596242176 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22490394915712 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22490193589248 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22489992262784 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22489790936320 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22489589609856 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22489388283392 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22489186956928 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22501583832832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22501577242368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4700, cols: 94, reductionFactor: 37, colBlockingSize: 12)                                	 0.966914  	 1300      	 114.689   	 0         	 4.84698   	 23.6619   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 94)                                                                               	 0.759542  	 700       	 5.35831   	 0         	 0.196133  	 27.3198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 94)	 0.489943  	 700       	 59.5761   	 0         	 7.68588   	 7.75137   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 94, r2: 94, leftOrthog: 1)                      	 0.435854  	 600       	 114.339   	 0         	 14.7911   	 7.73026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 94)                           	 0.43207   	 700       	 134.563   	 0         	 11.5667   	 11.6337   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 94)                         	 0.373551  	 600       	 133.409   	 0         	 11.4675   	 11.6337   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4700, Xcols: 94, r: 94, streamingCols: 0)                                 	 0.175254  	 700       	 165.876   	 0         	 28.3755   	 5.84577   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 94, reductionFactor: 37, colBlockingSize: 12)                                	 0.139691  	 200       	 64.9633   	 0         	 2.79286   	 23.2605   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 94)                                                                                	 0.13399   	 900       	 7.43861   	 0         	 1.42947   	 5.20376   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4700, m: 94)                                                                       	 0.124837  	 700       	 0         	 0         	 39.6368   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 94, m: 4700)                                                                                	 0.0966903 	 700       	 0         	 0         	 51.1753   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 94)                                                                               	 0.0513805 	 100       	 3.2016    	 0         	 0.186063  	 17.2071   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 50)	 0.0510049 	 100       	 43.486    	 0         	 7.23852   	 6.00758   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 50)                           	 0.0402949 	 100       	 109.642   	 0         	 13.5302   	 8.10345   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 94, r2: 94, leftOrthog: 1)                      	 0.0393352 	 100       	 112.317   	 0         	 14.6977   	 7.64178   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 50, r2: 50, leftOrthog: 1)                      	 0.0381441 	 100       	 61.6085   	 0         	 14.8909   	 4.13732   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0376544 	 100       	 2.32376   	 0         	 0.160406  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 50)                         	 0.0326022 	 100       	 135.512   	 0         	 11.7498   	 11.5332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 50, n: 50, r2: 94)                         	 0.0323207 	 100       	 136.693   	 0         	 16.8685   	 8.10345   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0269905 	 100       	 89.4208   	 0         	 7.03951   	 12.7027   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 94, r: 94, streamingCols: 0)                                 	 0.0170444 	 100       	 129.603   	 0         	 22.2674   	 5.82029   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 94, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0160238 	 200       	 11.3266   	 0         	 1.35159   	 8.38026   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 44)                                                                                                       	 0.0113953 	 808       	 0         	 0         	 109.82    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 94)                                                                       	 0.00616657	 100       	 0         	 0         	 60.9739   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 94, m: 2500)                                                                                	 0.00590205	 100       	 0         	 0         	 63.7067   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 94, fromLeft: 1)                              	 0.00545068	 800       	 0         	 0         	 20.7499   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 1) 	 0.00532383	 100       	 0.176565  	 0         	 1.41282   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 2, r2: 1)                             	 0.00466751	 100       	 0.402784  	 0         	 2.41705   	 0.166643  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 94, r: 50, streamingCols: 44)                                  	 0.00320551	 100       	 3.89953   	 0         	 1.55981   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 94) 	 0.00230515	 100       	 38.3315   	 0         	 6.32878   	 6.0567    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 94, leftOrthog: 1)                        	 0.0017604 	 100       	 26.6985   	 0         	 8.67985   	 3.07592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 94, r2: 94)                            	 0.00133346	 100       	 66.2637   	 0         	 10.9406   	 6.0567    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00089771	 100       	 0.556973  	 0         	 2.22789   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000873268	 100       	 28.6281   	 0         	 6.87074   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 94)                           	 0.000799161	 100       	 0         	 0         	 9.40987   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 44)                                                                                                        	 0.000511366	 101       	 0         	 0         	 6.95236   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 94)                                                                         	 0.00048312	 100       	 0         	 0         	 15.5655   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                        	 0.000477302	 100       	 0         	 0         	 15.7552   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000470036	 100       	 0         	 0         	 8.50999   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 1)                                                                                                        	 0.000385243	 101       	 0         	 0         	 9.22846   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 50, fromLeft: 1)                              	 0.000342247	 100       	 0         	 0         	 21.9724   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032609	 100       	 0.76666   	 0         	 12.2666   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.56186   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.56183   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.80048   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.79916   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.28742   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.20028   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.14962   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.848577  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.599566  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.55122   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.548576  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.515094  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.478366  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.439347  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.195504  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.13399   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.131487  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.103062  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0189401 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0127692 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0125377 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00579293	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00514087	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00121356	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00089771	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000799161	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032609	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22905340778368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22905127692288 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22904926365824 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22904725039360 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22904523712896 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22904322386432 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22904121059968 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22903919733504 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22903718407040 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22903517080576 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22903315754112 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22903114427648 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22902913101184 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22902711774720 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22902510448256 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22902309121792 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22902107795328 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22901906468864 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22901705142400 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22901503815936 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22901302489472 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22901101163008 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22900899836544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22900698510080 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22900497183616 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22900295857152 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22900094530688 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22899893204224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22899691877760 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22899490551296 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22899289224832 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22899087898368 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22898886567808 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22898685241344 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22898483914880 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22898282588416 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22898081261952 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22897879935488 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22897678609024 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22897477282560 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22897275956096 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22897074629632 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22896873303168 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22896671976704 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22896470650240 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22896269323776 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22896067997312 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22895866670848 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22895665344384 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22895464017920 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22895262691456 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22895061364992 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22894860038528 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22894658712064 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22894457385600 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22894256059136 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22894054732672 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22893853406208 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22893652079744 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22893450753280 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22893249426816 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22893048100352 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22892846773888 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22905235117824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22905228527360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4750, cols: 95, reductionFactor: 37, colBlockingSize: 12)                                	 1.09718   	 1300      	 104.332   	 0         	 4.36288   	 23.9136   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 95)                                                                               	 0.799371  	 700       	 5.25556   	 0         	 0.19034   	 27.6114   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 95)	 0.507308  	 700       	 59.3155   	 0         	 7.57831   	 7.82701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 95)                           	 0.447247  	 700       	 134.19    	 0         	 11.4132   	 11.7574   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 95, r2: 95, leftOrthog: 1)                      	 0.425157  	 600       	 120.997   	 0         	 15.4876   	 7.8125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 95)                         	 0.379503  	 600       	 135.552   	 0         	 11.5291   	 11.7574   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4750, Xcols: 95, r: 95, streamingCols: 0)                                 	 0.178488  	 700       	 168.124   	 0         	 28.4572   	 5.90796   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 95, reductionFactor: 37, colBlockingSize: 12)                                	 0.147302  	 200       	 62.9246   	 0         	 2.67776   	 23.4989   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4750, m: 95)                                                                       	 0.144393  	 700       	 0         	 0         	 35.0018   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 95)                                                                                	 0.139649  	 900       	 7.36741   	 0         	 1.40083   	 5.25932   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 95, m: 4750)                                                                                	 0.103781  	 700       	 0         	 0         	 48.6988   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 95)                                                                               	 0.0523272 	 100       	 3.17713   	 0         	 0.184226  	 17.2459   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 50)	 0.0514605 	 100       	 43.9658   	 0         	 7.28326   	 6.03655   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 95, r2: 95, leftOrthog: 1)                      	 0.0411387 	 100       	 109.69    	 0         	 14.2066   	 7.72107   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 50, r2: 50, leftOrthog: 1)                      	 0.040014  	 100       	 59.3542   	 0         	 14.345    	 4.13763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 50)                           	 0.0394054 	 100       	 114.515   	 0         	 14.0793   	 8.13356   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0392973 	 100       	 2.22662   	 0         	 0.1537    	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 50, n: 50, r2: 95)                         	 0.0331504 	 100       	 136.122   	 0         	 16.7358   	 8.13356   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0329962 	 100       	 73.9234   	 0         	 5.81886   	 12.7041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 50)                         	 0.0321936 	 100       	 140.168   	 0         	 12.0279   	 11.6536   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 95, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0188446 	 200       	 9.8372    	 0         	 1.16956   	 8.411     
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 95, r: 95, streamingCols: 0)                                 	 0.0170828 	 100       	 132.077   	 0         	 22.4559   	 5.88162   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 45)                                                                                                       	 0.0123225 	 808       	 0         	 0         	 106.225   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 95)                                                                       	 0.00658677	 100       	 0         	 0         	 57.6914   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 95, m: 2500)                                                                                	 0.00586803	 100       	 0         	 0         	 64.7577   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 95, fromLeft: 1)                              	 0.00558622	 800       	 0         	 0         	 20.6795   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 1) 	 0.00481545	 100       	 0.197282  	 0         	 1.57858   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 2, r2: 1)                             	 0.00414185	 100       	 0.458732  	 0         	 2.75278   	 0.166643  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 95, r: 50, streamingCols: 45)                                  	 0.00311784	 100       	 4.00918   	 0         	 1.60367   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 95) 	 0.00234961	 100       	 38.4106   	 0         	 6.30743   	 6.08974   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 95, leftOrthog: 1)                        	 0.00167438	 100       	 28.3688   	 0         	 9.19746   	 3.08442   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 95, r2: 95)                            	 0.00139566	 100       	 64.6647   	 0         	 10.6186   	 6.08974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000890873	 100       	 28.0624   	 0         	 6.73497   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000803921	 100       	 0.621952  	 0         	 2.48781   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 95)                           	 0.000781634	 100       	 0         	 0         	 9.72322   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000506286	 100       	 0         	 0         	 7.90067   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                        	 0.000498486	 100       	 0         	 0         	 15.2462   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 45)                                                                                                        	 0.000493194	 101       	 0         	 0         	 7.37235   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 95)                                                                         	 0.00045848	 100       	 0         	 0         	 16.5765   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 50, fromLeft: 1)                              	 0.000370475	 100       	 0         	 0         	 20.5142   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 1)                                                                                                        	 0.000362178	 101       	 0         	 0         	 10.0393   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000343765	 100       	 0.727241  	 0         	 11.6359   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.82305   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.82302   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.92362   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.92238   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.39723   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.31909   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.29632   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.890995  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.681574  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.615876  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.565934  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.507984  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.49219   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.445738  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.198689  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.151438  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.139649  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.110155  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0190134 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0136763 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0128316 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0059567 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00560201	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00131755	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000803921	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000781634	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343765	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22497452763008 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22497240016896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22497038690432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22496837363968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22496636037504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22496434711040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22496233384576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22496032058112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22495830731648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22495629405184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22495428078720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22495226752256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22495025425792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22494824099328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22494622772864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22494421446400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22494220119936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22494018793472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22493817467008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22493616140544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22493414814080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22493213487616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22493012161152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22492810834688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22492609508224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22492408181760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22492206855296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22492005528832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22491804202368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22491602875904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22491401549440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22491200222976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22490998892416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22490797565952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22490596239488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22490394913024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22490193586560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22489992260096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22489790933632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22489589607168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22489388280704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22489186954240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22488985627776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22488784301312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22488582974848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22488381648384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22488180321920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22487978995456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22487777668992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22487576342528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22487375016064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22487173689600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22486972363136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22486771036672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22486569710208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22486368383744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22486167057280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22485965730816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22485764404352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22485563077888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22485361751424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22485160424960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22484959098496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22497347102464 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22497340512000 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4800, cols: 96, reductionFactor: 37, colBlockingSize: 12)                                	 1.15242   	 1300      	 102.501   	 0         	 4.24164   	 24.1653   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 96)                                                                               	 0.795427  	 700       	 5.45016   	 0         	 0.195325  	 27.9031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 96)	 0.517156  	 700       	 59.981    	 0         	 7.58876   	 7.90393   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 96, r2: 96, leftOrthog: 1)                      	 0.470348  	 600       	 112.861   	 0         	 14.2958   	 7.89474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 96)                           	 0.454915  	 700       	 136.139   	 0         	 11.4583   	 11.8812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 96)                         	 0.388236  	 600       	 136.732   	 0         	 11.5083   	 11.8812   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4800, Xcols: 96, r: 96, streamingCols: 0)                                 	 0.182083  	 700       	 170.064   	 0         	 28.4857   	 5.97015   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 96, reductionFactor: 37, colBlockingSize: 12)                                	 0.151454  	 200       	 62.4948   	 0         	 2.63279   	 23.7371   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 96)                                                                                	 0.137662  	 900       	 7.71222   	 0         	 1.45106   	 5.31488   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4800, m: 96)                                                                       	 0.133923  	 700       	 0         	 0         	 38.5367   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 96, m: 4800)                                                                                	 0.11925   	 700       	 0         	 0         	 43.2783   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 50)	 0.0524405 	 100       	 44.0118   	 0         	 7.25546   	 6.06602   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 96)                                                                               	 0.0511996 	 100       	 3.28128   	 0         	 0.189845  	 17.284    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 96, r2: 96, leftOrthog: 1)                      	 0.0460918 	 100       	 99.9744   	 0         	 12.8167   	 7.80031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 50)                           	 0.0419669 	 100       	 109.801   	 0         	 13.4506   	 8.16327   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 50, r2: 50, leftOrthog: 1)                      	 0.0408695 	 100       	 58.7235   	 0         	 14.1915   	 4.13793   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0389542 	 100       	 2.24623   	 0         	 0.155054  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 50, n: 50, r2: 96)                         	 0.0337003 	 100       	 136.735   	 0         	 16.75     	 8.16327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 50)                         	 0.0336678 	 100       	 136.867   	 0         	 11.6245   	 11.7739   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0307257 	 100       	 80.2217   	 0         	 6.31394   	 12.7055   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 96, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0194075 	 200       	 9.75406   	 0         	 1.15551   	 8.44132   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 96, r: 96, streamingCols: 0)                                 	 0.0181977 	 100       	 126.609   	 0         	 21.3041   	 5.94295   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 46)                                                                                                       	 0.0122758 	 808       	 0         	 0         	 111.421   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 96, m: 2500)                                                                                	 0.00687932	 100       	 0         	 0         	 55.8195   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 96, fromLeft: 1)                              	 0.00681231	 800       	 0         	 0         	 17.3164   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 96)                                                                       	 0.00655648	 100       	 0         	 0         	 58.568    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 1) 	 0.00473779	 100       	 0.202626  	 0         	 1.62135   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 2, r2: 1)                             	 0.00404936	 100       	 0.474149  	 0         	 2.84529   	 0.166644  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 96, r: 50, streamingCols: 46)                                  	 0.00308243	 100       	 4.05524   	 0         	 1.6221    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 96) 	 0.00234048	 100       	 39.3765   	 0         	 6.4315    	 6.12245   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 96, leftOrthog: 1)                        	 0.00186731	 100       	 25.7055   	 0         	 8.31143   	 3.09278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 96, r2: 96)                            	 0.00140468	 100       	 65.6092   	 0         	 10.7162   	 6.12245   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000880638	 100       	 28.3885   	 0         	 6.81324   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000819986	 100       	 0.609767  	 0         	 2.43907   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 96)                           	 0.000765148	 100       	 0         	 0         	 10.0373   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 46)                                                                                                        	 0.000482851	 101       	 0         	 0         	 7.69761   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                        	 0.000481589	 100       	 0         	 0         	 15.9472   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000480939	 100       	 0         	 0         	 8.31706   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 96)                                                                         	 0.000452813	 100       	 0         	 0         	 16.9606   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 1)                                                                                                        	 0.000387768	 101       	 0         	 0         	 9.58511   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 50, fromLeft: 1)                              	 0.0003625 	 100       	 0         	 0         	 21.1862   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.0003261 	 100       	 0.766636  	 0         	 12.2662   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.97753   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.9775    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.03682   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.03557   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.48795   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.35721   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.35401   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.885581  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.712468  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.642847  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.576675  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.559177  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.502336  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.456484  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.203363  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.140932  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.137662  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.126611  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0193524 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.013628  	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0116246 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00717481	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00568773	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00124917	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000819986	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000765148	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.0003261 	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23132512401280 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23132291196928 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23132089870464 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23131888544000 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23131687217536 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23131485891072 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23131284564608 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23131083238144 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23130881911680 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23130680585216 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23130479258752 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23130277932288 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23130076605824 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23129875279360 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23129673952896 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23129472626432 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23129271299968 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23129069973504 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23128868647040 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23128667320576 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23128465994112 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23128264667648 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23128063341184 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23127862014720 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23127660688256 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23127459361792 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23127258035328 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23127056708864 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23126855382400 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23126654055936 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23126452729472 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23126251403008 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23126050072448 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23125848745984 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23125647419520 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23125446093056 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23125244766592 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23125043440128 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23124842113664 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23124640787200 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23124439460736 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23124238134272 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23124036807808 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23123835481344 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23123634154880 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23123432828416 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23123231501952 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23123030175488 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23122828849024 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23122627522560 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23122426196096 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23122224869632 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23122023543168 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23121822216704 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23121620890240 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23121419563776 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23121218237312 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23121016910848 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23120815584384 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23120614257920 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23120412931456 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23120211604992 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23120010278528 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23132406740736 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23132400150272 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4850, cols: 97, reductionFactor: 37, colBlockingSize: 12)                                	 1.16746   	 1300      	 104.375   	 0         	 4.27469   	 24.4171   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 97)                                                                               	 0.862502  	 700       	 5.18503   	 0         	 0.1839    	 28.1948   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 97)	 0.612909  	 700       	 52.1678   	 0         	 6.5356    	 7.98209   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 97)                           	 0.547595  	 700       	 116.668   	 0         	 9.71836   	 12.005    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 97, r2: 97, leftOrthog: 1)                      	 0.492153  	 600       	 111.267   	 0         	 13.9485   	 7.97697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 97)                         	 0.433888  	 600       	 126.208   	 0         	 10.513    	 12.005    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4850, Xcols: 97, r: 97, streamingCols: 0)                                 	 0.183334  	 700       	 174.237   	 0         	 28.8839   	 6.03234   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 97, reductionFactor: 37, colBlockingSize: 12)                                	 0.153723  	 200       	 62.8617   	 0         	 2.62195   	 23.9752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 97)                                                                                	 0.144659  	 900       	 7.57094   	 0         	 1.40975   	 5.37043   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4850, m: 97)                                                                       	 0.1321    	 700       	 0         	 0         	 39.8868   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 97, m: 4850)                                                                                	 0.111831  	 700       	 0         	 0         	 47.116    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 97)                                                                               	 0.0520811 	 100       	 3.25934   	 0         	 0.188168  	 17.3214   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 50)	 0.0507383 	 100       	 46.4048   	 0         	 7.61239   	 6.09595   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 97, r2: 97, leftOrthog: 1)                      	 0.0449818 	 100       	 104.587   	 0         	 13.2732   	 7.87952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 50)                           	 0.0400353 	 100       	 117.509   	 0         	 14.3433   	 8.19257   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0397878 	 100       	 2.19917   	 0         	 0.151805  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 50, r2: 50, leftOrthog: 1)                      	 0.0392351 	 100       	 61.8069   	 0         	 14.9356   	 4.13823   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 50)                         	 0.0372041 	 100       	 126.451   	 0         	 10.6313   	 11.8943   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 50, n: 50, r2: 97)                         	 0.033726  	 100       	 139.492   	 0         	 17.0266   	 8.19257   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0313398 	 100       	 79.4688   	 0         	 6.25402   	 12.7068   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 97, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0187813 	 200       	 10.2904   	 0         	 1.21474   	 8.47123   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 97, r: 97, streamingCols: 0)                                 	 0.0177394 	 100       	 132.601   	 0         	 22.0844   	 6.00426   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 47)                                                                                                       	 0.0173527 	 808       	 0         	 0         	 82.2867   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 97)                                                                       	 0.00643435	 100       	 0         	 0         	 60.3014   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 97, m: 2500)                                                                                	 0.00630575	 100       	 0         	 0         	 61.5311   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 97, fromLeft: 1)                              	 0.00568184	 800       	 0         	 0         	 21.1965   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 1) 	 0.00464657	 100       	 0.208756  	 0         	 1.67039   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 2, r2: 1)                             	 0.00391359	 100       	 0.495708  	 0         	 2.97466   	 0.166644  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 97, r: 50, streamingCols: 47)                                  	 0.00306566	 100       	 4.07743   	 0         	 1.63097   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 97) 	 0.00237781	 100       	 39.57     	 0         	 6.4291    	 6.15482   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 97, leftOrthog: 1)                        	 0.00196313	 100       	 24.7055   	 0         	 7.96688   	 3.10102   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 97, r2: 97)                            	 0.00143996	 100       	 65.3421   	 0         	 10.6164   	 6.15482   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000972558	 100       	 0.514108  	 0         	 2.05643   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000846945	 100       	 29.5179   	 0         	 7.08429   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 97)                           	 0.00079196	 100       	 0         	 0         	 9.79847   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                        	 0.000505917	 100       	 0         	 0         	 15.3385   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 47)                                                                                                        	 0.000487666	 101       	 0         	 0         	 7.7873    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000472039	 100       	 0         	 0         	 8.47388   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 97)                                                                         	 0.00046591	 100       	 0         	 0         	 16.6556   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 1)                                                                                                        	 0.000407073	 101       	 0         	 0         	 9.32904   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 50, fromLeft: 1)                              	 0.000364975	 100       	 0         	 0         	 21.2617   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330496	 100       	 0.756439  	 0         	 12.103    	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.22841   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.22838   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.18226   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.18087   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.59827   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.37131   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.36619   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.954371  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.719418  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.670672  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.653185  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.592984  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.578333  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.505665  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.204139  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.144659  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.139     	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.118609  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0196827 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0187534 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0105247 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00604681	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00554857	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00104895	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000972558	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00079196	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330496	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22792622155648 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22792384800768 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22792183474304 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22791982147840 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22791780821376 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22791579494912 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22791378168448 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22791176841984 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22790975515520 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22790774189056 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22790572862592 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22790371536128 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22790170209664 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22789968883200 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22789767556736 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22789566230272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22789364903808 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22789163577344 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22788962250880 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22788760924416 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22788559597952 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22788358271488 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22788156945024 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22787955618560 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22787754292096 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22787552965632 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22787351639168 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22787150312704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22786948986240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22786747659776 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22786546333312 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22786345006848 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22786143676288 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22785942349824 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22785741023360 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22785539696896 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22785338370432 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22785137043968 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22784935717504 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22784734391040 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22784533064576 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22784331738112 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22784130411648 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22783929085184 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22783727758720 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22783526432256 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22783325105792 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22783123779328 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22782922452864 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22782721126400 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22782519799936 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22782318473472 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22782117147008 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22781915820544 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22781714494080 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22781513167616 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22781311841152 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22781110514688 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22780909188224 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22780707861760 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22780506535296 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22780305208832 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22780103882368 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22792516495104 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22792509904640 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4900, cols: 98, reductionFactor: 37, colBlockingSize: 12)                                	 1.16935   	 1300      	 107.463   	 0         	 4.35622   	 24.6688   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 98)                                                                               	 0.846984  	 700       	 5.44501   	 0         	 0.191144  	 28.4864   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 98)	 0.630351  	 700       	 52.2811   	 0         	 6.48531   	 8.06146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 98)                           	 0.566828  	 700       	 116.232   	 0         	 9.5832    	 12.1287   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 98, r2: 98, leftOrthog: 1)                      	 0.490761  	 600       	 115.069   	 0         	 14.278    	 8.05921   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 98)                         	 0.438114  	 600       	 128.897   	 0         	 10.6274   	 12.1287   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4900, Xcols: 98, r: 98, streamingCols: 0)                                 	 0.185297  	 700       	 177.778   	 0         	 29.1701   	 6.09453   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 98, reductionFactor: 37, colBlockingSize: 12)                                	 0.154038  	 200       	 64.0331   	 0         	 2.64458   	 24.213    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4900, m: 98)                                                                       	 0.147871  	 700       	 0         	 0         	 36.3712   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 98)                                                                                	 0.146997  	 900       	 7.68334   	 0         	 1.41603   	 5.42599   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 98, m: 4900)                                                                                	 0.116763  	 700       	 0         	 0         	 46.0611   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 98)                                                                               	 0.0525323 	 100       	 3.26466   	 0         	 0.188075  	 17.3583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 50)	 0.0517741 	 100       	 46.3939   	 0         	 7.5729    	 6.1263    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 98, r2: 98, leftOrthog: 1)                      	 0.047206  	 100       	 101.724   	 0         	 12.7816   	 7.95868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 50)                           	 0.0411703 	 100       	 116.637   	 0         	 14.1869   	 8.22148   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0398049 	 100       	 2.19822   	 0         	 0.15174   	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 50)                         	 0.0374699 	 100       	 128.156   	 0         	 10.6668   	 12.0145   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 50, n: 50, r2: 98)                         	 0.0328359 	 100       	 146.242   	 0         	 17.7878   	 8.22148   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0314034 	 100       	 80.1257   	 0         	 6.30506   	 12.7082   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 50, r2: 50, leftOrthog: 1)                      	 0.0306534 	 100       	 79.9259   	 0         	 19.3127   	 4.13851   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 98, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0187445 	 200       	 10.5242   	 0         	 1.23804   	 8.50073   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 98, r: 98, streamingCols: 0)                                 	 0.0177712 	 100       	 135.106   	 0         	 22.2743   	 6.06556   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 48)                                                                                                       	 0.0176798 	 808       	 0         	 0         	 84.2378   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 98, m: 2500)                                                                                	 0.00641231	 100       	 0         	 0         	 61.1324   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 98)                                                                       	 0.00627726	 100       	 0         	 0         	 62.4476   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 98, fromLeft: 1)                              	 0.0061038 	 800       	 0         	 0         	 20.1401   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 1) 	 0.00452047	 100       	 0.216792  	 0         	 1.73469   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 2, r2: 1)                             	 0.00379745	 100       	 0.516136  	 0         	 3.09724   	 0.166644  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 98, r: 50, streamingCols: 48)                                  	 0.00306394	 100       	 4.07972   	 0         	 1.63189   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 98) 	 0.00230708	 100       	 41.6284   	 0         	 6.7285    	 6.18687   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 98, leftOrthog: 1)                        	 0.0018889 	 100       	 25.9411   	 0         	 8.34349   	 3.10914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 98, r2: 98)                            	 0.00136412	 100       	 70.4045   	 0         	 11.3797   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000907351	 100       	 27.5527   	 0         	 6.61266   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000798704	 100       	 0.626014  	 0         	 2.50406   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 98)                           	 0.000774101	 100       	 0         	 0         	 10.1279   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                        	 0.000492414	 100       	 0         	 0         	 15.9216   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000485613	 100       	 0         	 0         	 8.23701   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 98)                                                                         	 0.000476725	 100       	 0         	 0         	 16.4455   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 48)                                                                                                        	 0.000474968	 101       	 0         	 0         	 8.1656    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 1)                                                                                                        	 0.000404845	 101       	 0         	 0         	 9.57996   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 50, fromLeft: 1)                              	 0.000370059	 100       	 0         	 0         	 21.1858   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000319646	 100       	 0.782115  	 0         	 12.5138   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.29769   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.29766   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.20361   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.20241   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.60871   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.3939    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.37354   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.939322  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.721659  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.688953  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.653122  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.61316   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.57051   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.509327  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.206132  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.154625  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.146997  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.123661  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0200086 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.019052  	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0136161 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00647386	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00513015	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122907	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000798704	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000774101	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000319646	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23080353515392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23080147609600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23079946283136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23079744956672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23079543630208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23079342303744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23079140977280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23078939650816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23078738324352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23078536997888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23078335671424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23078134344960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23077933018496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23077731692032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23077530365568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23077329039104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23077127712640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23076926386176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23076725059712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23076523733248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23076322406784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23076121080320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23075919753856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23075718427392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23075517100928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23075315774464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23075114448000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23074913121536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23074711795072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23074510468608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23074309142144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23074107815680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23073906485120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23073705158656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23073503832192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23073302505728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23073101179264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23072899852800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23072698526336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23072497199872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23072295873408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23072094546944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23071893220480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23071691894016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23071490567552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23071289241088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23071087914624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23070886588160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23070685261696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23070483935232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23070282608768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23070081282304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23069879955840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23069678629376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23069477302912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23069275976448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23069074649984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23068873323520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23068671997056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23068470670592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23068269344128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23068068017664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23067866691200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23080247854848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23080241264384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4950, cols: 99, reductionFactor: 37, colBlockingSize: 12)                                	 1.20004   	 1300      	 107.953   	 0         	 4.33189   	 24.9205   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 99)                                                                               	 0.909198  	 700       	 5.22929   	 0         	 0.181711  	 28.7781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 99)	 0.649075  	 700       	 52.3267   	 0         	 6.42675   	 8.142     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 99)                           	 0.585762  	 700       	 115.953   	 0         	 9.46365   	 12.2525   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 99, r2: 99, leftOrthog: 1)                      	 0.504519  	 600       	 115.393   	 0         	 14.1735   	 8.14145   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 99)                         	 0.462102  	 600       	 125.985   	 0         	 10.2824   	 12.2525   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4950, Xcols: 99, r: 99, streamingCols: 0)                                 	 0.193566  	 700       	 175.447   	 0         	 28.4968   	 6.15672   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 99, reductionFactor: 37, colBlockingSize: 12)                                	 0.156435  	 200       	 64.3454   	 0         	 2.63164   	 24.4507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 99)                                                                                	 0.155299  	 900       	 7.49754   	 0         	 1.36778   	 5.48154   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4950, m: 99)                                                                       	 0.142972  	 700       	 0         	 0         	 38.3891   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 99, m: 4950)                                                                                	 0.11882   	 700       	 0         	 0         	 46.1921   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 99)                                                                               	 0.0528388 	 100       	 3.27884   	 0         	 0.188498  	 17.3946   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 99, r2: 99, leftOrthog: 1)                      	 0.0525161 	 100       	 93.3143   	 0         	 11.6094   	 8.0378    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 50)	 0.0522345 	 100       	 46.9135   	 0         	 7.61949   	 6.15704   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0419769 	 100       	 2.08448   	 0         	 0.143889  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 50)                           	 0.0412986 	 100       	 118.66    	 0         	 14.3831   	 8.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 50, r2: 50, leftOrthog: 1)                      	 0.0408939 	 100       	 60.5225   	 0         	 14.6232   	 4.1388    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 50)                         	 0.0386619 	 100       	 126.753   	 0         	 10.4455   	 12.1347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 50, n: 50, r2: 99)                         	 0.0350246 	 100       	 139.916   	 0         	 16.9595   	 8.25      
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0304569 	 100       	 83.4588   	 0         	 6.56667   	 12.7095   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 99, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0189388 	 200       	 10.6299   	 0         	 1.24621   	 8.52984   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 49)                                                                                                       	 0.0189184 	 808       	 0         	 0         	 82.037    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 99, r: 99, streamingCols: 0)                                 	 0.0182543 	 100       	 134.228   	 0         	 21.9083   	 6.12684   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 99)                                                                       	 0.0067007 	 100       	 0         	 0         	 59.0983   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 99, m: 2500)                                                                                	 0.00633774	 100       	 0         	 0         	 62.4828   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 99, fromLeft: 1)                              	 0.00616569	 800       	 0         	 0         	 20.3469   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 1) 	 0.00480306	 100       	 0.206119  	 0         	 1.64928   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 2, r2: 1)                             	 0.00415487	 100       	 0.476549  	 0         	 2.85968   	 0.166644  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 99, r: 50, streamingCols: 49)                                  	 0.00317563	 100       	 3.93622   	 0         	 1.57449   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 99) 	 0.00235448	 100       	 41.6269   	 0         	 6.69395   	 6.21859   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 99, leftOrthog: 1)                        	 0.00187449	 100       	 26.4072   	 0         	 8.47164   	 3.11713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 99, r2: 99)                            	 0.00140161	 100       	 69.9269   	 0         	 11.2448   	 6.21859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000886702	 100       	 28.1944   	 0         	 6.76665   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000822997	 100       	 0.607536  	 0         	 2.43014   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 99)                           	 0.000790612	 100       	 0         	 0         	 10.0176   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 49)                                                                                                        	 0.000492914	 101       	 0         	 0         	 8.03223   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                        	 0.000492537	 100       	 0         	 0         	 16.08     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000488315	 100       	 0         	 0         	 8.19143   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 99)                                                                         	 0.000464557	 100       	 0         	 0         	 17.0485   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 1)                                                                                                        	 0.000398556	 101       	 0         	 0         	 9.93386   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 50, fromLeft: 1)                              	 0.00037417	 100       	 0         	 0         	 21.1668   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000346819	 100       	 0.720837  	 0         	 11.5334   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.48034   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.48031   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.34171   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.34045   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.70686   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.42127   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.40587   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.00401   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.737094  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.708467  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.67001   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.632617  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.599803  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.536675  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.214996  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.155299  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.150137  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.125646  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0203837 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0203024 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0121449 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00653986	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00570716	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122304	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000822997	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000790612	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346819	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23439197550464 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23438978705408 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23438777378944 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23438576052480 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23438374726016 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23438173399552 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23437972073088 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23437770746624 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23437569420160 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23437368093696 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23437166767232 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23436965440768 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23436764114304 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23436562787840 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23436361461376 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23436160134912 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23435958808448 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23435757481984 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23435556155520 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23435354829056 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23435153502592 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23434952176128 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23434750849664 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23434549523200 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23434348196736 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23434146870272 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23433945543808 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23433744217344 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23433542890880 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23433341564416 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23433140237952 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23432938911488 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23432737580928 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23432536254464 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23432334928000 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23432133601536 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23431932275072 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23431730948608 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23431529622144 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23431328295680 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23431126969216 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23430925642752 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23430724316288 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23430522989824 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23430321663360 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23430120336896 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23429919010432 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23429717683968 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23429516357504 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23429315031040 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23429113704576 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23428912378112 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23428711051648 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23428509725184 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23428308398720 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23428107072256 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23427905745792 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23427704419328 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23427503092864 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23427301766400 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23427100439936 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23426899113472 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23426697787008 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23439091889920 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23439085299456 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5000, cols: 100, reductionFactor: 37, colBlockingSize: 12)                                 	 1.2452    	 1300      	 107.223   	 0         	 4.25956   	 25.1722   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 100)                                                                               	 0.886011  	 700       	 5.53041   	 0         	 0.190246  	 29.0698   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 100)	 0.658566  	 700       	 53.1458   	 0         	 6.46253   	 8.22368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 100)                          	 0.59361   	 700       	 117.923   	 0         	 9.52814   	 12.3762   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 100, r2: 100, leftOrthog: 1)                      	 0.508771  	 600       	 117.931   	 0         	 14.3404   	 8.22368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 100)                        	 0.473483  	 600       	 126.721   	 0         	 10.239    	 12.3762   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5000, Xcols: 100, r: 100, streamingCols: 0)                                 	 0.196222  	 700       	 178.369   	 0         	 28.6818   	 6.21891   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 100, reductionFactor: 37, colBlockingSize: 12)                                 	 0.159519  	 200       	 64.3827   	 0         	 2.60784   	 24.6881   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 100)                                                                                	 0.146466  	 900       	 8.19299   	 0         	 1.47966   	 5.53709   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5000, m: 100)                                                                        	 0.133263  	 700       	 0         	 0         	 42.022    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 100, m: 5000)                                                                                 	 0.122366  	 700       	 0         	 0         	 45.7643   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 100)                                                                                	 0.0532449 	 100       	 3.2867    	 0         	 0.188563  	 17.4303   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 50) 	 0.0527518 	 100       	 47.3918   	 0         	 7.65851   	 6.18812   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 100, r2: 100, leftOrthog: 1)                      	 0.047239  	 100       	 105.845   	 0         	 13.0401   	 8.11688   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 50)                           	 0.0407214 	 100       	 122.786   	 0         	 14.8325   	 8.27815   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0401964 	 100       	 2.17681   	 0         	 0.150262  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 50)                         	 0.0386976 	 100       	 129.207   	 0         	 10.5433   	 12.2549   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0383689 	 100       	 65.157    	 0         	 15.7419   	 4.13907   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 50, n: 50, r2: 100)                         	 0.0346863 	 100       	 144.149   	 0         	 17.4132   	 8.27815   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0315718 	 100       	 81.3246   	 0         	 6.39811   	 12.7107   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 100, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0211815 	 200       	 9.69739   	 0         	 1.13306   	 8.55856   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 50)                                                                                                         	 0.0198379 	 808       	 0         	 0         	 81.4603   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 100, r: 100, streamingCols: 0)                                 	 0.0185328 	 100       	 134.896   	 0         	 21.7992   	 6.18812   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 100, m: 2500)                                                                                 	 0.00704294	 100       	 0         	 0         	 56.7945   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 100)                                                                        	 0.00668559	 100       	 0         	 0         	 59.8302   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 100, fromLeft: 1)                              	 0.00641035	 800       	 0         	 0         	 19.9677   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 1)  	 0.00459507	 100       	 0.217624  	 0         	 1.74134   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 2, r2: 1)                              	 0.0039234 	 100       	 0.509762  	 0         	 3.05898   	 0.166644  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 100, r: 50, streamingCols: 50)                                   	 0.00315593	 100       	 3.9608    	 0         	 1.58432   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 100)  	 0.00240418	 100       	 41.5942   	 0         	 6.65506   	 6.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 100, leftOrthog: 1)                         	 0.00178937	 100       	 27.9428   	 0         	 8.94169   	 3.125     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 100, r2: 100)                            	 0.00147659	 100       	 67.7237   	 0         	 10.8358   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000950081	 100       	 26.3135   	 0         	 6.31525   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000892489	 100       	 0.560231  	 0         	 2.24092   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 100)                            	 0.000773233	 100       	 0         	 0         	 10.3462   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.000525007	 100       	 0         	 0         	 15.2379   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                                          	 0.000492177	 101       	 0         	 0         	 8.20843   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 100)                                                                          	 0.000487792	 100       	 0         	 0         	 16.4004   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000468722	 100       	 0         	 0         	 8.53384   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 50, fromLeft: 1)                               	 0.00037985	 100       	 0         	 0         	 21.0609   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                          	 0.000369031	 101       	 0         	 0         	 10.9476   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000320702	 100       	 0.77954   	 0         	 12.4726   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.48317   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.48314   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.31256   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.31126   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.67483   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.45747   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.44643   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.979452  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.770731  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.718317  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.687908  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.639731  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.596168  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.547817  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.217911  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.146466  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.140437  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.129878  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0213133 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0212241 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0130392 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0067902 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00528088	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00118928	 4452      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000892489	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000773233	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000320702	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23228928169856 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23228726634496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23228525308032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23228323981568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23228122655104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23227921328640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23227720002176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23227518675712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23227317349248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23227116022784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23226914696320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23226713369856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23226512043392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23226310716928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23226109390464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23225908064000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23225706737536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23225505411072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23225304084608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23225102758144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23224901431680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23224700105216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23224498778752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23224297452288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23224096125824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23223894799360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23223693472896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23223492146432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23223290819968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23223089493504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23222888167040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23222686840576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23222485510016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23222284183552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23222082857088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23221881530624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23221680204160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23221478877696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23221277551232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23221076224768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23220874898304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23220673571840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23220472245376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23220270918912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23220069592448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23219868265984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23219666939520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23219465613056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23219264286592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23219062960128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23218861633664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23218660307200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23218458980736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23218257654272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23218056327808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23217855001344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23217653674880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23217452348416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23217251021952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23217049695488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23216848369024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23216647042560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23216445716096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23228822509312 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23228815918848 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5050, cols: 101, reductionFactor: 37, colBlockingSize: 12)                                 	 1.24109   	 1300      	 110.837   	 0         	 4.35956   	 25.424    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 101)                                                                               	 0.941906  	 700       	 5.35985   	 0         	 0.182547  	 29.3614   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 101)	 0.652271  	 700       	 55.29     	 0         	 6.65626   	 8.30647   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 101)                          	 0.587611  	 700       	 122.736   	 0         	 9.81889   	 12.5      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 101, r2: 101, leftOrthog: 1)                      	 0.528308  	 600       	 117.011   	 0         	 14.0877   	 8.30592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 101)                        	 0.478295  	 600       	 129.247   	 0         	 10.3397   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5050, Xcols: 101, r: 101, streamingCols: 0)                                 	 0.195131  	 700       	 184.802   	 0         	 29.4219   	 6.28109   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 101, reductionFactor: 37, colBlockingSize: 12)                                 	 0.1638    	 200       	 63.9604   	 0         	 2.56607   	 24.9254   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 101)                                                                                	 0.158972  	 900       	 7.77723   	 0         	 1.39062   	 5.59265   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5050, m: 101)                                                                        	 0.153937  	 700       	 0         	 0         	 37.1097   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 101, m: 5050)                                                                                 	 0.113203  	 700       	 0         	 0         	 50.4631   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 101)                                                                                	 0.0564301 	 100       	 3.13219   	 0         	 0.179337  	 17.4654   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 50) 	 0.0516495 	 100       	 49.3809   	 0         	 7.93967   	 6.21952   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 101, r2: 101, leftOrthog: 1)                      	 0.0474422 	 100       	 107.51    	 0         	 13.1175   	 8.19592   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0440877 	 100       	 57.2722   	 0         	 13.8361   	 4.13934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 50)                           	 0.0413338 	 100       	 123.398   	 0         	 14.8566   	 8.30592   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0411652 	 100       	 2.12558   	 0         	 0.146726  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 50)                         	 0.0401354 	 100       	 127.082   	 0         	 10.2693   	 12.375    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 50, n: 50, r2: 101)                         	 0.0356893 	 100       	 142.914   	 0         	 17.2063   	 8.30592   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0312983 	 100       	 82.8558   	 0         	 6.51793   	 12.712    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 51)                                                                                                         	 0.0204635 	 808       	 0         	 0         	 82.1602   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 101, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0203239 	 200       	 10.3097   	 0         	 1.20063   	 8.5869    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 101, r: 101, streamingCols: 0)                                 	 0.0187382 	 100       	 136.099   	 0         	 21.778    	 6.24938   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 101)                                                                        	 0.00746944	 100       	 0         	 0         	 54.0871   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 101, fromLeft: 1)                              	 0.0063471 	 800       	 0         	 0         	 20.5721   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 101, m: 2500)                                                                                 	 0.00613018	 100       	 0         	 0         	 65.9035   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 1)  	 0.00547083	 100       	 0.184616  	 0         	 1.47722   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 2, r2: 1)                              	 0.00414909	 100       	 0.486854  	 0         	 2.92151   	 0.166645  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 101, r: 50, streamingCols: 50)                                   	 0.00326795	 100       	 3.82503   	 0         	 1.53001   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 101)  	 0.00229563	 100       	 44.4367   	 0         	 7.07467   	 6.28109   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 101, leftOrthog: 1)                         	 0.00199141	 100       	 25.3589   	 0         	 8.09477   	 3.13275   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 101, r2: 101)                            	 0.00136942	 100       	 74.4916   	 0         	 11.8596   	 6.28109   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000905686	 100       	 0.552068  	 0         	 2.20827   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000858642	 100       	 29.1157   	 0         	 6.98778   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 101)                            	 0.000762196	 100       	 0         	 0         	 10.6009   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                          	 0.000498664	 101       	 0         	 0         	 8.26368   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 101)                                                                                                         	 0.000482059	 100       	 0         	 0         	 16.7614   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 101)                                                                          	 0.000470618	 100       	 0         	 0         	 17.1689   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000466029	 100       	 0         	 0         	 8.58316   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 1)                                                                                                          	 0.000375392	 101       	 0         	 0         	 10.9773   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 50, fromLeft: 1)                               	 0.0003647 	 100       	 0         	 0         	 22.1552   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000325975	 100       	 0.76693   	 0         	 12.2709   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.58668   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.58665   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.40289   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.40156   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.76867   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.46272   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.45651   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.0395    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.756966  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.711687  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.700775  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.634463  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.621829  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.554978  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.217137  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.161877  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.158972  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.119799  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0218196 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0215953 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0108498 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0067118 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00548848	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00129672	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000905686	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000762196	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000325975	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23144138160000 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23143901030400 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23143699703936 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23143498377472 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23143297051008 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23143095724544 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23142894398080 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23142693071616 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23142491745152 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23142290418688 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23142089092224 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23141887765760 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23141686439296 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23141485112832 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23141283786368 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23141082459904 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23140881133440 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23140679806976 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23140478480512 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23140277154048 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23140075827584 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23139874501120 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23139673174656 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23139471848192 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23139270521728 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23139069195264 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23138867868800 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23138666542336 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23138465215872 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23138263889408 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23138062562944 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23137861236480 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23137659905920 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23137458579456 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23137257252992 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23137055926528 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23136854600064 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23136653273600 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23136451947136 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23136250620672 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23136049294208 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23135847967744 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23135646641280 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23135445314816 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23135243988352 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23135042661888 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23134841335424 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23134640008960 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23134438682496 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23134237356032 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23134036029568 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23133834703104 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23133633376640 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23133432050176 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23133230723712 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23133029397248 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23132828070784 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23132626744320 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23132425417856 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23132224091392 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23132022764928 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23131821438464 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23131620112000 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23144032499456 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23144025908992 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5100, cols: 102, reductionFactor: 37, colBlockingSize: 12)                                 	 1.26256   	 1300      	 112.221   	 0         	 4.37071   	 25.6757   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 102)                                                                               	 0.926485  	 700       	 5.61253   	 0         	 0.189273  	 29.6531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 102)	 0.674549  	 700       	 55.0836   	 0         	 6.56513   	 8.39032   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 102)                          	 0.610818  	 700       	 121.615   	 0         	 9.63381   	 12.6238   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 102, r2: 102, leftOrthog: 1)                      	 0.537454  	 600       	 118.471   	 0         	 14.1236   	 8.38816   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 102)                        	 0.507539  	 600       	 125.453   	 0         	 9.93787   	 12.6238   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5100, Xcols: 102, r: 102, streamingCols: 0)                                 	 0.203135  	 700       	 182.845   	 0         	 28.825    	 6.34328   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 102, reductionFactor: 37, colBlockingSize: 12)                                 	 0.165403  	 200       	 64.601    	 0         	 2.56735   	 25.1626   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 102)                                                                                	 0.160038  	 900       	 7.95718   	 0         	 1.4088    	 5.64821   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5100, m: 102)                                                                        	 0.149851  	 700       	 0         	 0         	 38.8801   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 102, m: 5100)                                                                                 	 0.114059  	 700       	 0         	 0         	 51.0808   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 102)                                                                                	 0.0548823 	 100       	 3.25241   	 0         	 0.185852  	 17.5      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 50) 	 0.0542488 	 100       	 47.9642   	 0         	 7.67279   	 6.2512    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 102, r2: 102, leftOrthog: 1)                      	 0.0463216 	 100       	 112.302   	 0         	 13.5713   	 8.27492   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0436303 	 100       	 58.4456   	 0         	 14.1186   	 4.13961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 50)                           	 0.0434    	 100       	 119.862   	 0         	 14.3834   	 8.33333   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0403044 	 100       	 2.17098   	 0         	 0.14986   	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 50)                         	 0.0391793 	 100       	 132.774   	 0         	 10.6261   	 12.4951   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 50, n: 50, r2: 102)                         	 0.0357269 	 100       	 145.605   	 0         	 17.4726   	 8.33333   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0310289 	 100       	 84.4026   	 0         	 6.63897   	 12.7132   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 102, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0216829 	 200       	 9.85585   	 0         	 1.14405   	 8.61486   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 52)                                                                                                         	 0.0210483 	 808       	 0         	 0         	 83.0409   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 102, r: 102, streamingCols: 0)                                 	 0.0189872 	 100       	 136.987   	 0         	 21.7074   	 6.31063   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 102)                                                                        	 0.0077314 	 100       	 0         	 0         	 52.7718   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 102, fromLeft: 1)                              	 0.00702835	 800       	 0         	 0         	 18.9477   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 102, m: 2500)                                                                                 	 0.00672182	 100       	 0         	 0         	 60.6978   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 1)  	 0.0048718 	 100       	 0.209368  	 0         	 1.67527   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 2, r2: 1)                              	 0.00419592	 100       	 0.486187  	 0         	 2.9175    	 0.166645  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 102, r: 50, streamingCols: 50)                                   	 0.00320574	 100       	 3.89925   	 0         	 1.5597    	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 102, leftOrthog: 1)                         	 0.00267233	 100       	 19.0845   	 0         	 6.0771    	 3.14039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 102)  	 0.00236054	 100       	 44.0746   	 0         	 6.98279   	 6.31188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 102, r2: 102)                            	 0.00140024	 100       	 74.3014   	 0         	 11.7717   	 6.31188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000921069	 100       	 27.1424   	 0         	 6.51417   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000866659	 100       	 0.576928  	 0         	 2.30771   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 102)                            	 0.000783027	 100       	 0         	 0         	 10.4211   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 102)                                                                          	 0.000500819	 100       	 0         	 0         	 16.2933   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 102)                                                                                                         	 0.000499073	 100       	 0         	 0         	 16.3503   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                          	 0.000497333	 101       	 0         	 0         	 8.44826   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000471146	 100       	 0         	 0         	 8.48994   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 50, fromLeft: 1)                               	 0.00040254	 100       	 0         	 0         	 20.2713   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 1)                                                                                                          	 0.000398377	 101       	 0         	 0         	 10.5468   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000335059	 100       	 0.746137  	 0         	 11.9382   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.6764    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.67637   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.45068   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.44939   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.77747   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.48115   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.48068   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.02167   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.77749   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.73603   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.704265  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.659814  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.630078  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.583366  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.225328  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.160038  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.158084  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.121252  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.022443  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0218251 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0109353 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00743089	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00552505	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00130333	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000866659	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000783027	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335059	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23424495929216 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23424281864192 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23424080537728 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23423879211264 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23423677884800 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23423476558336 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23423275231872 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23423073905408 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23422872578944 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23422671252480 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23422469926016 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23422268599552 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23422067273088 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23421865946624 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23421664620160 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23421463293696 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23421261967232 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23421060640768 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23420859314304 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23420657987840 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23420456661376 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23420255334912 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23420054008448 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23419852681984 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23419651355520 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23419450029056 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23419248702592 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23419047376128 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23418846049664 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23418644723200 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23418443396736 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23418242070272 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23418040739712 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23417839413248 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23417638086784 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23417436760320 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23417235433856 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23417034107392 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23416832780928 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23416631454464 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23416430128000 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23416228801536 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23416027475072 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23415826148608 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23415624822144 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23415423495680 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23415222169216 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23415020842752 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23414819516288 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23414618189824 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23414416863360 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23414215536896 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23414014210432 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23413812883968 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23413611557504 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23413410231040 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23413208904576 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23413007578112 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23412806251648 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23412604925184 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23412403598720 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23412202272256 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23412000945792 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23424390268672 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23424383678208 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5150, cols: 103, reductionFactor: 37, colBlockingSize: 12)                                 	 1.26886   	 1300      	 114.981   	 0         	 4.43471   	 25.9274   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 103)                                                                               	 0.963992  	 700       	 5.55436   	 0         	 0.185487  	 29.9448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 103)	 0.683572  	 700       	 55.9968   	 0         	 6.60713   	 8.47522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 103)                          	 0.618368  	 700       	 123.698   	 0         	 9.70368   	 12.7475   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 103, r2: 103, leftOrthog: 1)                      	 0.570996  	 600       	 114.823   	 0         	 13.5558   	 8.47039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 103)                        	 0.487538  	 600       	 134.479   	 0         	 10.5494   	 12.7475   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5150, Xcols: 103, r: 103, streamingCols: 0)                                 	 0.20079   	 700       	 190.475   	 0         	 29.7362   	 6.40547   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 103, reductionFactor: 37, colBlockingSize: 12)                                 	 0.174674  	 200       	 62.3774   	 0         	 2.45585   	 25.3995   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 103)                                                                                	 0.166016  	 900       	 7.89845   	 0         	 1.38478   	 5.70376   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5150, m: 103)                                                                        	 0.150444  	 700       	 0         	 0         	 39.4901   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 103, m: 5150)                                                                                 	 0.116312  	 700       	 0         	 0         	 51.0785   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 50) 	 0.0551475 	 100       	 48.1346   	 0         	 7.66091   	 6.28314   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 103)                                                                                	 0.0545472 	 100       	 3.30448   	 0         	 0.188461  	 17.534    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 103, r2: 103, leftOrthog: 1)                      	 0.0539793 	 100       	 98.2691   	 0         	 11.7633   	 8.35388   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 50)                           	 0.0454412 	 100       	 116.733   	 0         	 13.9626   	 8.36039   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0433609 	 100       	 59.3853   	 0         	 14.3447   	 4.13987   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0411651 	 100       	 2.12559   	 0         	 0.146726  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 50)                         	 0.037798  	 100       	 140.338   	 0         	 11.1246   	 12.6151   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 50, n: 50, r2: 103)                         	 0.0351956 	 100       	 150.715   	 0         	 18.0272   	 8.36039   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0305667 	 100       	 86.5189   	 0         	 6.8048    	 12.7144   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 103, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0208658 	 200       	 10.4436   	 0         	 1.20841   	 8.64247   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 53)                                                                                                         	 0.0207605 	 808       	 0         	 0         	 87.4614   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 103, r: 103, streamingCols: 0)                                 	 0.0197007 	 100       	 134.627   	 0         	 21.1283   	 6.37187   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 103, fromLeft: 1)                              	 0.00680906	 800       	 0         	 0         	 19.9433   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 103)                                                                        	 0.0065539 	 100       	 0         	 0         	 62.8633   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 103, m: 2500)                                                                                 	 0.00512044	 100       	 0         	 0         	 80.4619   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 1)  	 0.00467002	 100       	 0.220556  	 0         	 1.76479   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 2, r2: 1)                              	 0.00398263	 100       	 0.517247  	 0         	 3.10388   	 0.166645  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 103, r: 50, streamingCols: 50)                                   	 0.00314733	 100       	 3.97162   	 0         	 1.58865   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 103)  	 0.00234363	 100       	 45.2673   	 0         	 7.1373    	 6.34236   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 103, leftOrthog: 1)                         	 0.00179964	 100       	 28.6169   	 0         	 9.09071   	 3.14792   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 103, r2: 103)                            	 0.00139413	 100       	 76.0976   	 0         	 11.9983   	 6.34236   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000886219	 100       	 0.564195  	 0         	 2.25678   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000836263	 100       	 29.8949   	 0         	 7.17478   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 103)                            	 0.000779017	 100       	 0         	 0         	 10.5774   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 103)                                                                                                         	 0.000492661	 100       	 0         	 0         	 16.7255   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                          	 0.000490273	 101       	 0         	 0         	 8.73473   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 103)                                                                          	 0.000484056	 100       	 0         	 0         	 17.0228   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000479912	 100       	 0         	 0         	 8.33486   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 50, fromLeft: 1)                               	 0.000413881	 100       	 0         	 0         	 19.9091   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 1)                                                                                                          	 0.000367289	 101       	 0         	 0         	 11.6595   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323471	 100       	 0.772867  	 0         	 12.3659   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.75651   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.75649   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.51108   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.50979   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.8697    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.49668   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.49496   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.0597    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.781341  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.745733  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.714996  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.670136  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.669186  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.561368  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.223638  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.166016  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.157482  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.121912  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0224306 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0221107 	 1110      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0124325 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00722294	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00504018	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122827	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000886219	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000779017	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323471	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22582845228928 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22582669600768 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22582468274304 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22582266947840 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22582065621376 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22581864294912 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22581662968448 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22581461641984 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22581260315520 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22581058989056 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22580857662592 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22580656336128 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22580455009664 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22580253683200 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22580052356736 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22579851030272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22579649703808 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22579448377344 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22579247050880 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22579045724416 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22578844397952 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22578643071488 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22578441745024 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22578240418560 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22578039092096 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22577837765632 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22577636439168 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22577435112704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22577233786240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22577032459776 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22576831133312 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22576629806848 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22576428476288 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22576227149824 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22576025823360 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22575824496896 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22575623170432 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22575421843968 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22575220517504 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22575019191040 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22574817864576 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22574616538112 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22574415211648 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22574213885184 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22574012558720 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22573811232256 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22573609905792 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22573408579328 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22573207252864 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22573005926400 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22572804599936 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22572603273472 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22572401947008 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22572200620544 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22571999294080 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22571797967616 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22571596641152 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22571395314688 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22571193988224 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22570992661760 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22570791335296 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22570590008832 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22570388682368 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22582739568384 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22582560995072 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5200, cols: 104, reductionFactor: 37, colBlockingSize: 12)                                 	 1.28453   	 1300      	 116.918   	 0         	 4.46607   	 26.1791   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 104)                                                                               	 0.922171  	 700       	 5.97702   	 0         	 0.197676  	 30.2364   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 104)	 0.700151  	 700       	 56.3143   	 0         	 6.57791   	 8.56112   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 104)                          	 0.631587  	 700       	 124.671   	 0         	 9.68596   	 12.8713   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 104, r2: 104, leftOrthog: 1)                      	 0.554257  	 600       	 121.77    	 0         	 14.2377   	 8.55263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 104)                        	 0.472402  	 600       	 142.87    	 0         	 11.0999   	 12.8713   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5200, Xcols: 104, r: 104, streamingCols: 0)                                 	 0.210265  	 700       	 187.241   	 0         	 28.9503   	 6.46766   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 104, reductionFactor: 37, colBlockingSize: 12)                                 	 0.169703  	 200       	 65.4574   	 0         	 2.55332   	 25.6362   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 104)                                                                                	 0.160687  	 900       	 8.4004    	 0         	 1.45858   	 5.75932   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5200, m: 104)                                                                        	 0.147051  	 700       	 0         	 0         	 41.1896   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 104, m: 5200)                                                                                 	 0.143807  	 700       	 0         	 0         	 42.1186   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 104)                                                                                	 0.0548235 	 100       	 3.31974   	 0         	 0.18897   	 17.5676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 50) 	 0.0546343 	 100       	 49.5659   	 0         	 7.84855   	 6.3153    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 104, r2: 104, leftOrthog: 1)                      	 0.0497616 	 100       	 108.678   	 0         	 12.8876   	 8.4328    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 50)                           	 0.044196  	 100       	 122.364   	 0         	 14.5895   	 8.3871    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0404816 	 100       	 64.2267   	 0         	 15.5132   	 4.14013   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0397514 	 100       	 2.20118   	 0         	 0.151944  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0397208 	 100       	 67.226    	 0         	 5.2869    	 12.7156   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 50, n: 50, r2: 104)                         	 0.0367686 	 100       	 147.082   	 0         	 17.5367   	 8.3871    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 50)                         	 0.0367204 	 100       	 147.275   	 0         	 11.5645   	 12.7351   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 54)                                                                                                         	 0.0216829 	 808       	 0         	 0         	 86.9303   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 104, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0210123 	 200       	 10.5732   	 0         	 1.21955   	 8.66971   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 104, r: 104, streamingCols: 0)                                 	 0.0200241 	 100       	 135.038   	 0         	 20.9911   	 6.4331    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 104)                                                                        	 0.00734968	 100       	 0         	 0         	 56.6011   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 104, m: 2500)                                                                                 	 0.00731192	 100       	 0         	 0         	 56.8934   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 104, fromLeft: 1)                              	 0.00655606	 800       	 0         	 0         	 21.1171   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 1)  	 0.00628272	 100       	 0.165533  	 0         	 1.32452   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 2, r2: 1)                              	 0.00408243	 100       	 0.509501  	 0         	 3.0574    	 0.166645  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 104, r: 50, streamingCols: 50)                                   	 0.00327021	 100       	 3.82238   	 0         	 1.52895   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 104)  	 0.00257512	 100       	 42.0019   	 0         	 6.59107   	 6.37255   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 104, leftOrthog: 1)                         	 0.00163541	 100       	 31.7963   	 0         	 10.077    	 3.15534   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 104, r2: 104)                            	 0.00162086	 100       	 66.7301   	 0         	 10.4715   	 6.37255   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000888482	 100       	 28.1379   	 0         	 6.75309   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 104)                            	 0.000792697	 100       	 0         	 0         	 10.4958   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000790314	 100       	 0.63266   	 0         	 2.53064   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 104)                                                                                                         	 0.000515504	 100       	 0         	 0         	 16.1395   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                          	 0.000479584	 101       	 0         	 0         	 9.09788   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000478004	 100       	 0         	 0         	 8.36813   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 104)                                                                          	 0.000476924	 100       	 0         	 0         	 17.4451   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 50, fromLeft: 1)                               	 0.000401114	 100       	 0         	 0         	 20.7422   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 1)                                                                                                          	 0.000379261	 101       	 0         	 0         	 11.5045   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000335687	 100       	 0.744741  	 0         	 11.9159   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.80313   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.8031    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.49284   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.49162   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.83745   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.54065   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.51497   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.01675   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.790864  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.763643  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.725515  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.681487  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.646136  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.546779  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.233559  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.160687  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.154877  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.151597  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0230573 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0225851 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0119155 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00695718	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00572799	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00134687	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000792697	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000790314	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335687	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22366073264000 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22365840861184 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22365639534720 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22365438208256 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22365236881792 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22365035555328 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22364834228864 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22364632902400 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22364431575936 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22364230249472 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22364028923008 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22363827596544 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22363626270080 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22363424943616 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22363223617152 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22363022290688 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22362820964224 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22362619637760 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22362418311296 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22362216984832 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22362015658368 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22361814331904 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22361613005440 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22361411678976 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22361210352512 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22361009026048 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22360807699584 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22360606373120 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22360405046656 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22360203720192 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22360002393728 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22359801067264 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22359599736704 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22359398410240 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22359197083776 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22358995757312 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22358794430848 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22358593104384 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22358391777920 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22358190451456 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22357989124992 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22357787798528 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22357586472064 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22357385145600 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22357183819136 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22356982492672 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22356781166208 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22356579839744 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22356378513280 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22356177186816 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22355975860352 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22355774533888 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22355573207424 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22355371880960 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22355170554496 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22354969228032 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22354767901568 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22354566575104 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22354365248640 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22354163922176 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22353962595712 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22353761269248 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22353559942784 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22365967603456 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22365961012992 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5250, cols: 105, reductionFactor: 37, colBlockingSize: 12)                                 	 1.34099   	 1300      	 115.257   	 0         	 4.3607    	 26.4308   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 105)                                                                               	 0.974019  	 700       	 5.82367   	 0         	 0.190764  	 30.5281   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 105)	 0.73839   	 700       	 54.9964   	 0         	 6.35943   	 8.648     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 105)                          	 0.667832  	 700       	 121.338   	 0         	 9.33728   	 12.995    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 105, r2: 105, leftOrthog: 1)                      	 0.593705  	 600       	 116.99    	 0         	 13.5485   	 8.63487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 105)                        	 0.495503  	 600       	 140.176   	 0         	 10.7869   	 12.995    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5250, Xcols: 105, r: 105, streamingCols: 0)                                 	 0.202593  	 700       	 199.991   	 0         	 30.6272   	 6.52985   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 105, reductionFactor: 37, colBlockingSize: 12)                                 	 0.173647  	 200       	 65.207    	 0         	 2.52029   	 25.8728   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 105)                                                                                	 0.173593  	 900       	 8.00232   	 0         	 1.37618   	 5.81487   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 105, m: 5250)                                                                                 	 0.145024  	 700       	 0         	 0         	 42.5723   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5250, m: 105)                                                                        	 0.110598  	 700       	 0         	 0         	 55.824    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 105)                                                                                	 0.0547595 	 100       	 3.35558   	 0         	 0.190652  	 17.6006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 50) 	 0.0534593 	 100       	 51.6748   	 0         	 8.14077   	 6.34766   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 105, r2: 105, leftOrthog: 1)                      	 0.0530632 	 100       	 103.886   	 0         	 12.2051   	 8.51167   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0464308 	 100       	 56.5358   	 0         	 13.6547   	 4.14038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 50)                           	 0.0453939 	 100       	 121.437   	 0         	 14.4336   	 8.41346   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0417581 	 100       	 2.0954    	 0         	 0.144643  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 50)                         	 0.0391857 	 100       	 140.676   	 0         	 10.9433   	 12.855    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 50, n: 50, r2: 105)                         	 0.0374275 	 100       	 147.285   	 0         	 17.5059   	 8.41346   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0310277 	 100       	 86.8882   	 0         	 6.83259   	 12.7167   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 55)                                                                                                         	 0.0228124 	 808       	 0         	 0         	 85.7148   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 105, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0217339 	 200       	 10.4197   	 0         	 1.19813   	 8.6966    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 105, r: 105, streamingCols: 0)                                 	 0.0198926 	 100       	 138.557   	 0         	 21.3351   	 6.49431   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 105)                                                                        	 0.00787083	 100       	 0         	 0         	 53.3616   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 105, m: 2500)                                                                                 	 0.00713302	 100       	 0         	 0         	 58.8811   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 105, fromLeft: 1)                              	 0.00680894	 800       	 0         	 0         	 20.7257   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 1)  	 0.00478553	 100       	 0.219411  	 0         	 1.75563   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 2, r2: 1)                              	 0.00409816	 100       	 0.512425  	 0         	 3.07494   	 0.166646  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 105, r: 50, streamingCols: 50)                                   	 0.00301708	 100       	 4.14307   	 0         	 1.65723   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 105)  	 0.00257957	 100       	 42.7397   	 0         	 6.67553   	 6.40244   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 105, leftOrthog: 1)                         	 0.00189756	 100       	 27.6671   	 0         	 8.74808   	 3.16265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 105, r2: 105)                            	 0.00160376	 100       	 68.7448   	 0         	 10.7373   	 6.40244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000900817	 100       	 27.7526   	 0         	 6.66062   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000853657	 100       	 0.585715  	 0         	 2.34286   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 105)                            	 0.000799338	 100       	 0         	 0         	 10.5087   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 105)                                                                                                         	 0.00050377	 100       	 0         	 0         	 16.6743   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 105)                                                                          	 0.000489898	 100       	 0         	 0         	 17.1464   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000485363	 100       	 0         	 0         	 8.24125   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                          	 0.000482774	 101       	 0         	 0         	 9.20514   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 1)                                                                                                          	 0.000410995	 101       	 0         	 0         	 10.8128   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 50, fromLeft: 1)                               	 0.000400418	 100       	 0         	 0         	 20.9781   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000337021	 100       	 0.741794  	 0         	 11.8687   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.00516   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.00513   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.66949   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.66822   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.98183   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.5674    	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.53119   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.07054   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.82181   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.799214  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.746748  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.718928  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.695097  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.573017  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.225503  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.173593  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.152642  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.118958  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0242099 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0234312 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00720936	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00672628	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00631221	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00127437	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000853657	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000799338	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337021	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23266676885376 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23266441816064 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23266240489600 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23266039163136 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23265837836672 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23265636510208 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23265435183744 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23265233857280 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23265032530816 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23264831204352 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23264629877888 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23264428551424 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23264227224960 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23264025898496 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23263824572032 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23263623245568 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23263421919104 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23263220592640 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23263019266176 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23262817939712 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23262616613248 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23262415286784 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23262213960320 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23262012633856 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23261811307392 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23261609980928 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23261408654464 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23261207328000 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23261006001536 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23260804675072 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23260603348608 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23260402022144 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23260200691584 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23259999365120 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23259798038656 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23259596712192 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23259395385728 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23259194059264 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23258992732800 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23258791406336 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23258590079872 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23258388753408 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23258187426944 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23257986100480 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23257784774016 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23257583447552 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23257382121088 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23257180794624 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23256979468160 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23256778141696 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23256576815232 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23256375488768 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23256174162304 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23255972835840 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23255771509376 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23255570182912 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23255368856448 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23255167529984 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23254966203520 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23254764877056 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23254563550592 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23254362224128 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23254160897664 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23266571224832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23266564634368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5300, cols: 106, reductionFactor: 37, colBlockingSize: 12)                                 	 1.38554   	 1300      	 114.769   	 0         	 4.30126   	 26.6826   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 106)                                                                               	 0.94269   	 700       	 6.19077   	 0         	 0.20087   	 30.8197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 106)	 0.732084  	 700       	 57.1234   	 0         	 6.53898   	 8.73583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 106)                          	 0.658713  	 700       	 126.567   	 0         	 9.64772   	 13.1188   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 106, r2: 106, leftOrthog: 1)                      	 0.587828  	 600       	 121.568   	 0         	 13.9459   	 8.71711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 106)                        	 0.496522  	 600       	 143.923   	 0         	 10.9707   	 13.1188   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5300, Xcols: 106, r: 106, streamingCols: 0)                                 	 0.201942  	 700       	 206.423   	 0         	 31.314    	 6.59204   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 106, reductionFactor: 37, colBlockingSize: 12)                                 	 0.17699   	 200       	 65.1995   	 0         	 2.49719   	 26.1092   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 106)                                                                                	 0.173105  	 900       	 8.25638   	 0         	 1.40644   	 5.87042   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5300, m: 106)                                                                        	 0.132364  	 700       	 0         	 0         	 47.5367   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 106, m: 5300)                                                                                 	 0.129801  	 700       	 0         	 0         	 48.4753   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 50) 	 0.0619978 	 100       	 45.4533   	 0         	 7.12413   	 6.38018   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 106, r2: 106, leftOrthog: 1)                      	 0.0588627 	 100       	 95.4425   	 0         	 11.1102   	 8.59051   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 106)                                                                                	 0.0562805 	 100       	 3.29599   	 0         	 0.186921  	 17.6331   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 50)                           	 0.049811  	 100       	 112.786   	 0         	 13.3641   	 8.43949   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0408632 	 100       	 2.14129   	 0         	 0.14781   	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0406954 	 100       	 65.1179   	 0         	 15.7266   	 4.14062   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 50)                         	 0.0401267 	 100       	 140.006   	 0         	 10.7905   	 12.9749   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 50, n: 50, r2: 106)                         	 0.0376754 	 100       	 149.116   	 0         	 17.6688   	 8.43949   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0342722 	 100       	 79.412    	 0         	 6.24413   	 12.7179   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 56)                                                                                                         	 0.0231891 	 808       	 0         	 0         	 87.4164   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 106, r: 106, streamingCols: 0)                                 	 0.0207048 	 100       	 135.669   	 0         	 20.6954   	 6.55551   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 106, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0206695 	 200       	 11.1659   	 0         	 1.28003   	 8.72315   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 106, fromLeft: 1)                              	 0.00722047	 800       	 0         	 0         	 19.9185   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 106)                                                                        	 0.00701174	 100       	 0         	 0         	 60.47     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 106, m: 2500)                                                                                 	 0.00666675	 100       	 0         	 0         	 63.5992   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 1)  	 0.00563264	 100       	 0.188189  	 0         	 1.50579   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 2, r2: 1)                              	 0.00401999	 100       	 0.527364  	 0         	 3.16458   	 0.166646  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 106, r: 50, streamingCols: 50)                                   	 0.00306509	 100       	 4.07819   	 0         	 1.63128   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 106)  	 0.00248065	 100       	 45.2946   	 0         	 7.04203   	 6.43204   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 106, leftOrthog: 1)                         	 0.00214436	 100       	 24.716    	 0         	 7.7972    	 3.16986   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 106, r2: 106)                            	 0.00151168	 100       	 74.328    	 0         	 11.5559   	 6.43204   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000919026	 100       	 27.2027   	 0         	 6.52865   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000793113	 100       	 0.630427  	 0         	 2.52171   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 106)                            	 0.000792822	 100       	 0         	 0         	 10.696    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 106)                                                                          	 0.000600948	 100       	 0         	 0         	 14.111    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 106)                                                                                                         	 0.000502924	 100       	 0         	 0         	 16.8614   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                          	 0.000485608	 101       	 0         	 0         	 9.3178    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000484876	 100       	 0         	 0         	 8.24953   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 50, fromLeft: 1)                               	 0.000412324	 100       	 0         	 0         	 20.5664   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 1)                                                                                                          	 0.000375237	 101       	 0         	 0         	 12.0585   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351025	 100       	 0.7122    	 0         	 11.3952   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.02858   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.02855   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.65196   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.65072   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.99128   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.61747   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.56391   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.03983   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.843467  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.802195  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.775287  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.714056  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.68953   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.575243  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.225712  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.173105  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.139977  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.136953  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0245529 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0239282 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00961593	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0076328 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00536281	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00186512	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000793113	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000792822	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351025	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22568963069824 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22568778065920 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22568576739456 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22568375412992 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22568174086528 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22567972760064 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22567771433600 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22567570107136 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22567368780672 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22567167454208 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22566966127744 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22566764801280 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22566563474816 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22566362148352 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22566160821888 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22565959495424 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22565758168960 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22565556842496 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22565355516032 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22565154189568 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22564952863104 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22564751536640 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22564550210176 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22564348883712 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22564147557248 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22563946230784 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22563744904320 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22563543577856 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22563342251392 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22563140924928 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22562939598464 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22562738272000 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22562536941440 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22562335614976 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22562134288512 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22561932962048 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22561731635584 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22561530309120 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22561328982656 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22561127656192 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22560926329728 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22560725003264 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22560523676800 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22560322350336 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22560121023872 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22559919697408 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22559718370944 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22559517044480 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22559315718016 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22559114391552 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22558913065088 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22558711738624 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22558510412160 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22558309085696 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22558107759232 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22557906432768 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22557705106304 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22557503779840 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22557302453376 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22557101126912 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22556899800448 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22556698473984 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22556497147520 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22568857409280 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22568850818816 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5350, cols: 107, reductionFactor: 37, colBlockingSize: 12)                                 	 1.44121   	 1300      	 113.488   	 0         	 4.21352   	 26.9343   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 107)                                                                               	 1.00457   	 700       	 5.97538   	 0         	 0.192064  	 31.1114   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 107)	 0.744115  	 700       	 57.8674   	 0         	 6.55753   	 8.82458   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 107)                          	 0.669191  	 700       	 128.144   	 0         	 9.67669   	 13.2426   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 107, r2: 107, leftOrthog: 1)                      	 0.606735  	 600       	 121.144   	 0         	 13.7674   	 8.79934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 107)                        	 0.539999  	 600       	 136.116   	 0         	 10.2787   	 13.2426   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5350, Xcols: 107, r: 107, streamingCols: 0)                                 	 0.20524   	 700       	 208.909   	 0         	 31.3949   	 6.65423   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 107)                                                                                	 0.180536  	 900       	 8.14269   	 0         	 1.37407   	 5.92598   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 107, reductionFactor: 37, colBlockingSize: 12)                                 	 0.179608  	 200       	 65.4673   	 0         	 2.48496   	 26.3454   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 107, m: 5350)                                                                                 	 0.151396  	 700       	 0         	 0         	 42.3487   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5350, m: 107)                                                                        	 0.125208  	 700       	 0         	 0         	 51.2064   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 107)                                                                                	 0.056194  	 100       	 3.33221   	 0         	 0.188632  	 17.6651   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 50) 	 0.0555744 	 100       	 51.7235   	 0         	 8.06559   	 6.41286   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 107, r2: 107, leftOrthog: 1)                      	 0.0515059 	 100       	 111.143   	 0         	 12.8202   	 8.6693    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0454933 	 100       	 58.7999   	 0         	 14.1999   	 4.14087   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 50)                           	 0.0445784 	 100       	 128.414   	 0         	 15.1697   	 8.46519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 50)                         	 0.0438833 	 100       	 130.448   	 0         	 9.96186   	 13.0948   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0422786 	 100       	 2.0696    	 0         	 0.142862  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 50, n: 50, r2: 107)                         	 0.0384338 	 100       	 148.944   	 0         	 17.5949   	 8.46519   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0316838 	 100       	 86.7099   	 0         	 6.81737   	 12.719    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 57)                                                                                                         	 0.0228059 	 808       	 0         	 0         	 92.0881   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 107, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0222795 	 200       	 10.5554   	 0         	 1.20642   	 8.74935   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 107, r: 107, streamingCols: 0)                                 	 0.020998  	 100       	 136.311   	 0         	 20.601    	 6.6167    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 107, fromLeft: 1)                              	 0.00715005	 800       	 0         	 0         	 20.496    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 107)                                                                        	 0.00710168	 100       	 0         	 0         	 60.2675   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 107, m: 2500)                                                                                 	 0.00673415	 100       	 0         	 0         	 63.5567   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 1)  	 0.0050179 	 100       	 0.213237  	 0         	 1.70621   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 2, r2: 1)                              	 0.00427667	 100       	 0.500389  	 0         	 3.00271   	 0.166646  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 107, r: 50, streamingCols: 50)                                   	 0.00336681	 100       	 3.71271   	 0         	 1.48508   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 107)  	 0.0024461 	 100       	 46.805    	 0         	 7.24385   	 6.46135   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 107, leftOrthog: 1)                         	 0.00200292	 100       	 26.7111   	 0         	 8.40774   	 3.17696   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 107, r2: 107)                            	 0.0014729 	 100       	 77.7308   	 0         	 12.0301   	 6.46135   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000964089	 100       	 25.9312   	 0         	 6.22349   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000824184	 100       	 0.606661  	 0         	 2.42664   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 107)                            	 0.00079935	 100       	 0         	 0         	 10.7087   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 107)                                                                          	 0.000511583	 100       	 0         	 0         	 16.7324   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 107)                                                                                                         	 0.00049131	 100       	 0         	 0         	 17.4228   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                          	 0.000490942	 101       	 0         	 0         	 9.38115   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000483114	 100       	 0         	 0         	 8.27962   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 50, fromLeft: 1)                               	 0.000413214	 100       	 0         	 0         	 20.7157   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 1)                                                                                                          	 0.000391102	 101       	 0         	 0         	 11.776    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00034263	 100       	 0.72965   	 0         	 11.6744   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.2957    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.29568   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.85621   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.85495   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.10003   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.67478   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.62795   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.10305   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.880144  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.807153  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.795904  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.719519  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.705737  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.62328   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.229605  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.180536  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.158614  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.132821  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0241793 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0239828 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00789618	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00756327	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00681425	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00129679	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000824184	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00079935	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00034263	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22977559422848 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22977336829952 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22977135503488 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22976934177024 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22976732850560 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22976531524096 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22976330197632 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22976128871168 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22975927544704 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22975726218240 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22975524891776 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22975323565312 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22975122238848 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22974920912384 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22974719585920 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22974518259456 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22974316932992 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22974115606528 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22973914280064 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22973712953600 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22973511627136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22973310300672 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22973108974208 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22972907647744 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22972706321280 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22972504994816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22972303668352 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22972102341888 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22971901015424 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22971699688960 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22971498362496 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22971297036032 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22971095705472 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22970894379008 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22970693052544 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22970491726080 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22970290399616 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22970089073152 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22969887746688 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22969686420224 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22969485093760 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22969283767296 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22969082440832 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22968881114368 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22968679787904 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22968478461440 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22968277134976 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22968075808512 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22967874482048 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22967673155584 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22967471829120 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22967270502656 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22967069176192 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22966867849728 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22966666523264 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22966465196800 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22966263870336 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22966062543872 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22965861217408 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22965659890944 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22965458564480 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22965257238016 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22965055911552 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22977453762304 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22977447171840 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5400, cols: 108, reductionFactor: 37, colBlockingSize: 12)                                 	 1.45267   	 1300      	 115.779   	 0         	 4.25878   	 27.186    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 108)                                                                               	 0.982786  	 700       	 6.2807    	 0         	 0.200003  	 31.4031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 108)	 0.754678  	 700       	 58.7427   	 0         	 6.58977   	 8.91422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 108)                          	 0.680911  	 700       	 129.503   	 0         	 9.68872   	 13.3663   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 108, r2: 108, leftOrthog: 1)                      	 0.604565  	 600       	 125.02    	 0         	 14.0763   	 8.88158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 108)                        	 0.534906  	 600       	 141.301   	 0         	 10.5714   	 13.3663   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5400, Xcols: 108, r: 108, streamingCols: 0)                                 	 0.206404  	 700       	 213.61    	 0         	 31.8042   	 6.71642   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 108, reductionFactor: 37, colBlockingSize: 12)                                 	 0.188974  	 200       	 63.3909   	 0         	 2.38478   	 26.5814   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 108)                                                                                	 0.178669  	 900       	 8.46065   	 0         	 1.41446   	 5.98154   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 108, m: 5400)                                                                                 	 0.15533   	 700       	 0         	 0         	 42.0513   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5400, m: 108)                                                                        	 0.119408  	 700       	 0         	 0         	 54.7019   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 50) 	 0.0584058 	 100       	 50.2005   	 0         	 7.78827   	 6.44566   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 108)                                                                                	 0.0560467 	 100       	 3.37219   	 0         	 0.190555  	 17.6966   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 108, r2: 108, leftOrthog: 1)                      	 0.0532902 	 100       	 109.438   	 0         	 12.51     	 8.74806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 50)                           	 0.0458286 	 100       	 127.257   	 0         	 14.988    	 8.49057   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 50)                         	 0.0449613 	 100       	 129.711   	 0         	 9.81579   	 13.2146   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0434716 	 100       	 62.1095   	 0         	 14.9983   	 4.1411    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0413044 	 100       	 2.11842   	 0         	 0.146231  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 50, n: 50, r2: 108)                         	 0.0377792 	 100       	 154.371   	 0         	 18.1814   	 8.49057   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0321971 	 100       	 86.1249   	 0         	 6.77079   	 12.7201   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 58)                                                                                                         	 0.0243567 	 808       	 0         	 0         	 89.2768   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 108, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0221905 	 200       	 10.7967   	 0         	 1.23036   	 8.77523   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 108, r: 108, streamingCols: 0)                                 	 0.0208244 	 100       	 140.028   	 0         	 20.9689   	 6.67788   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 108, m: 2500)                                                                                 	 0.00836557	 100       	 0         	 0         	 51.6403   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 108)                                                                        	 0.00732051	 100       	 0         	 0         	 59.0123   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 108, fromLeft: 1)                              	 0.00720853	 800       	 0         	 0         	 20.7115   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 1)  	 0.00479884	 100       	 0.225054  	 0         	 1.80077   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 2, r2: 1)                              	 0.00405842	 100       	 0.532227  	 0         	 3.19376   	 0.166646  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 108, r: 50, streamingCols: 50)                                   	 0.00337125	 100       	 3.70782   	 0         	 1.48313   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 108)  	 0.00254203	 100       	 45.8846   	 0         	 7.06962   	 6.49038   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 108, leftOrthog: 1)                         	 0.00232121	 100       	 23.2638   	 0         	 7.30654   	 3.18396   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 108, r2: 108)                            	 0.00157774	 100       	 73.9285   	 0         	 11.3905   	 6.49038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000873495	 100       	 28.6207   	 0         	 6.86896   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000856599	 100       	 0.583704  	 0         	 2.33481   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 108)                            	 0.000798297	 100       	 0         	 0         	 10.823    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 108)                                                                          	 0.000531727	 100       	 0         	 0         	 16.2489   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 108)                                                                                                         	 0.000513619	 100       	 0         	 0         	 16.8218   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000497575	 100       	 0         	 0         	 8.03899   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                          	 0.000489591	 101       	 0         	 0         	 9.57207   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 50, fromLeft: 1)                               	 0.000412075	 100       	 0         	 0         	 20.9671   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 1)                                                                                                          	 0.000382154	 101       	 0         	 0         	 12.2631   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00032922	 100       	 0.759371  	 0         	 12.1499   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.30377   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.30375   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.83892   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.83765   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.10323   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.69603   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.63771   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.08014   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.891793  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.820425  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.805348  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.732376  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.703648  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.61852   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.230599  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.178669  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.164193  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.12726   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0257421 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0246356 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0076206 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00728333	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00641393	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00123294	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000856599	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000798297	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032922	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22420007864192 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22419796387840 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22419595061376 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22419393734912 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22419192408448 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22418991081984 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22418789755520 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22418588429056 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22418387102592 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22418185776128 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22417984449664 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22417783123200 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22417581796736 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22417380470272 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22417179143808 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22416977817344 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22416776490880 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22416575164416 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22416373837952 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22416172511488 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22415971185024 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22415769858560 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22415568532096 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22415367205632 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22415165879168 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22414964552704 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22414763226240 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22414561899776 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22414360573312 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22414159246848 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22413957920384 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22413756593920 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22413555263360 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22413353936896 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22413152610432 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22412951283968 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22412749957504 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22412548631040 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22412347304576 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22412145978112 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22411944651648 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22411743325184 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22411541998720 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22411340672256 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22411139345792 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22410938019328 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22410736692864 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22410535366400 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22410334039936 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22410132713472 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22409931387008 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22409730060544 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22409528734080 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22409327407616 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22409126081152 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22408924754688 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22408723428224 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22408522101760 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22408320775296 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22408119448832 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22407918122368 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22407716795904 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22407515469440 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22419902203648 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22419895613184 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5450, cols: 109, reductionFactor: 37, colBlockingSize: 12)                                 	 1.47507   	 1300      	 117.217   	 0         	 4.27211   	 27.4377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 109)                                                                               	 1.03275   	 700       	 6.14441   	 0         	 0.193862  	 31.6947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 109)	 0.763628  	 700       	 59.7608   	 0         	 6.6366    	 9.00473   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 109)                          	 0.68568   	 700       	 132.208   	 0         	 9.80034   	 13.4901   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 109, r2: 109, leftOrthog: 1)                      	 0.617258  	 600       	 125.882   	 0         	 14.0434   	 8.96382   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 109)                        	 0.513198  	 600       	 151.407   	 0         	 11.2236   	 13.4901   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5450, Xcols: 109, r: 109, streamingCols: 0)                                 	 0.206273  	 700       	 219.738   	 0         	 32.4164   	 6.77861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 109)                                                                                	 0.192393  	 900       	 8.07737   	 0         	 1.33796   	 6.03709   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 109, reductionFactor: 37, colBlockingSize: 12)                                 	 0.186243  	 200       	 65.5173   	 0         	 2.4431    	 26.8173   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 109, m: 5450)                                                                                 	 0.14705   	 700       	 0         	 0         	 45.2455   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5450, m: 109)                                                                        	 0.137879  	 700       	 0         	 0         	 48.2549   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 50) 	 0.0591054 	 100       	 50.5961   	 0         	 7.80978   	 6.47855   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 109)                                                                                	 0.0559073 	 100       	 3.4119    	 0         	 0.192462  	 17.7277   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 109, r2: 109, leftOrthog: 1)                      	 0.053865  	 100       	 110.285   	 0         	 12.4944   	 8.82677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 50)                           	 0.0468409 	 100       	 126.823   	 0         	 14.893    	 8.51562   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0457464 	 100       	 59.5675   	 0         	 14.3836   	 4.14134   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0420794 	 100       	 2.0794    	 0         	 0.143538  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 50)                         	 0.0395023 	 100       	 150.384   	 0         	 11.2779   	 13.3343   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 50, n: 50, r2: 109)                         	 0.0381964 	 100       	 155.525   	 0         	 18.2635   	 8.51562   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0312482 	 100       	 89.5619   	 0         	 7.04041   	 12.7211   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 59)                                                                                                         	 0.0249451 	 808       	 0         	 0         	 90.2028   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 109, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0228674 	 200       	 10.672    	 0         	 1.21262   	 8.80078   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 109, r: 109, streamingCols: 0)                                 	 0.0209165 	 100       	 142.005   	 0         	 21.072    	 6.73904   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 109)                                                                        	 0.00771337	 100       	 0         	 0         	 56.5252   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 109, fromLeft: 1)                              	 0.00754499	 800       	 0         	 0         	 20.156    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 109, m: 2500)                                                                                 	 0.00694629	 100       	 0         	 0         	 62.7673   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 1)  	 0.0048513 	 100       	 0.224682  	 0         	 1.79779   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 2, r2: 1)                              	 0.00408571	 100       	 0.533568  	 0         	 3.2018    	 0.166646  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 109, r: 50, streamingCols: 50)                                   	 0.00316563	 100       	 3.94866   	 0         	 1.57946   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 109, leftOrthog: 1)                         	 0.00260928	 100       	 20.887    	 0         	 6.54587   	 3.19087   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 109)  	 0.00250088	 100       	 47.5073   	 0         	 7.28736   	 6.51914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 109, r2: 109)                            	 0.00154016	 100       	 77.1415   	 0         	 11.8331   	 6.51914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000914346	 100       	 27.3419   	 0         	 6.56207   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00079342	 100       	 0.630183  	 0         	 2.52073   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 109)                            	 0.000787963	 100       	 0         	 0         	 11.0665   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 109)                                                                          	 0.000533825	 100       	 0         	 0         	 16.3349   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 109)                                                                                                         	 0.00050939	 100       	 0         	 0         	 17.1185   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                          	 0.000488675	 101       	 0         	 0         	 9.75536   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000473649	 100       	 0         	 0         	 8.44507   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 50, fromLeft: 1)                               	 0.000406506	 100       	 0         	 0         	 21.4511   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 1)                                                                                                          	 0.000380678	 101       	 0         	 0         	 12.5229   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000324838	 100       	 0.769614  	 0         	 12.3138   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.38451   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.38448   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.8751    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.87389   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.17634   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.71543   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.66935   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.13074   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.904109  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.830086  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.81264   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.738146  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.719479  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.591811  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.230355  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.192393  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.15447   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.146127  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0263238 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0250182 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00917617	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0079515 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00582613	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00129006	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00079342	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000787963	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324838	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23020272195456 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23020085176320 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23019883849856 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23019682523392 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23019481196928 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23019279870464 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23019078544000 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23018877217536 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23018675891072 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23018474564608 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23018273238144 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23018071911680 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23017870585216 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23017669258752 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23017467932288 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23017266605824 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23017065279360 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23016863952896 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23016662626432 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23016461299968 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23016259973504 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23016058647040 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23015857320576 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23015655994112 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23015454667648 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23015253341184 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23015052014720 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23014850688256 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23014649361792 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23014448035328 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23014246708864 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23014045382400 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23013844051840 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23013642725376 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23013441398912 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23013240072448 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23013038745984 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23012837419520 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23012636093056 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23012434766592 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23012233440128 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23012032113664 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23011830787200 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23011629460736 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23011428134272 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23011226807808 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23011025481344 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23010824154880 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23010622828416 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23010421501952 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23010220175488 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23010018849024 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23009817522560 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23009616196096 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23009414869632 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23009213543168 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23009012216704 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23008810890240 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23008609563776 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23008408237312 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23008206910848 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23008005584384 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23007804257920 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23020166534912 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23020159944448 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 110, reductionFactor: 37, colBlockingSize: 12)                                 	 1.50018   	 1300      	 118.456   	 0         	 4.27804   	 27.6895   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 110)                                                                               	 1.01516   	 700       	 6.42449   	 0         	 0.200851  	 31.9864   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 110)	 0.793025  	 700       	 59.2289   	 0         	 6.51148   	 9.09609   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 110)                          	 0.714471  	 700       	 130.404   	 0         	 9.57878   	 13.6139   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 110, r2: 110, leftOrthog: 1)                      	 0.627186  	 600       	 127.331   	 0         	 14.0758   	 9.04605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 110)                        	 0.558314  	 600       	 143.038   	 0         	 10.5068   	 13.6139   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5500, Xcols: 110, r: 110, streamingCols: 0)                                 	 0.212381  	 700       	 219.347   	 0         	 32.0645   	 6.8408    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 110, reductionFactor: 37, colBlockingSize: 12)                                 	 0.190008  	 200       	 65.4025   	 0         	 2.41758   	 27.0529   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 110)                                                                                	 0.188469  	 900       	 8.47461   	 0         	 1.39096   	 6.09265   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5500, m: 110)                                                                        	 0.145466  	 700       	 0         	 0         	 46.5813   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 110, m: 5500)                                                                                 	 0.131368  	 700       	 0         	 0         	 51.5803   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 50) 	 0.0592633 	 100       	 51.4652   	 0         	 7.90371   	 6.51153   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 110)                                                                                	 0.0561963 	 100       	 3.42549   	 0         	 0.192895  	 17.7583   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 110, r2: 110, leftOrthog: 1)                      	 0.0557758 	 100       	 108.47    	 0         	 12.1802   	 8.90544   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0471381 	 100       	 58.3392   	 0         	 14.0863   	 4.14157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 50)                           	 0.0456621 	 100       	 132.495   	 0         	 15.514    	 8.54037   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 50)                         	 0.0447732 	 100       	 135.126   	 0         	 10.0435   	 13.454    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0411874 	 100       	 2.12444   	 0         	 0.146647  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 50, n: 50, r2: 110)                         	 0.0391078 	 100       	 154.701   	 0         	 18.114    	 8.54037   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0325471 	 100       	 86.7764   	 0         	 6.82087   	 12.7222   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 60)                                                                                                         	 0.0241393 	 808       	 0         	 0         	 96.4004   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 110, reductionFactor: 37, colBlockingSize: 12)                                   	 0.022779  	 200       	 10.9109   	 0         	 1.23623   	 8.82601   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 110, r: 110, streamingCols: 0)                                 	 0.0216449 	 100       	 139.756   	 0         	 20.5517   	 6.8002    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 1)  	 0.00809151	 100       	 0.135945  	 0         	 1.08776   	 0.124977  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 110)                                                                        	 0.00771503	 100       	 0         	 0         	 57.0315   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 110, fromLeft: 1)                              	 0.00769725	 800       	 0         	 0         	 20.1215   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 110, m: 2500)                                                                                 	 0.00665873	 100       	 0         	 0         	 66.0787   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 2, r2: 1)                              	 0.0041097 	 100       	 0.535319  	 0         	 3.21231   	 0.166646  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 110, r: 50, streamingCols: 50)                                   	 0.00295909	 100       	 4.22428   	 0         	 1.68971   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 110)  	 0.00249854	 100       	 48.4284   	 0         	 7.39633   	 6.54762   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 110, leftOrthog: 1)                         	 0.00185769	 100       	 29.6067   	 0         	 9.25881   	 3.19767   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 110, r2: 110)                            	 0.00155255	 100       	 77.9365   	 0         	 11.903    	 6.54762   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000936641	 100       	 26.6911   	 0         	 6.40587   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000932268	 100       	 0.536326  	 0         	 2.14531   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 110)                            	 0.000793563	 100       	 0         	 0         	 11.0892   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 110)                                                                          	 0.000642461	 100       	 0         	 0         	 13.6973   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 110)                                                                                                         	 0.00049914	 100       	 0         	 0         	 17.6303   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000496058	 100       	 0         	 0         	 8.06357   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                          	 0.000482407	 101       	 0         	 0         	 10.0496   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 50, fromLeft: 1)                               	 0.000415956	 100       	 0         	 0         	 21.1561   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 1)                                                                                                          	 0.000393851	 101       	 0         	 0         	 12.3092   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000319477	 100       	 0.782529  	 0         	 12.5205   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.48306   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.48304   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.93444   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.93309   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.2024    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.74552   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.6767    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.11255   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.911769  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.862878  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.834924  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.765795  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.731958  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.643132  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.236985  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.188469  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.153824  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.138523  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0255147 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0254181 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.011714  	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00811321	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0055372 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00134471	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000932268	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000793563	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000319477	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22495198095232 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22495025424384 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22494824097920 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22494622771456 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22494421444992 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22494220118528 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22494018792064 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22493817465600 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22493616139136 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22493414812672 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22493213486208 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22493012159744 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22492810833280 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22492609506816 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22492408180352 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22492206853888 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22492005527424 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22491804200960 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22491602874496 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22491401548032 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22491200221568 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22490998895104 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22490797568640 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22490596242176 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22490394915712 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22490193589248 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22489992262784 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22489790936320 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22489589609856 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22489388283392 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22489186956928 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22488985630464 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22488784299904 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22488582973440 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22488381646976 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22488180320512 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22487978994048 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22487777667584 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22487576341120 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22487375014656 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22487173688192 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22486972361728 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22486771035264 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22486569708800 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22486368382336 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22486167055872 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22485965729408 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22485764402944 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22485563076480 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22485361750016 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22485160423552 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22484959097088 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22484757770624 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22484556444160 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22484355117696 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22484153791232 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22483952464768 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22483751138304 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22483549811840 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22483348485376 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22483147158912 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22482945832448 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22482744505984 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22494920062720 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22494913853184 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5550, cols: 111, reductionFactor: 37, colBlockingSize: 12)                                 	 1.52218   	 1300      	 119.958   	 0         	 4.29323   	 27.9412   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 111)                                                                               	 1.04713   	 700       	 6.39975   	 0         	 0.198269  	 32.2781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 111)	 0.796232  	 700       	 60.7074   	 0         	 6.60706   	 9.18825   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 111)                          	 0.715611  	 700       	 133.78    	 0         	 9.73819   	 13.7376   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 111, r2: 111, leftOrthog: 1)                      	 0.635845  	 600       	 129.053   	 0         	 14.1377   	 9.12829   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 111)                        	 0.532729  	 600       	 154.033   	 0         	 11.2125   	 13.7376   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5550, Xcols: 111, r: 111, streamingCols: 0)                                 	 0.212138  	 700       	 225.641   	 0         	 32.6875   	 6.90299   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 111)                                                                                	 0.195535  	 900       	 8.39316   	 0         	 1.36514   	 6.1482    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 111, reductionFactor: 37, colBlockingSize: 12)                                 	 0.192273  	 200       	 65.8126   	 0         	 2.41174   	 27.2884   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 111, m: 5550)                                                                                 	 0.148137  	 700       	 0         	 0         	 46.5768   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5550, m: 111)                                                                        	 0.144549  	 700       	 0         	 0         	 47.7331   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 50) 	 0.0611468 	 100       	 50.8694   	 0         	 7.77277   	 6.54456   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 111)                                                                                	 0.057056  	 100       	 3.40455   	 0         	 0.191391  	 17.7885   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 111, r2: 111, leftOrthog: 1)                      	 0.0524501 	 100       	 117.454   	 0         	 13.0736   	 8.98407   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 50)                           	 0.0473286 	 100       	 130.164   	 0         	 15.1976   	 8.56481   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 50)                         	 0.0410917 	 100       	 149.921   	 0         	 11.045    	 13.5737   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0408904 	 100       	 2.13987   	 0         	 0.147712  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 50, n: 50, r2: 111)                         	 0.0401248 	 100       	 153.534   	 0         	 17.9261   	 8.56481   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 50, r2: 50, leftOrthog: 1)                        	 0.0398585 	 100       	 69.6212   	 0         	 16.8094   	 4.14179   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0318909 	 100       	 89.3672   	 0         	 7.02395   	 12.7232   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 61)                                                                                                         	 0.0253588 	 808       	 0         	 0         	 94.8488   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 111, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0241523 	 200       	 10.4785   	 0         	 1.18389   	 8.85093   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 111, r: 111, streamingCols: 0)                                 	 0.0215926 	 100       	 142.653   	 0         	 20.7908   	 6.86134   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 111, fromLeft: 1)                              	 0.0077391 	 800       	 0         	 0         	 20.3782   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 111)                                                                        	 0.00766243	 100       	 0         	 0         	 57.945    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 111, m: 2500)                                                                                 	 0.00722305	 100       	 0         	 0         	 61.4699   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 1)  	 0.00556397	 100       	 0.199498  	 0         	 1.59627   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 2, r2: 1)                              	 0.00413035	 100       	 0.537484  	 0         	 3.22529   	 0.166647  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 111, r: 50, streamingCols: 50)                                   	 0.00307245	 100       	 4.06841   	 0         	 1.62736   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 111)  	 0.00269752	 100       	 45.6752   	 0         	 6.94593   	 6.57583   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 111, leftOrthog: 1)                         	 0.00220477	 100       	 25.1727   	 0         	 7.85571   	 3.20439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 111, r2: 111)                            	 0.00171714	 100       	 71.753    	 0         	 10.9116   	 6.57583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000857937	 100       	 29.1397   	 0         	 6.99352   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 111)                            	 0.000824173	 100       	 0         	 0         	 10.7744   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000806468	 100       	 0.619987  	 0         	 2.47995   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 111)                                                                          	 0.000530918	 100       	 0         	 0         	 16.7257   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 111)                                                                                                         	 0.000504471	 100       	 0         	 0         	 17.6026   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                          	 0.000489278	 101       	 0         	 0         	 10.0736   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000471106	 100       	 0         	 0         	 8.49066   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 50, fromLeft: 1)                               	 0.000428758	 100       	 0         	 0         	 20.711    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 1)                                                                                                          	 0.0004102 	 101       	 0         	 0         	 12.0156   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000322087	 100       	 0.776188  	 0         	 12.419    	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.55836   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.55834   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.97443   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.9732    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.26163   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.77049   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.7112    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.14508   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.923083  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.865641  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.848798  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.768787  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.730359  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.614804  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.236803  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.195535  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.155831  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.152742  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0267628 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0265833 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0106905 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00816786	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00573989	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00136704	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000824173	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000806468	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322087	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23192272000896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23192085194752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23191883868288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23191682541824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23191481215360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23191279888896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23191078562432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23190877235968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23190675909504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23190474583040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23190273256576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23190071930112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23189870603648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23189669277184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23189467950720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23189266624256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23189065297792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23188863971328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23188662644864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23188461318400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23188259991936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23188058665472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23187857339008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23187656012544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23187454686080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23187253359616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23187052033152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23186850706688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23186649380224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23186448053760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23186246727296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23186045400832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23185844070272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23185642743808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23185441417344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23185240090880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23185038764416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23184837437952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23184636111488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23184434785024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23184233458560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23184032132096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23183830805632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23183629479168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23183428152704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23183226826240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23183025499776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23182824173312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23182622846848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23182421520384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23182220193920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23182018867456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23181817540992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23181616214528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23181414888064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23181213561600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23181012235136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23180810908672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23180609582208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23180408255744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23180206929280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23180005602816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23179804276352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23192166340352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23192159749888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5600, cols: 112, reductionFactor: 37, colBlockingSize: 12)                                 	 1.5091    	 1300      	 124.297   	 0         	 4.40882   	 28.1929   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 112)                                                                               	 1.04248   	 700       	 6.60366   	 0         	 0.202754  	 32.5697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 112)	 0.884887  	 700       	 56.2071   	 0         	 6.05601   	 9.28121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 112)                          	 0.735695  	 700       	 133.676   	 0         	 9.64379   	 13.8614   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 112, r2: 112, leftOrthog: 1)                      	 0.657133  	 600       	 128.278   	 0         	 13.9273   	 9.21053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 112)                        	 0.566566  	 600       	 148.784   	 0         	 10.7337   	 13.8614   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 112)                                                                                	 0.318359  	 900       	 5.29564   	 0         	 0.853619  	 6.20375   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5600, Xcols: 112, r: 112, streamingCols: 0)                                 	 0.214355  	 700       	 229.397   	 0         	 32.9349   	 6.96517   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 112, reductionFactor: 37, colBlockingSize: 12)                                 	 0.199174  	 200       	 64.6821   	 0         	 2.35005   	 27.5237   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 112, m: 5600)                                                                                 	 0.145728  	 700       	 0         	 0         	 48.2037   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5600, m: 112)                                                                        	 0.0708705 	 700       	 0         	 0         	 99.1193   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 50) 	 0.0592154 	 100       	 53.5672   	 0         	 8.14383   	 6.57764   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 112)                                                                                	 0.0564172 	 100       	 3.47412   	 0         	 0.194976  	 17.8182   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 112, r2: 112, leftOrthog: 1)                      	 0.0553396 	 100       	 113.337   	 0         	 12.5059   	 9.06266   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 50, r2: 50, leftOrthog: 1)                        	 0.047079  	 100       	 59.4745   	 0         	 14.3589   	 4.14201   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 50)                           	 0.0470535 	 100       	 133.295   	 0         	 15.5194   	 8.58896   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 50)                         	 0.0435726 	 100       	 143.944   	 0         	 10.512    	 13.6933   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0413876 	 100       	 2.11416   	 0         	 0.145937  	 14.4868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 50, n: 50, r2: 112)                         	 0.0411774 	 100       	 152.316   	 0         	 17.734    	 8.58896   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0347611 	 100       	 82.7268   	 0         	 6.50152   	 12.7242   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 62)                                                                                                         	 0.0266977 	 808       	 0         	 0         	 93.0704   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 112, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0244041 	 200       	 10.5581   	 0         	 1.18957   	 8.87554   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 112, r: 112, streamingCols: 0)                                 	 0.0224623 	 100       	 139.612   	 0         	 20.1679   	 6.92247   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 112, fromLeft: 1)                              	 0.00843903	 800       	 0         	 0         	 19.0263   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 112, m: 2500)                                                                                 	 0.00797286	 100       	 0         	 0         	 56.1906   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 112)                                                                        	 0.00699474	 100       	 0         	 0         	 64.0481   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 1)  	 0.00514978	 100       	 0.217485  	 0         	 1.74019   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 2, r2: 1)                              	 0.00429578	 100       	 0.521441  	 0         	 3.12902   	 0.166647  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 112, r: 50, streamingCols: 50)                                   	 0.00316061	 100       	 3.95493   	 0         	 1.58197   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 112)  	 0.00268006	 100       	 46.805    	 0         	 7.08762   	 6.60377   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 112, leftOrthog: 1)                         	 0.00177217	 100       	 31.5997   	 0         	 9.84105   	 3.21101   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 112, r2: 112)                            	 0.00170885	 100       	 73.4059   	 0         	 11.1158   	 6.60377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.0011927 	 100       	 20.9608   	 0         	 5.03059   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000880974	 100       	 0.567554  	 0         	 2.27021   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 112)                            	 0.000808689	 100       	 0         	 0         	 11.0797   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 112)                                                                          	 0.000524221	 100       	 0         	 0         	 17.092    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 112)                                                                                                         	 0.000500634	 100       	 0         	 0         	 17.8973   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00049551	 100       	 0         	 0         	 8.07249   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                          	 0.000488583	 101       	 0         	 0         	 10.2533   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 50, fromLeft: 1)                               	 0.000446017	 100       	 0         	 0         	 20.0889   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 1)                                                                                                          	 0.000401116	 101       	 0         	 0         	 12.4892   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000334584	 100       	 0.747197  	 0         	 11.9551   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.85941   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.85938   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.13263   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.13133   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.29838   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.76744   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.76005   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.14028   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.951932  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.926355  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.842252  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.788753  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.761324  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.652509  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.318359  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.239978  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.154196  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0783895 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.028088  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0264733 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00888505	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00511685	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00388932	 4650      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00314612	 1800      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000880974	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000808689	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334584	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22408636680064 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22408454989824 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22408253663360 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22408052336896 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22407851010432 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22407649683968 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22407448357504 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22407247031040 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22407045704576 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22406844378112 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22406643051648 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22406441725184 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22406240398720 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22406039072256 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22405837745792 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22405636419328 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22405435092864 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22405233766400 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22405032439936 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22404831113472 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22404629787008 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22404428460544 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22404227134080 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22404025807616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22403824481152 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22403623154688 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22403421828224 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22403220501760 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22403019175296 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22402817848832 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22402616522368 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22402415195904 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22402213865344 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22402012538880 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22401811212416 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22401609885952 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22401408559488 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22401207233024 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22401005906560 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22400804580096 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22400603253632 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22400401927168 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22400200600704 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22399999274240 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22399797947776 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22399596621312 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22399395294848 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22399193968384 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22398992641920 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22398791315456 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22398589988992 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22398388662528 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22398187336064 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22397986009600 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22397784683136 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22397583356672 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22397382030208 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22397180703744 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22396979377280 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22396778050816 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22396576724352 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22396375397888 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22396174071424 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22408531019520 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22408524429056 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5650, cols: 113, reductionFactor: 37, colBlockingSize: 12)                                 	 1.53915   	 1300      	 125.164   	 0         	 4.40028   	 28.4446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 113)                                                                               	 1.12044   	 700       	 6.31019   	 0         	 0.192024  	 32.8614   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 113)	 0.829678  	 700       	 61.6743   	 0         	 6.57863   	 9.37494   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 113)                          	 0.748185  	 700       	 134.997   	 0         	 9.65289   	 13.9851   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 113, r2: 113, leftOrthog: 1)                      	 0.660292  	 600       	 131.114   	 0         	 14.1093   	 9.29276   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 113)                        	 0.589561  	 600       	 146.845   	 0         	 10.5      	 13.9851   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 113)                                                                                	 0.325207  	 900       	 5.32423   	 0         	 0.85061   	 6.25931   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5650, Xcols: 113, r: 113, streamingCols: 0)                                 	 0.221684  	 700       	 227.808   	 0         	 32.4173   	 7.02736   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5650, m: 113)                                                                        	 0.207423  	 700       	 0         	 0         	 34.4736   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 113, reductionFactor: 37, colBlockingSize: 12)                                 	 0.197004  	 200       	 66.5677   	 0         	 2.39807   	 27.7588   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 113, m: 5650)                                                                                 	 0.145325  	 700       	 0         	 0         	 49.2046   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 113)                                                                                	 0.0592237 	 100       	 3.33904   	 0         	 0.187087  	 17.8475   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 50) 	 0.0586143 	 100       	 55.1828   	 0         	 8.34745   	 6.61073   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 113, r2: 113, leftOrthog: 1)                      	 0.0567712 	 100       	 112.46    	 0         	 12.3026   	 9.14121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 50)                           	 0.0462304 	 100       	 138.102   	 0         	 16.0345   	 8.6128    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 50, r2: 50, leftOrthog: 1)                        	 0.044086  	 100       	 64.0793   	 0         	 15.4698   	 4.14223   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 50)                         	 0.0440504 	 100       	 144.936   	 0         	 10.4929   	 13.8128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 50, n: 50, r2: 113)                         	 0.0416486 	 100       	 153.294   	 0         	 17.7984   	 8.6128    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0414133 	 100       	 2.11285   	 0         	 0.145847  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0322421 	 100       	 89.9863   	 0         	 7.07149   	 12.7252   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 63)                                                                                                         	 0.0273029 	 808       	 0         	 0         	 93.9665   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 113, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0246336 	 200       	 10.6473   	 0         	 1.19635   	 8.89985   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 113, r: 113, streamingCols: 0)                                 	 0.0225606 	 100       	 141.496   	 0         	 20.2613   	 6.98359   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 113)                                                                        	 0.00990011	 100       	 0         	 0         	 45.656    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 113, fromLeft: 1)                              	 0.0079052 	 800       	 0         	 0         	 20.6754   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 113, m: 2500)                                                                                 	 0.00750617	 100       	 0         	 0         	 60.2172   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 1)  	 0.00475855	 100       	 0.237467  	 0         	 1.90008   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 2, r2: 1)                              	 0.00403069	 100       	 0.560697  	 0         	 3.36458   	 0.166647  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 113, r: 50, streamingCols: 50)                                   	 0.00289484	 100       	 4.31802   	 0         	 1.72721   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 113)  	 0.0025228 	 100       	 50.6143   	 0         	 7.63246   	 6.63146   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 113, leftOrthog: 1)                         	 0.00200128	 100       	 28.2319   	 0         	 8.77437   	 3.21754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 113, r2: 113)                            	 0.00154202	 100       	 82.8071   	 0         	 12.487    	 6.63146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000919113	 100       	 27.2001   	 0         	 6.52803   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000875804	 100       	 0.570904  	 0         	 2.28362   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 113)                            	 0.000791222	 100       	 0         	 0         	 11.4254   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 113)                                                                                                         	 0.00051881	 100       	 0         	 0         	 17.4245   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                          	 0.000498458	 101       	 0         	 0         	 10.2123   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000488863	 100       	 0         	 0         	 8.18225   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 113)                                                                          	 0.000471973	 100       	 0         	 0         	 19.1536   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 50, fromLeft: 1)                               	 0.000437406	 100       	 0         	 0         	 20.6673   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 1)                                                                                                          	 0.000401751	 101       	 0         	 0         	 12.6705   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000328362	 100       	 0.761355  	 0         	 12.1817   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.02275   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.02273   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.18004   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.17874   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.39841   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.92791   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.79303   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.22108   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.936564  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.895574  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.857676  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.799988  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.763151  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.676179  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.325207  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.247139  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.217795  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.15332   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.028722  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0270981 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0140149 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0083426 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0057324 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00152343	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000875804	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000791222	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328362	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22480480548736 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22480261474304 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22480060147840 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22479858821376 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22479657494912 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22479456168448 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22479254841984 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22479053515520 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22478852189056 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22478650862592 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22478449536128 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22478248209664 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22478046883200 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22477845556736 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22477644230272 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22477442903808 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22477241577344 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22477040250880 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22476838924416 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22476637597952 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22476436271488 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22476234945024 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22476033618560 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22475832292096 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22475630965632 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22475429639168 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22475228312704 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22475026986240 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22474825659776 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22474624333312 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22474423006848 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22474221680384 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22474020349824 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22473819023360 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22473617696896 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22473416370432 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22473215043968 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22473013717504 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22472812391040 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22472611064576 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22472409738112 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22472208411648 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22472007085184 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22471805758720 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22471604432256 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22471403105792 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22471201779328 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22471000452864 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22470799126400 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22470597799936 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22470396473472 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22470195147008 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22469993820544 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22469792494080 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22469591167616 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22469389841152 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22469188514688 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22468987188224 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22468785861760 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22468584535296 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22468383208832 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22468181882368 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22467980555904 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22480374888192 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22480368297728 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5700, cols: 114, reductionFactor: 37, colBlockingSize: 12)                                 	 1.57253   	 1300      	 125.789   	 0         	 4.38344   	 28.6963   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 114)                                                                               	 1.09278   	 700       	 6.64324   	 0         	 0.200381  	 33.1531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 114)	 0.845515  	 700       	 62.2533   	 0         	 6.57414   	 9.46941   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 114)                          	 0.762568  	 700       	 135.998   	 0         	 9.63919   	 14.1089   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 114, r2: 114, leftOrthog: 1)                      	 0.675579  	 600       	 131.58    	 0         	 14.0352   	 9.375     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 114)                        	 0.608081  	 600       	 146.186   	 0         	 10.3612   	 14.1089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 114)                                                                                	 0.33044   	 900       	 5.38026   	 0         	 0.851999  	 6.31487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5700, Xcols: 114, r: 114, streamingCols: 0)                                 	 0.214312  	 700       	 241.956   	 0         	 34.1285   	 7.08955   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 114, reductionFactor: 37, colBlockingSize: 12)                                 	 0.204912  	 200       	 65.1365   	 0         	 2.32682   	 27.9938   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5700, m: 114)                                                                        	 0.185665  	 700       	 0         	 0         	 39.1983   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 114, m: 5700)                                                                                 	 0.141171  	 700       	 0         	 0         	 51.553    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 50) 	 0.059958  	 100       	 55.0052   	 0         	 8.27913   	 6.64384   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 114, r2: 114, leftOrthog: 1)                      	 0.0591461 	 100       	 109.864   	 0         	 11.9162   	 9.21972   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 114)                                                                                	 0.0573977 	 100       	 3.47575   	 0         	 0.194433  	 17.8763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 50)                           	 0.0469867 	 100       	 138.295   	 0         	 16.0131   	 8.63636   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 50)                         	 0.0445263 	 100       	 145.936   	 0         	 10.4746   	 13.9323   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 50, n: 50, r2: 114)                         	 0.0418836 	 100       	 155.144   	 0         	 17.9641   	 8.63636   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0402452 	 100       	 2.17417   	 0         	 0.15008   	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 50, r2: 50, leftOrthog: 1)                        	 0.0376713 	 100       	 75.6544   	 0         	 18.2632   	 4.14244   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0326616 	 100       	 89.6169   	 0         	 7.04192   	 12.7262   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 64)                                                                                                         	 0.0272393 	 808       	 0         	 0         	 97.1997   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 114, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0270686 	 200       	 9.86178   	 0         	 1.1051    	 8.92386   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 114, r: 114, streamingCols: 0)                                 	 0.0227886 	 100       	 142.571   	 0         	 20.2381   	 7.04469   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 114)                                                                        	 0.0103202 	 100       	 0         	 0         	 44.1853   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 114, fromLeft: 1)                              	 0.00889616	 800       	 0         	 0         	 18.699    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 114, m: 2500)                                                                                 	 0.00720744	 100       	 0         	 0         	 63.268    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 1)  	 0.00521978	 100       	 0.2184    	 0         	 1.74751   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 2, r2: 1)                              	 0.00444154	 100       	 0.513335  	 0         	 3.08037   	 0.166647  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 114, r: 50, streamingCols: 50)                                   	 0.00316099	 100       	 3.95446   	 0         	 1.58178   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 114)  	 0.00250263	 100       	 51.9293   	 0         	 7.79851   	 6.65888   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 114, leftOrthog: 1)                         	 0.00239   	 100       	 23.8493   	 0         	 7.39748   	 3.22398   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 114, r2: 114)                            	 0.00152008	 100       	 85.4952   	 0         	 12.8393   	 6.65888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000859717	 100       	 29.0793   	 0         	 6.97904   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 114)                            	 0.00081616	 100       	 0         	 0         	 11.1743   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000793252	 100       	 0.630317  	 0         	 2.52127   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 114)                                                                          	 0.00054922	 100       	 0         	 0         	 16.6054   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 114)                                                                                                         	 0.000524437	 100       	 0         	 0         	 17.3901   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                          	 0.000505011	 101       	 0         	 0         	 10.2398   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000481415	 100       	 0         	 0         	 8.30884   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 50, fromLeft: 1)                               	 0.000471982	 100       	 0         	 0         	 19.3228   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 1)                                                                                                          	 0.000400152	 101       	 0         	 0         	 12.9231   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000342491	 100       	 0.729946  	 0         	 11.6791   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.06126   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.06123   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.20323   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.202     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.42346   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.92645   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.83717   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.19042   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.955475  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.913195  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.882958  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.815517  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.774786  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.69535   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.33044   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.240261  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.196534  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.148859  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0286689 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0275542 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0117214 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00936814	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00554038	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00137646	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00081616	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000793252	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000342491	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22358514595712 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22358324668416 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22358123341952 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22357922015488 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22357720689024 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22357519362560 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22357318036096 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22357116709632 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22356915383168 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22356714056704 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22356512730240 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22356311403776 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22356110077312 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22355908750848 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22355707424384 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22355506097920 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22355304771456 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22355103444992 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22354902118528 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22354700792064 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22354499465600 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22354298139136 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22354096812672 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22353895486208 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22353694159744 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22353492833280 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22353291506816 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22353090180352 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22352888853888 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22352687527424 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22352486200960 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22352284874496 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22352083543936 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22351882217472 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22351680891008 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22351479564544 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22351278238080 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22351076911616 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22350875585152 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22350674258688 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22350472932224 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22350271605760 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22350070279296 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22349868952832 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22349667626368 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22349466299904 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22349264973440 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22349063646976 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22348862320512 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22348660994048 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22348459667584 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22348258341120 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22348057014656 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22347855688192 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22347654361728 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22347453035264 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22347251708800 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22347050382336 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22346849055872 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22346647729408 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22346446402944 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22346245076480 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22346043750016 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22358408935168 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22358402344704 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5750, cols: 115, reductionFactor: 37, colBlockingSize: 12)                                 	 1.5774    	 1300      	 128.729   	 0         	 4.44691   	 28.9481   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 115)                                                                               	 1.11225   	 700       	 6.70018   	 0         	 0.200336  	 33.4447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 115)	 0.860705  	 700       	 62.8975   	 0         	 6.57607   	 9.56461   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 115)                          	 0.776798  	 700       	 137.051   	 0         	 9.62935   	 14.2327   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 115, r2: 115, leftOrthog: 1)                      	 0.691173  	 600       	 132.025   	 0         	 13.9603   	 9.45724   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 115)                        	 0.630103  	 600       	 144.822   	 0         	 10.1753   	 14.2327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 115)                                                                                	 0.334187  	 900       	 5.46116   	 0         	 0.857269  	 6.37042   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5750, Xcols: 115, r: 115, streamingCols: 0)                                 	 0.215985  	 700       	 246.455   	 0         	 34.4609   	 7.15174   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 115, reductionFactor: 37, colBlockingSize: 12)                                 	 0.210363  	 200       	 64.5667   	 0         	 2.28729   	 28.2285   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 115, m: 5750)                                                                                 	 0.149011  	 700       	 0         	 0         	 49.701    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5750, m: 115)                                                                        	 0.144789  	 700       	 0         	 0         	 51.1504   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 50) 	 0.0610796 	 100       	 55.0511   	 0         	 8.24498   	 6.67693   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 115, r2: 115, leftOrthog: 1)                      	 0.057368  	 100       	 115.265   	 0         	 12.3965   	 9.29819   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 115)                                                                                	 0.0570727 	 100       	 3.5262    	 0         	 0.196942  	 17.9048   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0493931 	 100       	 58.2065   	 0         	 14.0506   	 4.14265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 50)                           	 0.046483  	 100       	 142.256   	 0         	 16.4275   	 8.65964   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 50)                         	 0.0458427 	 100       	 144.243   	 0         	 10.2651   	 14.0518   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 50, n: 50, r2: 115)                         	 0.0424699 	 100       	 155.699   	 0         	 17.9798   	 8.65964   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0403548 	 100       	 2.16827   	 0         	 0.149672  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0328638 	 100       	 89.8467   	 0         	 7.05944   	 12.7272   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 65)                                                                                                         	 0.0274072 	 808       	 0         	 0         	 99.6469   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 115, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0251743 	 200       	 10.7907   	 0         	 1.20599   	 8.94758   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 115, r: 115, streamingCols: 0)                                 	 0.0233182 	 100       	 141.788   	 0         	 19.9539   	 7.10578   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 115, fromLeft: 1)                              	 0.00808475	 800       	 0         	 0         	 20.9382   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 115)                                                                        	 0.00787433	 100       	 0         	 0         	 58.4177   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 115, m: 2500)                                                                                 	 0.0073654 	 100       	 0         	 0         	 62.4542   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 1)  	 0.00609454	 100       	 0.188693  	 0         	 1.50981   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 2, r2: 1)                              	 0.00400636	 100       	 0.574088  	 0         	 3.44493   	 0.166647  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 115, r: 50, streamingCols: 50)                                   	 0.00309849	 100       	 4.03422   	 0         	 1.61369   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 115)  	 0.00242653	 100       	 54.5016   	 0         	 8.15155   	 6.68605   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 115, leftOrthog: 1)                         	 0.00228622	 100       	 25.1507   	 0         	 7.78579   	 3.23034   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 115, r2: 115)                            	 0.001461  	 100       	 90.5205   	 0         	 13.5387   	 6.68605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000943163	 100       	 26.5066   	 0         	 6.36157   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 115)                            	 0.000813933	 100       	 0         	 0         	 11.3031   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000811774	 100       	 0.615935  	 0         	 2.46374   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 115)                                                                          	 0.000548297	 100       	 0         	 0         	 16.7792   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 115)                                                                                                         	 0.000499388	 100       	 0         	 0         	 18.4225   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                          	 0.000491643	 101       	 0         	 0         	 10.6825   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00048966	 100       	 0         	 0         	 8.16893   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 50, fromLeft: 1)                               	 0.000433256	 100       	 0         	 0         	 21.2346   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 1)                                                                                                          	 0.000417283	 101       	 0         	 0         	 12.5862   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000322738	 100       	 0.774622  	 0         	 12.394    	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.12803   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.128     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.28529   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.28405   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.46101   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.90269   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.8458    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.20968   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.96689   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.930306  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.880165  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.828748  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.800221  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.719359  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.334187  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.242402  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.156866  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.153211  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0288155 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0281456 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00988673	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00851801	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00590248	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00140382	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000813933	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000811774	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322738	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22800239724416 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22800035211264 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22799833884800 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22799632558336 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22799431231872 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22799229905408 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22799028578944 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22798827252480 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22798625926016 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22798424599552 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22798223273088 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22798021946624 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22797820620160 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22797619293696 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22797417967232 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22797216640768 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22797015314304 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22796813987840 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22796612661376 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22796411334912 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22796210008448 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22796008681984 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22795807355520 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22795606029056 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22795404702592 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22795203376128 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22795002049664 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22794800723200 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22794599396736 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22794398070272 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22794196743808 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22793995417344 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22793794086784 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22793592760320 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22793391433856 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22793190107392 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22792988780928 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22792787454464 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22792586128000 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22792384801536 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22792183475072 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22791982148608 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22791780822144 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22791579495680 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22791378169216 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22791176842752 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22790975516288 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22790774189824 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22790572863360 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22790371536896 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22790170210432 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22789968883968 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22789767557504 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22789566231040 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22789364904576 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22789163578112 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22788962251648 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22788760925184 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22788559598720 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22788358272256 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22788156945792 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22787955619328 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22787754292864 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22800134063872 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22800127473408 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5800, cols: 116, reductionFactor: 37, colBlockingSize: 12)                                 	 1.60802   	 1300      	 129.601   	 0         	 4.43842   	 29.1998   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 116)                                                                               	 1.13402   	 700       	 6.74452   	 0         	 0.199918  	 33.7364   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 116)	 0.877274  	 700       	 63.4588   	 0         	 6.56889   	 9.6605    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 116)                          	 0.784011  	 700       	 139.364   	 0         	 9.7074    	 14.3564   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 116, r2: 116, leftOrthog: 1)                      	 0.701592  	 600       	 133.487   	 0         	 13.9932   	 9.53947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 116)                        	 0.603069  	 600       	 155.295   	 0         	 10.8171   	 14.3564   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 116)                                                                                	 0.356188  	 900       	 5.25866   	 0         	 0.818345  	 6.42598   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5800, Xcols: 116, r: 116, streamingCols: 0)                                 	 0.236396  	 700       	 231.101   	 0         	 32.0354   	 7.21393   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 116, reductionFactor: 37, colBlockingSize: 12)                                 	 0.216012  	 200       	 63.9765   	 0         	 2.2477    	 28.4631   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 116, m: 5800)                                                                                 	 0.178455  	 700       	 0         	 0         	 42.2255   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5800, m: 116)                                                                        	 0.164039  	 700       	 0         	 0         	 45.9364   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 50) 	 0.0611918 	 100       	 56.0206   	 0         	 8.34883   	 6.70999   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 116)                                                                                	 0.0588262 	 100       	 3.45084   	 0         	 0.192431  	 17.9329   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 116, r2: 116, leftOrthog: 1)                      	 0.055703  	 100       	 120.783   	 0         	 12.8813   	 9.37662   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 50, n: 50, r2: 116)                         	 0.0475815 	 100       	 141.399   	 0         	 16.2853   	 8.68263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 50)                           	 0.0453248 	 100       	 148.44    	 0         	 17.0962   	 8.68263   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 50, r2: 50, leftOrthog: 1)                        	 0.0438022 	 100       	 66.2067   	 0         	 15.9809   	 4.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 50)                         	 0.0432724 	 100       	 155.48    	 0         	 10.9715   	 14.1712   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0413143 	 100       	 2.11791   	 0         	 0.146196  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0306277 	 100       	 97.2446   	 0         	 7.64014   	 12.7281   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 66)                                                                                                         	 0.0284212 	 808       	 0         	 0         	 99.0709   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 116, reductionFactor: 37, colBlockingSize: 12)                                   	 0.027598  	 200       	 10.015    	 0         	 1.11637   	 8.97102   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 116, r: 116, streamingCols: 0)                                 	 0.0236887 	 100       	 142.009   	 0         	 19.8146   	 7.16686   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 116, m: 2500)                                                                                 	 0.00933867	 100       	 0         	 0         	 49.6859   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 116, fromLeft: 1)                              	 0.00845989	 800       	 0         	 0         	 20.3592   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 116)                                                                        	 0.00833158	 100       	 0         	 0         	 55.6917   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 1)  	 0.00476029	 100       	 0.243683  	 0         	 1.9498    	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 2, r2: 1)                              	 0.00399496	 100       	 0.580731  	 0         	 3.48479   	 0.166648  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 116, r: 50, streamingCols: 50)                                   	 0.00319775	 100       	 3.909     	 0         	 1.5636    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 116)  	 0.00254286	 100       	 52.9169   	 0         	 7.88279   	 6.71296   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 116, leftOrthog: 1)                         	 0.0022467 	 100       	 25.8157   	 0         	 7.97615   	 3.23661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 116, r2: 116)                            	 0.00153211	 100       	 87.8267   	 0         	 13.0832   	 6.71296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000903397	 100       	 27.6733   	 0         	 6.6416    	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 116)                            	 0.000836101	 100       	 0         	 0         	 11.0991   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000798205	 100       	 0.626405  	 0         	 2.50562   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 116)                                                                          	 0.000546986	 100       	 0         	 0         	 16.9657   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 116)                                                                                                         	 0.000518123	 100       	 0         	 0         	 17.9108   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                          	 0.000517234	 101       	 0         	 0         	 10.3102   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000473054	 100       	 0         	 0         	 8.45569   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 50, fromLeft: 1)                               	 0.000445581	 100       	 0         	 0         	 20.8267   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 1)                                                                                                          	 0.000398287	 101       	 0         	 0         	 13.3893   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00032727	 100       	 0.763895  	 0         	 12.2223   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.27522   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.27519   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.29445   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.29323   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.48105   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.02597   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.88226   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.23416   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.985941  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.945768  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.8975    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.834863  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.803344  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.694826  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.356188  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.263282  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.188267  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.172917  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0298549 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0288437 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0120802 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00890547	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00593185	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0013957 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000836101	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000798205	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032727	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23237384963968 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23237182351360 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23236981024896 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23236779698432 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23236578371968 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23236377045504 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23236175719040 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23235974392576 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23235773066112 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23235571739648 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23235370413184 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23235169086720 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23234967760256 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23234766433792 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23234565107328 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23234363780864 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23234162454400 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23233961127936 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23233759801472 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23233558475008 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23233357148544 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23233155822080 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23232954495616 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23232753169152 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23232551842688 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23232350516224 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23232149189760 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23231947863296 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23231746536832 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23231545210368 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23231343883904 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23231142557440 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23230941226880 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23230739900416 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23230538573952 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23230337247488 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23230135921024 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23229934594560 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23229733268096 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23229531941632 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23229330615168 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23229129288704 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23228927962240 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23228726635776 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23228525309312 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23228323982848 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23228122656384 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23227921329920 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23227720003456 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23227518676992 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23227317350528 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23227116024064 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23226914697600 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23226713371136 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23226512044672 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23226310718208 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23226109391744 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23225908065280 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23225706738816 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23225505412352 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23225304085888 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23225102759424 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23224901432960 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23237279303424 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23237272712960 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5850, cols: 117, reductionFactor: 37, colBlockingSize: 12)                                 	 1.61222   	 1300      	 132.635   	 0         	 4.50351   	 29.4515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 117)                                                                               	 1.16458   	 700       	 6.73883   	 0         	 0.198038  	 34.0281   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 117)	 0.879842  	 700       	 65.057    	 0         	 6.66767   	 9.75708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 117)                          	 0.790514  	 700       	 141.823   	 0         	 9.79426   	 14.4802   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 117, r2: 117, leftOrthog: 1)                      	 0.732009  	 600       	 131.278   	 0         	 13.644    	 9.62171   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 117)                        	 0.610862  	 600       	 157.313   	 0         	 10.864    	 14.4802   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 117)                                                                                	 0.356872  	 900       	 5.38551   	 0         	 0.8309    	 6.48153   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5850, Xcols: 117, r: 117, streamingCols: 0)                                 	 0.246795  	 700       	 227.138   	 0         	 31.2169   	 7.27612   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 117, reductionFactor: 37, colBlockingSize: 12)                                 	 0.218878  	 200       	 64.2319   	 0         	 2.23824   	 28.6975   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 117, m: 5850)                                                                                 	 0.162625  	 700       	 0         	 0         	 47.1381   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5850, m: 117)                                                                        	 0.156653  	 700       	 0         	 0         	 48.9351   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 50) 	 0.0641724 	 100       	 54.4549   	 0         	 8.07575   	 6.74301   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 117, r2: 117, leftOrthog: 1)                      	 0.0593614 	 100       	 115.302   	 0         	 12.1948   	 9.455     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 117)                                                                                	 0.0585466 	 100       	 3.49721   	 0         	 0.194717  	 17.9605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 50)                           	 0.0488276 	 100       	 140.177   	 0         	 16.1024   	 8.70536   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 50)                         	 0.0457585 	 100       	 149.579   	 0         	 10.4669   	 14.2906   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0446035 	 100       	 65.5778   	 0         	 15.8283   	 4.14306   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 50, n: 50, r2: 117)                         	 0.0436646 	 100       	 156.752   	 0         	 18.0063   	 8.70536   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0428059 	 100       	 2.04411   	 0         	 0.141102  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0323637 	 100       	 92.8217   	 0         	 7.29212   	 12.729    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 67)                                                                                                         	 0.0293499 	 808       	 0         	 0         	 98.8654   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 117, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0251662 	 200       	 11.1729   	 0         	 1.24224   	 8.99417   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 117, r: 117, streamingCols: 0)                                 	 0.0236336 	 100       	 144.804   	 0         	 20.034    	 7.22793   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 117, fromLeft: 1)                              	 0.00850458	 800       	 0         	 0         	 20.6029   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 117)                                                                        	 0.00811059	 100       	 0         	 0         	 57.7024   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 117, m: 2500)                                                                                 	 0.00750095	 100       	 0         	 0         	 62.3921   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 1)  	 0.00497472	 100       	 0.235189  	 0         	 1.88183   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 2, r2: 1)                              	 0.0041876 	 100       	 0.558793  	 0         	 3.35314   	 0.166648  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 117, r: 50, streamingCols: 50)                                   	 0.00311287	 100       	 4.01559   	 0         	 1.60624   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 117)  	 0.00250613	 100       	 54.622    	 0         	 8.1046    	 6.73963   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 117, leftOrthog: 1)                         	 0.00227347	 100       	 25.7316   	 0         	 7.93501   	 3.24279   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 117, r2: 117)                            	 0.00151047	 100       	 90.6277   	 0         	 13.447    	 6.73963   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000957773	 100       	 26.1022   	 0         	 6.26453   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000908544	 100       	 0.550331  	 0         	 2.20132   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 117)                            	 0.00082107	 100       	 0         	 0         	 11.3998   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                          	 0.000557728	 101       	 0         	 0         	 9.70652   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 117)                                                                          	 0.000529482	 100       	 0         	 0         	 17.6777   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 117)                                                                                                         	 0.000503218	 100       	 0         	 0         	 18.6003   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000470537	 100       	 0         	 0         	 8.50093   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 50, fromLeft: 1)                               	 0.000444644	 100       	 0         	 0         	 21.0505   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 1)                                                                                                          	 0.000438721	 101       	 0         	 0         	 12.3395   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00032416	 100       	 0.771224  	 0         	 12.3396   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.35417   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.35414   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.38282   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.3815    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.55582   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.00971   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.88863   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.26593   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.993503  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.951495  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.896351  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.845039  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.838247  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.701243  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.356872  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.273542  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.170597  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.165293  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0308496 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.029296  	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0124179 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00894923	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00628864	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00132489	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000908544	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00082107	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032416	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23019009599360 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23018810107904 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23018608781440 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23018407454976 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23018206128512 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23018004802048 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23017803475584 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23017602149120 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23017400822656 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23017199496192 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23016998169728 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23016796843264 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23016595516800 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23016394190336 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23016192863872 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23015991537408 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23015790210944 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23015588884480 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23015387558016 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23015186231552 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23014984905088 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23014783578624 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23014582252160 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23014380925696 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23014179599232 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23013978272768 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23013776946304 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23013575619840 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23013374293376 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23013172966912 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23012971640448 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23012770313984 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23012568983424 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23012367656960 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23012166330496 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23011965004032 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23011763677568 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23011562351104 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23011361024640 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23011159698176 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23010958371712 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23010757045248 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23010555718784 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23010354392320 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23010153065856 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23009951739392 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23009750412928 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23009549086464 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23009347760000 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23009146433536 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23008945107072 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23008743780608 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23008542454144 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23008341127680 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23008139801216 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23007938474752 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23007737148288 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23007535821824 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23007334495360 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23007133168896 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23006931842432 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23006730515968 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23006529189504 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23018903938816 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23018897348352 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5900, cols: 118, reductionFactor: 37, colBlockingSize: 12)                                 	 1.64991   	 1300      	 132.957   	 0         	 4.47619   	 29.7032   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 118)                                                                               	 1.15432   	 700       	 6.97453   	 0         	 0.203222  	 34.3197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 118)	 0.903996  	 700       	 65.0935   	 0         	 6.60558   	 9.85432   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 118)                          	 0.811532  	 700       	 141.722   	 0         	 9.70438   	 14.604    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 118, r2: 118, leftOrthog: 1)                      	 0.727199  	 600       	 135.564   	 0         	 13.97     	 9.70395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 118)                        	 0.637923  	 600       	 154.536   	 0         	 10.5818   	 14.604    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 118)                                                                                	 0.356778  	 900       	 5.52624   	 0         	 0.845367  	 6.53709   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5900, Xcols: 118, r: 118, streamingCols: 0)                                 	 0.242316  	 700       	 237.318   	 0         	 32.3396   	 7.33831   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 118, reductionFactor: 37, colBlockingSize: 12)                                 	 0.213857  	 200       	 66.8686   	 0         	 2.31126   	 28.9317   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5900, m: 118)                                                                        	 0.176636  	 700       	 0         	 0         	 44.144    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 118, m: 5900)                                                                                 	 0.152639  	 700       	 0         	 0         	 51.0843   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 50) 	 0.065855  	 100       	 54.0885   	 0         	 7.98238   	 6.77599   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 118)                                                                                	 0.0597464 	 100       	 3.45627   	 0         	 0.192145  	 17.9878   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 118, r2: 118, leftOrthog: 1)                      	 0.0580269 	 100       	 119.979   	 0         	 12.5852   	 9.53335   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 50)                           	 0.0494277 	 100       	 140.852   	 0         	 16.1383   	 8.72781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 50)                         	 0.0483144 	 100       	 144.098   	 0         	 9.9999    	 14.4099   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0473262 	 100       	 62.3334   	 0         	 15.0445   	 4.14326   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 50, n: 50, r2: 118)                         	 0.0429429 	 100       	 162.122   	 0         	 18.5754   	 8.72781   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0409133 	 100       	 2.13867   	 0         	 0.147629  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0323316 	 100       	 93.708    	 0         	 7.36122   	 12.73     
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 68)                                                                                                         	 0.0299137 	 808       	 0         	 0         	 99.9192   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 118, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0252103 	 200       	 11.3448   	 0         	 1.25815   	 9.01705   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 118, r: 118, streamingCols: 0)                                 	 0.0239237 	 100       	 145.505   	 0         	 19.9622   	 7.28899   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 118, fromLeft: 1)                              	 0.00933111	 800       	 0         	 0         	 19.1003   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 118)                                                                        	 0.00792103	 100       	 0         	 0         	 59.5882   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 118, m: 2500)                                                                                 	 0.00742487	 100       	 0         	 0         	 63.5702   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 1)  	 0.00494223	 100       	 0.238759  	 0         	 1.91039   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 2, r2: 1)                              	 0.00413829	 100       	 0.570285  	 0         	 3.42209   	 0.166648  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 118, r: 50, streamingCols: 50)                                   	 0.00313716	 100       	 3.9845    	 0         	 1.5938    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 118)  	 0.00255613	 100       	 54.4729   	 0         	 8.05091   	 6.76606   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 118, leftOrthog: 1)                         	 0.00222789	 100       	 26.4825   	 0         	 8.15122   	 3.2489    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00162982	 100       	 15.3392   	 0         	 3.6814    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 118, r2: 118)                            	 0.00153891	 100       	 90.4796   	 0         	 13.3726   	 6.76606   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00086461	 100       	 0.578295  	 0         	 2.31318   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 118)                            	 0.000830688	 100       	 0         	 0         	 11.3641   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 118)                                                                                                         	 0.000525034	 100       	 0         	 0         	 17.9798   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 118)                                                                          	 0.000515976	 100       	 0         	 0         	 18.2954   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                          	 0.000496445	 101       	 0         	 0         	 11.0675   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000489749	 100       	 0         	 0         	 8.16745   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 50, fromLeft: 1)                               	 0.000473172	 100       	 0         	 0         	 19.9505   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 1)                                                                                                          	 0.00039674	 101       	 0         	 0         	 13.8489   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000326728	 100       	 0.765162  	 0         	 12.2426   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.44901   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.44898   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.42236   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.42108   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.58257   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.03407   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.9213    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.25498   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.00814   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.977349  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.914387  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.866637  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.83478   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.73081   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.356778  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.269377  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.185073  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.160553  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0313319 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0301441 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0138388 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00980429	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00588798	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00139161	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00086461	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000830688	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326728	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22994317879168 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22994114045952 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22993912719488 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22993711393024 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22993510066560 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22993308740096 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22993107413632 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22992906087168 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22992704760704 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22992503434240 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22992302107776 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22992100781312 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22991899454848 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22991698128384 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22991496801920 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22991295475456 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22991094148992 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22990892822528 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22990691496064 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22990490169600 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22990288843136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22990087516672 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22989886190208 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22989684863744 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22989483537280 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22989282210816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22989080884352 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22988879557888 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22988678231424 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22988476904960 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22988275578496 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22988074252032 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22987872921472 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22987671595008 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22987470268544 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22987268942080 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22987067615616 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22986866289152 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22986664962688 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22986463636224 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22986262309760 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22986060983296 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22985859656832 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22985658330368 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22985457003904 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22985255677440 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22985054350976 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22984853024512 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22984651698048 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22984450371584 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22984249045120 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22984047718656 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22983846392192 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22983645065728 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22983443739264 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22983242412800 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22983041086336 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22982839759872 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22982638433408 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22982437106944 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22982235780480 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22982034454016 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22981833127552 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22994212218624 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22994205628160 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5950, cols: 119, reductionFactor: 37, colBlockingSize: 12)                                 	 1.70796   	 1300      	 131.731   	 0         	 4.39764   	 29.955    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 119)                                                                               	 1.1822    	 700       	 6.98467   	 0         	 0.201803  	 34.6114   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 119)	 0.919168  	 700       	 65.8032   	 0         	 6.61192   	 9.9522    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 119)                          	 0.826402  	 700       	 142.741   	 0         	 9.69196   	 14.7277   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 119, r2: 119, leftOrthog: 1)                      	 0.754089  	 600       	 134.082   	 0         	 13.7011   	 9.78618   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 119)                        	 0.703024  	 600       	 143.821   	 0         	 9.76532   	 14.7277   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 119)                                                                                	 0.362705  	 900       	 5.5753    	 0         	 0.845685  	 6.59264   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5950, Xcols: 119, r: 119, streamingCols: 0)                                 	 0.266887  	 700       	 220.994   	 0         	 29.8621   	 7.4005    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 119, reductionFactor: 37, colBlockingSize: 12)                                 	 0.217354  	 200       	 66.9126   	 0         	 2.29422   	 29.1658   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5950, m: 119)                                                                        	 0.158595  	 700       	 0         	 0         	 50.0025   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 119, m: 5950)                                                                                 	 0.151847  	 700       	 0         	 0         	 52.2246   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 50) 	 0.0655071 	 100       	 55.4214   	 0         	 8.13957   	 6.80889   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 119, r2: 119, leftOrthog: 1)                      	 0.0606341 	 100       	 116.774   	 0         	 12.1492   	 9.61166   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 119)                                                                                	 0.0583752 	 100       	 3.56744   	 0         	 0.198029  	 18.0147   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 50)                         	 0.0498836 	 100       	 141.94    	 0         	 9.76932   	 14.5292   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 50)                           	 0.0491247 	 100       	 144.133   	 0         	 16.4724   	 8.75      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0486342 	 100       	 61.1709   	 0         	 14.7633   	 4.14345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 50, n: 50, r2: 119)                         	 0.0437876 	 100       	 161.701   	 0         	 18.4801   	 8.75      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.042393  	 100       	 2.06402   	 0         	 0.142476  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0324545 	 100       	 94.1444   	 0         	 7.39498   	 12.7309   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 69)                                                                                                         	 0.0296803 	 808       	 0         	 0         	 103.689   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 119, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0262324 	 200       	 11.0884   	 0         	 1.22664   	 9.03966   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 119, r: 119, streamingCols: 0)                                 	 0.0249214 	 100       	 142.057   	 0         	 19.3274   	 7.35003   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 119, fromLeft: 1)                              	 0.00876485	 800       	 0         	 0         	 20.6804   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 119)                                                                        	 0.0083546 	 100       	 0         	 0         	 56.9746   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 119, m: 2500)                                                                                 	 0.00737876	 100       	 0         	 0         	 64.5094   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 1)  	 0.00512604	 100       	 0.232148  	 0         	 1.8575    	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 2, r2: 1)                              	 0.0043447 	 100       	 0.547793  	 0         	 3.28713   	 0.166648  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 119, r: 50, streamingCols: 50)                                   	 0.00314045	 100       	 3.98032   	 0         	 1.59213   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 119)  	 0.00246398	 100       	 57.4721   	 0         	 8.46143   	 6.79224   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 119, leftOrthog: 1)                         	 0.00213272	 100       	 27.8986   	 0         	 8.5712    	 3.25492   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 119, r2: 119)                            	 0.0015217 	 100       	 93.0605   	 0         	 13.701    	 6.79224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000975974	 100       	 25.6154   	 0         	 6.1477    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000898962	 100       	 0.556197  	 0         	 2.22479   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 119)                            	 0.000779559	 100       	 0         	 0         	 12.212    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 119)                                                                          	 0.000540928	 100       	 0         	 0         	 17.5994   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 119)                                                                                                         	 0.000537268	 100       	 0         	 0         	 17.7193   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                          	 0.000486186	 101       	 0         	 0         	 11.4672   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000476553	 100       	 0         	 0         	 8.39361   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 50, fromLeft: 1)                               	 0.000443073	 100       	 0         	 0         	 21.4863   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 1)                                                                                                          	 0.000395325	 101       	 0         	 0         	 14.1028   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000319771	 100       	 0.781809  	 0         	 12.509    	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.65409   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.65407   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.58069   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.57938   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.67432   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.07056   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.984     	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.28297   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.0333    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.992265  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.952272  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.881393  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.86549   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.797671  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.362705  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.294949  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.167491  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.159703  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.031099  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0300367 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0118697 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00920792	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00614645	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00146433	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000898962	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000779559	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000319771	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23333591336832 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23333416462336 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23333215135872 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23333013809408 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23332812482944 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23332611156480 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23332409830016 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23332208503552 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23332007177088 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23331805850624 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23331604524160 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23331403197696 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23331201871232 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23331000544768 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23330799218304 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23330597891840 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23330396565376 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23330195238912 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23329993912448 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23329792585984 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23329591259520 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23329389933056 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23329188606592 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23328987280128 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23328785953664 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23328584627200 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23328383300736 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23328181974272 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23327980647808 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23327779321344 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23327577994880 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23327376668416 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23327175337856 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23326974011392 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23326772684928 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23326571358464 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23326370032000 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23326168705536 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23325967379072 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23325766052608 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23325564726144 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23325363399680 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23325162073216 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23324960746752 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23324759420288 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23324558093824 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23324356767360 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23324155440896 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23323954114432 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23323752787968 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23323551461504 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23323350135040 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23323148808576 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23322947482112 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23322746155648 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23322544829184 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23322343502720 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23322142176256 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23321940849792 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23321739523328 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23321538196864 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23321336870400 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23321135543936 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23333485676288 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23333307111168 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6000, cols: 120, reductionFactor: 37, colBlockingSize: 12)                                 	 1.75158   	 1300      	 131.716   	 0         	 4.3605    	 30.2067   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 120)                                                                               	 1.16619   	 700       	 7.26059   	 0         	 0.208022  	 34.903    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 120)	 0.936327  	 700       	 66.387    	 0         	 6.60521   	 10.0507   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 120)                          	 0.847905  	 700       	 142.658   	 0         	 9.60561   	 14.8515   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 120, r2: 120, leftOrthog: 1)                      	 0.760258  	 600       	 136.375   	 0         	 13.8193   	 9.86842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 120)                        	 0.682936  	 600       	 151.815   	 0         	 10.2222   	 14.8515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 120)                                                                                	 0.372806  	 900       	 5.56214   	 0         	 0.836639  	 6.6482    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6000, Xcols: 120, r: 120, streamingCols: 0)                                 	 0.264097  	 700       	 229.006   	 0         	 30.6869   	 7.46269   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 120, reductionFactor: 37, colBlockingSize: 12)                                 	 0.226337  	 200       	 65.3415   	 0         	 2.22253   	 29.3996   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 120, m: 6000)                                                                                 	 0.185177  	 700       	 0         	 0         	 43.5476   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6000, m: 120)                                                                        	 0.149803  	 700       	 0         	 0         	 53.8308   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 120, r2: 120, leftOrthog: 1)                      	 0.0613529 	 100       	 117.354   	 0         	 12.1109   	 9.68992   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 50) 	 0.0592375 	 100       	 62.4605   	 0         	 9.12935   	 6.84172   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 120)                                                                                	 0.0580867 	 100       	 3.61529   	 0         	 0.20039   	 18.0412   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 50, r2: 50, leftOrthog: 1)                        	 0.050188  	 100       	 59.7752   	 0         	 14.4257   	 4.14365   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 50)                           	 0.0500164 	 100       	 143.953   	 0         	 16.4106   	 8.77193   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 50)                         	 0.0455208 	 100       	 158.169   	 0         	 10.7977   	 14.6484   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 50, n: 50, r2: 120)                         	 0.0437372 	 100       	 164.619   	 0         	 18.7666   	 8.77193   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0436702 	 100       	 2.00366   	 0         	 0.138309  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0323415 	 100       	 95.2672   	 0         	 7.48266   	 12.7317   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 70)                                                                                                         	 0.0293619 	 808       	 0         	 0         	 107.873   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 120, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0277148 	 200       	 10.6724   	 0         	 1.17771   	 9.062     
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 120, r: 120, streamingCols: 0)                                 	 0.0247445 	 100       	 145.487   	 0         	 19.631    	 7.41107   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 120)                                                                        	 0.00915719	 100       	 0         	 0         	 52.4178   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 120, fromLeft: 1)                              	 0.00888834	 800       	 0         	 0         	 20.7373   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 120, m: 2500)                                                                                 	 0.00596277	 100       	 0         	 0         	 80.4995   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 1)  	 0.00493479	 100       	 0.243172  	 0         	 1.9457    	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 2, r2: 1)                              	 0.00406515	 100       	 0.590384  	 0         	 3.5427    	 0.166648  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 120, r: 50, streamingCols: 50)                                   	 0.00309724	 100       	 4.03586   	 0         	 1.61434   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 120)  	 0.00253716	 100       	 56.7565   	 0         	 8.32428   	 6.81818   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 120, leftOrthog: 1)                         	 0.00236261	 100       	 25.3957   	 0         	 7.78801   	 3.26087   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 120, r2: 120)                            	 0.00159967	 100       	 90.0183   	 0         	 13.2027   	 6.81818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.001044  	 100       	 23.9463   	 0         	 5.74712   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000882186	 100       	 0.566774  	 0         	 2.2671    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 120)                            	 0.000791328	 100       	 0         	 0         	 12.1315   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 120)                                                                                                         	 0.000536306	 100       	 0         	 0         	 17.9002   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 120)                                                                          	 0.000517888	 100       	 0         	 0         	 18.5368   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                          	 0.000484296	 101       	 0         	 0         	 11.6788   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000482533	 100       	 0         	 0         	 8.28959   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 50, fromLeft: 1)                               	 0.000467699	 100       	 0         	 0         	 20.526    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 1)                                                                                                          	 0.000387007	 101       	 0         	 0         	 14.6147   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000327062	 100       	 0.764381  	 0         	 12.2301   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.76874   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.76872   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.62507   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.62377   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.69333   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.13535   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.03797   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.26794   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.07005   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.00304   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.969262  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.903586  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.874161  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.773238  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.372806  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.291939  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.191622  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.159478  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0309809 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0307695 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00935604	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00700815	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00626677	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116868	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000882186	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000791328	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327062	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23114861213568 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23114641565696 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23114440239232 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23114238912768 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23114037586304 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23113836259840 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23113634933376 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23113433606912 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23113232280448 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23113030953984 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23112829627520 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23112628301056 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23112426974592 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23112225648128 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23112024321664 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23111822995200 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23111621668736 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23111420342272 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23111219015808 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23111017689344 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23110816362880 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23110615036416 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23110413709952 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23110212383488 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23110011057024 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23109809730560 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23109608404096 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23109407077632 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23109205751168 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23109004424704 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23108803098240 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23108601771776 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23108400441216 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23108199114752 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23107997788288 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23107796461824 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23107595135360 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23107393808896 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23107192482432 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23106991155968 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23106789829504 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23106588503040 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23106387176576 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23106185850112 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23105984523648 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23105783197184 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23105581870720 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23105380544256 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23105179217792 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23104977891328 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23104776564864 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23104575238400 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23104373911936 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23104172585472 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23103971259008 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23103769932544 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23103568606080 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23103367279616 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23103165953152 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23102964626688 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23102763300224 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23102561973760 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23102360647296 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23114755553024 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23114748962560 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6050, cols: 121, reductionFactor: 37, colBlockingSize: 12)                                 	 1.76835   	 1300      	 133.756   	 0         	 4.39144   	 30.4584   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 121)                                                                               	 1.2435    	 700       	 6.9808    	 0         	 0.198348  	 35.1947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 121)	 0.960476  	 700       	 66.5007   	 0         	 6.55191   	 10.1498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 121)                          	 0.864018  	 700       	 143.526   	 0         	 9.58424   	 14.9752   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 121, r2: 121, leftOrthog: 1)                      	 0.746273  	 600       	 142.433   	 0         	 14.3139   	 9.95066   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 121)                        	 0.649611  	 600       	 163.627   	 0         	 10.9265   	 14.9752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 121)                                                                                	 0.378527  	 900       	 5.61617   	 0         	 0.837766  	 6.70375   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6050, Xcols: 121, r: 121, streamingCols: 0)                                 	 0.286529  	 700       	 216.399   	 0         	 28.7579   	 7.52488   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6050, m: 121)                                                                        	 0.237315  	 700       	 0         	 0         	 34.5488   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 121, reductionFactor: 37, colBlockingSize: 12)                                 	 0.226068  	 200       	 66.5142   	 0         	 2.24457   	 29.6333   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 121, m: 6050)                                                                                 	 0.150091  	 700       	 0         	 0         	 54.6266   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 50) 	 0.0674058 	 100       	 55.9373   	 0         	 8.13698   	 6.87445   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 121, r2: 121, leftOrthog: 1)                      	 0.0624579 	 100       	 117.207   	 0         	 11.9989   	 9.76815   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 121)                                                                                	 0.0605326 	 100       	 3.49812   	 0         	 0.193615  	 18.0674   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 50)                           	 0.0520403 	 100       	 140.67    	 0         	 15.9968   	 8.7936    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 50, n: 50, r2: 121)                         	 0.0473324 	 100       	 154.661   	 0         	 17.5879   	 8.7936    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0469042 	 100       	 64.4932   	 0         	 15.5636   	 4.14384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 50)                         	 0.046447  	 100       	 157.61    	 0         	 10.6726   	 14.7676   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0415326 	 100       	 2.10678   	 0         	 0.145428  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0319908 	 100       	 97.114    	 0         	 7.62719   	 12.7326   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 71)                                                                                                         	 0.0315583 	 808       	 0         	 0         	 103.253   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 121, reductionFactor: 37, colBlockingSize: 12)                                   	 0.027262  	 200       	 11.0313   	 0         	 1.21435   	 9.08408   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 121, r: 121, streamingCols: 0)                                 	 0.025057  	 100       	 146.077   	 0         	 19.5496   	 7.47209   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 121, fromLeft: 1)                              	 0.00925994	 800       	 0         	 0         	 20.2382   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 121)                                                                        	 0.00842995	 100       	 0         	 0         	 57.4144   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 121, m: 2500)                                                                                 	 0.00683316	 100       	 0         	 0         	 70.8311   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 1)  	 0.00506085	 100       	 0.23909   	 0         	 1.91304   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 2, r2: 1)                              	 0.00422525	 100       	 0.572747  	 0         	 3.43686   	 0.166648  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 121, r: 50, streamingCols: 50)                                   	 0.00324287	 100       	 3.85461   	 0         	 1.54184   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 121)  	 0.00254898	 100       	 57.4386   	 0         	 8.39268   	 6.84389   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 121, leftOrthog: 1)                         	 0.00207726	 100       	 29.1249   	 0         	 8.91558   	 3.26674   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 121, r2: 121)                            	 0.00155518	 100       	 94.1436   	 0         	 13.7559   	 6.84389   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00103965	 100       	 0.480932  	 0         	 1.92373   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000898618	 100       	 27.8205   	 0         	 6.67692   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 121)                            	 0.000822269	 100       	 0         	 0         	 11.7723   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 121)                                                                          	 0.000525455	 100       	 0         	 0         	 18.4221   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 121)                                                                                                         	 0.000507946	 100       	 0         	 0         	 19.0571   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                          	 0.000504843	 101       	 0         	 0         	 11.3635   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000498147	 100       	 0         	 0         	 8.02976   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 50, fromLeft: 1)                               	 0.000467114	 100       	 0         	 0         	 20.723    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 1)                                                                                                          	 0.000409128	 101       	 0         	 0         	 14.022    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000322206	 100       	 0.775901  	 0         	 12.4144   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.89638   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.89636   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.62071   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.61926   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.77341   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.23271   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.05367   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.34557   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.08019   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.03549   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.974714  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.921838  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.857713  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.744289  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.378527  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.314828  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.246271  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.157422  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0329802 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0316206 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0187449 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00972705	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00513224	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00130867	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00103965	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000822269	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322206	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22518299752320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22518110873600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22517909547136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22517708220672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22517506894208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22517305567744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22517104241280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22516902914816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22516701588352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22516500261888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22516298935424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22516097608960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22515896282496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22515694956032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22515493629568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22515292303104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22515090976640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22514889650176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22514688323712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22514486997248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22514285670784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22514084344320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22513883017856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22513681691392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22513480364928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22513279038464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22513077712000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22512876385536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22512675059072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22512473732608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22512272406144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22512071079680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22511869749120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22511668422656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22511467096192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22511265769728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22511064443264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22510863116800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22510661790336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22510460463872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22510259137408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22510057810944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22509856484480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22509655158016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22509453831552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22509252505088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22509051178624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22508849852160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22508648525696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22508447199232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22508245872768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22508044546304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22507843219840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22507641893376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22507440566912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22507239240448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22507037913984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22506836587520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22506635261056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22506433934592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22506232608128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22506031281664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22505829955200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22518194091776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22518187501312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6100, cols: 122, reductionFactor: 37, colBlockingSize: 12)                                 	 1.80531   	 1300      	 134.293   	 0         	 4.37292   	 30.7101   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 122)                                                                               	 1.23246   	 700       	 7.21946   	 0         	 0.203443  	 35.4864   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 122)	 0.966362  	 700       	 67.9056   	 0         	 6.62525   	 10.2495   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 122)                          	 0.869116  	 700       	 146.251   	 0         	 9.68616   	 15.099    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 122, r2: 122, leftOrthog: 1)                      	 0.794587  	 600       	 137.116   	 0         	 13.6667   	 10.0329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 122)                        	 0.65026   	 600       	 167.55    	 0         	 11.0967   	 15.099    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 122)                                                                                	 0.385295  	 900       	 5.65545   	 0         	 0.836691  	 6.75931   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6100, Xcols: 122, r: 122, streamingCols: 0)                                 	 0.289007  	 700       	 219.907   	 0         	 28.9845   	 7.58706   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 122, reductionFactor: 37, colBlockingSize: 12)                                 	 0.231871  	 200       	 65.9258   	 0         	 2.20733   	 29.8668   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6100, m: 122)                                                                        	 0.222018  	 700       	 0         	 0         	 37.5422   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 122, m: 6100)                                                                                 	 0.163124  	 700       	 0         	 0         	 51.0964   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 50) 	 0.0649444 	 100       	 59.1583   	 0         	 8.56487   	 6.90709   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 122, r2: 122, leftOrthog: 1)                      	 0.0631126 	 100       	 117.916   	 0         	 11.9757   	 9.84633   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 122)                                                                                	 0.060182  	 100       	 3.54757   	 0         	 0.196072  	 18.0932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 50)                           	 0.0520346 	 100       	 143.02    	 0         	 16.2246   	 8.81503   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 50, n: 50, r2: 122)                         	 0.0476213 	 100       	 156.275   	 0         	 17.7282   	 8.81503   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 50)                         	 0.0460992 	 100       	 161.435   	 0         	 10.8442   	 14.8868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0434344 	 100       	 2.01453   	 0         	 0.13906   	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0414735 	 100       	 73.5409   	 0         	 17.7463   	 4.14402   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0330653 	 100       	 94.7347   	 0         	 7.43982   	 12.7335   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 72)                                                                                                         	 0.0326591 	 808       	 0         	 0         	 102.604   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 122, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0293746 	 200       	 10.4078   	 0         	 1.14297   	 9.10591   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 122, r: 122, streamingCols: 0)                                 	 0.0251195 	 100       	 148.132   	 0         	 19.6642   	 7.5331    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 122)                                                                        	 0.0105085 	 100       	 0         	 0         	 46.4387   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 122, fromLeft: 1)                              	 0.00970138	 800       	 0         	 0         	 19.6379   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 122, m: 2500)                                                                                 	 0.0079055 	 100       	 0         	 0         	 61.7292   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 1)  	 0.00498535	 100       	 0.244717  	 0         	 1.95806   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 2, r2: 1)                              	 0.00420653	 100       	 0.580051  	 0         	 3.48069   	 0.166648  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 122, r: 50, streamingCols: 50)                                   	 0.00304682	 100       	 4.10264   	 0         	 1.64106   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 122)  	 0.00260227	 100       	 57.1961   	 0         	 8.32625   	 6.86937   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 122, leftOrthog: 1)                         	 0.00192357	 100       	 31.7118   	 0         	 9.69031   	 3.27253   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 122, r2: 122)                            	 0.0016098 	 100       	 92.4585   	 0         	 13.4595   	 6.86937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000832961	 100       	 30.0134   	 0         	 7.20322   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 122)                            	 0.000827578	 100       	 0         	 0         	 11.7935   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000792441	 100       	 0.630962  	 0         	 2.52385   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 122)                                                                          	 0.000610884	 100       	 0         	 0         	 15.9768   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                          	 0.000529601	 101       	 0         	 0         	 10.9849   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000520308	 100       	 0         	 0         	 7.68775   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 122)                                                                                                         	 0.000517474	 100       	 0         	 0         	 18.8609   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 50, fromLeft: 1)                               	 0.000461631	 100       	 0         	 0         	 21.1424   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 1)                                                                                                          	 0.00039852	 101       	 0         	 0         	 14.598    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000343399	 100       	 0.728016  	 0         	 11.6483   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.06386   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.06383   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.74476   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.74353   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.87527   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.25936   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.09962   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.33607   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.09728   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.03889   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.0036    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.926967  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.901096  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.744814  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.385295  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.317173  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.233137  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.17155   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0341047 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.032008  	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0146176 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.010163  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00595875	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00145063	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000827578	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000792441	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343399	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22368659404672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22368458106880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22368256780416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22368055453952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22367854127488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22367652801024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22367451474560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22367250148096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22367048821632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22366847495168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22366646168704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22366444842240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22366243515776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22366042189312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22365840862848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22365639536384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22365438209920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22365236883456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22365035556992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22364834230528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22364632904064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22364431577600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22364230251136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22364028924672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22363827598208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22363626271744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22363424945280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22363223618816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22363022292352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22362820965888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22362619639424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22362418312960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22362216982400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22362015655936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22361814329472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22361613003008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22361411676544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22361210350080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22361009023616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22360807697152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22360606370688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22360405044224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22360203717760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22360002391296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22359801064832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22359599738368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22359398411904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22359197085440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22358995758976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22358794432512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22358593106048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22358391779584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22358190453120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22357989126656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22357787800192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22357586473728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22357385147264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22357183820800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22356982494336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22356781167872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22356579841408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22356378514944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22356177188480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22368553744128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22368547153664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6150, cols: 123, reductionFactor: 37, colBlockingSize: 12)                                 	 1.79793   	 1300      	 138.187   	 0         	 4.46314   	 30.9618   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 123)                                                                               	 1.25546   	 700       	 7.2629    	 0         	 0.202999  	 35.778    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 123)	 0.982561  	 700       	 68.6041   	 0         	 6.62856   	 10.3498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 123)                          	 0.883941  	 700       	 147.364   	 0         	 9.68047   	 15.2228   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 123, r2: 123, leftOrthog: 1)                      	 0.808146  	 600       	 138.158   	 0         	 13.6586   	 10.1151   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 123)                        	 0.663867  	 600       	 168.184   	 0         	 11.0482   	 15.2228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 123)                                                                                	 0.390183  	 900       	 5.72306   	 0         	 0.839791  	 6.81486   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6150, Xcols: 123, r: 123, streamingCols: 0)                                 	 0.295064  	 700       	 220.733   	 0         	 28.8568   	 7.64925   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 123, reductionFactor: 37, colBlockingSize: 12)                                 	 0.233019  	 200       	 66.6808   	 0         	 2.2153    	 30.1002   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6150, m: 123)                                                                        	 0.208503  	 700       	 0         	 0         	 40.6337   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 123, m: 6150)                                                                                 	 0.18972   	 700       	 0         	 0         	 44.6566   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 50) 	 0.0717969 	 100       	 54.5218   	 0         	 7.85661   	 6.93962   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 123, r2: 123, leftOrthog: 1)                      	 0.0614685 	 100       	 123.063   	 0         	 12.3999   	 9.92448   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 123)                                                                                	 0.0608332 	 100       	 3.53836   	 0         	 0.195288  	 18.1187   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 50)                           	 0.0521799 	 100       	 144.969   	 0         	 16.4063   	 8.83621   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0463724 	 100       	 66.311    	 0         	 16.0009   	 4.1442    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 50)                         	 0.0440115 	 100       	 171.875   	 0         	 11.4539   	 15.0059   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 50, n: 50, r2: 123)                         	 0.0436328 	 100       	 173.367   	 0         	 19.6201   	 8.83621   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0418531 	 100       	 2.09064   	 0         	 0.144314  	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 73)                                                                                                         	 0.0334703 	 808       	 0         	 0         	 102.917   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0321022 	 100       	 98.3768   	 0         	 7.72534   	 12.7343   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 123, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0293724 	 200       	 10.5799   	 0         	 1.15913   	 9.12748   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 123, r: 123, streamingCols: 0)                                 	 0.0258396 	 100       	 146.374   	 0         	 19.2747   	 7.59409   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 123)                                                                        	 0.0100351 	 100       	 0         	 0         	 49.0279   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 123, fromLeft: 1)                              	 0.00961939	 800       	 0         	 0         	 20.1313   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 123, m: 2500)                                                                                 	 0.00771929	 100       	 0         	 0         	 63.7364   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 1)  	 0.00516766	 100       	 0.238019  	 0         	 1.90446   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 2, r2: 1)                              	 0.00435573	 100       	 0.564773  	 0         	 3.38901   	 0.166649  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 123, r: 50, streamingCols: 50)                                   	 0.00307842	 100       	 4.06053   	 0         	 1.62421   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 123)  	 0.00267046	 100       	 56.6531   	 0         	 8.21701   	 6.89462   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 123, leftOrthog: 1)                         	 0.00214099	 100       	 28.725    	 0         	 8.76229   	 3.27825   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 123, r2: 123)                            	 0.00166644	 100       	 90.7865   	 0         	 13.1677   	 6.89462   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000952773	 100       	 0.524784  	 0         	 2.09914   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000937081	 100       	 26.6786   	 0         	 6.40286   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 123)                            	 0.000828878	 100       	 0         	 0         	 11.8715   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 123)                                                                          	 0.000580129	 100       	 0         	 0         	 16.9617   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 123)                                                                                                         	 0.000512057	 100       	 0         	 0         	 19.2166   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000488092	 100       	 0         	 0         	 8.19518   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                          	 0.000485765	 101       	 0         	 0         	 12.1425   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 50, fromLeft: 1)                               	 0.000472573	 100       	 0         	 0         	 20.8222   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 1)                                                                                                          	 0.000422905	 101       	 0         	 0         	 13.9473   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000342999	 100       	 0.728865  	 0         	 11.6618   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.18086   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.18083   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.82904   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.82765   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.91494   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.28604   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.09243   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.35814   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.09731   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.0622    	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.996568  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.942143  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.918128  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.752449  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.390183  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.323982  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.219118  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.197927  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0348911 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0334819 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0116267 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.010092  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00629944	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00140573	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000952773	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000828878	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000342999	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23302805723008 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23302613493760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23302412167296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23302210840832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23302009514368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23301808187904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23301606861440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23301405534976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23301204208512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23301002882048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23300801555584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23300600229120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23300398902656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23300197576192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23299996249728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23299794923264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23299593596800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23299392270336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23299190943872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23298989617408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23298788290944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23298586964480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23298385638016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23298184311552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23297982985088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23297781658624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23297580332160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23297379005696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23297177679232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23296976352768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23296775026304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23296573699840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23296372369280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23296171042816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23295969716352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23295768389888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23295567063424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23295365736960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23295164410496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23294963084032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23294761757568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23294560431104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23294359104640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23294157778176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23293956451712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23293755125248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23293553798784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23293352472320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23293151145856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23292949819392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23292748492928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23292547166464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23292345840000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23292144513536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23291943187072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23291741860608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23291540534144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23291339207680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23291137881216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23290936554752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23290735228288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23290533901824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23290332575360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23302700062464 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23302693472000 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6200, cols: 124, reductionFactor: 37, colBlockingSize: 12)                                 	 1.82805   	 1300      	 139.252   	 0         	 4.46127   	 31.2136   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 124)                                                                               	 1.25334   	 700       	 7.45405   	 0         	 0.206657  	 36.0697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 124)	 1.01132   	 700       	 68.4568   	 0         	 6.55052   	 10.4506   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 124)                          	 0.907508  	 700       	 147.066   	 0         	 9.58302   	 15.3465   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 124, r2: 124, leftOrthog: 1)                      	 0.768269  	 600       	 148.903   	 0         	 14.6021   	 10.1974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 124)                        	 0.687351  	 600       	 166.432   	 0         	 10.8449   	 15.3465   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 124)                                                                                	 0.393138  	 900       	 5.8197    	 0         	 0.847067  	 6.87042   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6200, Xcols: 124, r: 124, streamingCols: 0)                                 	 0.295633  	 700       	 225.725   	 0         	 29.2714   	 7.71144   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 124, reductionFactor: 37, colBlockingSize: 12)                                 	 0.236596  	 200       	 66.7448   	 0         	 2.20038   	 30.3333   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 124, m: 6200)                                                                                 	 0.164552  	 700       	 0         	 0         	 52.3273   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6200, m: 124)                                                                        	 0.146506  	 700       	 0         	 0         	 58.7728   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 50) 	 0.0695733 	 100       	 57.3208   	 0         	 8.22154   	 6.97203   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 124, r2: 124, leftOrthog: 1)                      	 0.0609543 	 100       	 126.127   	 0         	 12.6095   	 10.0026   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 124)                                                                                	 0.0607266 	 100       	 3.57339   	 0         	 0.196948  	 18.1438   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 50)                           	 0.0501587 	 100       	 153.274   	 0         	 17.3051   	 8.85714   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0486473 	 100       	 1.79866   	 0         	 0.124159  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0478711 	 100       	 64.7572   	 0         	 15.6253   	 4.14439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 50)                         	 0.0455107 	 100       	 168.927   	 0         	 11.1688   	 15.1249   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 50, n: 50, r2: 124)                         	 0.0448774 	 100       	 171.311   	 0         	 19.3416   	 8.85714   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 74)                                                                                                         	 0.0340713 	 808       	 0         	 0         	 103.891   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0324137 	 100       	 98.2235   	 0         	 7.71279   	 12.7351   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 124, reductionFactor: 37, colBlockingSize: 12)                                   	 0.029215  	 200       	 10.8106   	 0         	 1.18164   	 9.1488    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 124, r: 124, streamingCols: 0)                                 	 0.025683  	 100       	 149.671   	 0         	 19.5519   	 7.65508   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 124, fromLeft: 1)                              	 0.00963654	 800       	 0         	 0         	 20.4236   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 124)                                                                        	 0.00915653	 100       	 0         	 0         	 54.169    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 124, m: 2500)                                                                                 	 0.00893503	 100       	 0         	 0         	 55.5118   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 1)  	 0.00494354	 100       	 0.250832  	 0         	 2.00698   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 2, r2: 1)                              	 0.00413733	 100       	 0.59942   	 0         	 3.59691   	 0.166649  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 124, r: 50, streamingCols: 50)                                   	 0.00311788	 100       	 4.00914   	 0         	 1.60365   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 124)  	 0.00269968	 100       	 56.9549   	 0         	 8.2309    	 6.91964   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 124, leftOrthog: 1)                         	 0.00235552	 100       	 26.3211   	 0         	 8.01521   	 3.2839    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 124, r2: 124)                            	 0.00170286	 100       	 90.2951   	 0         	 13.0491   	 6.91964   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000847083	 100       	 0.590261  	 0         	 2.36104   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000840089	 100       	 29.7588   	 0         	 7.1421    	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 124)                            	 0.000819361	 100       	 0         	 0         	 12.107    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 124)                                                                          	 0.000546184	 100       	 0         	 0         	 18.1624   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 124)                                                                                                         	 0.00051856	 100       	 0         	 0         	 19.1299   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                          	 0.000495634	 101       	 0         	 0         	 12.0637   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 50, fromLeft: 1)                               	 0.000493063	 100       	 0         	 0         	 20.1191   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000492692	 100       	 0         	 0         	 8.11866   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 1)                                                                                                          	 0.000419815	 101       	 0         	 0         	 14.2425   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000324637	 100       	 0.770091  	 0         	 12.3215   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.0386    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.03857   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.72699   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.72573   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.90341   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.21409   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.12628   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.36271   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.11783   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.08854   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.01012   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.963507  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.87945   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.778579  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.393138  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.324434  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.17398   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.156209  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0355053 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0331066 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0101296 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0066055 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00445366	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00128425	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000847083	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000819361	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324637	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23398940796800 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23398713387008 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23398512060544 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23398310734080 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23398109407616 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23397908081152 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23397706754688 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23397505428224 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23397304101760 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23397102775296 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23396901448832 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23396700122368 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23396498795904 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23396297469440 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23396096142976 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23395894816512 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23395693490048 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23395492163584 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23395290837120 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23395089510656 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23394888184192 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23394686857728 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23394485531264 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23394284204800 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23394082878336 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23393881551872 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23393680225408 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23393478898944 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23393277572480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23393076246016 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23392874919552 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23392673593088 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23392472262528 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23392270936064 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23392069609600 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23391868283136 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23391666956672 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23391465630208 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23391264303744 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23391062977280 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23390861650816 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23390660324352 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23390458997888 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23390257671424 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23390056344960 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23389855018496 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23389653692032 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23389452365568 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23389251039104 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23389049712640 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23388848386176 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23388647059712 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23388445733248 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23388244406784 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23388043080320 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23387841753856 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23387640427392 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23387439100928 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23387237774464 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23387036448000 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23386835121536 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23386633795072 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23386432468608 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23398835136256 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23398828545792 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6250, cols: 125, reductionFactor: 37, colBlockingSize: 12)                                 	 1.83536   	 1300      	 142.081   	 0         	 4.51547   	 31.4653   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 125)                                                                               	 1.312     	 700       	 7.29446   	 0         	 0.20061   	 36.3614   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 125)	 1.00472   	 700       	 70.7596   	 0         	 6.70583   	 10.5519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 125)                          	 0.904773  	 700       	 151.108   	 0         	 9.76764   	 15.4703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 125, r2: 125, leftOrthog: 1)                      	 0.839934  	 600       	 139.52    	 0         	 13.5725   	 10.2796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 125)                        	 0.706476  	 600       	 165.876   	 0         	 10.7222   	 15.4703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 125)                                                                                	 0.402092  	 900       	 5.82889   	 0         	 0.841599  	 6.92597   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6250, Xcols: 125, r: 125, streamingCols: 0)                                 	 0.300787  	 700       	 227.269   	 0         	 29.2358   	 7.77363   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 125, reductionFactor: 37, colBlockingSize: 12)                                 	 0.237799  	 200       	 67.4825   	 0         	 2.20774   	 30.5663   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6250, m: 125)                                                                        	 0.182624  	 700       	 0         	 0         	 47.9125   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 125, m: 6250)                                                                                 	 0.178554  	 700       	 0         	 0         	 49.0047   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 50) 	 0.0714006 	 100       	 56.8973   	 0         	 8.12318   	 7.00431   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 125, r2: 125, leftOrthog: 1)                      	 0.0639628 	 100       	 122.141   	 0         	 12.1164   	 10.0806   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 125)                                                                                	 0.0615546 	 100       	 3.55376   	 0         	 0.195599  	 18.1686   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 50)                           	 0.0541381 	 100       	 144.307   	 0         	 16.2547   	 8.87784   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 50)                         	 0.0510901 	 100       	 152.916   	 0         	 10.0313   	 15.2439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 50, n: 50, r2: 125)                         	 0.0493826 	 100       	 158.204   	 0         	 17.8201   	 8.87784   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0491724 	 100       	 63.5519   	 0         	 15.3338   	 4.14456   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0428953 	 100       	 2.03985   	 0         	 0.140808  	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 75)                                                                                                         	 0.0358092 	 808       	 0         	 0         	 101.538   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0325059 	 100       	 98.7346   	 0         	 7.75244   	 12.736    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 125, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0290369 	 200       	 11.0531   	 0         	 1.20536   	 9.16988   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 125, r: 125, streamingCols: 0)                                 	 0.0257533 	 100       	 151.679   	 0         	 19.6577   	 7.71605   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 125, fromLeft: 1)                              	 0.0098564 	 800       	 0         	 0         	 20.2914   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 125)                                                                        	 0.00881668	 100       	 0         	 0         	 56.7107   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 125, m: 2500)                                                                                 	 0.00772209	 100       	 0         	 0         	 64.7493   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 1)  	 0.00500562	 100       	 0.249719  	 0         	 1.99807   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 2, r2: 1)                              	 0.00420565	 100       	 0.594438  	 0         	 3.56701   	 0.166649  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 125, r: 50, streamingCols: 50)                                   	 0.00306828	 100       	 4.07394   	 0         	 1.62958   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 125)  	 0.00262799	 100       	 59.4561   	 0         	 8.56168   	 6.94444   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 125, leftOrthog: 1)                         	 0.00220168	 100       	 28.3874   	 0         	 8.62977   	 3.28947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 125, r2: 125)                            	 0.00166502	 100       	 93.8425   	 0         	 13.5133   	 6.94444   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000861537	 100       	 0.580358  	 0         	 2.32143   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000859007	 100       	 29.1034   	 0         	 6.98481   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 125)                            	 0.000801709	 100       	 0         	 0         	 12.4734   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 125)                                                                          	 0.000539508	 100       	 0         	 0         	 18.5354   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 125)                                                                                                         	 0.000527037	 100       	 0         	 0         	 18.974    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                          	 0.000512637	 101       	 0         	 0         	 11.8212   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 50, fromLeft: 1)                               	 0.000498311	 100       	 0         	 0         	 20.0678   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000491558	 100       	 0         	 0         	 8.13739   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 1)                                                                                                          	 0.000466704	 101       	 0         	 0         	 12.9847   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00032875	 100       	 0.760456  	 0         	 12.1673   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.39933   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.3993    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.01228   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.01101   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.06243   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.29594   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.1347    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.41645   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.12279   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.08376   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.01329   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.964782  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.955271  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.807808  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.402092  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.329608  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.191981  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.186768  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0373155 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0342296 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0141385 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0103547 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00603818	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00131271	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000861537	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000801709	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032875	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23150849755008 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23150611916800 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23150410590336 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23150209263872 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23150007937408 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23149806610944 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23149605284480 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23149403958016 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23149202631552 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23149001305088 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23148799978624 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23148598652160 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23148397325696 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23148195999232 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23147994672768 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23147793346304 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23147592019840 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23147390693376 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23147189366912 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23146988040448 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23146786713984 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23146585387520 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23146384061056 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23146182734592 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23145981408128 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23145780081664 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23145578755200 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23145377428736 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23145176102272 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23144974775808 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23144773449344 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23144572122880 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23144370792320 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23144169465856 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23143968139392 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23143766812928 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23143565486464 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23143364160000 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23143162833536 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23142961507072 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23142760180608 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23142558854144 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23142357527680 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23142156201216 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23141954874752 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23141753548288 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23141552221824 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23141350895360 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23141149568896 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23140948242432 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23140746915968 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23140545589504 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23140344263040 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23140142936576 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23139941610112 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23139740283648 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23139538957184 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23139337630720 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23139136304256 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23138934977792 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23138733651328 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23138532324864 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23138330998400 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23150744094464 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23150737504000 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6300, cols: 126, reductionFactor: 37, colBlockingSize: 12)                                 	 1.86662   	 1300      	 143.08    	 0         	 4.51116   	 31.717    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 126)                                                                               	 1.32121   	 700       	 7.41885   	 0         	 0.202407  	 36.653    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 126)	 1.03356   	 700       	 70.6239   	 0         	 6.62897   	 10.6538   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 126)                          	 0.92792   	 700       	 150.903   	 0         	 9.67698   	 15.5941   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 126, r2: 126, leftOrthog: 1)                      	 0.849536  	 600       	 141.28    	 0         	 13.6347   	 10.3618   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 126)                        	 0.71395   	 600       	 168.111   	 0         	 10.7804   	 15.5941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 126)                                                                                	 0.403968  	 900       	 5.94218   	 0         	 0.851129  	 6.98153   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6300, Xcols: 126, r: 126, streamingCols: 0)                                 	 0.308165  	 700       	 227.194   	 0         	 28.9943   	 7.83582   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 126, reductionFactor: 37, colBlockingSize: 12)                                 	 0.240933  	 200       	 67.6748   	 0         	 2.1973    	 30.7991   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6300, m: 126)                                                                        	 0.175869  	 700       	 0         	 0         	 50.5523   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 126, m: 6300)                                                                                 	 0.17566   	 700       	 0         	 0         	 50.6123   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 50) 	 0.0704904 	 100       	 58.703    	 0         	 8.34269   	 7.03646   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 126, r2: 126, leftOrthog: 1)                      	 0.0618091 	 100       	 128.428   	 0         	 12.6422   	 10.1587   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 126)                                                                                	 0.0607667 	 100       	 3.62863   	 0         	 0.199451  	 18.1931   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 50)                           	 0.0526496 	 100       	 150.77    	 0         	 16.9437   	 8.89831   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0517055 	 100       	 60.9219   	 0         	 14.6986   	 4.14474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 50)                         	 0.0508122 	 100       	 156.222   	 0         	 10.1688   	 15.3629   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 50, n: 50, r2: 126)                         	 0.0476996 	 100       	 166.417   	 0         	 18.702    	 8.89831   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0418366 	 100       	 2.09147   	 0         	 0.144371  	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 76)                                                                                                         	 0.0360509 	 808       	 0         	 0         	 103.565   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0331962 	 100       	 97.4549   	 0         	 7.65147   	 12.7368   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 126, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0282592 	 200       	 11.5397   	 0         	 1.25558   	 9.19072   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 126, r: 126, streamingCols: 0)                                 	 0.0263757 	 100       	 150.479   	 0         	 19.3493   	 7.77701   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 126, fromLeft: 1)                              	 0.00989431	 800       	 0         	 0         	 20.5384   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 126)                                                                        	 0.00888605	 100       	 0         	 0         	 56.7181   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 126, m: 2500)                                                                                 	 0.00825339	 100       	 0         	 0         	 61.0658   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 1)  	 0.0050029 	 100       	 0.251854  	 0         	 2.01515   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 2, r2: 1)                              	 0.00418892	 100       	 0.601587  	 0         	 3.6099    	 0.166649  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 126, r: 50, streamingCols: 50)                                   	 0.00304265	 100       	 4.10827   	 0         	 1.64331   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 126)  	 0.00263756	 100       	 60.1919   	 0         	 8.63707   	 6.96903   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 126, leftOrthog: 1)                         	 0.00215621	 100       	 29.2179   	 0         	 8.8674    	 3.29498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 126, r2: 126)                            	 0.00162458	 100       	 97.7239   	 0         	 14.0226   	 6.96903   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000901552	 100       	 0.554599  	 0         	 2.2184    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000893178	 100       	 27.9899   	 0         	 6.71759   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 126)                            	 0.000844644	 100       	 0         	 0         	 11.934    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 126)                                                                          	 0.000553876	 100       	 0         	 0         	 18.199    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 126)                                                                                                         	 0.000536099	 100       	 0         	 0         	 18.8025   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                          	 0.000519119	 101       	 0         	 0         	 11.8293   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000506315	 100       	 0         	 0         	 7.90022   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 50, fromLeft: 1)                               	 0.000487579	 100       	 0         	 0         	 20.6736   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 1)                                                                                                          	 0.000455894	 101       	 0         	 0         	 13.4698   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000340196	 100       	 0.73487   	 0         	 11.7579   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.47439   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.47437   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.03894   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.03761   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.09034   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.31355   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.16901   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.42381   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.13863   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.11169   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.03155   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.986383  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.965207  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.813355  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.403968  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.337583  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.185308  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.18442   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.037562  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0343169 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0129167 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0103819 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00629697	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00137372	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000901552	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000844644	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340196	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22871212652416 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22871036389376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22870835062912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22870633736448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22870432409984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22870231083520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22870029757056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22869828430592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22869627104128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22869425777664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22869224451200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22869023124736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22868821798272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22868620471808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22868419145344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22868217818880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22868016492416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22867815165952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22867613839488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22867412513024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22867211186560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22867009860096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22866808533632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22866607207168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22866405880704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22866204554240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22866003227776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22865801901312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22865600574848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22865399248384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22865197921920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22864996595456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22864795264896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22864593938432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22864392611968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22864191285504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22863989959040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22863788632576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22863587306112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22863385979648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22863184653184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22862983326720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22862782000256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22862580673792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22862379347328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22862178020864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22861976694400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22861775367936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22861574041472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22861372715008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22861171388544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22860970062080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22860768735616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22860567409152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22860366082688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22860164756224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22859963429760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22859762103296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22859560776832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22859359450368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22859158123904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22858956797440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22858755470976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22871106991872 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22870928418560 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6350, cols: 127, reductionFactor: 37, colBlockingSize: 12)                                 	 1.87776   	 1300      	 145.645   	 0         	 4.55586   	 31.9687   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 127)                                                                               	 1.32326   	 700       	 7.5851    	 0         	 0.20531   	 36.9447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 127)	 1.03903   	 700       	 72.1189   	 0         	 6.70486   	 10.7562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 127)                          	 0.929981  	 700       	 154.183   	 0         	 9.80941   	 15.7178   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 127, r2: 127, leftOrthog: 1)                      	 0.85439   	 600       	 143.849   	 0         	 13.7732   	 10.4441   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 127)                        	 0.733818  	 600       	 167.484   	 0         	 10.6557   	 15.7178   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 127)                                                                                	 0.409369  	 900       	 6.0045    	 0         	 0.853265  	 7.03708   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6350, Xcols: 127, r: 127, streamingCols: 0)                                 	 0.313439  	 700       	 228.732   	 0         	 28.9607   	 7.89801   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 127, reductionFactor: 37, colBlockingSize: 12)                                 	 0.24599   	 200       	 67.3399   	 0         	 2.17003   	 31.0317   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6350, m: 127)                                                                        	 0.184595  	 700       	 0         	 0         	 48.9302   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 127, m: 6350)                                                                                 	 0.171674  	 700       	 0         	 0         	 52.6126   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 50) 	 0.0698995 	 100       	 60.2937   	 0         	 8.52996   	 7.06846   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 127, r2: 127, leftOrthog: 1)                      	 0.065947  	 100       	 122.288   	 0         	 11.946    	 10.2367   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 127)                                                                                	 0.0636775 	 100       	 3.49024   	 0         	 0.19159   	 18.2172   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 50)                           	 0.0535997 	 100       	 150.458   	 0         	 16.8702   	 8.91854   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 50, n: 50, r2: 127)                         	 0.0510229 	 100       	 158.057   	 0         	 17.7222   	 8.91854   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 50)                         	 0.0496219 	 100       	 162.519   	 0         	 10.4974   	 15.4818   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0435416 	 100       	 2.00957   	 0         	 0.138718  	 14.4868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0425116 	 100       	 74.6855   	 0         	 18.0186   	 4.14491   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 77)                                                                                                         	 0.0344791 	 808       	 0         	 0         	 111.155   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0332041 	 100       	 98.205    	 0         	 7.70988   	 12.7375   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 127, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0275464 	 200       	 12.0269   	 0         	 1.30566   	 9.21133   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 127, r: 127, streamingCols: 0)                                 	 0.0266333 	 100       	 151.399   	 0         	 19.3161   	 7.83796   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 127, fromLeft: 1)                              	 0.0100995 	 800       	 0         	 0         	 20.4418   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 127)                                                                        	 0.00846932	 100       	 0         	 0         	 59.9812   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 127, m: 2500)                                                                                 	 0.00771559	 100       	 0         	 0         	 65.8407   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 1)  	 0.00517457	 100       	 0.245431  	 0         	 1.96376   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 2, r2: 1)                              	 0.00445265	 100       	 0.570447  	 0         	 3.42304   	 0.166649  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 127, r: 50, streamingCols: 50)                                   	 0.0031224 	 100       	 4.00333   	 0         	 1.60133   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 127)  	 0.00307218	 100       	 52.5002   	 0         	 7.50711   	 6.99339   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 127, leftOrthog: 1)                         	 0.00265395	 100       	 23.9266   	 0         	 7.24958   	 3.30042   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 127, r2: 127)                            	 0.00206044	 100       	 78.2793   	 0         	 11.1933   	 6.99339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000852685	 100       	 29.3192   	 0         	 7.0366    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000822425	 100       	 0.607958  	 0         	 2.43183   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 127)                            	 0.000816407	 100       	 0         	 0         	 12.4448   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 127)                                                                          	 0.000565244	 100       	 0         	 0         	 17.9745   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                          	 0.000547985	 101       	 0         	 0         	 11.3536   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 127)                                                                                                         	 0.000524271	 100       	 0         	 0         	 19.3793   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 50, fromLeft: 1)                               	 0.000495874	 100       	 0         	 0         	 20.4891   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000481775	 100       	 0         	 0         	 8.30263   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 1)                                                                                                          	 0.000399957	 101       	 0         	 0         	 15.5557   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329928	 100       	 0.757741  	 0         	 12.1239   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.52229   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.52226   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.0702    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.06895   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.1159    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.32811   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.1845    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.43048   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.13855   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.11718   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.0472    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.990094  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.965502  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.835315  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.409369  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.343195  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.193629  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.179872  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0359513 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0355547 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0143504 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0105953 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00567544	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00129764	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000822425	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000816407	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329928	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22569336682368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22569113610240 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22568912283776 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22568710957312 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22568509630848 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22568308304384 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22568106977920 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22567905651456 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22567704324992 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22567502998528 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22567301672064 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22567100345600 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22566899019136 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22566697692672 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22566496366208 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22566295039744 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22566093713280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22565892386816 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22565691060352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22565489733888 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22565288407424 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22565087080960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22564885754496 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22564684428032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22564483101568 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22564281775104 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22564080448640 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22563879122176 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22563677795712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22563476469248 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22563275142784 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22563073816320 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22562872485760 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22562671159296 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22562469832832 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22562268506368 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22562067179904 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22561865853440 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22561664526976 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22561463200512 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22561261874048 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22561060547584 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22560859221120 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22560657894656 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22560456568192 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22560255241728 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22560053915264 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22559852588800 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22559651262336 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22559449935872 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22559248609408 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22559047282944 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22558845956480 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22558644630016 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22558443303552 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22558241977088 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22558040650624 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22557839324160 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22557637997696 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22557436671232 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22557235344768 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22557034018304 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22556832691840 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22569231021824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22569224431360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6400, cols: 128, reductionFactor: 37, colBlockingSize: 12)                                 	 1.90751   	 1300      	 146.787   	 0         	 4.55572   	 32.2205   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 128)                                                                               	 1.40108   	 700       	 7.33439   	 0         	 0.196969  	 37.2364   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 128)	 1.13953   	 700       	 67.4948   	 0         	 6.21551   	 10.8591   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 128)                          	 1.0186    	 700       	 144.12    	 0         	 9.0976    	 15.8416   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 128, r2: 128, leftOrthog: 1)                      	 0.835784  	 600       	 150.552   	 0         	 14.3025   	 10.5263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 128)                        	 0.7479    	 600       	 168.243   	 0         	 10.6204   	 15.8416   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 128)                                                                                	 0.425561  	 900       	 5.91356   	 0         	 0.833761  	 7.09264   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6400, Xcols: 128, r: 128, streamingCols: 0)                                 	 0.325716  	 700       	 225.351   	 0         	 28.3097   	 7.9602    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 128, reductionFactor: 37, colBlockingSize: 12)                                 	 0.248876  	 200       	 67.6113   	 0         	 2.16258   	 31.2641   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 128, m: 6400)                                                                                 	 0.21305   	 700       	 0         	 0         	 43.0651   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6400, m: 128)                                                                        	 0.13925   	 700       	 0         	 0         	 65.889    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 50) 	 0.0730202 	 100       	 58.7783   	 0         	 8.27826   	 7.10032   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 128, r2: 128, leftOrthog: 1)                      	 0.0712694 	 100       	 114.944   	 0         	 11.1438   	 10.3146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 128)                                                                                	 0.0651365 	 100       	 3.43893   	 0         	 0.188527  	 18.241    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0570406 	 100       	 56.1004   	 0         	 13.5342   	 4.14508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 50)                           	 0.0554296 	 100       	 147.791   	 0         	 16.5341   	 8.93855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 50)                         	 0.0520988 	 100       	 157.24    	 0         	 10.0791   	 15.6006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 50, n: 50, r2: 128)                         	 0.0496384 	 100       	 165.034   	 0         	 18.4631   	 8.93855   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 128, fromLeft: 1)                              	 0.0467919 	 800       	 0         	 0         	 4.48187   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0425983 	 100       	 2.05407   	 0         	 0.14179   	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 78)                                                                                                         	 0.0358773 	 808       	 0         	 0         	 109.615   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 128, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0325709 	 200       	 10.3324   	 0         	 1.11923   	 9.2317    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0315575 	 100       	 104.143   	 0         	 8.17555   	 12.7383   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 128, r: 128, streamingCols: 0)                                 	 0.0265017 	 100       	 154.556   	 0         	 19.5668   	 7.89889   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 128, m: 2500)                                                                                 	 0.00921812	 100       	 0         	 0         	 55.5428   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 128)                                                                        	 0.00842406	 100       	 0         	 0         	 60.7783   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 1)  	 0.00500269	 100       	 0.255862  	 0         	 2.04722   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 2, r2: 1)                              	 0.00414901	 100       	 0.617014  	 0         	 3.70247   	 0.166649  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 128, r: 50, streamingCols: 50)                                   	 0.00315906	 100       	 3.95687   	 0         	 1.58275   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 128)  	 0.00306845	 100       	 53.395    	 0         	 7.60879   	 7.01754   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 128, leftOrthog: 1)                         	 0.00268667	 100       	 23.8213   	 0         	 7.20596   	 3.30579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 128, r2: 128)                            	 0.0020208 	 100       	 81.0769   	 0         	 11.5535   	 7.01754   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 50, fromLeft: 1)                               	 0.00180926	 100       	 0         	 0         	 5.65978   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00105454	 100       	 23.707    	 0         	 5.68967   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 128)                            	 0.000873867	 100       	 0         	 0         	 11.718    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000791296	 100       	 0.631875  	 0         	 2.5275    	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 128)                                                                          	 0.000556519	 100       	 0         	 0         	 18.4001   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 128)                                                                                                         	 0.00054433	 100       	 0         	 0         	 18.8121   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                          	 0.000537838	 101       	 0         	 0         	 11.718    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000505178	 100       	 0         	 0         	 7.918     	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 1)                                                                                                          	 0.00044615	 101       	 0         	 0         	 14.1262   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329068	 100       	 0.759721  	 0         	 12.1555   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.90172   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.9017    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.26295   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.26173   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.23868   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.41176   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.22051   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.50881   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.22063   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.16603   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.0802    	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.05582   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.96678   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.850692  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.425561  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.355376  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.222774  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.148231  	 900       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0486011 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0374057 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0356978 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00724253	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00668654	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00141079	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000873867	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000791296	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329068	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23165829887872 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23165644302336 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23165442975872 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23165241649408 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23165040322944 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23164838996480 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23164637670016 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23164436343552 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23164235017088 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23164033690624 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23163832364160 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23163631037696 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23163429711232 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23163228384768 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23163027058304 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23162825731840 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23162624405376 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23162423078912 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23162221752448 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23162020425984 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23161819099520 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23161617773056 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23161416446592 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23161215120128 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23161013793664 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23160812467200 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23160611140736 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23160409814272 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23160208487808 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23160007161344 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23159805834880 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23159604508416 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23159403177856 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23159201851392 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23159000524928 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23158799198464 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23158597872000 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23158396545536 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23158195219072 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23157993892608 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23157792566144 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23157591239680 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23157389913216 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23157188586752 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23156987260288 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23156785933824 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23156584607360 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23156383280896 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23156181954432 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23155980627968 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23155779301504 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23155577975040 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23155376648576 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23155175322112 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23154973995648 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23154772669184 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23154571342720 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23154370016256 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23154168689792 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23153967363328 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23153766036864 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23153564710400 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23153363383936 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23165724227328 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23165717636864 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6450, cols: 129, reductionFactor: 37, colBlockingSize: 12)                                 	 1.93623   	 1300      	 148.026   	 0         	 4.55855   	 32.4722   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 129)                                                                               	 1.418     	 700       	 7.41805   	 0         	 0.197667  	 37.528    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 129)	 1.10734   	 700       	 71.2797   	 0         	 6.50218   	 10.9624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 129)                          	 0.967721  	 700       	 155.281   	 0         	 9.7261    	 15.9653   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 129, r2: 129, leftOrthog: 1)                      	 0.858468  	 600       	 150.036   	 0         	 14.1429   	 10.6086   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 129)                        	 0.736964  	 600       	 174.773   	 0         	 10.947    	 15.9653   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 129)                                                                                	 0.427109  	 900       	 6.0313    	 0         	 0.843752  	 7.1482    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6450, Xcols: 129, r: 129, streamingCols: 0)                                 	 0.32215   	 700       	 233.227   	 0         	 29.072    	 8.02239   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 129, reductionFactor: 37, colBlockingSize: 12)                                 	 0.254303  	 200       	 67.2062   	 0         	 2.13377   	 31.4964   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 129, m: 6450)                                                                                 	 0.210695  	 700       	 0         	 0         	 44.2295   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6450, m: 129)                                                                        	 0.132667  	 700       	 0         	 0         	 70.2434   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 129, r2: 129, leftOrthog: 1)                      	 0.0674807 	 100       	 123.302   	 0         	 11.8645   	 10.3925   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0665213 	 100       	 48.4807   	 0         	 11.6955   	 4.14524   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 50) 	 0.0663431 	 100       	 65.8772   	 0         	 9.23683   	 7.13202   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 129)                                                                                	 0.0646734 	 100       	 3.49061   	 0         	 0.191114  	 18.2646   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 50)                           	 0.0580216 	 100       	 143.404   	 0         	 16.0078   	 8.95833   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 50, n: 50, r2: 129)                         	 0.0539541 	 100       	 154.214   	 0         	 17.2146   	 8.95833   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 50)                         	 0.0497305 	 100       	 167.312   	 0         	 10.6436   	 15.7194   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0428647 	 100       	 2.04131   	 0         	 0.140908  	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 79)                                                                                                         	 0.0362639 	 808       	 0         	 0         	 111.245   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0336997 	 100       	 98.2846   	 0         	 7.7152    	 12.7391   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 129, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0315682 	 200       	 10.8278   	 0         	 1.17034   	 9.25185   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 129, r: 129, streamingCols: 0)                                 	 0.027435  	 100       	 151.64    	 0         	 19.0507   	 7.95982   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 129, fromLeft: 1)                              	 0.0106547 	 800       	 0         	 0         	 19.9917   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 129, m: 2500)                                                                                 	 0.00958791	 100       	 0         	 0         	 53.8178   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 129)                                                                        	 0.00813815	 100       	 0         	 0         	 63.4051   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 1)  	 0.00596935	 100       	 0.216104  	 0         	 1.7291    	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 2, r2: 1)                              	 0.00438582	 100       	 0.58826   	 0         	 3.52992   	 0.166649  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 129, r: 50, streamingCols: 50)                                   	 0.00319507	 100       	 3.91228   	 0         	 1.56491   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 129)  	 0.00273797	 100       	 60.7786   	 0         	 8.6315    	 7.04148   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 129)                                                                          	 0.00229841	 100       	 0         	 0         	 4.49005   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 129, leftOrthog: 1)                         	 0.00216962	 100       	 29.7287   	 0         	 8.97853   	 3.31109   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 129, r2: 129)                            	 0.00176158	 100       	 94.4661   	 0         	 13.4156   	 7.04148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000943527	 100       	 26.4963   	 0         	 6.35912   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 129)                            	 0.000817098	 100       	 0         	 0         	 12.6301   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000801514	 100       	 0.623819  	 0         	 2.49528   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000670266	 100       	 0         	 0         	 5.96778   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 129)                                                                                                         	 0.000526431	 100       	 0         	 0         	 19.6037   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 50, fromLeft: 1)                               	 0.000524234	 100       	 0         	 0         	 19.6859   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                          	 0.00048703	 101       	 0         	 0         	 13.1064   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 1)                                                                                                          	 0.000422864	 101       	 0         	 0         	 15.0952   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329878	 100       	 0.757856  	 0         	 12.1257   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.76898   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.76895   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.20597   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.20475   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.23852   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.37527   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.2558    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.52554   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.18627   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.1824    	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.0708    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.03189   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.99464   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.841592  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.427109  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.35278   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.220954  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.143103  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0377002 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0370323 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0111789 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00719335	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00643087	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00133372	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000817098	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000801514	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329878	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23099696093056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23099474962432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23099273635968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23099072309504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23098870983040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23098669656576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23098468330112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23098267003648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23098065677184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23097864350720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23097663024256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23097461697792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23097260371328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23097059044864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23096857718400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23096656391936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23096455065472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23096253739008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23096052412544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23095851086080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23095649759616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23095448433152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23095247106688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23095045780224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23094844453760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23094643127296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23094441800832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23094240474368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23094039147904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23093837821440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23093636494976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23093435168512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23093233837952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23093032511488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23092831185024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23092629858560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23092428532096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23092227205632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23092025879168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23091824552704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23091623226240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23091421899776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23091220573312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23091019246848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23090817920384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23090616593920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23090415267456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23090213940992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23090012614528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23089811288064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23089609961600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23089408635136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23089207308672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23089005982208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23088804655744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23088603329280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23088402002816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23088200676352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23087999349888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23087798023424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23087596696960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23087395370496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23087194044032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23099590432512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23099583842048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6500, cols: 130, reductionFactor: 37, colBlockingSize: 12)                                 	 1.97341   	 1300      	 148.641   	 0         	 4.54227   	 32.7239   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 130)                                                                               	 1.41302   	 700       	 7.61865   	 0         	 0.201447  	 37.8197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 130)	 1.10126   	 700       	 73.5432   	 0         	 6.64571   	 11.0663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 130)                          	 0.986767  	 700       	 155.852   	 0         	 9.68682   	 16.0891   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 130, r2: 130, leftOrthog: 1)                      	 0.886118  	 600       	 148.761   	 0         	 13.9149   	 10.6908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 130)                        	 0.755032  	 600       	 174.589   	 0         	 10.8514   	 16.0891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 130)                                                                                	 0.428813  	 900       	 6.14813   	 0         	 0.853463  	 7.20375   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6500, Xcols: 130, r: 130, streamingCols: 0)                                 	 0.334531  	 700       	 229.859   	 0         	 28.4318   	 8.08458   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 130, reductionFactor: 37, colBlockingSize: 12)                                 	 0.259866  	 200       	 66.7912   	 0         	 2.10509   	 31.7285   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 130, m: 6500)                                                                                 	 0.189979  	 700       	 0         	 0         	 49.8159   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6500, m: 130)                                                                        	 0.169222  	 700       	 0         	 0         	 55.9266   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 50) 	 0.072687  	 100       	 61.2214   	 0         	 8.54623   	 7.16355   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 130, r2: 130, leftOrthog: 1)                      	 0.0686219 	 100       	 123.139   	 0         	 11.7607   	 10.4704   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 130)                                                                                	 0.0650202 	 100       	 3.49892   	 0         	 0.191325  	 18.2878   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0565567 	 100       	 57.4645   	 0         	 13.8622   	 4.14541   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 50)                           	 0.056518  	 100       	 149.51    	 0         	 16.6531   	 8.9779    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 50, n: 50, r2: 130)                         	 0.0531408 	 100       	 159.011   	 0         	 17.7114   	 8.9779    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 50)                         	 0.0494917 	 100       	 170.736   	 0         	 10.78     	 15.8382   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0410967 	 100       	 2.12912   	 0         	 0.14697   	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 80)                                                                                                         	 0.0363691 	 808       	 0         	 0         	 113.749   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0332365 	 100       	 100.427   	 0         	 7.8829    	 12.7398   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 130, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0310485 	 200       	 11.1804   	 0         	 1.20585   	 9.27177   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 130, r: 130, streamingCols: 0)                                 	 0.0277122 	 100       	 152.46    	 0         	 19.0082   	 8.02073   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 130, fromLeft: 1)                              	 0.0105323 	 800       	 0         	 0         	 20.5388   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 130, m: 2500)                                                                                 	 0.0092793 	 100       	 0         	 0         	 56.0387   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 130)                                                                        	 0.00870368	 100       	 0         	 0         	 59.7449   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 1)  	 0.00485825	 100       	 0.267586  	 0         	 2.14102   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 2, r2: 1)                              	 0.00412659	 100       	 0.630061  	 0         	 3.78075   	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 130)  	 0.00310866	 100       	 54.3643   	 0         	 7.69464   	 7.06522   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 130, r: 50, streamingCols: 50)                                   	 0.0030685 	 100       	 4.07366   	 0         	 1.62946   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 130, leftOrthog: 1)                         	 0.00227323	 100       	 28.5937   	 0         	 8.62211   	 3.31633   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 130, r2: 130)                            	 0.00201992	 100       	 83.6667   	 0         	 11.8421   	 7.06522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000954461	 100       	 26.1928   	 0         	 6.28627   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 130)                            	 0.000890732	 100       	 0         	 0         	 11.6758   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000873888	 100       	 0.572156  	 0         	 2.28862   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                          	 0.000533667	 101       	 0         	 0         	 12.1124   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 130)                                                                                                         	 0.000516286	 100       	 0         	 0         	 20.1439   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 50, fromLeft: 1)                               	 0.000506177	 100       	 0         	 0         	 20.5462   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 130)                                                                          	 0.000504197	 100       	 0         	 0         	 20.6269   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000490214	 100       	 0         	 0         	 8.1597    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 1)                                                                                                          	 0.000413178	 101       	 0         	 0         	 15.6446   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000324898	 100       	 0.769472  	 0         	 12.3116   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.89602   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.896     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.28166   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.28037   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.29401   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.42868   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.29756   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.51914   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.19876   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.18191   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.10016   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.04943   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.01357   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.858619  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.428813  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.365312  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.199749  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.17843   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0378322 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0377281 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0110384 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00980947	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00589521	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0021702 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000890732	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000873888	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324898	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22363269851008 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22363089397760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22362888071296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22362686744832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22362485418368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22362284091904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22362082765440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22361881438976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22361680112512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22361478786048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22361277459584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22361076133120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22360874806656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22360673480192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22360472153728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22360270827264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22360069500800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22359868174336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22359666847872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22359465521408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22359264194944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22359062868480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22358861542016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22358660215552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22358458889088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22358257562624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22358056236160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22357854909696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22357653583232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22357452256768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22357250930304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22357049603840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22356848273280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22356646946816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22356445620352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22356244293888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22356042967424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22355841640960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22355640314496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22355438988032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22355237661568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22355036335104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22354835008640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22354633682176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22354432355712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22354231029248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22354029702784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22353828376320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22353627049856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22353425723392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22353224396928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22353023070464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22352821744000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22352620417536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22352419091072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22352217764608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22352016438144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22351815111680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22351613785216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22351412458752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22351211132288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22351009805824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22350808479360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22363164190464 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22362984535808 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6550, cols: 131, reductionFactor: 37, colBlockingSize: 12)                                 	 2.03416   	 1300      	 147.555   	 0         	 4.47467   	 32.9756   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 131)                                                                               	 1.45669   	 700       	 7.56212   	 0         	 0.198422  	 38.1114   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 131)	 1.11245   	 700       	 74.6906   	 0         	 6.68639   	 11.1705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 131)                          	 1.00131   	 700       	 157.161   	 0         	 9.69357   	 16.2129   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 131, r2: 131, leftOrthog: 1)                      	 0.914785  	 600       	 147.45    	 0         	 13.687    	 10.773    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 131)                        	 0.772014  	 600       	 174.719   	 0         	 10.7766   	 16.2129   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 131)                                                                                	 0.437309  	 900       	 6.16888   	 0         	 0.849789  	 7.2593    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6550, Xcols: 131, r: 131, streamingCols: 0)                                 	 0.333718  	 700       	 235.778   	 0         	 28.9413   	 8.14677   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 131, reductionFactor: 37, colBlockingSize: 12)                                 	 0.263398  	 200       	 66.9131   	 0         	 2.09363   	 31.9604   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 131, m: 6550)                                                                                 	 0.184501  	 700       	 0         	 0         	 52.0872   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6550, m: 131)                                                                        	 0.177157  	 700       	 0         	 0         	 54.2466   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 50) 	 0.0720654 	 100       	 62.8665   	 0         	 8.73762   	 7.19492   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 131, r2: 131, leftOrthog: 1)                      	 0.0695745 	 100       	 123.328   	 0         	 11.6919   	 10.5482   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 131)                                                                                	 0.0666169 	 100       	 3.44132   	 0         	 0.18794   	 18.3107   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 50, r2: 50, leftOrthog: 1)                        	 0.0543218 	 100       	 60.2889   	 0         	 14.543    	 4.14557   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 50)                           	 0.053446  	 100       	 160.545   	 0         	 17.8438   	 8.99725   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 50, n: 50, r2: 131)                         	 0.0533105 	 100       	 160.953   	 0         	 17.8891   	 8.99725   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 50)                         	 0.051241  	 100       	 167.454   	 0         	 10.4941   	 15.9569   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.042735  	 100       	 2.0475    	 0         	 0.141336  	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 81)                                                                                                         	 0.0423423 	 808       	 0         	 0         	 100.161   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0336053 	 100       	 100.089   	 0         	 7.8559    	 12.7406   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 131, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0302561 	 200       	 11.6504   	 0         	 1.25388   	 9.29147   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 131, r: 131, streamingCols: 0)                                 	 0.0285497 	 100       	 150.273   	 0         	 18.5944   	 8.08163   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 131, fromLeft: 1)                              	 0.0109443 	 800       	 0         	 0         	 20.0707   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 131)                                                                        	 0.00783478	 100       	 0         	 0         	 66.8813   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 131, m: 2500)                                                                                 	 0.00782026	 100       	 0         	 0         	 67.0054   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 1)  	 0.0050609 	 100       	 0.258847  	 0         	 2.07109   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 2, r2: 1)                              	 0.00423765	 100       	 0.618267  	 0         	 3.70998   	 0.16665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 131, r: 50, streamingCols: 50)                                   	 0.0033901 	 100       	 3.68721   	 0         	 1.47488   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 131)  	 0.0027791 	 100       	 61.7503   	 0         	 8.71103   	 7.08874   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 131, leftOrthog: 1)                         	 0.00234494	 100       	 27.9324   	 0         	 8.40959   	 3.3215    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 131, r2: 131)                            	 0.00175399	 100       	 97.8397   	 0         	 13.8021   	 7.08874   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000918739	 100       	 27.2112   	 0         	 6.53069   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000840449	 100       	 0.59492   	 0         	 2.37968   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 131)                            	 0.000831744	 100       	 0         	 0         	 12.6      	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 131)                                                                          	 0.000566967	 100       	 0         	 0         	 18.4843   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 131)                                                                                                         	 0.000548983	 100       	 0         	 0         	 19.0898   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                          	 0.000529409	 101       	 0         	 0         	 12.3625   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 50, fromLeft: 1)                               	 0.000514017	 100       	 0         	 0         	 20.3884   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000480951	 100       	 0         	 0         	 8.31686   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 1)                                                                                                          	 0.000429905	 101       	 0         	 0         	 15.2238   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329786	 100       	 0.758067  	 0         	 12.1291   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.1089    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.10888   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.42927   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.42801   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.41019   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.4811    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.36142   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.56604   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.24023   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.19235   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.12271   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.06075   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.04103   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.877485  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.437309  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.365657  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.192802  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.185559  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0438505 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0385866 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0142022 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0114584 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0064032 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.002092  	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000840449	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000831744	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329786	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22533375096704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22533143259136 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22532941932672 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22532740606208 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22532539279744 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22532337953280 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22532136626816 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22531935300352 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22531733973888 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22531532647424 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22531331320960 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22531129994496 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22530928668032 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22530727341568 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22530526015104 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22530324688640 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22530123362176 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22529922035712 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22529720709248 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22529519382784 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22529318056320 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22529116729856 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22528915403392 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22528714076928 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22528512750464 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22528311424000 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22528110097536 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22527908771072 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22527707444608 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22527506118144 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22527304791680 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22527103465216 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22526902134656 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22526700808192 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22526499481728 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22526298155264 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22526096828800 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22525895502336 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22525694175872 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22525492849408 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22525291522944 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22525090196480 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22524888870016 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22524687543552 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22524486217088 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22524284890624 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22524083564160 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22523882237696 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22523680911232 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22523479584768 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22523278258304 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22523076931840 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22522875605376 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22522674278912 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22522472952448 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22522271625984 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22522070299520 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22521868973056 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22521667646592 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22521466320128 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22521264993664 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22521063667200 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22520862340736 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22533269436160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22533262845696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6600, cols: 132, reductionFactor: 37, colBlockingSize: 12)                                 	 2.08736   	 1300      	 147.113   	 0         	 4.42746   	 33.2273   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 132)                                                                               	 1.42906   	 700       	 7.88617   	 0         	 0.205353  	 38.403    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 132)	 1.12696   	 700       	 75.6279   	 0         	 6.70742   	 11.2752   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 132)                          	 1.01498   	 700       	 158.622   	 0         	 9.70959   	 16.3366   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 132, r2: 132, leftOrthog: 1)                      	 0.929235  	 600       	 148.507   	 0         	 13.6807   	 10.8553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 132)                        	 0.760598  	 600       	 181.434   	 0         	 11.1059   	 16.3366   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 132)                                                                                	 0.435949  	 900       	 6.33093   	 0         	 0.865489  	 7.31486   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6600, Xcols: 132, r: 132, streamingCols: 0)                                 	 0.344299  	 700       	 233.805   	 0         	 28.4817   	 8.20896   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 132, reductionFactor: 37, colBlockingSize: 12)                                 	 0.268646  	 200       	 66.6114   	 0         	 2.06918   	 32.1921   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6600, m: 132)                                                                        	 0.201204  	 700       	 0         	 0         	 48.4952   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 132, m: 6600)                                                                                 	 0.198413  	 700       	 0         	 0         	 49.1775   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 50) 	 0.0687922 	 100       	 67.0425   	 0         	 9.2778    	 7.22612   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 132, r2: 132, leftOrthog: 1)                      	 0.0683887 	 100       	 127.389   	 0         	 11.9885   	 10.626    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 132)                                                                                	 0.0659438 	 100       	 3.50298   	 0         	 0.191072  	 18.3333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 50)                           	 0.0545499 	 100       	 159.707   	 0         	 17.713    	 9.01639   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 50, n: 50, r2: 132)                         	 0.0524282 	 100       	 166.17    	 0         	 18.4298   	 9.01639   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 50, r2: 50, leftOrthog: 1)                        	 0.0524167 	 100       	 62.9571   	 0         	 15.186    	 4.14573   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 50)                         	 0.0483644 	 100       	 180.132   	 0         	 11.2053   	 16.0756   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 82)                                                                                                         	 0.0478456 	 808       	 0         	 0         	 90.842    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0422724 	 100       	 2.06991   	 0         	 0.142883  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 132, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0341595 	 200       	 10.4773   	 0         	 1.12526   	 9.31096   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0332393 	 100       	 101.963   	 0         	 8.00257   	 12.7413   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 132, r: 132, streamingCols: 0)                                 	 0.0275264 	 100       	 158.248   	 0         	 19.4348   	 8.14252   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 132, fromLeft: 1)                              	 0.0110931 	 800       	 0         	 0         	 20.105    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 132, m: 2500)                                                                                 	 0.00897404	 100       	 0         	 0         	 58.8364   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 132)                                                                        	 0.00870445	 100       	 0         	 0         	 60.6586   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 1)  	 0.00492223	 100       	 0.268171  	 0         	 2.14569   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 2, r2: 1)                              	 0.00407441	 100       	 0.647947  	 0         	 3.88808   	 0.16665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 132, r: 50, streamingCols: 50)                                   	 0.00309509	 100       	 4.03865   	 0         	 1.61546   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 132)  	 0.00272795	 100       	 63.8721   	 0         	 8.98081   	 7.11207   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 132, leftOrthog: 1)                         	 0.00219698	 100       	 30.0412   	 0         	 9.03057   	 3.32661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 132, r2: 132)                            	 0.00173219	 100       	 100.59    	 0         	 14.1435   	 7.11207   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000928368	 100       	 26.929    	 0         	 6.46295   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000911076	 100       	 0.548802  	 0         	 2.19521   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 132)                            	 0.000816969	 100       	 0         	 0         	 12.9258   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 132)                                                                          	 0.00057846	 100       	 0         	 0         	 18.2554   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 50, fromLeft: 1)                               	 0.000555409	 100       	 0         	 0         	 19.013    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                          	 0.000539042	 101       	 0         	 0         	 12.2914   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 132)                                                                                                         	 0.000518406	 100       	 0         	 0         	 20.3701   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000486  	 100       	 0         	 0         	 8.23045   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 1)                                                                                                          	 0.000433502	 101       	 0         	 0         	 15.2839   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000337414	 100       	 0.74093   	 0         	 11.8549   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.16271   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.16268   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.40372   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.40238   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.4239    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.5492    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.4234    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.53728   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.27016   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.2034    	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.15446   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.07533   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.05224   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.862319  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.435949  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.374921  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.210487  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.207873  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0493366 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0380604 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0116485 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00862228	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00611659	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00137108	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000911076	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000816969	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337414	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22700906755968 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22700714092544 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22700512766080 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22700311439616 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22700110113152 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22699908786688 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22699707460224 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22699506133760 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22699304807296 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22699103480832 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22698902154368 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22698700827904 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22698499501440 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22698298174976 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22698096848512 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22697895522048 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22697694195584 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22697492869120 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22697291542656 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22697090216192 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22696888889728 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22696687563264 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22696486236800 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22696284910336 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22696083583872 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22695882257408 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22695680930944 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22695479604480 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22695278278016 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22695076951552 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22694875625088 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22694674298624 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22694472968064 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22694271641600 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22694070315136 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22693868988672 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22693667662208 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22693466335744 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22693265009280 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22693063682816 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22692862356352 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22692661029888 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22692459703424 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22692258376960 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22692057050496 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22691855724032 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22691654397568 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22691453071104 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22691251744640 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22691050418176 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22690849091712 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22690647765248 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22690446438784 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22690245112320 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22690043785856 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22689842459392 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22689641132928 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22689439806464 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22689238480000 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22689037153536 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22688835827072 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22688634500608 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22688433174144 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22700801095424 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22700794504960 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6650, cols: 133, reductionFactor: 37, colBlockingSize: 12)                                 	 2.08227   	 1300      	 150.85    	 0         	 4.50579   	 33.4791   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 133)                                                                               	 1.47114   	 700       	 7.83607   	 0         	 0.20251   	 38.6947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 133)	 1.14903   	 700       	 76.0743   	 0         	 6.68469   	 11.3804   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 133)                          	 1.03337   	 700       	 159.367   	 0         	 9.68184   	 16.4604   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 133, r2: 133, leftOrthog: 1)                      	 0.939058  	 600       	 150.319   	 0         	 13.7434   	 10.9375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 133)                        	 0.816128  	 600       	 172.961   	 0         	 10.5077   	 16.4604   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 133)                                                                                	 0.451496  	 900       	 6.25291   	 0         	 0.84838   	 7.37041   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6650, Xcols: 133, r: 133, streamingCols: 0)                                 	 0.352029  	 700       	 233.907   	 0         	 28.2799   	 8.27114   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 133, reductionFactor: 37, colBlockingSize: 12)                                 	 0.27177   	 200       	 66.8472   	 0         	 2.06168   	 32.4237   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6650, m: 133)                                                                        	 0.197409  	 700       	 0         	 0         	 50.1792   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 133, m: 6650)                                                                                 	 0.19641   	 700       	 0         	 0         	 50.4346   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 50) 	 0.0726281 	 100       	 64.6375   	 0         	 8.90674   	 7.25714   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 133, r2: 133, leftOrthog: 1)                      	 0.0687904 	 100       	 128.572   	 0         	 12.0119   	 10.7037   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 133)                                                                                	 0.0656298 	 100       	 3.54641   	 0         	 0.193205  	 18.3557   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 50)                           	 0.0548795 	 100       	 161.162   	 0         	 17.8369   	 9.03533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 50, n: 50, r2: 133)                         	 0.0539172 	 100       	 164.038   	 0         	 18.1552   	 9.03533   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 50, r2: 50, leftOrthog: 1)                        	 0.0538763 	 100       	 61.7155   	 0         	 14.886    	 4.14589   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 50)                         	 0.0491699 	 100       	 179.876   	 0         	 11.1074   	 16.1942   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 83)                                                                                                         	 0.0484382 	 808       	 0         	 0         	 91.9327   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0420406 	 100       	 2.08132   	 0         	 0.143671  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0340417 	 100       	 100.314   	 0         	 7.8727    	 12.742    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 133, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0330733 	 200       	 10.986    	 0         	 1.17746   	 9.33023   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 133, r: 133, streamingCols: 0)                                 	 0.0284824 	 100       	 155.263   	 0         	 18.9266   	 8.20339   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 133, fromLeft: 1)                              	 0.0111182 	 800       	 0         	 0         	 20.3647   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 133)                                                                        	 0.00808035	 100       	 0         	 0         	 65.8388   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 133, m: 2500)                                                                                 	 0.00786976	 100       	 0         	 0         	 67.6005   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 1)  	 0.00499089	 100       	 0.266485  	 0         	 2.1322    	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 2, r2: 1)                              	 0.00410554	 100       	 0.647905  	 0         	 3.88782   	 0.16665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 133, r: 50, streamingCols: 50)                                   	 0.0032251 	 100       	 3.87585   	 0         	 1.55034   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 133)  	 0.00270244	 100       	 65.4558   	 0         	 9.17365   	 7.13519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 133, leftOrthog: 1)                         	 0.00211998	 100       	 31.3683   	 0         	 9.41521   	 3.33166   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 133, r2: 133)                            	 0.00170156	 100       	 103.958   	 0         	 14.5697   	 7.13519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000961626	 100       	 25.9976   	 0         	 6.23943   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 133)                            	 0.000832919	 100       	 0         	 0         	 12.7744   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00082058	 100       	 0.609325  	 0         	 2.4373    	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 133)                                                                          	 0.000570251	 100       	 0         	 0         	 18.6585   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 133)                                                                                                         	 0.000549366	 100       	 0         	 0         	 19.3678   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                          	 0.00053201	 101       	 0         	 0         	 12.6058   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 50, fromLeft: 1)                               	 0.000526703	 100       	 0         	 0         	 20.2011   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000485183	 100       	 0         	 0         	 8.24431   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 1)                                                                                                          	 0.000437008	 101       	 0         	 0         	 15.3462   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000330705	 100       	 0.755961  	 0         	 12.0954   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.34213   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.34209   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.53661   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.53536   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.4811    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.5704    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.42115   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.57881   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.27323   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.22935   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.14936   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.09405   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.06384   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.920176  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.451496  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.383737  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.20606   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.204765  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0499565 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0392929 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0135524 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0116449 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00596455	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00151495	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000832919	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00082058	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330705	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23053631940480 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23053438281728 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23053236955264 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23053035628800 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23052834302336 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23052632975872 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23052431649408 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23052230322944 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23052028996480 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23051827670016 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23051626343552 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23051425017088 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23051223690624 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23051022364160 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23050821037696 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23050619711232 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23050418384768 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23050217058304 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23050015731840 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23049814405376 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23049613078912 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23049411752448 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23049210425984 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23049009099520 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23048807773056 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23048606446592 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23048405120128 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23048203793664 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23048002467200 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23047801140736 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23047599814272 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23047398487808 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23047197157248 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23046995830784 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23046794504320 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23046593177856 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23046391851392 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23046190524928 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23045989198464 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23045787872000 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23045586545536 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23045385219072 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23045183892608 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23044982566144 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23044781239680 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23044579913216 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23044378586752 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23044177260288 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23043975933824 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23043774607360 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23043573280896 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23043371954432 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23043170627968 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23042969301504 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23042767975040 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23042566648576 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23042365322112 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23042163995648 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23041962669184 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23041761342720 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23041560016256 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23041358689792 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23041157363328 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23053526279936 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23053519689472 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6700, cols: 134, reductionFactor: 37, colBlockingSize: 12)                                 	 2.1187    	 1300      	 151.625   	 0         	 4.49514   	 33.7308   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 134)                                                                               	 1.44445   	 700       	 8.16224   	 0         	 0.209361  	 38.9864   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 134)	 1.178     	 700       	 76.0914   	 0         	 6.62474   	 11.4859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 134)                          	 1.05673   	 700       	 159.385   	 0         	 9.6107    	 16.5842   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 134, r2: 134, leftOrthog: 1)                      	 0.837025  	 600       	 172.475   	 0         	 15.6515   	 11.0197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 134)                        	 0.815436  	 600       	 177.042   	 0         	 10.6754   	 16.5842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 134)                                                                                	 0.454355  	 900       	 6.35478   	 0         	 0.855751  	 7.42597   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6700, Xcols: 134, r: 134, streamingCols: 0)                                 	 0.359925  	 700       	 233.975   	 0         	 28.077    	 8.33333   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 134, reductionFactor: 37, colBlockingSize: 12)                                 	 0.272591  	 200       	 67.6519   	 0         	 2.07171   	 32.6551   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6700, m: 134)                                                                        	 0.238465  	 700       	 0         	 0         	 42.167    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 134, m: 6700)                                                                                 	 0.175493  	 700       	 0         	 0         	 57.2979   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 50) 	 0.0798279 	 100       	 59.8538   	 0         	 8.21267   	 7.28798   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 134, r2: 134, leftOrthog: 1)                      	 0.0722318 	 100       	 124.294   	 0         	 11.5286   	 10.7814   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 134)                                                                                	 0.0670985 	 100       	 3.49486   	 0         	 0.190168  	 18.3777   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 50, n: 50, r2: 134)                         	 0.0557267 	 100       	 161.108   	 0         	 17.794    	 9.05405   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 50, r2: 50, leftOrthog: 1)                        	 0.0544114 	 100       	 61.5679   	 0         	 14.8498   	 4.14604   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 50)                           	 0.0524603 	 100       	 171.139   	 0         	 18.9019   	 9.05405   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 50)                         	 0.0513808 	 100       	 174.735   	 0         	 10.7115   	 16.3128   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0415293 	 100       	 2.10695   	 0         	 0.14544   	 14.4868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 84)                                                                                                         	 0.0397155 	 808       	 0         	 0         	 114.842   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0338828 	 100       	 101.542   	 0         	 7.96865   	 12.7427   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 134, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0331048 	 200       	 11.1412   	 0         	 1.19166   	 9.34929   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 134, r: 134, streamingCols: 0)                                 	 0.0284654 	 100       	 157.7     	 0         	 19.0822   	 8.26426   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 134, fromLeft: 1)                              	 0.0113036 	 800       	 0         	 0         	 20.3331   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 134)                                                                        	 0.00751343	 100       	 0         	 0         	 71.3389   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 134, m: 2500)                                                                                 	 0.00735913	 100       	 0         	 0         	 72.8347   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 1)  	 0.00489009	 100       	 0.274023  	 0         	 2.19251   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 2, r2: 1)                              	 0.00405526	 100       	 0.66087   	 0         	 3.96561   	 0.16665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 134, r: 50, streamingCols: 50)                                   	 0.00328902	 100       	 3.80052   	 0         	 1.52021   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 134)  	 0.0028558 	 100       	 62.8755   	 0         	 8.7838    	 7.15812   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 134, leftOrthog: 1)                         	 0.00249539	 100       	 26.8495   	 0         	 8.04682   	 3.33665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 134, r2: 134)                            	 0.0017661 	 100       	 101.671   	 0         	 14.2035   	 7.15812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00103835	 100       	 24.0767   	 0         	 5.77841   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 134)                            	 0.000889762	 100       	 0         	 0         	 12.0482   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00088906	 100       	 0.562392  	 0         	 2.24957   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 134)                                                                          	 0.000810168	 100       	 0         	 0         	 13.2318   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                          	 0.000541031	 101       	 0         	 0         	 12.5449   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 134)                                                                                                         	 0.00052779	 100       	 0         	 0         	 20.3111   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 50, fromLeft: 1)                               	 0.000514478	 100       	 0         	 0         	 20.8367   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000498223	 100       	 0         	 0         	 8.02853   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 1)                                                                                                          	 0.000436062	 101       	 0         	 0         	 15.5648   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000334027	 100       	 0.748442  	 0         	 11.9751   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.38419   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.38416   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.42893   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.42762   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.40962   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.62873   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.45828   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.55307   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.28261   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.26557   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.17692   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.11501   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.966164  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.923582  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.454355  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.39168   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.246789  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.18335   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0412203 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0395472 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0274491 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0118181 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00502516	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00176191	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000889762	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00088906	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334027	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22539568039808 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22539384383488 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22539183057024 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22538981730560 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22538780404096 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22538579077632 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22538377751168 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22538176424704 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22537975098240 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22537773771776 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22537572445312 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22537371118848 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22537169792384 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22536968465920 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22536767139456 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22536565812992 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22536364486528 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22536163160064 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22535961833600 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22535760507136 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22535559180672 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22535357854208 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22535156527744 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22534955201280 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22534753874816 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22534552548352 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22534351221888 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22534149895424 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22533948568960 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22533747242496 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22533545916032 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22533344589568 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22533143259008 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22532941932544 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22532740606080 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22532539279616 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22532337953152 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22532136626688 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22531935300224 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22531733973760 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22531532647296 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22531331320832 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22531129994368 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22530928667904 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22530727341440 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22530526014976 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22530324688512 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22530123362048 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22529922035584 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22529720709120 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22529519382656 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22529318056192 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22529116729728 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22528915403264 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22528714076800 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22528512750336 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22528311423872 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22528110097408 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22527908770944 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22527707444480 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22527506118016 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22527304791552 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22527103465088 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22539462379264 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22539455788800 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6750, cols: 135, reductionFactor: 37, colBlockingSize: 12)                                 	 2.12946   	 1300      	 154.261   	 0         	 4.53943   	 33.9825   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 135)                                                                               	 1.48863   	 700       	 8.09861   	 0         	 0.206187  	 39.278    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 135)	 1.18126   	 700       	 77.7992   	 0         	 6.71152   	 11.5919   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 135)                          	 1.06385   	 700       	 161.889   	 0         	 9.68937   	 16.7079   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 135, r2: 135, leftOrthog: 1)                      	 0.94395   	 600       	 156.388   	 0         	 14.0865   	 11.102    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 135)                        	 0.833813  	 600       	 177.045   	 0         	 10.5965   	 16.7079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 135)                                                                                	 0.453285  	 900       	 6.51345   	 0         	 0.870604  	 7.48153   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6750, Xcols: 135, r: 135, streamingCols: 0)                                 	 0.36312   	 700       	 237.148   	 0         	 28.2469   	 8.39552   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 135, reductionFactor: 37, colBlockingSize: 12)                                 	 0.275404  	 200       	 67.9639   	 0         	 2.06663   	 32.8863   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6750, m: 135)                                                                        	 0.205096  	 700       	 0         	 0         	 49.762    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 135, m: 6750)                                                                                 	 0.187492  	 700       	 0         	 0         	 54.4343   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 50) 	 0.0751674 	 100       	 64.689    	 0         	 8.83894   	 7.31863   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 135, r2: 135, leftOrthog: 1)                      	 0.0686693 	 100       	 132.701   	 0         	 12.2203   	 10.8591   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 135)                                                                                	 0.0673481 	 100       	 3.50789   	 0         	 0.190651  	 18.3995   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0558657 	 100       	 60.4128   	 0         	 14.5707   	 4.14619   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 50, n: 50, r2: 135)                         	 0.0540084 	 100       	 168.724   	 0         	 18.5971   	 9.07258   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 50)                           	 0.0538924 	 100       	 169.087   	 0         	 18.6371   	 9.07258   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 50)                         	 0.05212   	 100       	 174.837   	 0         	 10.6404   	 16.4314   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 85)                                                                                                         	 0.050481  	 808       	 0         	 0         	 92.5148   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0423815 	 100       	 2.06458   	 0         	 0.142515  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 135, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0345359 	 200       	 10.8395   	 0         	 1.15706   	 9.36815   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0325204 	 100       	 106.586   	 0         	 8.36398   	 12.7434   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 135, r: 135, streamingCols: 0)                                 	 0.0289458 	 100       	 157.406   	 0         	 18.9074   	 8.32511   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 135, fromLeft: 1)                              	 0.0116261 	 800       	 0         	 0         	 20.0652   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 135)                                                                        	 0.00870238	 100       	 0         	 0         	 62.052    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 135, m: 2500)                                                                                 	 0.00800831	 100       	 0         	 0         	 67.4299   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 1)  	 0.00610988	 100       	 0.220954  	 0         	 1.76789   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 2, r2: 1)                              	 0.00422369	 100       	 0.639251  	 0         	 3.83588   	 0.16665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 135, r: 50, streamingCols: 50)                                   	 0.00318472	 100       	 3.92499   	 0         	 1.57      	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 135)  	 0.00273216	 100       	 66.7055   	 0         	 9.28936   	 7.18085   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 135, leftOrthog: 1)                         	 0.00228209	 100       	 29.5781   	 0         	 8.85154   	 3.34158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 135, r2: 135)                            	 0.00170684	 100       	 106.776   	 0         	 14.8696   	 7.18085   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000955177	 100       	 26.1732   	 0         	 6.28156   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000885967	 100       	 0.564355  	 0         	 2.25742   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 135)                            	 0.000816857	 100       	 0         	 0         	 13.2214   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 135)                                                                          	 0.000577052	 100       	 0         	 0         	 18.7158   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 50, fromLeft: 1)                               	 0.000536409	 100       	 0         	 0         	 20.1339   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 135)                                                                                                         	 0.000527261	 100       	 0         	 0         	 20.4832   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                          	 0.0005171 	 101       	 0         	 0         	 13.2818   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000489735	 100       	 0         	 0         	 8.16768   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 1)                                                                                                          	 0.000430682	 101       	 0         	 0         	 15.9468   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329869	 100       	 0.757877  	 0         	 12.126    	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.52329   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.52326   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.61734   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.61603   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.55578   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.62862   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.47192   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.59836   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.29738   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.26527   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.17583   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.12368   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.07077   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.940896  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.453285  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.395251  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.214376  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.19599   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0519561 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.041015  	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.016497  	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0121625 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0111842 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00603982	 6400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000885967	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000816857	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329869	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22363269261184 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22363089397760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22362888071296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22362686744832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22362485418368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22362284091904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22362082765440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22361881438976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22361680112512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22361478786048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22361277459584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22361076133120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22360874806656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22360673480192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22360472153728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22360270827264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22360069500800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22359868174336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22359666847872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22359465521408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22359264194944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22359062868480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22358861542016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22358660215552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22358458889088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22358257562624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22358056236160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22357854909696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22357653583232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22357452256768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22357250930304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22357049603840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22356848273280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22356646946816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22356445620352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22356244293888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22356042967424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22355841640960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22355640314496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22355438988032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22355237661568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22355036335104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22354835008640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22354633682176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22354432355712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22354231029248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22354029702784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22353828376320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22353627049856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22353425723392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22353224396928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22353023070464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22352821744000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22352620417536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22352419091072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22352217764608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22352016438144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22351815111680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22351613785216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22351412458752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22351211132288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22351009805824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22350808479360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22363163600640 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22362984535808 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6800, cols: 136, reductionFactor: 37, colBlockingSize: 12)                                 	 2.16996   	 1300      	 154.771   	 0         	 4.52095   	 34.2342   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 136)                                                                               	 1.4859    	 700       	 8.29516   	 0         	 0.209634  	 39.5697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 136)	 1.20913   	 700       	 77.9157   	 0         	 6.66046   	 11.6982   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 136)                          	 1.08743   	 700       	 161.924   	 0         	 9.6202    	 16.8317   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 136, r2: 136, leftOrthog: 1)                      	 0.995653  	 600       	 151.586   	 0         	 13.5536   	 11.1842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 136)                        	 0.811391  	 600       	 186.011   	 0         	 11.0512   	 16.8317   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 136)                                                                                	 0.455459  	 900       	 6.62748   	 0         	 0.879317  	 7.53708   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6800, Xcols: 136, r: 136, streamingCols: 0)                                 	 0.376072  	 700       	 234.107   	 0         	 27.6797   	 8.45771   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 136, reductionFactor: 37, colBlockingSize: 12)                                 	 0.283146  	 200       	 67.0886   	 0         	 2.02579   	 33.1173   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6800, m: 136)                                                                        	 0.235424  	 700       	 0         	 0         	 43.9963   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 136, m: 6800)                                                                                 	 0.205575  	 700       	 0         	 0         	 50.3842   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 50) 	 0.0750869 	 100       	 65.897    	 0         	 8.96667   	 7.3491    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 136, r2: 136, leftOrthog: 1)                      	 0.0704959 	 100       	 131.185   	 0         	 11.9949   	 10.9367   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 136)                                                                                	 0.0664932 	 100       	 3.57931   	 0         	 0.194306  	 18.4211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 50, n: 50, r2: 136)                         	 0.0583583 	 100       	 158.469   	 0         	 17.4316   	 9.09091   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 50)                           	 0.0576132 	 100       	 160.519   	 0         	 17.6571   	 9.09091   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 50, r2: 50, leftOrthog: 1)                        	 0.056373  	 100       	 60.3126   	 0         	 14.546    	 4.14634   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 86)                                                                                                         	 0.0520048 	 808       	 0         	 0         	 91.9295   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 50)                         	 0.0498099 	 100       	 185.666   	 0         	 11.2186   	 16.5498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0420455 	 100       	 2.08108   	 0         	 0.143654  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0365497 	 100       	 95.5381   	 0         	 7.49663   	 12.7441   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 136, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0342976 	 200       	 11.0771   	 0         	 1.18007   	 9.38681   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 136, r: 136, streamingCols: 0)                                 	 0.0293235 	 100       	 157.689   	 0         	 18.804    	 8.38595   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 136, fromLeft: 1)                              	 0.011527  	 800       	 0         	 0         	 20.5386   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 136)                                                                        	 0.00899981	 100       	 0         	 0         	 60.4457   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 136, m: 2500)                                                                                 	 0.00829774	 100       	 0         	 0         	 65.56     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 1)  	 0.00529801	 100       	 0.2567    	 0         	 2.0539    	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 2, r2: 1)                              	 0.0044526 	 100       	 0.610879  	 0         	 3.66563   	 0.16665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 136, r: 50, streamingCols: 50)                                   	 0.00347766	 100       	 3.59437   	 0         	 1.43775   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 136)  	 0.0028901 	 100       	 63.9978   	 0         	 8.8844    	 7.20339   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 136, leftOrthog: 1)                         	 0.00255334	 100       	 26.6318   	 0         	 7.95822   	 3.34646   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 136, r2: 136)                            	 0.00186322	 100       	 99.2687   	 0         	 13.7808   	 7.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000972539	 100       	 25.7059   	 0         	 6.16942   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 136)                            	 0.000831524	 100       	 0         	 0         	 13.0844   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000816978	 100       	 0.612012  	 0         	 2.44805   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 136)                                                                                                         	 0.000680907	 100       	 0         	 0         	 15.9787   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 136)                                                                          	 0.000568942	 100       	 0         	 0         	 19.1232   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                          	 0.000539382	 101       	 0         	 0         	 12.8829   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 50, fromLeft: 1)                               	 0.000532761	 100       	 0         	 0         	 20.4219   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000484939	 100       	 0         	 0         	 8.24846   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 1)                                                                                                          	 0.000447063	 101       	 0         	 0         	 15.5432   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000328945	 100       	 0.760005  	 0         	 12.1601   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.74365   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.74362   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.73785   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.73661   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.65784   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.70706   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.52395   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.59443   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.32132   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.2924    	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.20386   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.15136   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.12508   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.920532  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.455459  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.408873  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.244992  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.214358  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0536721 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0409943 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.013355  	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0120598 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0067785 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00150773	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000831524	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000816978	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328945	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22524573988736 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22524351997952 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22524150671488 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22523949345024 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22523748018560 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22523546692096 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22523345365632 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22523144039168 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22522942712704 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22522741386240 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22522540059776 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22522338733312 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22522137406848 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22521936080384 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22521734753920 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22521533427456 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22521332100992 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22521130774528 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22520929448064 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22520728121600 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22520526795136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22520325468672 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22520124142208 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22519922815744 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22519721489280 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22519520162816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22519318836352 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22519117509888 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22518916183424 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22518714856960 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22518513530496 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22518312204032 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22518110873472 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22517909547008 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22517708220544 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22517506894080 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22517305567616 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22517104241152 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22516902914688 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22516701588224 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22516500261760 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22516298935296 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22516097608832 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22515896282368 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22515694955904 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22515493629440 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22515292302976 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22515090976512 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22514889650048 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22514688323584 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22514486997120 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22514285670656 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22514084344192 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22513883017728 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22513681691264 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22513480364800 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22513279038336 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22513077711872 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22512876385408 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22512675058944 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22512473732480 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22512272406016 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22512071079552 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22524468328192 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22524461737728 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6850, cols: 137, reductionFactor: 37, colBlockingSize: 12)                                 	 2.19255   	 1300      	 156.58    	 0         	 4.5404    	 34.486    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 137)                                                                               	 1.55049   	 700       	 8.12621   	 0         	 0.203862  	 39.8613   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 137)	 1.22537   	 700       	 78.8022   	 0         	 6.67533   	 11.805    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 137)                          	 1.10021   	 700       	 163.601   	 0         	 9.64885   	 16.9554   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 137, r2: 137, leftOrthog: 1)                      	 1.02942   	 600       	 149.872   	 0         	 13.3025   	 11.2664   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 137)                        	 0.839919  	 600       	 183.686   	 0         	 10.8334   	 16.9554   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 137)                                                                                	 0.474614  	 900       	 6.50133   	 0         	 0.856268  	 7.59264   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6850, Xcols: 137, r: 137, streamingCols: 0)                                 	 0.384017  	 700       	 234.358   	 0         	 27.5071   	 8.5199    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 137, reductionFactor: 37, colBlockingSize: 12)                                 	 0.284761  	 200       	 67.6929   	 0         	 2.02988   	 33.3482   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 137, m: 6850)                                                                                 	 0.202907  	 700       	 0         	 0         	 51.8002   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6850, m: 137)                                                                        	 0.197264  	 700       	 0         	 0         	 53.2821   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 137, r2: 137, leftOrthog: 1)                      	 0.0726466 	 100       	 129.18    	 0         	 11.7284   	 11.0143   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 137)                                                                                	 0.06787   	 100       	 3.53249   	 0         	 0.191543  	 18.4423   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 50) 	 0.0650317 	 100       	 77.4161   	 0         	 10.4909   	 7.37937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 50, n: 50, r2: 137)                         	 0.0565856 	 100       	 165.846   	 0         	 18.2068   	 9.10904   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 50)                         	 0.0521559 	 100       	 179.932   	 0         	 10.7948   	 16.6683   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 87)                                                                                                         	 0.0518389 	 808       	 0         	 0         	 94.3809   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0481744 	 100       	 71.0959   	 0         	 17.146    	 4.14649   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 50)                           	 0.0480816 	 100       	 195.178   	 0         	 21.4269   	 9.10904   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0413741 	 100       	 2.11485   	 0         	 0.145985  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 137, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0345567 	 200       	 11.1563   	 0         	 1.18618   	 9.40526   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0330455 	 100       	 106.446   	 0         	 8.35212   	 12.7448   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 137, r: 137, streamingCols: 0)                                 	 0.0293745 	 100       	 159.739   	 0         	 18.9112   	 8.44678   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 137, fromLeft: 1)                              	 0.0119921 	 800       	 0         	 0         	 20.0335   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 137)                                                                        	 0.00927303	 100       	 0         	 0         	 59.0961   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 137, m: 2500)                                                                                 	 0.00762489	 100       	 0         	 0         	 71.8699   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 1)  	 0.00627046	 100       	 0.218485  	 0         	 1.74813   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 2, r2: 1)                              	 0.00548837	 100       	 0.499237  	 0         	 2.99571   	 0.16665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 137, r: 50, streamingCols: 50)                                   	 0.00326126	 100       	 3.83287   	 0         	 1.53315   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 137)  	 0.00274397	 100       	 68.4009   	 0         	 9.46629   	 7.22574   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 137, leftOrthog: 1)                         	 0.00226575	 100       	 30.2328   	 0         	 9.02129   	 3.35127   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 137, r2: 137)                            	 0.00174212	 100       	 107.736   	 0         	 14.9101   	 7.22574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000883402	 100       	 28.2997   	 0         	 6.79192   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000876611	 100       	 0.570378  	 0         	 2.28151   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 137)                            	 0.000807732	 100       	 0         	 0         	 13.5689   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 137)                                                                          	 0.000593357	 100       	 0         	 0         	 18.4712   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 50, fromLeft: 1)                               	 0.000544095	 100       	 0         	 0         	 20.1435   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                          	 0.000524193	 101       	 0         	 0         	 13.4103   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 137)                                                                                                         	 0.000519281	 100       	 0         	 0         	 21.1061   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000472439	 100       	 0         	 0         	 8.4667    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 1)                                                                                                          	 0.000417538	 101       	 0         	 0         	 16.8358   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000322628	 100       	 0.774886  	 0         	 12.3982   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.88145   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.88142   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.86042   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.85914   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.77311   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.70253   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.54492   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.65974   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.32134   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.29941   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.22485   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.15552   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.1525    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.949544  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.474614  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.416652  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.211005  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.20713   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0532999 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0424004 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0142582 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0125362 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00617182	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00375522	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000876611	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000807732	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322628	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23350733703040 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23350529222656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23350327896192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23350126569728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23349925243264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23349723916800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23349522590336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23349321263872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23349119937408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23348918610944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23348717284480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23348515958016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23348314631552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23348113305088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23347911978624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23347710652160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23347509325696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23347307999232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23347106672768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23346905346304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23346704019840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23346502693376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23346301366912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23346100040448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23345898713984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23345697387520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23345496061056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23345294734592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23345093408128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23344892081664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23344690755200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23344489428736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23344288098176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23344086771712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23343885445248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23343684118784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23343482792320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23343281465856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23343080139392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23342878812928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23342677486464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23342476160000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23342274833536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23342073507072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23341872180608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23341670854144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23341469527680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23341268201216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23341066874752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23340865548288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23340664221824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23340462895360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23340261568896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23340060242432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23339858915968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23339657589504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23339456263040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23339254936576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23339053610112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23338852283648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23338650957184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23338449630720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23338248304256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23350628042496 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23350621452032 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6900, cols: 138, reductionFactor: 37, colBlockingSize: 12)                                 	 2.23269   	 1300      	 157.157   	 0         	 4.52411   	 34.7377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 138)                                                                               	 1.53839   	 700       	 8.37081   	 0         	 0.208473  	 40.153    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 138)	 1.24264   	 700       	 79.6346   	 0         	 6.6852    	 11.9121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 138)                          	 1.11863   	 700       	 164.455   	 0         	 9.62898   	 17.0792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 138, r2: 138, leftOrthog: 1)                      	 1.01623   	 600       	 155.166   	 0         	 13.6726   	 11.3487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 138)                        	 0.848125  	 600       	 185.921   	 0         	 10.8858   	 17.0792   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 138)                                                                                	 0.556001  	 900       	 5.67209   	 0         	 0.741625  	 7.64819   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6900, Xcols: 138, r: 138, streamingCols: 0)                                 	 0.391212  	 700       	 235.122   	 0         	 27.3968   	 8.58209   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 138, reductionFactor: 37, colBlockingSize: 12)                                 	 0.293451  	 200       	 66.6507   	 0         	 1.9849    	 33.5789   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6900, m: 138)                                                                        	 0.196599  	 700       	 0         	 0         	 54.2456   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 138, m: 6900)                                                                                 	 0.193833  	 700       	 0         	 0         	 55.0198   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 50) 	 0.0763831 	 100       	 67.0567   	 0         	 9.05017   	 7.40944   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 138, r2: 138, leftOrthog: 1)                      	 0.0741489 	 100       	 128.417   	 0         	 11.5777   	 11.0918   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 138)                                                                                	 0.067721  	 100       	 3.5661    	 0         	 0.193145  	 18.4633   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0581576 	 100       	 59.3216   	 0         	 14.306    	 4.14663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 50)                           	 0.0558388 	 100       	 170.527   	 0         	 18.6838   	 9.12698   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 50, n: 50, r2: 138)                         	 0.0540488 	 100       	 176.174   	 0         	 19.3026   	 9.12698   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 50)                         	 0.0519538 	 100       	 183.278   	 0         	 10.9181   	 16.7867   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 88)                                                                                                         	 0.0517839 	 808       	 0         	 0         	 96.6657   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0411573 	 100       	 2.12599   	 0         	 0.146754  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 138, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0350639 	 200       	 11.156    	 0         	 1.18385   	 9.42352   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0340683 	 100       	 104.004   	 0         	 8.16008   	 12.7455   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 138, r: 138, streamingCols: 0)                                 	 0.0297119 	 100       	 160.239   	 0         	 18.8348   	 8.5076    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 138, fromLeft: 1)                              	 0.012078  	 800       	 0         	 0         	 20.1824   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 138)                                                                        	 0.00961318	 100       	 0         	 0         	 57.4211   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 138, m: 2500)                                                                                 	 0.00780173	 100       	 0         	 0         	 70.7535   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 1)  	 0.00518121	 100       	 0.266347  	 0         	 2.13109   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 2, r2: 1)                              	 0.00429839	 100       	 0.642101  	 0         	 3.85298   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 138, r: 50, streamingCols: 50)                                   	 0.00336246	 100       	 3.71752   	 0         	 1.48701   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 138)  	 0.00282166	 100       	 67.4921   	 0         	 9.31195   	 7.2479    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 138, leftOrthog: 1)                         	 0.00207743	 100       	 33.2142   	 0         	 9.89686   	 3.35603   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 138, r2: 138)                            	 0.00178515	 100       	 106.68    	 0         	 14.7188   	 7.2479    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000968352	 100       	 25.8171   	 0         	 6.19609   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000887203	 100       	 0.563569  	 0         	 2.25428   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 138)                            	 0.000850864	 100       	 0         	 0         	 12.975    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 138)                                                                          	 0.000846458	 100       	 0         	 0         	 13.0426   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000687625	 100       	 0         	 0         	 5.81712   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 1)                                                                                                          	 0.00063224	 101       	 0         	 0         	 11.2464   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 50, fromLeft: 1)                               	 0.000557911	 100       	 0         	 0         	 19.7881   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 138)                                                                                                         	 0.000554178	 100       	 0         	 0         	 19.9214   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                          	 0.000528199	 101       	 0         	 0         	 13.4616   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000334367	 100       	 0.747681  	 0         	 11.9629   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.0323   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.0323   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.88309   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.88177   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.78884   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.80081   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.59527   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.64727   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.35059   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.32702   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.2459    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.18055   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.15061   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.955096  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.556001  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.424287  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.207059  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.202322  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0534985 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0423291 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0161497 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0126359 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00626003	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00152907	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000887203	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000850864	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334367	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23277639366528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23277447669760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23277246343296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23277045016832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23276843690368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23276642363904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23276441037440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23276239710976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23276038384512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23275837058048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23275635731584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23275434405120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23275233078656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23275031752192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23274830425728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23274629099264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23274427772800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23274226446336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23274025119872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23273823793408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23273622466944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23273421140480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23273219814016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23273018487552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23272817161088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23272615834624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23272414508160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23272213181696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23272011855232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23271810528768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23271609202304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23271407875840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23271206545280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23271005218816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23270803892352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23270602565888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23270401239424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23270199912960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23269998586496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23269797260032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23269595933568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23269394607104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23269193280640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23268991954176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23268790627712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23268589301248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23268387974784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23268186648320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23267985321856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23267783995392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23267582668928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23267381342464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23267180016000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23266978689536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23266777363072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23266576036608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23266374710144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23266173383680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23265972057216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23265770730752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23265569404288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23265368077824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23265166751360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23277533705984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23277527115520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6950, cols: 139, reductionFactor: 37, colBlockingSize: 12)                                 	 2.23445   	 1300      	 160.472   	 0         	 4.58631   	 34.9894   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 139)                                                                               	 1.57204   	 700       	 8.37098   	 0         	 0.206974  	 40.4447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 139)	 1.2486    	 700       	 81.2083   	 0         	 6.75635   	 12.0195   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 139)                          	 1.11432   	 700       	 168.707   	 0         	 9.80687   	 17.203    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 139, r2: 139, leftOrthog: 1)                      	 1.09641   	 600       	 146.968   	 0         	 12.8571   	 11.4309   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 139)                        	 0.869966  	 600       	 185.222   	 0         	 10.7669   	 17.203    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 139)                                                                                	 0.55716   	 900       	 5.78423   	 0         	 0.750834  	 7.70375   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6950, Xcols: 139, r: 139, streamingCols: 0)                                 	 0.394244  	 700       	 238.422   	 0         	 27.5815   	 8.64428   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 139, reductionFactor: 37, colBlockingSize: 12)                                 	 0.299975  	 200       	 66.1495   	 0         	 1.95654   	 33.8094   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 139, m: 6950)                                                                                 	 0.204232  	 700       	 0         	 0         	 52.9778   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6950, m: 139)                                                                        	 0.179329  	 700       	 0         	 0         	 60.3348   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 139, r2: 139, leftOrthog: 1)                      	 0.0797846 	 100       	 121.082   	 0         	 10.8406   	 11.1693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 50) 	 0.0760868 	 100       	 68.481    	 0         	 9.20527   	 7.43932   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 139)                                                                                	 0.0658337 	 100       	 3.69492   	 0         	 0.199898  	 18.484    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 50)                           	 0.0588944 	 100       	 164.031   	 0         	 17.9372   	 9.14474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 50, n: 50, r2: 139)                         	 0.058567  	 100       	 164.948   	 0         	 18.0375   	 9.14474   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0553976 	 100       	 62.7284   	 0         	 15.127    	 4.14678   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 89)                                                                                                         	 0.053821  	 808       	 0         	 0         	 95.1326   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 50)                         	 0.0510486 	 100       	 189.241   	 0         	 11.1944   	 16.905    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0420119 	 100       	 2.08274   	 0         	 0.143769  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 139, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0373326 	 200       	 10.6305   	 0         	 1.12592   	 9.44158   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0339536 	 100       	 105.112   	 0         	 8.24656   	 12.7461   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 139, r: 139, streamingCols: 0)                                 	 0.0306723 	 100       	 157.479   	 0         	 18.3791   	 8.5684    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 139, fromLeft: 1)                              	 0.012131  	 800       	 0         	 0         	 20.3866   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 139, m: 2500)                                                                                 	 0.00837384	 100       	 0         	 0         	 66.3972   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 139)                                                                        	 0.00736427	 100       	 0         	 0         	 75.4997   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 1)  	 0.00504439	 100       	 0.275554  	 0         	 2.20475   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 2, r2: 1)                              	 0.00418361	 100       	 0.664497  	 0         	 3.98737   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 139, r: 50, streamingCols: 50)                                   	 0.00333379	 100       	 3.74948   	 0         	 1.49979   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 139)  	 0.0028565 	 100       	 67.6387   	 0         	 9.30397   	 7.26987   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 139, leftOrthog: 1)                         	 0.00221878	 100       	 31.3235   	 0         	 9.32043   	 3.36074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 139, r2: 139)                            	 0.00185511	 100       	 104.15    	 0         	 14.3263   	 7.26987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000913232	 100       	 27.3753   	 0         	 6.57007   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000875233	 100       	 0.571276  	 0         	 2.28511   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 139)                            	 0.000834917	 100       	 0         	 0         	 13.3187   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 50, fromLeft: 1)                               	 0.000573195	 100       	 0         	 0         	 19.4      	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 139)                                                                          	 0.000569855	 100       	 0         	 0         	 19.5137   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 139)                                                                                                         	 0.00055475	 100       	 0         	 0         	 20.0451   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                          	 0.000522873	 101       	 0         	 0         	 13.7532   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000493907	 100       	 0         	 0         	 8.09869   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 1)                                                                                                          	 0.000436733	 101       	 0         	 0         	 16.4659   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033209	 100       	 0.752808  	 0         	 12.0449   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.2224   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.2224   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.07564   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.07434   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.91931   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.80677   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.60571   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.67989   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.36132   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.33258   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.24566   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.23381   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.17925   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.980495  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.55716   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.42825   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.2131    	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.187263  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0553354 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0430393 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0127042 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00706458	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00634571	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0013685 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000875233	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000834917	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033209	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22590795446144 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22590588446720 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22590387120256 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22590185793792 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22589984467328 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22589783140864 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22589581814400 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22589380487936 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22589179161472 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22588977835008 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22588776508544 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22588575182080 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22588373855616 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22588172529152 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22587971202688 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22587769876224 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22587568549760 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22587367223296 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22587165896832 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22586964570368 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22586763243904 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22586561917440 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22586360590976 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22586159264512 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22585957938048 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22585756611584 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22585555285120 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22585353958656 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22585152632192 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22584951305728 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22584749979264 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22584548652800 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22584347322240 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22584145995776 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22583944669312 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22583743342848 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22583542016384 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22583340689920 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22583139363456 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22582938036992 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22582736710528 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22582535384064 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22582334057600 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22582132731136 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22581931404672 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22581730078208 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22581528751744 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22581327425280 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22581126098816 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22580924772352 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22580723445888 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22580522119424 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22580320792960 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22580119466496 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22579918140032 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22579716813568 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22579515487104 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22579314160640 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22579112834176 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22578911507712 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22578710181248 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22578508854784 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22578307528320 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22590689785600 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22590683195136 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7000, cols: 140, reductionFactor: 37, colBlockingSize: 12)                                 	 2.2636    	 1300      	 161.849   	 0         	 4.59261   	 35.2411   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 140)                                                                               	 1.60873   	 700       	 8.35788   	 0         	 0.20517   	 40.7363   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 140)	 1.26424   	 700       	 82.168    	 0         	 6.77543   	 12.1274   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 140)                          	 1.13952   	 700       	 168.562   	 0         	 9.72845   	 17.3267   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 140, r2: 140, leftOrthog: 1)                      	 1.04541   	 600       	 157.488   	 0         	 13.679    	 11.5132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 140)                        	 0.858433  	 600       	 191.791   	 0         	 11.0691   	 17.3267   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 140)                                                                                	 0.565274  	 900       	 5.82514   	 0         	 0.75073   	 7.7593    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7000, Xcols: 140, r: 140, streamingCols: 0)                                 	 0.40757   	 700       	 235.641   	 0         	 27.065    	 8.70647   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 140, reductionFactor: 37, colBlockingSize: 12)                                 	 0.299805  	 200       	 67.1428   	 0         	 1.97248   	 34.0397   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 140, m: 7000)                                                                                 	 0.231734  	 700       	 0         	 0         	 47.3646   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7000, m: 140)                                                                        	 0.219037  	 700       	 0         	 0         	 50.1102   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 140, r2: 140, leftOrthog: 1)                      	 0.0780726 	 100       	 125.524   	 0         	 11.1609   	 11.2468   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 50) 	 0.0691415 	 100       	 76.6544   	 0         	 10.263    	 7.469     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 140)                                                                                	 0.065853  	 100       	 3.72041   	 0         	 0.201054  	 18.5045   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0584623 	 100       	 59.8676   	 0         	 14.4366   	 4.14692   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 90)                                                                                                         	 0.0558192 	 808       	 0         	 0         	 93.8      	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 50, n: 50, r2: 140)                         	 0.0555186 	 100       	 176.517   	 0         	 19.2656   	 9.1623    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 50)                         	 0.0550792 	 100       	 177.926   	 0         	 10.4519   	 17.0233   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 50)                           	 0.0549751 	 100       	 178.262   	 0         	 19.4561   	 9.1623    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.043727  	 100       	 2.00105   	 0         	 0.13813   	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 140, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0360258 	 200       	 11.1752   	 0         	 1.18138   	 9.45946   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0338191 	 100       	 106.289   	 0         	 8.33848   	 12.7468   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 140, r: 140, streamingCols: 0)                                 	 0.0297623 	 100       	 164.638   	 0         	 19.0792   	 8.62919   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 140, fromLeft: 1)                              	 0.0124731 	 800       	 0         	 0         	 20.1138   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 140, m: 2500)                                                                                 	 0.00993551	 100       	 0         	 0         	 56.3635   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 140)                                                                        	 0.00957577	 100       	 0         	 0         	 58.4809   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 1)  	 0.00522505	 100       	 0.26794   	 0         	 2.14383   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 2, r2: 1)                              	 0.00434223	 100       	 0.64483   	 0         	 3.86935   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 140, r: 50, streamingCols: 50)                                   	 0.00318347	 100       	 3.92653   	 0         	 1.57061   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 140)  	 0.00282082	 100       	 69.4834   	 0         	 9.52915   	 7.29167   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 140, leftOrthog: 1)                         	 0.00266819	 100       	 26.235    	 0         	 7.79556   	 3.36538   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 140, r2: 140)                            	 0.00183423	 100       	 106.857   	 0         	 14.6547   	 7.29167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000952685	 100       	 26.2416   	 0         	 6.29799   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000889122	 100       	 0.562353  	 0         	 2.24941   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 140)                            	 0.000796134	 100       	 0         	 0         	 14.068    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 140)                                                                          	 0.000599015	 100       	 0         	 0         	 18.6974   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 50, fromLeft: 1)                               	 0.000571853	 100       	 0         	 0         	 19.5855   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 140)                                                                                                         	 0.000525754	 100       	 0         	 0         	 21.3027   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                          	 0.000519133	 101       	 0         	 0         	 14.008    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000484841	 100       	 0         	 0         	 8.25013   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 1)                                                                                                          	 0.000426841	 101       	 0         	 0         	 17.0368   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336468	 100       	 0.743013  	 0         	 11.8882   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.3427   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.3427   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.085     	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.08368   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.92755   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.91083   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.63325   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.71831   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.37617   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.34143   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.25849   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.20067   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.18461   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.969984  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.565274  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.440515  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.242155  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.229212  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0572909 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.044067  	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0130449 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00753011	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00644971	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00249392	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000889122	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000796134	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336468	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22761055774592 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22760843634688 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22760642308224 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22760440981760 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22760239655296 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22760038328832 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22759837002368 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22759635675904 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22759434349440 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22759233022976 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22759031696512 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22758830370048 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22758629043584 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22758427717120 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22758226390656 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22758025064192 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22757823737728 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22757622411264 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22757421084800 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22757219758336 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22757018431872 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22756817105408 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22756615778944 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22756414452480 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22756213126016 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22756011799552 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22755810473088 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22755609146624 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22755407820160 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22755206493696 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22755005167232 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22754803840768 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22754602510208 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22754401183744 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22754199857280 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22753998530816 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22753797204352 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22753595877888 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22753394551424 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22753193224960 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22752991898496 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22752790572032 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22752589245568 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22752387919104 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22752186592640 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22751985266176 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22751783939712 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22751582613248 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22751381286784 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22751179960320 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22750978633856 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22750777307392 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22750575980928 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22750374654464 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22750173328000 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22749972001536 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22749770675072 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22749569348608 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22749368022144 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22749166695680 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22748965369216 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22748764042752 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22748562716288 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22760950114048 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22760943523584 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7050, cols: 141, reductionFactor: 37, colBlockingSize: 12)                                 	 2.30504   	 1300      	 162.369   	 0         	 4.5747    	 35.4928   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 141)                                                                               	 1.6318    	 700       	 8.41754   	 0         	 0.205166  	 41.028    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 141)	 1.31442   	 700       	 80.9548   	 0         	 6.61638   	 12.2355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 141)                          	 1.17919   	 700       	 166.407   	 0         	 9.53594   	 17.4505   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 141, r2: 141, leftOrthog: 1)                      	 1.06759   	 600       	 157.545   	 0         	 13.5868   	 11.5954   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 141)                        	 0.908117  	 600       	 185.211   	 0         	 10.6135   	 17.4505   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 141)                                                                                	 0.572153  	 900       	 5.87931   	 0         	 0.752325  	 7.81486   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7050, Xcols: 141, r: 141, streamingCols: 0)                                 	 0.41096   	 700       	 238.74    	 0         	 27.2266   	 8.76866   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 141, reductionFactor: 37, colBlockingSize: 12)                                 	 0.303947  	 200       	 67.1773   	 0         	 1.96024   	 34.2699   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 141, m: 7050)                                                                                 	 0.204492  	 700       	 0         	 0         	 54.4441   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7050, m: 141)                                                                        	 0.199116  	 700       	 0         	 0         	 55.914    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 141, r2: 141, leftOrthog: 1)                      	 0.0782489 	 100       	 127.037   	 0         	 11.2182   	 11.3242   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 50) 	 0.0705288 	 100       	 76.4298   	 0         	 10.1927   	 7.49847   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 141)                                                                                	 0.0683561 	 100       	 3.60977   	 0         	 0.194862  	 18.5248   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 50, n: 50, r2: 141)                         	 0.0600355 	 100       	 165.577   	 0         	 18.0373   	 9.17969   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 50)                         	 0.0596246 	 100       	 166.718   	 0         	 9.72593   	 17.1416   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 91)                                                                                                         	 0.0578515 	 808       	 0         	 0         	 92.5272   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0485599 	 100       	 72.5908   	 0         	 17.5042   	 4.14706   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 50)                           	 0.0480899 	 100       	 206.706   	 0         	 22.5178   	 9.17969   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0431645 	 100       	 2.02713   	 0         	 0.13993   	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 141, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0366499 	 200       	 11.1424   	 0         	 1.17571   	 9.47715   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0331404 	 100       	 109.24    	 0         	 8.56959   	 12.7474   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 141, r: 141, streamingCols: 0)                                 	 0.0307587 	 100       	 161.588   	 0         	 18.5948   	 8.68997   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 141, fromLeft: 1)                              	 0.0125697 	 800       	 0         	 0         	 20.2453   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 141, m: 2500)                                                                                 	 0.00969116	 100       	 0         	 0         	 58.1974   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 141)                                                                        	 0.00763806	 100       	 0         	 0         	 73.8407   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 1)  	 0.00512467	 100       	 0.27514   	 0         	 2.20143   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 2, r2: 1)                              	 0.00426745	 100       	 0.660816  	 0         	 3.96527   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 141, r: 50, streamingCols: 50)                                   	 0.003116  	 100       	 4.01155   	 0         	 1.60462   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 141)  	 0.00288531	 100       	 68.9042   	 0         	 9.4218    	 7.31328   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 141, leftOrthog: 1)                         	 0.0022592 	 100       	 31.2058   	 0         	 9.25994   	 3.36998   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 141, r2: 141)                            	 0.00187459	 100       	 106.055   	 0         	 14.5017   	 7.31328   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000868016	 100       	 28.8013   	 0         	 6.91231   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 141)                            	 0.000834074	 100       	 0         	 0         	 13.524    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000810093	 100       	 0.617213  	 0         	 2.46885   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 141)                                                                          	 0.000615515	 100       	 0         	 0         	 18.3261   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 50, fromLeft: 1)                               	 0.000553696	 100       	 0         	 0         	 20.3722   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                          	 0.000552442	 101       	 0         	 0         	 13.3096   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 141)                                                                                                         	 0.000543005	 100       	 0         	 0         	 20.7733   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000485898	 100       	 0         	 0         	 8.23218   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 1)                                                                                                          	 0.00046512	 101       	 0         	 0         	 15.8084   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000348337	 100       	 0.717696  	 0         	 11.4831   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.4928   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.4928   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.17468   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.17343   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.98957   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.91752   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.67878   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.74332   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.41154   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.39296   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.26843   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.23342   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.19666   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.02864   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.572153  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.444835  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.214669  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.207369  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0594121 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0438501 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0144504 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0131234 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00786529	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00643439	 6400      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000834074	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000810093	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000348337	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22479313164160 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22479120623616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22478919297152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22478717970688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22478516644224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22478315317760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22478113991296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22477912664832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22477711338368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22477510011904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22477308685440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22477107358976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22476906032512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22476704706048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22476503379584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22476302053120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22476100726656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22475899400192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22475698073728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22475496747264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22475295420800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22475094094336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22474892767872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22474691441408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22474490114944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22474288788480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22474087462016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22473886135552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22473684809088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22473483482624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22473282156160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22473080829696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22472879499136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22472678172672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22472476846208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22472275519744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22472074193280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22471872866816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22471671540352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22471470213888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22471268887424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22471067560960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22470866234496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22470664908032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22470463581568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22470262255104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22470060928640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22469859602176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22469658275712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22469456949248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22469255622784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22469054296320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22468852969856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22468651643392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22468450316928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22468248990464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22468047664000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22467846337536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22467645011072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22467443684608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22467242358144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22467041031680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22466839705216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22479207503616 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22479200913152 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7100, cols: 142, reductionFactor: 37, colBlockingSize: 12)                                 	 2.32767   	 1300      	 164.236   	 0         	 4.59472   	 35.7446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 142)                                                                               	 1.6409    	 700       	 8.55023   	 0         	 0.206929  	 41.3197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 142)	 1.32196   	 700       	 82.4396   	 0         	 6.67852   	 12.344    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 142)                          	 1.18862   	 700       	 168.624   	 0         	 9.59494   	 17.5743   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 142, r2: 142, leftOrthog: 1)                      	 1.0646    	 600       	 161.372   	 0         	 13.8189   	 11.6776   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 142)                        	 0.892206  	 600       	 192.553   	 0         	 10.9566   	 17.5743   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 142)                                                                                	 0.582414  	 900       	 5.89949   	 0         	 0.749579  	 7.87041   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7100, Xcols: 142, r: 142, streamingCols: 0)                                 	 0.418067  	 700       	 239.711   	 0         	 27.1447   	 8.83085   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 142, reductionFactor: 37, colBlockingSize: 12)                                 	 0.30666   	 200       	 67.5306   	 0         	 1.95742   	 34.4999   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 142, m: 7100)                                                                                 	 0.212129  	 700       	 0         	 0         	 53.2311   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7100, m: 142)                                                                        	 0.204075  	 700       	 0         	 0         	 55.3319   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 50) 	 0.0802606 	 100       	 68.3025   	 0         	 9.07344   	 7.52774   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 142, r2: 142, leftOrthog: 1)                      	 0.0763411 	 100       	 132.065   	 0         	 11.583    	 11.4016   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 142)                                                                                	 0.0669456 	 100       	 3.71197   	 0         	 0.200162  	 18.5448   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0601626 	 100       	 59.0068   	 0         	 14.2281   	 4.1472    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 92)                                                                                                         	 0.0595369 	 808       	 0         	 0         	 91.8947   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 50)                           	 0.0577033 	 100       	 174.721   	 0         	 18.9979   	 9.19689   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 50, n: 50, r2: 142)                         	 0.056935  	 100       	 177.079   	 0         	 19.2542   	 9.19689   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 50)                         	 0.0567856 	 100       	 177.545   	 0         	 10.2866   	 17.2598   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0426341 	 100       	 2.05235   	 0         	 0.141671  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 142, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0364015 	 200       	 11.3781   	 0         	 1.19837   	 9.49465   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0332047 	 100       	 109.802   	 0         	 8.61324   	 12.7481   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 142, r: 142, streamingCols: 0)                                 	 0.0309236 	 100       	 163.015   	 0         	 18.6287   	 8.75074   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 142, fromLeft: 1)                              	 0.0126738 	 800       	 0         	 0         	 20.3648   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 142)                                                                        	 0.00880189	 100       	 0         	 0         	 64.5316   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 142, m: 2500)                                                                                 	 0.00840194	 100       	 0         	 0         	 67.6034   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 1)  	 0.008112  	 100       	 0.175049  	 0         	 1.40059   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00748217	 100       	 3.34128   	 0         	 0.801907  	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 2, r2: 1)                              	 0.00413938	 100       	 0.686093  	 0         	 4.11694   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 142, r: 50, streamingCols: 50)                                   	 0.00311653	 100       	 4.01088   	 0         	 1.60435   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 142)  	 0.00300593	 100       	 67.0806   	 0         	 9.14564   	 7.33471   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 142, leftOrthog: 1)                         	 0.00255319	 100       	 27.8084   	 0         	 8.24068   	 3.37452   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 142, r2: 142)                            	 0.00197096	 100       	 102.305   	 0         	 13.9481   	 7.33471   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 142)                            	 0.000848318	 100       	 0         	 0         	 13.3912   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000809283	 100       	 0.617831  	 0         	 2.47132   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 142)                                                                          	 0.000722858	 100       	 0         	 0         	 15.7154   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 142)                                                                                                         	 0.00058674	 100       	 0         	 0         	 19.3612   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 50, fromLeft: 1)                               	 0.000552776	 100       	 0         	 0         	 20.5508   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                          	 0.000549989	 101       	 0         	 0         	 13.5159   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000509332	 100       	 0         	 0         	 7.85342   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 1)                                                                                                          	 0.000439748	 101       	 0         	 0         	 16.9042   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329589	 100       	 0.75852   	 0         	 12.1363   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.5681   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.5681   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.19511   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.19387   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.03155   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.95029   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.70394   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.75048   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.41721   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.41334   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.28832   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.25244   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.20366   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.01341   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.582414  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.452107  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.22104   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.213599  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0611134 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0452536 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0132265 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.012331  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00799286	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0064254 	 6400      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000848318	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000809283	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329589	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23155648300928 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23155443755008 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23155242428544 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23155041102080 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23154839775616 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23154638449152 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23154437122688 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23154235796224 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23154034469760 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23153833143296 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23153631816832 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23153430490368 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23153229163904 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23153027837440 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23152826510976 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23152625184512 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23152423858048 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23152222531584 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23152021205120 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23151819878656 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23151618552192 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23151417225728 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23151215899264 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23151014572800 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23150813246336 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23150611919872 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23150410593408 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23150209266944 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23150007940480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23149806614016 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23149605287552 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23149403961088 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23149202630528 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23149001304064 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23148799977600 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23148598651136 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23148397324672 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23148195998208 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23147994671744 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23147793345280 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23147592018816 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23147390692352 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23147189365888 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23146988039424 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23146786712960 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23146585386496 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23146384060032 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23146182733568 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23145981407104 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23145780080640 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23145578754176 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23145377427712 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23145176101248 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23144974774784 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23144773448320 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23144572121856 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23144370795392 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23144169468928 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23143968142464 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23143766816000 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23143565489536 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23143364163072 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23143162836608 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23155542640384 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23155536049920 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7150, cols: 143, reductionFactor: 37, colBlockingSize: 12)                                 	 2.38646   	 1300      	 163.598   	 0         	 4.54487   	 35.9963   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 143)                                                                               	 1.69356   	 700       	 8.46067   	 0         	 0.203326  	 41.6113   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 143)	 1.32868   	 700       	 83.9944   	 0         	 6.74502   	 12.4528   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 143)                          	 1.19435   	 700       	 171.386   	 0         	 9.68392   	 17.698    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 143, r2: 143, leftOrthog: 1)                      	 1.09321   	 600       	 160.493   	 0         	 13.6475   	 11.7599   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 143)                        	 0.920709  	 600       	 190.562   	 0         	 10.7674   	 17.698    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 143)                                                                                	 0.591217  	 900       	 5.93529   	 0         	 0.748842  	 7.92597   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7150, Xcols: 143, r: 143, streamingCols: 0)                                 	 0.42048   	 700       	 243.406   	 0         	 27.3704   	 8.89303   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 143, reductionFactor: 37, colBlockingSize: 12)                                 	 0.310385  	 200       	 67.6634   	 0         	 1.94829   	 34.7297   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7150, m: 143)                                                                        	 0.254711  	 700       	 0         	 0         	 44.9586   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 143, m: 7150)                                                                                 	 0.220988  	 700       	 0         	 0         	 51.8194   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 50) 	 0.0779584 	 100       	 71.506    	 0         	 9.46248   	 7.5568    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 143, r2: 143, leftOrthog: 1)                      	 0.0774041 	 100       	 132.092   	 0         	 11.5074   	 11.4789   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 143)                                                                                	 0.069425  	 100       	 3.60461   	 0         	 0.194166  	 18.5645   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 93)                                                                                                         	 0.0623229 	 808       	 0         	 0         	 89.7055   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 50)                           	 0.0580105 	 100       	 176.252   	 0         	 19.1289   	 9.21392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 50, n: 50, r2: 143)                         	 0.0570668 	 100       	 179.167   	 0         	 19.4453   	 9.21392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 50)                         	 0.0559862 	 100       	 182.625   	 0         	 10.509    	 17.378    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0557685 	 100       	 64.1043   	 0         	 15.4568   	 4.14733   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0429369 	 100       	 2.03787   	 0         	 0.140672  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 143, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0373016 	 200       	 11.2605   	 0         	 1.18382   	 9.51197   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0339713 	 100       	 108.08    	 0         	 8.47775   	 12.7487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 143, r: 143, streamingCols: 0)                                 	 0.0313133 	 100       	 163.261   	 0         	 18.5282   	 8.8115    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 143, fromLeft: 1)                              	 0.0127042 	 800       	 0         	 0         	 20.6033   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 143)                                                                        	 0.00879302	 100       	 0         	 0         	 65.0516   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 143, m: 2500)                                                                                 	 0.00842859	 100       	 0         	 0         	 67.8642   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 1)  	 0.00547244	 100       	 0.261309  	 0         	 2.09077   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 2, r2: 1)                              	 0.00461869	 100       	 0.619223  	 0         	 3.71568   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 143, r: 50, streamingCols: 50)                                   	 0.00347455	 100       	 3.59758   	 0         	 1.43903   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 143)  	 0.00298494	 100       	 68.5072   	 0         	 9.31315   	 7.35597   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 143, leftOrthog: 1)                         	 0.00293769	 100       	 24.3389   	 0         	 7.20294   	 3.37902   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 143, r2: 143)                            	 0.00196656	 100       	 103.984   	 0         	 14.136    	 7.35597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000964777	 100       	 25.9127   	 0         	 6.21905   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000865101	 100       	 0.577967  	 0         	 2.31187   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 143)                            	 0.000861629	 100       	 0         	 0         	 13.2772   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 1)                                                                                                          	 0.000643554	 101       	 0         	 0         	 11.6764   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 143)                                                                          	 0.000601887	 100       	 0         	 0         	 19.0069   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 50, fromLeft: 1)                               	 0.000583671	 100       	 0         	 0         	 19.6001   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 143)                                                                                                         	 0.000542232	 100       	 0         	 0         	 21.098    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                          	 0.000534782	 101       	 0         	 0         	 14.0513   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000504417	 100       	 0         	 0         	 7.92995   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000337122	 100       	 0.741571  	 0         	 11.8651   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.8507   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.8506   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.3455    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.34419   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.15664   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.06475   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.76812   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.80592   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.44753   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.41509   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.32196   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.25894   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.22932   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.03473   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.591217  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.455268  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.264106  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.229921  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0640435 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0457908 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0134295 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0132878 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00658071	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00462089	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000865101	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000861629	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337122	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23012863469440 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23012636092416 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23012434765952 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23012233439488 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23012032113024 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23011830786560 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23011629460096 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23011428133632 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23011226807168 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23011025480704 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23010824154240 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23010622827776 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23010421501312 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23010220174848 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23010018848384 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23009817521920 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23009616195456 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23009414868992 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23009213542528 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23009012216064 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23008810889600 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23008609563136 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23008408236672 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23008206910208 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23008005583744 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23007804257280 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23007602930816 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23007401604352 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23007200277888 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23006998951424 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23006797624960 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23006596298496 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23006394967936 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23006193641472 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23005992315008 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23005790988544 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23005589662080 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23005388335616 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23005187009152 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23004985682688 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23004784356224 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23004583029760 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23004381703296 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23004180376832 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23003979050368 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23003777723904 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23003576397440 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23003375070976 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23003173744512 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23002972418048 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23002771091584 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23002569765120 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23002368438656 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23002167112192 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23001965785728 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23001764459264 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23001563132800 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23001361806336 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23001160479872 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23000959153408 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23000757826944 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23000556500480 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23000355174016 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23012757808896 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23012751218432 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7200, cols: 144, reductionFactor: 37, colBlockingSize: 12)                                 	 2.41405   	 1300      	 165.145   	 0         	 4.55599   	 36.248    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 144)                                                                               	 1.67011   	 700       	 8.76067   	 0         	 0.20907   	 41.903    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 144)	 1.4096    	 700       	 81.0635   	 0         	 6.45311   	 12.5619   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 144)                          	 1.23045   	 700       	 169.872   	 0         	 9.53171   	 17.8218   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 144, r2: 144, leftOrthog: 1)                      	 1.10691   	 600       	 161.855   	 0         	 13.6677   	 11.8421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 144)                        	 0.915277  	 600       	 195.743   	 0         	 10.9834   	 17.8218   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 144)                                                                                	 0.579937  	 900       	 6.17857   	 0         	 0.774109  	 7.98152   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7200, Xcols: 144, r: 144, streamingCols: 0)                                 	 0.42698   	 700       	 244.764   	 0         	 27.332    	 8.95522   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 144, reductionFactor: 37, colBlockingSize: 12)                                 	 0.321592  	 200       	 66.2219   	 0         	 1.89426   	 34.9593   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 144, m: 7200)                                                                                 	 0.214526  	 700       	 0         	 0         	 54.1294   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7200, m: 144)                                                                        	 0.136651  	 700       	 0         	 0         	 84.9765   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 50) 	 0.0847755 	 100       	 66.8589   	 0         	 8.81386   	 7.58565   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 144, r2: 144, leftOrthog: 1)                      	 0.0737498 	 100       	 140.583   	 0         	 12.1652   	 11.5562   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 144)                                                                                	 0.068003  	 100       	 3.70572   	 0         	 0.199403  	 18.5841   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 94)                                                                                                         	 0.0626397 	 808       	 0         	 0         	 91.1816   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0614775 	 100       	 58.558    	 0         	 14.119    	 4.14747   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 50)                           	 0.0611715 	 100       	 169.491   	 0         	 18.3615   	 9.23077   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 50, n: 50, r2: 144)                         	 0.057671  	 100       	 179.778   	 0         	 19.476    	 9.23077   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 50)                         	 0.0518812 	 100       	 199.841   	 0         	 11.422    	 17.4961   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0434337 	 100       	 2.01456   	 0         	 0.139062  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 144, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0385167 	 200       	 11.0583   	 0         	 1.16047   	 9.52912   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0332749 	 100       	 111.114   	 0         	 8.71528   	 12.7493   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 144, r: 144, streamingCols: 0)                                 	 0.0317065 	 100       	 163.5     	 0         	 18.4282   	 8.87224   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 144, fromLeft: 1)                              	 0.0155629 	 800       	 0         	 0         	 17.0547   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 144, m: 2500)                                                                                 	 0.00972915	 100       	 0         	 0         	 59.2035   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 144)                                                                        	 0.00929587	 100       	 0         	 0         	 61.963    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 1)  	 0.00504424	 100       	 0.285474  	 0         	 2.28411   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 2, r2: 1)                              	 0.0041613 	 100       	 0.692092  	 0         	 4.15294   	 0.166651  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                          	 0.00377652	 101       	 0         	 0         	 2.01116   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 144, r: 50, streamingCols: 50)                                   	 0.00322212	 100       	 3.87944   	 0         	 1.55177   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 144)  	 0.00290577	 100       	 71.3615   	 0         	 9.67345   	 7.37705   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 144, leftOrthog: 1)                         	 0.00266663	 100       	 27.0004   	 0         	 7.98011   	 3.38346   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 144, r2: 144)                            	 0.00193485	 100       	 107.171   	 0         	 14.5276   	 7.37705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00092861	 100       	 26.922    	 0         	 6.46127   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000915471	 100       	 0.546167  	 0         	 2.18467   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 144)                            	 0.000806393	 100       	 0         	 0         	 14.2858   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 144)                                                                          	 0.000591972	 100       	 0         	 0         	 19.4604   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 50, fromLeft: 1)                               	 0.000581324	 100       	 0         	 0         	 19.8168   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 144)                                                                                                         	 0.000550534	 100       	 0         	 0         	 20.9251   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000483236	 100       	 0         	 0         	 8.27753   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 1)                                                                                                          	 0.000421804	 101       	 0         	 0         	 18.0065   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000346146	 100       	 0.722239  	 0         	 11.5558   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.7695   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.7695   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.31153   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.31018   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.14154   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.95004   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.80743   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.78155   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.50232   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.4754    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.33331   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.29772   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.24481   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.02576   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.579937  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.461909  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.224738  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.146539  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0673886 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0465629 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0161443 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0150109 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0053429 	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00445443	 1800      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000915471	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000806393	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346146	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23420889134976 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23420657985536 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23420456659072 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23420255332608 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23420054006144 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23419852679680 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23419651353216 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23419450026752 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23419248700288 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23419047373824 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23418846047360 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23418644720896 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23418443394432 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23418242067968 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23418040741504 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23417839415040 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23417638088576 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23417436762112 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23417235435648 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23417034109184 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23416832782720 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23416631456256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23416430129792 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23416228803328 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23416027476864 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23415826150400 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23415624823936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23415423497472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23415222171008 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23415020844544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23414819518080 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23414618191616 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23414416861056 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23414215534592 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23414014208128 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23413812881664 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23413611555200 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23413410228736 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23413208902272 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23413007575808 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23412806249344 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23412604922880 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23412403596416 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23412202269952 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23412000943488 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23411799617024 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23411598290560 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23411396964096 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23411195637632 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23410994311168 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23410792984704 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23410591658240 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23410390331776 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23410189005312 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23409987678848 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23409786352384 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23409585025920 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23409383699456 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23409182372992 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23408981046528 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23408779720064 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23408578393600 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23408377067136 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23420783474432 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23420776883968 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7250, cols: 145, reductionFactor: 37, colBlockingSize: 12)                                 	 2.48261   	 1300      	 163.953   	 0         	 4.49191   	 36.4997   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 145)                                                                               	 1.7518    	 700       	 8.52739   	 0         	 0.202096  	 42.1947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 145)	 1.21916   	 700       	 95.95     	 0         	 7.57219   	 12.6714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 145)                          	 1.07776   	 700       	 198.006   	 0         	 11.0337   	 17.9455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 145, r2: 145, leftOrthog: 1)                      	 1.07706   	 600       	 169.831   	 0         	 14.2424   	 11.9243   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 145)                        	 0.950569  	 600       	 192.429   	 0         	 10.723    	 17.9455   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 145)                                                                                	 0.595981  	 900       	 6.13837   	 0         	 0.763756  	 8.03708   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7250, Xcols: 145, r: 145, streamingCols: 0)                                 	 0.418879  	 700       	 254.732   	 0         	 28.2489   	 9.01741   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 145, reductionFactor: 37, colBlockingSize: 12)                                 	 0.323728  	 200       	 66.7018   	 0         	 1.89554   	 35.1888   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7250, m: 145)                                                                        	 0.248602  	 700       	 0         	 0         	 47.3609   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 145, m: 7250)                                                                                 	 0.220058  	 700       	 0         	 0         	 53.5041   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 50) 	 0.0874678 	 100       	 65.8814   	 0         	 8.65233   	 7.6143    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 145)                                                                                	 0.0761477 	 100       	 3.33234   	 0         	 0.179126  	 18.6034   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 145, r2: 145, leftOrthog: 1)                      	 0.074005  	 100       	 142.051   	 0         	 12.2105   	 11.6335   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 95)                                                                                                         	 0.0693773 	 808       	 0         	 0         	 84.0875   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 50)                           	 0.0614966 	 100       	 170.944   	 0         	 18.4856   	 9.24745   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 50, n: 50, r2: 145)                         	 0.0605579 	 100       	 173.594   	 0         	 18.7721   	 9.24745   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0587103 	 100       	 61.7438   	 0         	 14.8867   	 4.1476    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 50)                         	 0.0527945 	 100       	 199.121   	 0         	 11.3046   	 17.6142   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 145, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0433772 	 200       	 9.95604   	 0         	 1.04294   	 9.54608   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0429814 	 100       	 2.03576   	 0         	 0.140526  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0344006 	 100       	 108.224   	 0         	 8.48824   	 12.7499   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 145, r: 145, streamingCols: 0)                                 	 0.0313345 	 100       	 167.746   	 0         	 18.7783   	 8.93297   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 145, fromLeft: 1)                              	 0.0133482 	 800       	 0         	 0         	 20.1616   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 145, m: 2500)                                                                                 	 0.00835408	 100       	 0         	 0         	 69.4271   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 145)                                                                        	 0.00750714	 100       	 0         	 0         	 77.2598   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 1)  	 0.00541305	 100       	 0.267871  	 0         	 2.14327   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 2, r2: 1)                              	 0.00462327	 100       	 0.627262  	 0         	 3.76392   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 145, r: 50, streamingCols: 50)                                   	 0.0032222 	 100       	 3.87934   	 0         	 1.55174   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 145)  	 0.00300729	 100       	 69.9134   	 0         	 9.45037   	 7.39796   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 145, leftOrthog: 1)                         	 0.00294724	 100       	 24.5993   	 0         	 7.26103   	 3.38785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 145, r2: 145)                            	 0.00203681	 100       	 103.225   	 0         	 13.9532   	 7.39796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000905755	 100       	 27.6013   	 0         	 6.62431   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000901012	 100       	 0.554932  	 0         	 2.21973   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 145)                            	 0.00080024	 100       	 0         	 0         	 14.4957   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 145)                                                                          	 0.000702327	 100       	 0         	 0         	 16.5165   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 50, fromLeft: 1)                               	 0.000586099	 100       	 0         	 0         	 19.7919   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 145)                                                                                                         	 0.000540842	 100       	 0         	 0         	 21.448    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                          	 0.000532638	 101       	 0         	 0         	 14.4113   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000484163	 100       	 0         	 0         	 8.26168   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 1)                                                                                                          	 0.000448985	 101       	 0         	 0         	 17.0963   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323218	 100       	 0.773472  	 0         	 12.3755   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.9725   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.9724   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.52479   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.52348   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.29125   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.1142    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.88412   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.87093   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.50963   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.37592   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.31505   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.21272   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.14592   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.06483   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.595981  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.453435  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.256811  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.228896  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0708997 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0480988 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0144455 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0139343 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00627232	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00314638	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000901012	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00080024	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323218	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23446848710528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23446629115904 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23446427789440 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23446226462976 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23446025136512 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23445823810048 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23445622483584 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23445421157120 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23445219830656 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23445018504192 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23444817177728 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23444615851264 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23444414524800 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23444213198336 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23444011871872 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23443810545408 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23443609218944 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23443407892480 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23443206566016 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23443005239552 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23442803913088 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23442602586624 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23442401260160 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23442199933696 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23441998607232 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23441797280768 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23441595954304 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23441394627840 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23441193301376 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23440991974912 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23440790648448 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23440589321984 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23440387991424 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23440186664960 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23439985338496 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23439784012032 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23439582685568 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23439381359104 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23439180032640 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23438978706176 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23438777379712 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23438576053248 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23438374726784 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23438173400320 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23437972073856 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23437770747392 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23437569420928 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23437368094464 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23437166768000 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23436965441536 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23436764115072 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23436562788608 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23436361462144 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23436160135680 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23435958809216 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23435757482752 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23435556156288 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23435354829824 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23435153503360 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23434952176896 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23434750850432 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23434549523968 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23434348197504 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23446743049984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23446736459520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7300, cols: 146, reductionFactor: 37, colBlockingSize: 12)                                 	 2.51645   	 1300      	 165.118   	 0         	 4.49283   	 36.7515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 146)                                                                               	 1.76521   	 700       	 8.63888   	 0         	 0.203333  	 42.4863   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 146)	 1.23834   	 700       	 96.6919   	 0         	 7.56522   	 12.7811   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 146)                          	 1.09588   	 700       	 198.789   	 0         	 11.0015   	 18.0693   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 146, r2: 146, leftOrthog: 1)                      	 1.08036   	 600       	 172.838   	 0         	 14.3953   	 12.0066   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 146)                        	 0.950817  	 600       	 196.387   	 0         	 10.8685   	 18.0693   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 146)                                                                                	 0.601786  	 900       	 6.2058    	 0         	 0.766845  	 8.09263   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7300, Xcols: 146, r: 146, streamingCols: 0)                                 	 0.42828   	 700       	 254.331   	 0         	 28.0112   	 9.0796    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 146, reductionFactor: 37, colBlockingSize: 12)                                 	 0.330896  	 200       	 66.1601   	 0         	 1.86798   	 35.4181   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7300, m: 146)                                                                        	 0.224567  	 700       	 0         	 0         	 53.1554   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 146, m: 7300)                                                                                 	 0.217018  	 700       	 0         	 0         	 55.0045   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 50) 	 0.0871208 	 100       	 67.24     	 0         	 8.7979    	 7.64273   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 146, r2: 146, leftOrthog: 1)                      	 0.078075  	 100       	 136.51    	 0         	 11.6568   	 11.7107   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 146)                                                                                	 0.076413  	 100       	 3.34367   	 0         	 0.179551  	 18.6224   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 96)                                                                                                         	 0.0695987 	 808       	 0         	 0         	 85.5939   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 50)                           	 0.0636147 	 100       	 167.54    	 0         	 18.0851   	 9.26396   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 50, n: 50, r2: 146)                         	 0.059899  	 100       	 177.933   	 0         	 19.207    	 9.26396   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0586802 	 100       	 62.2015   	 0         	 14.9965   	 4.14773   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 50)                         	 0.0548333 	 100       	 194.371   	 0         	 10.9615   	 17.7322   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.043036  	 100       	 2.03318   	 0         	 0.140348  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 146, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0398438 	 200       	 10.989    	 0         	 1.14913   	 9.56288   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0346154 	 100       	 108.294   	 0         	 8.49334   	 12.7505   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 146, r: 146, streamingCols: 0)                                 	 0.0317363 	 100       	 167.915   	 0         	 18.6703   	 8.99369   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 146, fromLeft: 1)                              	 0.0152728 	 800       	 0         	 0         	 17.8648   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 146)                                                                        	 0.009584  	 100       	 0         	 0         	 60.9349   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 146, m: 2500)                                                                                 	 0.00857436	 100       	 0         	 0         	 68.1101   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 1)  	 0.00540419	 100       	 0.270161  	 0         	 2.16158   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 2, r2: 1)                              	 0.00430639	 100       	 0.678062  	 0         	 4.06875   	 0.166651  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 146, r: 50, streamingCols: 50)                                   	 0.00318836	 100       	 3.92051   	 0         	 1.5682    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 146)  	 0.00294201	 100       	 72.4538   	 0         	 9.76637   	 7.4187    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 146, leftOrthog: 1)                         	 0.00237905	 100       	 30.6845   	 0         	 9.04562   	 3.39219   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 146, r2: 146)                            	 0.00197362	 100       	 108.004   	 0         	 14.5584   	 7.4187    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000944043	 100       	 26.4818   	 0         	 6.35564   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 146)                                                                          	 0.000938487	 100       	 0         	 0         	 12.4456   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000882616	 100       	 0.566498  	 0         	 2.26599   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 146)                            	 0.000782027	 100       	 0         	 0         	 14.9355   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 50, fromLeft: 1)                               	 0.000657725	 100       	 0         	 0         	 17.7582   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 146)                                                                                                         	 0.000549044	 100       	 0         	 0         	 21.2733   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                          	 0.000526638	 101       	 0         	 0         	 14.7289   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00048545	 100       	 0         	 0         	 8.23978   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 1)                                                                                                          	 0.000445301	 101       	 0         	 0         	 17.4192   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323268	 100       	 0.773352  	 0         	 12.3736   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.0629   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.0629   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.58693   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.58563   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.3619    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.12578   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.92181   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.88466   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.52994   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.39337   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.33381   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.2195    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.16578   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.06649   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.601786  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.463205  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.23509   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.226078  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0711197 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0497396 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0159305 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0137736 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00602919	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00152033	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000882616	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000782027	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323268	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22843018647424 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22842783557632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22842582231168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22842380904704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22842179578240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22841978251776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22841776925312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22841575598848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22841374272384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22841172945920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22840971619456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22840770292992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22840568966528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22840367640064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22840166313600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22839964987136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22839763660672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22839562334208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22839361007744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22839159681280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22838958354816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22838757028352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22838555701888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22838354375424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22838153048960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22837951722496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22837750396032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22837549069568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22837347743104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22837146416640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22836945090176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22836743763712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22836542433152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22836341106688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22836139780224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22835938453760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22835737127296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22835535800832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22835334474368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22835133147904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22834931821440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22834730494976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22834529168512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22834327842048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22834126515584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22833925189120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22833723862656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22833522536192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22833321209728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22833119883264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22832918556800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22832717230336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22832515903872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22832314577408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22832113250944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22831911924480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22831710598016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22831509271552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22831307945088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22831106618624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22830905292160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22830703965696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22830502639232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22842912986880 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22842906396416 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7350, cols: 147, reductionFactor: 37, colBlockingSize: 12)                                 	 2.53411   	 1300      	 167.36    	 0         	 4.52286   	 37.0032   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 147)                                                                               	 1.81197   	 700       	 8.59006   	 0         	 0.200806  	 42.778    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 147)	 1.23234   	 700       	 99.4401   	 0         	 7.71385   	 12.8911   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 147)                          	 1.08934   	 700       	 204.12    	 0         	 11.2197   	 18.1931   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 147, r2: 147, leftOrthog: 1)                      	 1.08529   	 600       	 175.613   	 0         	 14.5269   	 12.0888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 147)                        	 0.969903  	 600       	 196.506   	 0         	 10.8011   	 18.1931   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 147)                                                                                	 0.612298  	 900       	 6.22545   	 0         	 0.764028  	 8.14819   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7350, Xcols: 147, r: 147, streamingCols: 0)                                 	 0.436785  	 700       	 254.538   	 0         	 27.8433   	 9.14179   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 147, reductionFactor: 37, colBlockingSize: 12)                                 	 0.333747  	 200       	 66.4966   	 0         	 1.86541   	 35.6472   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 147, m: 7350)                                                                                 	 0.21989   	 700       	 0         	 0         	 55.0323   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7350, m: 147)                                                                        	 0.213511  	 700       	 0         	 0         	 56.6764   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 50) 	 0.0856538 	 100       	 69.5182   	 0         	 9.06252   	 7.67095   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 147)                                                                                	 0.0784678 	 100       	 3.27841   	 0         	 0.175868  	 18.6413   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 97)                                                                                                         	 0.0773097 	 808       	 0         	 0         	 78.6703   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 147, r2: 147, leftOrthog: 1)                      	 0.0768257 	 100       	 140.637   	 0         	 11.9306   	 11.7879   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 50)                           	 0.0672136 	 100       	 160.749   	 0         	 17.3215   	 9.2803    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 50, n: 50, r2: 147)                         	 0.061619  	 100       	 175.344   	 0         	 18.8942   	 9.2803    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0604978 	 100       	 60.746    	 0         	 14.6452   	 4.14786   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 50)                         	 0.0541211 	 100       	 199.636   	 0         	 11.1839   	 17.8502   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0457172 	 100       	 1.91394   	 0         	 0.132116  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 147, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0431678 	 200       	 10.2822   	 0         	 1.07336   	 9.5795    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0345996 	 100       	 109.086   	 0         	 8.55502   	 12.7511   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 147, r: 147, streamingCols: 0)                                 	 0.0320427 	 100       	 168.596   	 0         	 18.6203   	 9.0544    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 147, fromLeft: 1)                              	 0.0141289 	 800       	 0         	 0         	 19.5766   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 147, m: 2500)                                                                                 	 0.00892592	 100       	 0         	 0         	 65.8755   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 147)                                                                        	 0.0086272 	 100       	 0         	 0         	 68.1566   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 1)  	 0.00743438	 100       	 0.19773   	 0         	 1.58206   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 2, r2: 1)                              	 0.00424086	 100       	 0.693256  	 0         	 4.15991   	 0.166652  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 147)  	 0.00324191	 100       	 66.6551   	 0         	 8.9599    	 7.43927   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 147, r: 50, streamingCols: 50)                                   	 0.00324172	 100       	 3.85597   	 0         	 1.54239   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 147, leftOrthog: 1)                         	 0.00274431	 100       	 26.7827   	 0         	 7.88542   	 3.39649   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 147, r2: 147)                            	 0.00220104	 100       	 98.1761   	 0         	 13.197    	 7.43927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000949496	 100       	 26.3298   	 0         	 6.31914   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 147)                            	 0.000866474	 100       	 0         	 0         	 13.5722   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000805029	 100       	 0.621096  	 0         	 2.48438   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 147)                                                                          	 0.000627631	 100       	 0         	 0         	 18.7371   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 50, fromLeft: 1)                               	 0.000613704	 100       	 0         	 0         	 19.1623   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                          	 0.000561761	 101       	 0         	 0         	 13.9518   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 147)                                                                                                         	 0.000548139	 100       	 0         	 0         	 21.4544   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000506125	 100       	 0         	 0         	 7.90319   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 1)                                                                                                          	 0.000438466	 101       	 0         	 0         	 17.875    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000328463	 100       	 0.761121  	 0         	 12.1779   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.1744   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.1744   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.686     	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.68477   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.42745   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.14316   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.94562   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.93616   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.53455   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.41229   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.32867   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.22536   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.163     	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.08659   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.612298  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.472069  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.229322  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.222766  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0788581 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0489127 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0147426 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0120489 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0066564 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00144242	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000866474	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000805029	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328463	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22798221686656 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22798021945344 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22797820618880 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22797619292416 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22797417965952 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22797216639488 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22797015313024 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22796813986560 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22796612660096 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22796411333632 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22796210007168 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22796008680704 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22795807354240 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22795606027776 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22795404701312 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22795203374848 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22795002048384 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22794800721920 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22794599395456 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22794398068992 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22794196742528 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22793995416064 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22793794089600 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22793592763136 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22793391436672 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22793190110208 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22792988783744 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22792787457280 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22792586130816 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22792384804352 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22792183477888 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22791982151424 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22791780820864 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22791579494400 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22791378167936 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22791176841472 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22790975515008 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22790774188544 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22790572862080 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22790371535616 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22790170209152 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22789968882688 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22789767556224 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22789566229760 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22789364903296 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22789163576832 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22788962250368 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22788760923904 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22788559597440 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22788358270976 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22788156944512 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22787955618048 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22787754291584 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22787552965120 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22787351638656 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22787150312192 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22786948985728 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22786747659264 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22786546332800 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22786345006336 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22786143679872 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22785942353408 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22785741026944 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22798116026112 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22798109435648 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7400, cols: 148, reductionFactor: 37, colBlockingSize: 12)                                 	 2.57395   	 1300      	 168.155   	 0         	 4.51364   	 37.2549   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 148)                                                                               	 1.79734   	 700       	 8.83796   	 0         	 0.205201  	 43.0697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 148)	 1.27012   	 700       	 98.7292   	 0         	 7.59372   	 13.0014   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 148)                          	 1.12352   	 700       	 201.978   	 0         	 11.0269   	 18.3168   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 148, r2: 148, leftOrthog: 1)                      	 1.12158   	 600       	 173.423   	 0         	 14.2488   	 12.1711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 148)                        	 0.960555  	 600       	 202.495   	 0         	 11.0551   	 18.3168   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 148)                                                                                	 0.60455   	 900       	 6.43479   	 0         	 0.784372  	 8.20374   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7400, Xcols: 148, r: 148, streamingCols: 0)                                 	 0.437742  	 700       	 259.2     	 0         	 28.1617   	 9.20398   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 148, reductionFactor: 37, colBlockingSize: 12)                                 	 0.339138  	 200       	 66.3329   	 0         	 1.84894   	 35.8761   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 148, m: 7400)                                                                                 	 0.248709  	 700       	 0         	 0         	 49.3196   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7400, m: 148)                                                                        	 0.231774  	 700       	 0         	 0         	 52.9233   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 50) 	 0.0886629 	 100       	 68.2585   	 0         	 8.86594   	 7.69896   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 148)                                                                                	 0.078245  	 100       	 3.31012   	 0         	 0.177392  	 18.6599   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 148, r2: 148, leftOrthog: 1)                      	 0.0777761 	 100       	 140.814   	 0         	 11.868    	 11.8651   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 98)                                                                                                         	 0.0760909 	 808       	 0         	 0         	 81.5869   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 50)                           	 0.0648736 	 100       	 168.82    	 0         	 18.1596   	 9.29648   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 50, n: 50, r2: 148)                         	 0.0619702 	 100       	 176.73    	 0         	 19.0104   	 9.29648   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0605995 	 100       	 61.0566   	 0         	 14.7196   	 4.14798   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 50)                         	 0.0517006 	 100       	 211.835   	 0         	 11.7895   	 17.9681   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0434493 	 100       	 2.01384   	 0         	 0.139013  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 148, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0417525 	 200       	 10.7759   	 0         	 1.12296   	 9.59596   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0337899 	 100       	 112.46    	 0         	 8.8192    	 12.7517   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 148, r: 148, streamingCols: 0)                                 	 0.0324377 	 100       	 168.816   	 0         	 18.5205   	 9.1151    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 148, fromLeft: 1)                              	 0.0141844 	 800       	 0         	 0         	 19.7662   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 148, m: 2500)                                                                                 	 0.0102613 	 100       	 0         	 0         	 57.6924   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 148)                                                                        	 0.00823504	 100       	 0         	 0         	 71.8879   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 1)  	 0.00534905	 100       	 0.276685  	 0         	 2.21378   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 2, r2: 1)                              	 0.00449183	 100       	 0.658974  	 0         	 3.9542    	 0.166652  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 148, r: 50, streamingCols: 50)                                   	 0.00311341	 100       	 4.01489   	 0         	 1.60595   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 148)  	 0.00308937	 100       	 70.9012   	 0         	 9.50459   	 7.45968   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 148, leftOrthog: 1)                         	 0.00256982	 100       	 28.7958   	 0         	 8.46752   	 3.40074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 148, r2: 148)                            	 0.0020782 	 100       	 105.399   	 0         	 14.1292   	 7.45968   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000929485	 100       	 26.8966   	 0         	 6.45519   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000873177	 100       	 0.572622  	 0         	 2.29049   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 148)                            	 0.000824763	 100       	 0         	 0         	 14.3556   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                          	 0.000736563	 101       	 0         	 0         	 10.7505   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 148)                                                                          	 0.000685159	 100       	 0         	 0         	 17.2807   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 50, fromLeft: 1)                               	 0.000629654	 100       	 0         	 0         	 18.804    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 148)                                                                                                         	 0.000560095	 100       	 0         	 0         	 21.1393   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000499211	 100       	 0         	 0         	 8.01264   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 1)                                                                                                          	 0.000448211	 101       	 0         	 0         	 17.6667   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000328902	 100       	 0.760105  	 0         	 12.1617   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.3431   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.3431   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.75874   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.75744   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.47771   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.21257   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.98863   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.91903   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.56415   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.42574   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.36722   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.26252   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.19496   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.07515   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.60455   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.473293  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.25947   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.240694  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0778358 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.050215  	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.014814  	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0143664 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00708324	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00145131	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000873177	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000824763	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328902	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22684702984064 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22684473747456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22684272420992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22684071094528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22683869768064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22683668441600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22683467115136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22683265788672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22683064462208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22682863135744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22682661809280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22682460482816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22682259156352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22682057829888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22681856503424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22681655176960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22681453850496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22681252524032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22681051197568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22680849871104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22680648544640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22680447218176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22680245891712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22680044565248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22679843238784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22679641912320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22679440585856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22679239259392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22679037932928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22678836606464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22678635280000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22678433953536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22678232622976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22678031296512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22677829970048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22677628643584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22677427317120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22677225990656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22677024664192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22676823337728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22676622011264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22676420684800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22676219358336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22676018031872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22675816705408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22675615378944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22675414052480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22675212726016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22675011399552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22674810073088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22674608746624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22674407420160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22674206093696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22674004767232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22673803440768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22673602114304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22673400787840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22673199461376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22672998134912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22672796808448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22672595481984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22672394155520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22672192829056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22684597323520 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22684590733056 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7450, cols: 149, reductionFactor: 37, colBlockingSize: 12)                                 	 2.60418   	 1300      	 169.595   	 0         	 4.52173   	 37.5066   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 149)                                                                               	 1.8623    	 700       	 8.70371   	 0         	 0.200725  	 43.3613   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 149)	 1.28306   	 700       	 99.9948   	 0         	 7.6262    	 13.112    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 149, r2: 149, leftOrthog: 1)                      	 1.17783   	 600       	 168.511   	 0         	 13.7523   	 12.2533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 149)                          	 1.1335    	 700       	 204.284   	 0         	 11.0779   	 18.4406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 149)                        	 0.993702  	 600       	 199.735   	 0         	 10.8313   	 18.4406   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 149)                                                                                	 0.634916  	 900       	 6.25207   	 0         	 0.756973  	 8.2593    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7450, Xcols: 149, r: 149, streamingCols: 0)                                 	 0.447279  	 700       	 258.85    	 0         	 27.935    	 9.26617   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 149, reductionFactor: 37, colBlockingSize: 12)                                 	 0.343094  	 200       	 66.4572   	 0         	 1.84067   	 36.1049   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7450, m: 149)                                                                        	 0.282427  	 700       	 0         	 0         	 44.0204   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 149, m: 7450)                                                                                 	 0.225501  	 700       	 0         	 0         	 55.1331   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 50) 	 0.0902073 	 100       	 68.1818   	 0         	 8.82411   	 7.72676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 149, r2: 149, leftOrthog: 1)                      	 0.0816943 	 100       	 135.878   	 0         	 11.378    	 11.9422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 50)                           	 0.0778032 	 100       	 142.674   	 0         	 15.3207   	 9.3125    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 149)                                                                                	 0.0770297 	 100       	 3.38506   	 0         	 0.181229  	 18.6784   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 99)                                                                                                         	 0.0661738 	 808       	 0         	 0         	 95.7382   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 50, n: 50, r2: 149)                         	 0.0618088 	 100       	 179.594   	 0         	 19.2853   	 9.3125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 50)                         	 0.0562793 	 100       	 197.24    	 0         	 10.9056   	 18.086    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0558345 	 100       	 66.715    	 0         	 16.0832   	 4.14811   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 149, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0429926 	 200       	 10.607    	 0         	 1.10348   	 9.61225   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0418123 	 100       	 2.09269   	 0         	 0.144455  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0344915 	 100       	 110.916   	 0         	 8.6978    	 12.7523   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 149, r: 149, streamingCols: 0)                                 	 0.0327398 	 100       	 169.526   	 0         	 18.4754   	 9.17578   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 149, fromLeft: 1)                              	 0.0143471 	 800       	 0         	 0         	 19.807    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 149)                                                                        	 0.00934713	 100       	 0         	 0         	 63.7629   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 149, m: 2500)                                                                                 	 0.00645055	 100       	 0         	 0         	 92.3952   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 1)  	 0.00529642	 100       	 0.281322  	 0         	 2.25088   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 2, r2: 1)                              	 0.0044284 	 100       	 0.67293   	 0         	 4.03794   	 0.166652  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 149, r: 50, streamingCols: 50)                                   	 0.00318157	 100       	 3.92888   	 0         	 1.57155   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 149)  	 0.00299103	 100       	 74.2252   	 0         	 9.92326   	 7.47992   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 149, leftOrthog: 1)                         	 0.00299033	 100       	 24.9137   	 0         	 7.31693   	 3.40494   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 149, r2: 149)                            	 0.00195836	 100       	 113.366   	 0         	 15.156    	 7.47992   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00089004	 100       	 0.561773  	 0         	 2.24709   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000877961	 100       	 28.4751   	 0         	 6.83402   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 149)                            	 0.000838905	 100       	 0         	 0         	 14.209    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 149)                                                                          	 0.000635009	 100       	 0         	 0         	 18.7714   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 50, fromLeft: 1)                               	 0.000613978	 100       	 0         	 0         	 19.4144   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                          	 0.000527296	 101       	 0         	 0         	 15.1702   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 149)                                                                                                         	 0.000519022	 100       	 0         	 0         	 22.9663   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000497492	 100       	 0         	 0         	 8.04033   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 1)                                                                                                          	 0.000455333	 101       	 0         	 0         	 17.5678   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000346967	 100       	 0.72053   	 0         	 11.5285   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.6134   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.6134   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.91786   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.91653   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.61762   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.30931   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 3.02476   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.98115   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.58619   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.43975   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.38156   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.31835   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.21769   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.11267   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.634916  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.4832    	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.292409  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.232449  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0676755 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0508593 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.020359  	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.014961  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00653324	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.001505  	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00089004	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000838905	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346967	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23191848064896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23191615432704 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23191414106240 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23191212779776 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23191011453312 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23190810126848 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23190608800384 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23190407473920 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23190206147456 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23190004820992 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23189803494528 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23189602168064 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23189400841600 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23189199515136 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23188998188672 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23188796862208 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23188595535744 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23188394209280 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23188192882816 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23187991556352 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23187790229888 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23187588903424 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23187387576960 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23187186250496 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23186984924032 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23186783597568 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23186582271104 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23186380944640 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23186179618176 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23185978291712 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23185776965248 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23185575638784 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23185374308224 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23185172981760 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23184971655296 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23184770328832 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23184569002368 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23184367675904 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23184166349440 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23183965022976 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23183763696512 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23183562370048 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23183361043584 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23183159717120 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23182958390656 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23182757064192 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23182555737728 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23182354411264 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23182153084800 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23181951758336 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23181750431872 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23181549105408 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23181347778944 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23181146452480 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23180945126016 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23180743799552 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23180542473088 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23180341146624 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23180139820160 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23179938493696 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23179737167232 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23179535840768 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23179334514304 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23191742404352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23191735813888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500, cols: 150, reductionFactor: 37, colBlockingSize: 12)                                 	 2.61805   	 1300      	 172.116   	 0         	 4.55836   	 37.7583   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 150)                                                                               	 1.87211   	 700       	 8.83362   	 0         	 0.20236   	 43.653    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 150)	 1.30753   	 700       	 100.38    	 0         	 7.59142   	 13.2228   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 150, r2: 150, leftOrthog: 1)                      	 1.15464   	 600       	 175.379   	 0         	 14.2174   	 12.3355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 150)                          	 1.15208   	 700       	 205.064   	 0         	 11.0461   	 18.5644   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 150)                        	 1.02142   	 600       	 198.253   	 0         	 10.6792   	 18.5644   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 150)                                                                                	 0.642039  	 900       	 6.30802   	 0         	 0.758645  	 8.31486   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7500, Xcols: 150, r: 150, streamingCols: 0)                                 	 0.451895  	 700       	 261.399   	 0         	 28.022    	 9.32836   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 150, reductionFactor: 37, colBlockingSize: 12)                                 	 0.349408  	 200       	 66.1351   	 0         	 1.82022   	 36.3335   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7500, m: 150)                                                                        	 0.238773  	 700       	 0         	 0         	 52.7698   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 150, m: 7500)                                                                                 	 0.223521  	 700       	 0         	 0         	 56.3706   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 50) 	 0.0906498 	 100       	 68.9467   	 0         	 8.89136   	 7.75434   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 150)                                                                                	 0.0772606 	 100       	 3.39759   	 0         	 0.181723  	 18.6966   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 150, r2: 150, leftOrthog: 1)                      	 0.0758047 	 100       	 148.408   	 0         	 12.3475   	 12.0192   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 100)                                                                                                       	 0.07412   	 808       	 0         	 0         	 87.2099   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 50)                           	 0.0644652 	 100       	 174.513   	 0         	 18.7078   	 9.32836   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 50, n: 50, r2: 150)                         	 0.0615316 	 100       	 182.833   	 0         	 19.5997   	 9.32836   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0594098 	 100       	 63.1209   	 0         	 15.2164   	 4.14823   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 50)                         	 0.0563955 	 100       	 199.484   	 0         	 10.9583   	 18.2039   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0441357 	 100       	 1.98252   	 0         	 0.136851  	 14.4868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 150, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0437794 	 200       	 10.5566   	 0         	 1.09641   	 9.62838   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0379961 	 100       	 101.362   	 0         	 7.94819   	 12.7528   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 150, r: 150, streamingCols: 0)                                 	 0.0326458 	 100       	 172.304   	 0         	 18.6548   	 9.23645   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 150, fromLeft: 1)                              	 0.0144935 	 800       	 0         	 0         	 19.871    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 150, m: 2500)                                                                                 	 0.00908966	 100       	 0         	 0         	 66.009    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 150)                                                                        	 0.00878269	 100       	 0         	 0         	 68.3162   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 1)  	 0.00663008	 100       	 0.226242  	 0         	 1.81017   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 150)  	 0.00599687	 100       	 37.5196   	 0         	 5.00261   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 2, r2: 1)                              	 0.00435127	 100       	 0.689454  	 0         	 4.13709   	 0.166652  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 150)                            	 0.00353528	 100       	 0         	 0         	 3.39435   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 150, r: 50, streamingCols: 50)                                   	 0.00313125	 100       	 3.99201   	 0         	 1.59681   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 150, leftOrthog: 1)                         	 0.0026078 	 100       	 28.7599   	 0         	 8.43624   	 3.40909   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 150, r2: 150)                            	 0.00226248	 100       	 99.4485   	 0         	 13.2598   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000936754	 100       	 26.6879   	 0         	 6.4051    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000814303	 100       	 0.614022  	 0         	 2.45609   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 150)                                                                          	 0.000786165	 100       	 0         	 0         	 15.264    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 50, fromLeft: 1)                               	 0.0006224 	 100       	 0         	 0         	 19.2802   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.000551431	 101       	 0         	 0         	 14.6528   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 150)                                                                                                         	 0.000548651	 100       	 0         	 0         	 21.8718   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000488001	 100       	 0         	 0         	 8.1967    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                                                         	 0.000428375	 101       	 0         	 0         	 18.862    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000339247	 100       	 0.736926  	 0         	 11.7908   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.6479   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.6479   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.94422   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.94296   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.64948   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.27943   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 3.04923   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.9935    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.58952   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.46114   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.41081   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 1.29247   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.22316   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.14028   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.642039  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.487672  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.248342  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.233098  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0756485 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0509207 	 20        
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0157958 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0154757 	 4650      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0151159 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00672513	 6400      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00353528	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000814303	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339247	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
