[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 139929966409600 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 139929958012928 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 139929949616256 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 139929941219584 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 139929932822912 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 139929924426240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 139929916029568 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 139929430518528 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 139929422121856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 139929413725184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 139929405328512 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 139929396931840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 139929388535168 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 139929380138496 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 139928893648512 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 1
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34mRoundrobin placement triggered
	threadid 139853866145536 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 139853857752832 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 139853849220864 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 139928885253888 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 139928876861184 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 139928868337408 -> hwthread 2 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
Performance statistics:
function                                                                                                                                                                                                   	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 100, n: 50, r2: 100)                                               	 0.0879569 	 605       	 0         	 0         	 55.0269   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r2left: 100, r2right: 10)           	 0.0754397 	 600       	 0         	 0         	 76.9887   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 5000, x.r2: 100, y.r2: 10)                           	 0.0749607 	 600       	 80.042    	 0         	 35.2825   	 2.2686    
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 5000, c: 100, r2: 10)                            	 0.074142  	 600       	 80.9258   	 0         	 38.9091   	 2.07987   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1upp: 100, r1low: 10, n: 50, r2: 100)                                	 0.0387468 	 600       	 0         	 0         	 130.075   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 10, reductionFactor: 18, colBlockingSize: 12)               	 0.0264973 	 600       	 26.292    	 0         	 9.98141   	 2.6341    
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1upp: 100, r1low: 10, n: 50, r2: 10)             	 0.0174276 	 600       	 0         	 0         	 30.2968   	 0         
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 110, n: 50, r2: 10)                                             	 0.0168815 	 600       	 0         	 0         	 31.2769   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 2500, c: 100, r2: 10)                            	 0.0117154 	 120       	 51.2146   	 0         	 24.6649   	 2.07641   
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 50, n: 50, r2: 100)                                                	 0.0100934 	 121       	 0         	 0         	 47.9523   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5500, Xcols: 10, r: 10, streamingCols: 0)                	 0.00970909	 600       	 33.9888   	 0         	 54.4068   	 0.624716  
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 100, n: 50, r2: 10)                                                	 0.00944059	 600       	 0         	 0         	 50.8443   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 2500, x.r2: 100, y.r2: 10)                           	 0.00854634	 120       	 70.2055   	 0         	 31.0027   	 2.26449   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r2left: 100, r2right: 10)            	 0.00831439	 120       	 0         	 0         	 64.7744   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 10, r1_: 100, nChunks: 4, r2: 10)  	 0.00686279	 600       	 111.908   	 0         	 60.4303   	 1.85185   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double](n: 10, m: 10)                                                                        	 0.00626537	 840       	 0.178582  	 0         	 0.332494  	 0.537097  
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double](n: 100, m: 100)                                                                      	 0.00624987	 7         	 1.49336   	 0         	 0.269702  	 5.53709   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 1, n: 50, r2: 100)                                  	 0.00613342	 120       	 0         	 0         	 79.0424   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5000, cols: 100, reductionFactor: 18, colBlockingSize: 12)              	 0.00551763	 5         	 95.6529   	 0         	 3.69724   	 25.8715   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 10, reductionFactor: 18, colBlockingSize: 12)               	 0.00366721	 120       	 17.6156   	 0         	 6.70155   	 2.62858   
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 50, x.r2: 50, y.r2: 10)                              	 0.00352674	 120       	 1.70129   	 0         	 0.952722  	 1.78571   
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 51, n: 50, r2: 10)                                              	 0.00249057	 120       	 0         	 0         	 19.6582   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1upp: 50, r1low: 1, n: 50, r2: 10)               	 0.00216013	 120       	 0         	 0         	 22.6653   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 10, r1_: 10, nChunks: 4, r2: 10)   	 0.00205871	 600       	 37.305    	 0         	 33.5745   	 1.11111   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 10)                                                                                      	 0.00204108	 720       	 0         	 0         	 28.2203   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, nChunks: 4, r2: 100)	 0.001766  	 5         	 362.4     	 0         	 32.616    	 11.1111   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5000, Xcols: 100, r: 100, streamingCols: 0)              	 0.00173646	 5         	 143.971   	 0         	 23.1506   	 6.21891   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2550, Xcols: 10, r: 10, streamingCols: 0)                	 0.0014246 	 120       	 21.4797   	 0         	 34.4012   	 0.624388  
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 50, n: 50, r2: 10)                                                 	 0.00128063	 120       	 0         	 0         	 37.4817   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 100, r1low: 10, n: 50, r2: 1)                	 0.00114257	 120       	 0         	 0         	 9.2423    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 10, r1_: 50, nChunks: 4, r2: 10)   	 0.00106759	 120       	 71.938    	 0         	 41.724    	 1.72414   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 10, reductionFactor: 18, colBlockingSize: 12)                 	 0.000997211	 120       	 1.27021   	 0         	 0.577611  	 2.19907   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 100, reductionFactor: 18, colBlockingSize: 12)              	 0.000936091	 1         	 56.381    	 0         	 2.22201   	 25.3739   
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 100, n: 50, r2: 100)                                            	 0.000837073	 5         	 0         	 0         	 47.7856   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 10)                                                                                       	 0.000718982	 240       	 0         	 0         	 2.67044   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 50, r2: 10)                                                  	 0.000704005	 120       	 0         	 0         	 1.36363   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                                    	 0.000696548	 120       	 0         	 0         	 6.89113   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 10, r1_: 100, nChunks: 4, r2: 1)   	 0.000587253	 120       	 26.1557   	 0         	 37.6642   	 0.694444  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2left: 50, r2right: 1)               	 0.000574946	 120       	 0         	 0         	 8.51558   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 50, c: 50, r2: 10)                               	 0.000565569	 120       	 10.6088   	 0         	 6.78962   	 1.5625    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 10, r: 1, streamingCols: 1)                   	 0.000557026	 120       	 0.0107715 	 0         	 0.173206  	 0.0621891 
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                                       	 0.000540511	 240       	 0         	 0         	 3.55219   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 50, r2: 50)                                                  	 0.000480711	 120       	 0         	 0         	 9.98521   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                        	 0.000455738	 120       	 2.63309   	 0         	 31.5971   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                                      	 0.00045497	 120       	 0         	 0         	 21.1003   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 10)                	 0.000450802	 120       	 0         	 0         	 2.12954   	 0         
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 50, r2: 1)                                                	 0.000427735	 120       	 0         	 0         	 0.224438  	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 100, reductionFactor: 18, colBlockingSize: 12)                	 0.000357389	 1         	 2.95352   	 0         	 0.335769  	 8.7963    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 10, r1_: 10, nChunks: 4, r2: 1)    	 0.000307075	 120       	 5.00204   	 0         	 9.00366   	 0.555556  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 50, nChunks: 4, r2: 100) 	 0.000299947	 1         	 213.371   	 0         	 27.7382   	 7.69231   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 10, r1_: 1, nChunks: 4, r2: 10)    	 0.00029046	 120       	 5.28816   	 0         	 23.7967   	 0.222222  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                             	 0.000266565	 121       	 2.26962   	 0         	 36.3138   	 0.0625    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 100, r: 100, streamingCols: 0)              	 0.000262952	 1         	 95.0744   	 0         	 15.364    	 6.18812   
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 50, n: 50, r2: 100)                                             	 0.000232302	 1         	 0         	 0         	 17.219    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                              	 0.000231122	 120       	 0.259603  	 0         	 4.15365   	 0.0625    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 100, r: 50, streamingCols: 25)                	 3.6921e-05	 1         	 3.38561   	 0         	 1.35424   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, nChunks: 4, r2: 1)  	 3.4641e-05	 1         	 36.9504   	 0         	 39.9065   	 0.925926  
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 50, r2: 100)                                                 	 2.5571e-05	 1         	 0         	 0         	 3.12854   	 0         
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 50, r2: 50)                                               	 7.574e-06 	 1         	 0         	 0         	 5.28123   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                               	 5.104e-06 	 1         	 1.95925   	 0         	 7.83699   	 0.25      
Timing statistics:
function                                                                                                                                                                  	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]               	 0.627824  	 120       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::Tensor2<T>&, bool, T, int, bool) [with T = double]	 0.164891  	 847       
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>]                                       	 0.109982  	 1687      
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double]                         	 0.0870337 	 840       
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double]                     	 0.086423  	 840       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                    	 0.084329  	 840       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool) [with T = double]                                           	 0.0516447 	 4701      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double]                                      	 0.0455768 	 840       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                         	 0.0412596 	 1         
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                     	 0.0412446 	 1         
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                         	 0.0387947 	 847       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                              	 0.0379728 	 847       
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>]                                    	 0.0208767 	 847       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                          	 0.0205293 	 16        
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double]                  	 0.0200385 	 840       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                	 0.013727  	 847       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]       	 0.0132745 	 1687      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double]                                                     	 0.0125152 	 847       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                            	 0.00375555	 1320      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                                                                	 0.00227338	 4711      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]                                                        	 0.00159426	 847       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                    	 0.00114257	 120       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                   	 0.000497687	 241       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                              	 0.000455738	 120       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                     	 5.104e-06 	 1         
