[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 140680617293696 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 140680608897024 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 140680600500352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 140680592103680 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 140680378706304 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 140680370309632 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 140680361912960 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 140680353516288 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 140680345119616 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 140680336722944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 140680328326272 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 140679774727424 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 140679766330752 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 140679757934080 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 140679749537408 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 1
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34mRoundrobin placement triggered
	threadid 140495417431808 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 140495409039104 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 140495400507136 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 140679741142784 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 140679732750080 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 140679720163072 -> hwthread 2 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
Performance statistics:
function                                                                                                                                                                                                   	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4980, cols: 99, reductionFactor: 18, colBlockingSize: 12)               	 0.0670411 	 75        	 115.274   	 0         	 4.50011   	 25.6158   
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 3000, c: 150, r2: 99)                            	 0.0575181 	 75        	 116.181   	 0         	 11.0454   	 10.5185   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 249, n: 20, r2left: 150, r2right: 99)           	 0.043297  	 75        	 0         	 0         	 34.3679   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double](n: 99, m: 99)                                                                        	 0.0274245 	 125       	 5.89679   	 0         	 1.07575   	 5.48154   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 150, nChunks: 2, r2: 99)  	 0.0219237 	 75        	 321.876   	 0         	 28.091    	 11.4583   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4980, Xcols: 99, r: 99, streamingCols: 0)                	 0.0194835 	 75        	 187.886   	 0         	 30.5163   	 6.1569    
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 3000, x.r2: 150, y.r2: 99)                           	 0.0181077 	 75        	 369.042   	 0         	 25.2439   	 14.619    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1upp: 150, r1low: 99, n: 20, r2: 150)                                	 0.0174397 	 75        	 0         	 0         	 41.1818   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 150, n: 20, r2: 150)                                               	 0.0133761 	 78        	 0         	 0         	 41.9853   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, nChunks: 2, r2: 99)   	 0.0119223 	 75        	 390.649   	 0         	 39.4595   	 9.9       
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 249, n: 20, r2: 99)                                             	 0.011879  	 75        	 0         	 0         	 49.8042   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double](n: 150, m: 150)                                                                      	 0.010013  	 5         	 2.24709   	 0         	 0.27025   	 8.31486   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 420, cols: 99, reductionFactor: 18, colBlockingSize: 12)                	 0.00888504	 25        	 24.4518   	 0         	 1.15657   	 21.1416   
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 150, n: 20, r2: 99)                                                	 0.00679294	 75        	 0         	 0         	 52.4663   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 150, reductionFactor: 18, colBlockingSize: 12)              	 0.00619091	 3         	 69.0528   	 0         	 1.83172   	 37.6984   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 20, r2: 99)                                                                                      	 0.00580756	 100       	 0         	 0         	 54.0041   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1upp: 150, r1low: 99, n: 20, r2: 99)             	 0.00552051	 75        	 0         	 0         	 107.168   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 420, Xcols: 99, r: 99, streamingCols: 0)                 	 0.00387184	 25        	 26.5792   	 0         	 4.54877   	 5.84317   
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 400, c: 150, r2: 99)                             	 0.0028354 	 25        	 104.747   	 0         	 10.8662   	 9.63973   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 20, cols: 99, reductionFactor: 18, colBlockingSize: 12)                 	 0.00257161	 25        	 4.02296   	 0         	 0.916235  	 4.39076   
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 400, x.r2: 150, y.r2: 99)                            	 0.00199656	 25        	 148.756   	 0         	 11.4647   	 12.9751   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 20, nChunks: 2, r2: 99)   	 0.00156841	 25        	 199.968   	 0         	 52.1129   	 3.83721   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, nChunks: 2, r2: 150)	 0.00147961	 3         	 437.955   	 0         	 29.197    	 15        
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 150, nChunks: 2, r2: 1)   	 0.00135227	 25        	 17.5705   	 0         	 36.3195   	 0.483776  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3000, Xcols: 150, r: 150, streamingCols: 0)              	 0.00108142	 3         	 187.254   	 0         	 20.2235   	 9.25926   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 400, cols: 150, reductionFactor: 18, colBlockingSize: 12)               	 0.000982167	 1         	 19.345    	 0         	 0.671983  	 28.7879   
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 21, n: 20, r2: 99)                                              	 0.000723752	 25        	 0         	 0         	 22.9802   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 21, n: 20, r2left: 150, r2right: 99)            	 0.000696231	 25        	 0         	 0         	 60.0835   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1upp: 20, r1low: 1, n: 20, r2: 99)               	 0.000665874	 25        	 0         	 0         	 24.9777   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 20, x.r2: 20, y.r2: 99)                              	 0.000647261	 25        	 3.05904   	 0         	 1.34722   	 2.27064   
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 20, n: 20, r2: 150)                                                	 0.00062437	 26        	 0         	 0         	 39.9763   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1upp: 20, r1low: 1, n: 20, r2: 150)                                  	 0.000586641	 25        	 0         	 0         	 41.9337   	 0         
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 150, n: 20, r2: 150)                                            	 0.000578424	 3         	 0         	 0         	 37.3428   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 20, cols: 150, reductionFactor: 18, colBlockingSize: 12)                	 0.000567114	 1         	 1.67515   	 0         	 0.359716  	 4.65686   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, nChunks: 2, r2: 1)    	 0.000501261	 25        	 31.2843   	 0         	 65.0966   	 0.480583  
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 20, n: 20, r2: 99)                                                 	 0.000435418	 25        	 0         	 0         	 36.3788   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 150, r1low: 99, n: 20, r2: 1)                	 0.00036758	 25        	 0         	 0         	 5.41923   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 400, Xcols: 150, r: 150, streamingCols: 0)               	 0.000305598	 1         	 29.4505   	 0         	 3.43589   	 8.57143   
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 20, c: 20, r2: 99)                               	 0.000263506	 25        	 7.51406   	 0         	 4.81203   	 1.56151   
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 20, r2: 20)                                                  	 0.000229819	 25        	 0         	 0         	 0.6962    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 1, nChunks: 2, r2: 99)    	 0.000180827	 25        	 86.7216   	 0         	 352.142   	 0.246269  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 20, r2: 20)                                    	 0.000174117	 25        	 0         	 0         	 0.918922  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1upp: 1, r1low: 0, n: 20, r2: 99)                	 0.000169714	 25        	 0         	 0         	 4.66667   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 20, r2: 1)                                                                                       	 0.000164534	 50        	 0         	 0         	 9.62719   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 20, r2: 99)                                                                                       	 0.000152661	 50        	 0         	 0         	 10.3759   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 20, Xcols: 99, r: 1, streamingCols: 1)                   	 0.000145582	 25        	 0.00343449	 0         	 0.0556387 	 0.0617284 
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 20, nChunks: 2, r2: 150) 	 0.000130812	 1         	 220.163   	 0         	 52.8392   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 20, r2left: 20, r2right: 1)               	 0.000129276	 25        	 0         	 0         	 1.29955   	 0         
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 20, n: 20, r2: 150)                                             	 0.000114607	 1         	 0         	 0         	 8.37645   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 150, n: 20, r2: 1)                                                                                      	 0.00010722	 25        	 0         	 0         	 11.1919   	 0         
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 20, r2: 1)                                                	 0.000101547	 25        	 0         	 0         	 0.0787813 	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 20, r2: 99)                                                  	 9.7988e-05	 25        	 0         	 0         	 8.08262   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, nChunks: 2, r2: 1)  	 7.5721e-05	 1         	 19.0172   	 0         	 39.0486   	 0.487013  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 20, r2: 1)                                                        	 7.2882e-05	 25        	 2.05812   	 0         	 24.6975   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 20, r2: 1)                                                                             	 5.9702e-05	 26        	 1.30649   	 0         	 20.9038   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 20, r2: 1)                                                                              	 4.9095e-05	 25        	 1.00825   	 0         	 16.132    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 20, r2: 150)                                                 	 2.2939e-05	 1         	 0         	 0         	 2.09251   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 20, Xcols: 150, r: 20, streamingCols: 16)                	 1.2907e-05	 1         	 0.619819  	 0         	 0.619819  	 1         
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 20, r2: 20)                                               	 1.0174e-05	 1         	 0         	 0         	 0.629054  	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 20, r2: 1)                                                                               	 5.613e-06 	 1         	 1.06895   	 0         	 4.27579   	 0.25      
Timing statistics:
function                                                                                                                                                                  	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]               	 0.493476  	 25        
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::Tensor2<T>&, bool, T, int, bool) [with T = double]	 0.262014  	 130       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                         	 0.0864609 	 130       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                              	 0.086238  	 130       
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double]                     	 0.060617  	 125       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                    	 0.0441225 	 125       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool) [with T = double]                                           	 0.0437301 	 842       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]       	 0.0391349 	 255       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double]                                                     	 0.0374375 	 130       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                         	 0.0317328 	 1         
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                     	 0.0317203 	 1         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                	 0.0249008 	 130       
<PITTS::Tensor3<double>> :: void PITTS::unfold_left(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>]                                       	 0.0215796 	 255       
<PITTS::Tensor3<double>> :: void PITTS::internal::xtryz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double]                         	 0.0207515 	 125       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double]                                      	 0.0182005 	 125       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                          	 0.0179993 	 12        
<PITTS::Tensor3<double>> :: void PITTS::fold_left(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>]                                    	 0.0134075 	 130       
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double]                  	 0.00635609	 125       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                            	 0.00623198	 225       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]                                                        	 0.00189905	 130       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                                                                	 0.000623097	 798       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                    	 0.00036758	 25        
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                   	 0.000108797	 51        
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                              	 7.2882e-05	 25        
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                     	 5.613e-06 	 1         
