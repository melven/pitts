[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 139648419760000 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 139648411363328 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 139648402966656 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 139648394569984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 139648177269120 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 139648168872448 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 139648160475776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 139648152079104 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 139648143682432 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 139648135285760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 139648126889088 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 139647573290240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 139647564893568 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 139647556496896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 139647548100224 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 1
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34mRoundrobin placement triggered
	threadid 140420658272000 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 140420649879296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 140420641347328 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: OpenMP #threads: 16
[1;34mRoundrobin placement triggered
	threadid 139647539705600 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 139647531312896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 139647522920192 -> hwthread 2 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
Performance statistics:
function                                                                                                                                                                                              	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 30, nChunks: 2, r: 30, r2: 80)	 0.146849  	 1050      	 32.9481   	 0         	 8.23702   	 4         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 30, c: 80, r2: 1600)                        	 0.100625  	 1050      	 80.1394   	 0         	 18.8995   	 4.24028   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2200, cols: 30, reductionFactor: 18, colBlockingSize: 12)          	 0.0910858 	 1050      	 48.1853   	 0         	 6.16957   	 7.81016   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 80, r1low: 30, n: 20, r2: 110)          	 0.0784404 	 1050      	 0         	 0         	 51.8304   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 30, nChunks: 2, r: 30, r2: 30)	 0.06182   	 1050      	 29.3497   	 0         	 9.78325   	 3         
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 80, n: 20, r2: 80)                                           	 0.0539916 	 1057      	 0         	 0         	 40.0939   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::xytrz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](x.r1: 30, y.r1: 80, r2: 1600)                       	 0.0515046 	 1050      	 156.569   	 0         	 29.0957   	 5.38117   
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat3(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 30, n: 20, r2left: 80, r2right: 30)      	 0.0334874 	 1050      	 0         	 0         	 33.111    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double](n: 30, m: 30)                                                                   	 0.0320783 	 1350      	 1.51504   	 0         	 0.919125  	 1.64835   
<PITTS::Tensor3<double>> :: void PITTS::fold_right(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 30, n: 20, r2: 110)                                       	 0.0310668 	 1050      	 0         	 0         	 35.6909   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2200, Xcols: 30, r: 30, streamingCols: 0)           	 0.029315  	 1050      	 70.9194   	 0         	 37.9526   	 1.86863   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 20, r2left: 80, r2right: 30)                          	 0.0254243 	 1050      	 0         	 0         	 100.439   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 30, n: 20, r2: 80)                                           	 0.0202064 	 1050      	 0         	 0         	 39.9082   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 30, n: 20, r2: 30)                                           	 0.0168571 	 1050      	 0         	 0         	 17.939    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 30, nChunks: 2, r: 30, r2: 20)	 0.00963655	 150       	 17.9317   	 0         	 7.17269   	 2.5       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 420, cols: 30, reductionFactor: 18, colBlockingSize: 12)           	 0.00716765	 150       	 16.7      	 0         	 2.26016   	 7.38889   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 20, r2: 30)                                                                                 	 0.00638581	 1200      	 0         	 0         	 54.12     	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double](n: 80, m: 80)                                                                   	 0.00572791	 9         	 1.07264   	 0         	 0.24235   	 4.426     
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 30, c: 80, r2: 400)                         	 0.00562817	 150       	 51.1711   	 0         	 12.4516   	 4.10959   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, nChunks: 2, r: 80, r2: 80)	 0.0046737 	 7         	 49.078    	 0         	 6.13476   	 8         
<PITTS::Tensor3<double>> :: void PITTS::internal::xytrz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](x.r1: 30, y.r1: 80, r2: 400)                        	 0.00402487	 150       	 71.5552   	 0         	 13.834    	 5.17241   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 1600, cols: 80, reductionFactor: 18, colBlockingSize: 12)          	 0.00373688	 7         	 40.4949   	 0         	 2.01409   	 20.1058   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 420, Xcols: 30, r: 30, streamingCols: 0)            	 0.00334606	 150       	 16.9453   	 0         	 9.19887   	 1.84211   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 20, cols: 30, reductionFactor: 18, colBlockingSize: 12)            	 0.00282865	 150       	 2.0151    	 0         	 0.636346  	 3.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 30, nChunks: 2, r: 30, r2: 1) 	 0.00279343	 150       	 3.09297   	 0         	 12.9905   	 0.238095  
<PITTS::Tensor3<double>> :: void PITTS::fold_right(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 30, n: 20, r2: 21)                                        	 0.00266717	 150       	 0         	 0         	 11.3378   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 80, n: 20, r2: 20)                                           	 0.00244716	 151       	 0         	 0         	 31.5925   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 80, r1low: 30, n: 20, r2: 21)           	 0.00234107	 150       	 0         	 0         	 47.363    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 20, r2left: 20, r2right: 1)                           	 0.00232761	 150       	 0         	 0         	 33.82     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, nChunks: 2, r: 30, r2: 80) 	 0.00215455	 150       	 10.6936   	 0         	 23.3478   	 0.458015  
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 30, n: 20, r2: 20)                                           	 0.00210315	 150       	 0         	 0         	 13.6937   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, nChunks: 2, r: 80, r2: 20)	 0.00190173	 1         	 4.30766   	 0         	 1.18461   	 3.63636   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 1600, Xcols: 80, r: 80, streamingCols: 0)           	 0.00177531	 7         	 40.376    	 0         	 8.17613   	 4.93827   
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat3(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 30, n: 20, r2left: 20, r2right: 1)       	 0.00149925	 150       	 0         	 0         	 20.1701   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::xytrz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](x.r1: 30, y.r1: 20, r2: 20)                         	 0.00119891	 150       	 3.00272   	 0         	 1.60145   	 1.875     
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 20, r1low: 1, n: 20, r2: 1)             	 0.00119202	 150       	 0         	 0         	 0.845626  	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 30, n: 20, r2: 1)                                            	 0.00116811	 300       	 0         	 0         	 2.46553   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 20, n: 20, r2: 1)                                            	 0.0010393 	 150       	 0         	 0         	 0.923699  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 20, r2left: 80, r2right: 30)         	 0.00102709	 150       	 0         	 0         	 5.14074   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double](r1: 20, n: 20, r2left: 1, r2right: 0)                            	 0.00100375	 150       	 0         	 0         	 0.956413  	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 20, Xcols: 30, r: 1, streamingCols: 1)              	 0.000998651	 150       	 0.00300405	 0         	 0.0486656 	 0.0617284 
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, nChunks: 2, r: 30, r2: 30) 	 0.00086773	 150       	 9.95701   	 0         	 22.5692   	 0.441176  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 20, r2: 30)                                                                                  	 0.00078832	 300       	 0         	 0         	 3.65334   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 20, r2: 1)                                                                                  	 0.000724953	 300       	 0         	 0         	 3.97267   	 0         
<PITTS::Tensor3<double>> :: void PITTS::fold_right(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 1, n: 20, r2: 1)                                          	 0.000571214	 150       	 0         	 0         	 0.0840316 	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat3(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 30, n: 20, r2left: 1, r2right: 0)        	 0.000530456	 150       	 0         	 0         	 2.71465   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 20, r2: 80)                                                    	 0.000529501	 150       	 0.906514  	 0         	 10.8782   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 20, r2: 80)                                                                                  	 0.000523312	 150       	 0         	 0         	 7.33788   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double](r1: 30, c: 20, r2: 20)                          	 0.000473997	 150       	 7.59498   	 0         	 5.56966   	 1.36364   
<PITTS::Tensor3<double>> :: void PITTS::fold_right(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 80, n: 20, r2: 80)                                        	 0.000429142	 7         	 0         	 0         	 33.4062   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 400, cols: 80, reductionFactor: 18, colBlockingSize: 12)           	 0.000359463	 1         	 15.0348   	 0         	 0.854608  	 17.5926   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 20, r2: 80)                                                                         	 0.000334118	 151       	 0.723098  	 0         	 11.5696   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 20, r2: 30)                                                                         	 0.000312597	 150       	 0.287911  	 0         	 4.60657   	 0.0625    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 20, cols: 80, reductionFactor: 18, colBlockingSize: 12)            	 0.000244747	 1         	 1.10409   	 0         	 0.261495  	 4.22222   
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 30, n: 20, r2: 0)                                            	 0.00018776	 150       	 0         	 0         	 0         	 -nan      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 400, Xcols: 80, r: 80, streamingCols: 0)            	 0.00016706	 1         	 15.3238   	 0         	 3.21801   	 4.7619    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, nChunks: 2, r: 80, r2: 80) 	 9.2185e-05	 1         	 4.44324   	 0         	 9.3308    	 0.47619   
<PITTS::Tensor3<double>> :: void PITTS::fold_right(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 80, n: 20, r2: 20)                                        	 7.3787e-05	 1         	 0         	 0         	 6.93889   	 0         
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>](r1: 80, n: 20, r2: 1)                                            	 2.9724e-05	 1         	 0         	 0         	 0.861257  	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 20, Xcols: 80, r: 20, streamingCols: 15)            	 2.4903e-05	 1         	 0.321246  	 0         	 0.321246  	 1         
<PITTS::Tensor3<double>> :: void PITTS::fold_right(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>](r1: 20, n: 20, r2: 1)                                         	 1.1899e-05	 1         	 0         	 0         	 0.53786   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 20, r2: 80)                                                                           	 5.631e-06 	 1         	 0.568283  	 0         	 2.27313   	 0.25      
Timing statistics:
function                                                                                                                                                                  	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_rightOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]              	 1.05373   	 150       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::Tensor2<T>&, bool, T, int, bool) [with T = double]	 0.356687  	 1359      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]       	 0.230789  	 2709      
<PITTS::Tensor3<double>> :: void PITTS::internal::t2_fnmadd(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double]                     	 0.106727  	 1350      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                         	 0.106694  	 1359      
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                              	 0.105423  	 1359      
<PITTS::Tensor3<double>> :: void PITTS::unfold_right(const Tensor3<T>&, MatrixType&) [with T = double; MatrixType = Tensor2<double>]                                      	 0.0980303 	 4059      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                    	 0.0819735 	 1350      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool) [with T = double]                                           	 0.0754521 	 6775      
<PITTS::Tensor3<double>> :: void PITTS::internal::xytrz(const PITTS::Tensor2<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor2<T>&) [with T = double]                         	 0.0567284 	 1350      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::Tensor2<T>&, bool) [with T = double]                                                     	 0.0378062 	 1359      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                	 0.035627  	 1359      
<PITTS::Tensor3<double>> :: void PITTS::internal::t2t3_concat3(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor2<T>&) [with T = double]                  	 0.0355171 	 1350      
<PITTS::Tensor3<double>> :: void PITTS::fold_right(const MatrixType&, int, Tensor3<T>&) [with T = double; MatrixType = Tensor2<double>]                                   	 0.03482   	 1359      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3_w0(const PITTS::Tensor3<T>&, int, PITTS::Tensor3<T>&) [with T = double]                                      	 0.0287557 	 1350      
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                        	 0.0235066 	 1         
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                    	 0.0234943 	 1         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                            	 0.0084224 	 1950      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                          	 0.00739828	 20        
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int) [with T = double]                                                                	 0.00324336	 7539      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int) [with T = double]                                                        	 0.00130822	 1359      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat3(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                    	 0.00102709	 150       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                   	 0.000646715	 301       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                              	 0.000529501	 150       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                     	 5.631e-06 	 1         
