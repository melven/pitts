[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22993686902656 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22993510066176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22993308739712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22993107413248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22992906086784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22992704760320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22992503433856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22992302107392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22992100780928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22991899454464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22991698128000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22991496801536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22991295475072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22991094148608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22990892822144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22990691495680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22990490169216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22990288842752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22990087516288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22989886189824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22989684863360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22989483536896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22989282210432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22989080883968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22988879557504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22988678231040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22988476904576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22988275578112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22988074251648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22987872925184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22987671598720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22987470272256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22987268941696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22987067615232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22986866288768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22986664962304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22986463635840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22986262309376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22986060982912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22985859656448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22985658329984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22985457003520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22985255677056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22985054350592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22984853024128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22984651697664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22984450371200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22984249044736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22984047718272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22983846391808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22983645065344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22983443738880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22983242412416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22983041085952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22982839759488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22982638433024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22982437106560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22982235780096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22982034453632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22981833127168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22981631800704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22981430474240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22981229147776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22993581242112 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22993402619648 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2550, m: 51)                                                                             	 1.25675   	 600       	 22.1657   	 0         	 1.00355   	 22.0873   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 2550)                                                                              	 1.02095   	 700       	 9.03436   	 0         	 1.44121   	 6.26859   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 51)                                                                             	 0.223081  	 100       	 20.404    	 0         	 0.923976  	 22.0828   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2550, m: 50)                                                                             	 0.20725   	 100       	 21.532    	 0         	 0.994163  	 21.6584   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 51)	 0.149364  	 700       	 59.7774   	 0         	 9.66183   	 6.18697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 51)                         	 0.145255  	 600       	 54.7938   	 0         	 8.68106   	 6.31188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 2500)                                                                              	 0.140655  	 100       	 9.18315   	 0         	 1.46544   	 6.26648   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 51)                           	 0.099097  	 700       	 93.7018   	 0         	 14.8453   	 6.31188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 51)                                                                               	 0.044474  	 100       	 2.00679   	 0         	 0.137609  	 14.5833   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 51, r2: 51, leftOrthog: 1)                      	 0.0302073 	 600       	 263.481   	 0         	 62.8222   	 4.19408   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 50)                         	 0.0245406 	 100       	 52.9938   	 0         	 8.39754   	 6.31063   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 50, n: 50, r2: 51)                         	 0.0212472 	 100       	 61.2081   	 0         	 9.7933    	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 50)	 0.0191925 	 100       	 65.1555   	 0         	 10.6333   	 6.1275    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 50)                           	 0.0121416 	 100       	 107.111   	 0         	 17.1378   	 6.25      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 50)                                                                                	 0.00487835	 100       	 3.51894   	 0         	 1.25452   	 2.805     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 1) 	 0.00476445	 100       	 0.107043  	 0         	 0.856677  	 0.124951  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 51, r2: 51, leftOrthog: 1)                      	 0.00475488	 100       	 273.508   	 0         	 65.2302   	 4.19298   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 50, r2: 50, leftOrthog: 1)                      	 0.00453867	 100       	 280.919   	 0         	 68.3019   	 4.1129    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 2, r2: 1)                             	 0.00408719	 100       	 0.24956   	 0         	 1.49775   	 0.166623  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 1)                                                                                                         	 0.00344009	 1010      	 0         	 0         	 0.234878  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 51) 	 0.00183641	 100       	 14.1635   	 0         	 3.3548    	 4.22185   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 51, fromLeft: 1)                              	 0.00143044	 800       	 0         	 0         	 23.2745   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00114099	 100       	 21.9108   	 0         	 5.2586    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 51, r2: 51)                            	 0.000996865	 100       	 26.0918   	 0         	 6.18017   	 4.22185   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00089155	 100       	 0.560821  	 0         	 2.24328   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 51)                           	 0.000648483	 100       	 0         	 0         	 6.29161   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                        	 0.000552679	 100       	 0         	 0         	 7.38222   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000371662	 100       	 0.672654  	 0         	 10.7625   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 51, leftOrthog: 1)                        	 0.000262255	 100       	 97.2336   	 0         	 38.5884   	 2.51976   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 50, fromLeft: 1)                              	 0.000185657	 100       	 0         	 0         	 21.976    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.5482    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.54818   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.39752   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.97096   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.96959   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.77335   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.73155   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.16649   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.192184  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.175157  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.116323  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0397631 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0105962 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00399277	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00206721	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0016161 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000962585	 4630      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00089155	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000648483	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000371662	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23136665556864 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23136451946496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23136250620032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23136049293568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23135847967104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23135646640640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23135445314176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23135243987712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23135042661248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23134841334784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23134640008320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23134438681856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23134237355392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23134036028928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23133834702464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23133633376000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23133432049536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23133230723072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23133029396608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23132828070144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23132626743680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23132425417216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23132224090752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23132022764288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23131821437824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23131620111360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23131418784896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23131217458432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23131016131968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23130814805504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23130613479040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23130412152576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23130210822016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23130009495552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23129808169088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23129606842624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23129405516160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23129204189696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23129002863232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23128801536768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23128600210304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23128398883840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23128197557376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23127996230912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23127794904448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23127593577984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23127392251520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23127190925056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23126989598592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23126788272128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23126586945664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23126385619200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23126184292736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23125982966272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23125781639808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23125580313344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23125378986880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23125177660416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23124976333952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23124775007488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23124573681024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23124372354560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23124171028096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23136559896320 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23136553305856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2600, m: 52)                                                                             	 1.28465   	 600       	 22.9849   	 0         	 1.02062   	 22.5205   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 2600)                                                                              	 1.02498   	 700       	 9.53869   	 0         	 1.4924    	 6.39152   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 52)                                                                             	 0.223048  	 100       	 21.2151   	 0         	 0.942418  	 22.5114   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2600, m: 50)                                                                             	 0.220846  	 100       	 20.6026   	 0         	 0.951071  	 21.6625   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 52)	 0.147873  	 700       	 61.6376   	 0         	 9.96381   	 6.18615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 52)                         	 0.146963  	 600       	 57.4057   	 0         	 8.91996   	 6.43564   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 2500)                                                                              	 0.137493  	 100       	 9.76504   	 0         	 1.52884   	 6.38723   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 52)                           	 0.101661  	 700       	 96.8172   	 0         	 15.0439   	 6.43564   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 52)                                                                               	 0.0443682 	 100       	 2.05102   	 0         	 0.13974   	 14.6774   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 52, r2: 52, leftOrthog: 1)                      	 0.0323228 	 600       	 261.007   	 0         	 61.0355   	 4.27632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 50)                         	 0.0244427 	 100       	 55.3131   	 0         	 8.59821   	 6.4331    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 50)	 0.0230709 	 100       	 54.2675   	 0         	 8.9394    	 6.0706    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 50, n: 50, r2: 52)                         	 0.0184675 	 100       	 73.2098   	 0         	 11.6009   	 6.31068   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 50)                           	 0.016311  	 100       	 82.8887   	 0         	 13.1347   	 6.31068   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 50, r2: 50, leftOrthog: 1)                      	 0.005792  	 100       	 224.448   	 0         	 54.558    	 4.11392   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 52, r2: 52, leftOrthog: 1)                      	 0.0053577 	 100       	 252.347   	 0         	 59.0414   	 4.27407   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 50)                                                                                	 0.00501839	 100       	 3.52037   	 0         	 1.23546   	 2.84945   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 1) 	 0.00448124	 100       	 0.116039  	 0         	 0.928672  	 0.124952  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 2, r2: 1)                             	 0.00381367	 100       	 0.272703  	 0         	 1.63664   	 0.166624  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 2)                                                                                                         	 0.00263527	 808       	 0         	 0         	 0.981153  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 52) 	 0.00177088	 100       	 15.2692   	 0         	 3.57065   	 4.27632   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 52, fromLeft: 1)                              	 0.00147521	 800       	 0         	 0         	 23.4619   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00120827	 100       	 20.6908   	 0         	 4.96579   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 52, r2: 52)                            	 0.000939027	 100       	 28.7958   	 0         	 6.73378   	 4.27632   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000855742	 100       	 0.584288  	 0         	 2.33715   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 52)                           	 0.000670812	 100       	 0         	 0         	 6.20144   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                        	 0.000520564	 100       	 0         	 0         	 7.99133   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 2)                                                                                                         	 0.000383797	 101       	 0         	 0         	 0.421056  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000365466	 100       	 0.684058  	 0         	 10.9449   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 1)                                                                                                         	 0.000321185	 101       	 0         	 0         	 0.503137  	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 52, leftOrthog: 1)                        	 0.000287356	 100       	 90.4801   	 0         	 35.6352   	 2.53906   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 50, fromLeft: 1)                              	 0.000189437	 100       	 0         	 0         	 21.9598   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.58869   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.58866   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.39132   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.0176    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.01627   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.81876   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.77292   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.16749   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.191081  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.177196  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.122725  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0437599 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0101777 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00386081	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00197589	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00166464	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00091979	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000855742	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000670812	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000365466	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22566022420352 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22565825275904 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22565623949440 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22565422622976 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22565221296512 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22565019970048 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22564818643584 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22564617317120 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22564415990656 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22564214664192 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22564013337728 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22563812011264 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22563610684800 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22563409358336 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22563208031872 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22563006705408 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22562805378944 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22562604052480 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22562402726016 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22562201399552 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22562000073088 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22561798746624 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22561597420160 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22561396093696 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22561194767232 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22560993440768 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22560792114304 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22560590787840 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22560389461376 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22560188134912 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22559986808448 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22559785481984 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22559584151424 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22559382824960 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22559181498496 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22558980172032 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22558778845568 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22558577519104 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22558376192640 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22558174866176 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22557973539712 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22557772213248 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22557570886784 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22557369560320 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22557168233856 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22556966907392 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22556765580928 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22556564254464 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22556362928000 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22556161601536 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22555960275072 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22555758948608 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22555557622144 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22555356295680 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22555154969216 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22554953642752 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22554752316288 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22554550989824 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22554349663360 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22554148336896 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22553947010432 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22553745683968 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22553544357504 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22565916759808 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22565910169344 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2650, m: 53)                                                                             	 1.24549   	 600       	 25.1019   	 0         	 1.09359   	 22.9536   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 2650)                                                                              	 1.09108   	 700       	 9.48774   	 0         	 1.45641   	 6.51446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 53)                                                                             	 0.216404  	 100       	 22.7156   	 0         	 0.990228  	 22.9398   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2650, m: 50)                                                                             	 0.195806  	 100       	 23.6842   	 0         	 1.09312   	 21.6665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 53)	 0.148127  	 700       	 62.8406   	 0         	 10.1587   	 6.18592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 53)                         	 0.146158  	 600       	 61.1163   	 0         	 9.31735   	 6.55941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 2500)                                                                              	 0.145904  	 100       	 9.55817   	 0         	 1.4687    	 6.5079    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 53)                           	 0.0979634 	 700       	 106.38    	 0         	 16.218    	 6.55941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 53)                                                                               	 0.0445113 	 100       	 2.08374   	 0         	 0.141088  	 14.7691   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 53, r2: 53, leftOrthog: 1)                      	 0.0379268 	 600       	 235.522   	 0         	 54.0368   	 4.35855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 50)                         	 0.0231638 	 100       	 60.6333   	 0         	 9.24921   	 6.55551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 50)	 0.0174252 	 100       	 71.9935   	 0         	 11.9643   	 6.01736   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 50, n: 50, r2: 53)                         	 0.0156305 	 100       	 89.8566   	 0         	 14.1058   	 6.37019   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 50)                           	 0.0116368 	 100       	 120.695   	 0         	 18.9469   	 6.37019   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 53, r2: 53, leftOrthog: 1)                      	 0.00769043	 100       	 182.63    	 0         	 41.9345   	 4.35511   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 50, r2: 50, leftOrthog: 1)                      	 0.00673899	 100       	 196.617   	 0         	 47.7816   	 4.11491   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 50)                                                                                	 0.00516728	 100       	 3.5157    	 0         	 1.21534   	 2.89277   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 1) 	 0.00447476	 100       	 0.118442  	 0         	 0.947895  	 0.124953  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 2, r2: 1)                             	 0.00382876	 100       	 0.276852  	 0         	 1.66153   	 0.166625  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 3)                                                                                                         	 0.00265367	 808       	 0         	 0         	 2.19229   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 53) 	 0.0019111 	 100       	 14.6984   	 0         	 3.39449   	 4.33007   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 53, fromLeft: 1)                              	 0.00154335	 800       	 0         	 0         	 23.2969   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00101401	 100       	 24.6545   	 0         	 5.91709   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 53, r2: 53)                            	 0.000930014	 100       	 30.2038   	 0         	 6.97538   	 4.33007   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000857641	 100       	 0.582995  	 0         	 2.33198   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 53)                           	 0.000824328	 100       	 0         	 0         	 5.14358   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                        	 0.000486361	 100       	 0         	 0         	 8.7178    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 3)                                                                                                         	 0.000405012	 101       	 0         	 0         	 0.598501  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000347518	 100       	 0.719387  	 0         	 11.5102   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 53, leftOrthog: 1)                        	 0.000334657	 100       	 79.1856   	 0         	 30.9571   	 2.55792   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 1)                                                                                                         	 0.000325956	 101       	 0         	 0         	 0.743659  	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 50, fromLeft: 1)                              	 0.000192103	 100       	 0         	 0         	 22.0715   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.51495   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.51491   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.39228   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.94764   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.94633   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.75708   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.70221   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.24215   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.185966  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.171938  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.114359  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0526909 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0105093 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00387099	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00194494	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00173545	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00131885	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000857641	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000824328	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000347518	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22407543904128 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22407314139136 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22407112812672 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22406911486208 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22406710159744 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22406508833280 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22406307506816 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22406106180352 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22405904853888 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22405703527424 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22405502200960 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22405300874496 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22405099548032 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22404898221568 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22404696895104 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22404495568640 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22404294242176 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22404092915712 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22403891589248 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22403690262784 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22403488936320 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22403287609856 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22403086283392 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22402884956928 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22402683630464 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22402482304000 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22402280977536 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22402079651072 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22401878324608 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22401676998144 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22401475671680 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22401274345216 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22401073014656 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22400871688192 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22400670361728 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22400469035264 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22400267708800 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22400066382336 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22399865055872 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22399663729408 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22399462402944 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22399261076480 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22399059750016 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22398858423552 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22398657097088 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22398455770624 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22398254444160 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22398053117696 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22397851791232 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22397650464768 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22397449138304 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22397247811840 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22397046485376 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22396845158912 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22396643832448 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22396442505984 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22396241179520 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22396039853056 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22395838526592 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22395637200128 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22395435873664 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22395234547200 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22395033220736 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22407438243584 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22407431653120 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2700, m: 54)                                                                             	 1.28197   	 600       	 25.7943   	 0         	 1.10294   	 23.3868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 2700)                                                                              	 1.08409   	 700       	 10.0997   	 0         	 1.52163   	 6.6374    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 54)                                                                             	 0.220961  	 100       	 23.0946   	 0         	 0.988301  	 23.368    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2700, m: 50)                                                                             	 0.196336  	 100       	 24.0659   	 0         	 1.11054   	 21.6703   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 54)                         	 0.153391  	 600       	 61.5933   	 0         	 9.21618   	 6.68317   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 2500)                                                                              	 0.147618  	 100       	 9.80575   	 0         	 1.47934   	 6.62849   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 54)	 0.140051  	 700       	 67.9071   	 0         	 10.9766   	 6.18652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 54)                           	 0.0989791 	 700       	 111.362   	 0         	 16.663    	 6.68317   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 54)                                                                               	 0.0443152 	 100       	 2.13245   	 0         	 0.143517  	 14.8585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 54, r2: 54, leftOrthog: 1)                      	 0.0346582 	 600       	 272.6     	 0         	 61.3855   	 4.44079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 50)                         	 0.0274824 	 100       	 53.0521   	 0         	 7.94445   	 6.67788   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 50)	 0.0203943 	 100       	 61.6838   	 0         	 10.3362   	 5.96774   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 50)                           	 0.0142509 	 100       	 102.31    	 0         	 15.9148   	 6.42857   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 50, n: 50, r2: 54)                         	 0.0137266 	 100       	 106.217   	 0         	 16.5226   	 6.42857   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 50, r2: 50, leftOrthog: 1)                      	 0.00646224	 100       	 208.906   	 0         	 50.7564   	 4.11585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 54, r2: 54, leftOrthog: 1)                      	 0.00539717	 100       	 270.142   	 0         	 60.8959   	 4.43612   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 50)                                                                                	 0.00513048	 100       	 3.63837   	 0         	 1.23965   	 2.935     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 1) 	 0.00428546	 100       	 0.126008  	 0         	 1.00843   	 0.124954  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 2, r2: 1)                             	 0.00368806	 100       	 0.292837  	 0         	 1.75746   	 0.166626  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 4)                                                                                                         	 0.00286848	 808       	 0         	 0         	 3.60553   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 54) 	 0.00178682	 100       	 16.3195   	 0         	 3.72327   	 4.38312   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 54, fromLeft: 1)                              	 0.00168291	 800       	 0         	 0         	 22.1788   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00104984	 100       	 23.8132   	 0         	 5.71518   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000872688	 100       	 0.572942  	 0         	 2.29177   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 54)                           	 0.000815888	 100       	 0         	 0         	 5.29484   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 54, r2: 54)                            	 0.000813763	 100       	 35.8335   	 0         	 8.17535   	 4.38312   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                        	 0.000509123	 100       	 0         	 0         	 8.48518   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 4)                                                                                                         	 0.000383837	 101       	 0         	 0         	 0.842024  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000359881	 100       	 0.694674  	 0         	 11.1148   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 1)                                                                                                         	 0.000325488	 101       	 0         	 0         	 0.992971  	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 54, leftOrthog: 1)                        	 0.000268874	 100       	 100.419   	 0         	 38.9774   	 2.57634   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 50, fromLeft: 1)                              	 0.000203677	 100       	 0         	 0         	 21.2101   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.59837   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.59835   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.4391    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.99064   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.98931   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.79253   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.74358   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.23684   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.19565   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.166518  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.117732  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0467865 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0100225 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00408693	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00201655	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00188658	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000966678	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000872688	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000815888	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000359881	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22878160750464 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22877948602368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22877747275904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22877545949440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22877344622976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22877143296512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22876941970048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22876740643584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22876539317120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22876337990656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22876136664192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22875935337728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22875734011264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22875532684800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22875331358336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22875130031872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22874928705408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22874727378944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22874526052480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22874324726016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22874123399552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22873922073088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22873720746624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22873519420160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22873318093696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22873116767232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22872915440768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22872714114304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22872512787840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22872311461376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22872110134912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22871908808448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22871707477888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22871506151424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22871304824960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22871103498496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22870902172032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22870700845568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22870499519104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22870298192640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22870096866176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22869895539712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22869694213248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22869492886784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22869291560320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22869090233856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22868888907392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22868687580928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22868486254464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22868284928000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22868083601536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22867882275072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22867680948608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22867479622144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22867278295680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22867076969216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22866875642752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22866674316288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22866472989824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22866271663360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22866070336896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22865869010432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22865667683968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22878055089920 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22878048499456 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2750, m: 55)                                                                             	 1.32651   	 600       	 26.3389   	 0         	 1.10575   	 23.82     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 2750)                                                                              	 1.16769   	 700       	 9.90727   	 0         	 1.4655    	 6.76033   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 55)                                                                             	 0.225692  	 100       	 23.4556   	 0         	 0.985697  	 23.796    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2750, m: 50)                                                                             	 0.195741  	 100       	 24.5861   	 0         	 1.13436   	 21.674    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 55)                         	 0.161251  	 600       	 61.9065   	 0         	 9.09463   	 6.80693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 55)	 0.157786  	 700       	 61.6105   	 0         	 9.95617   	 6.18817   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 2500)                                                                              	 0.152491  	 100       	 9.84588   	 0         	 1.45887   	 6.74899   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 55)                           	 0.103425  	 700       	 112.606   	 0         	 16.5428   	 6.80693   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 55)                                                                               	 0.0445708 	 100       	 2.15949   	 0         	 0.144489  	 14.9457   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 55, r2: 55, leftOrthog: 1)                      	 0.042857  	 600       	 232.926   	 0         	 51.4978   	 4.52303   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 50)                         	 0.0244005 	 100       	 61.9866   	 0         	 9.11541   	 6.8002    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 50, n: 50, r2: 55)                         	 0.0176897 	 100       	 85.5017   	 0         	 13.1828   	 6.48585   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 50)	 0.0167905 	 100       	 75.1911   	 0         	 12.6976   	 5.92167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 50)                           	 0.0106539 	 100       	 141.967   	 0         	 21.8887   	 6.48585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 55, r2: 55, leftOrthog: 1)                      	 0.0069714 	 100       	 216.958   	 0         	 48.0306   	 4.51708   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 50, r2: 50, leftOrthog: 1)                      	 0.00573128	 100       	 239.911   	 0         	 58.2767   	 4.11677   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 50)                                                                                	 0.00527448	 100       	 3.63384   	 0         	 1.22097   	 2.97618   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 1) 	 0.00443705	 100       	 0.123956  	 0         	 0.992011  	 0.124955  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 2, r2: 1)                             	 0.00382845	 100       	 0.287323  	 0         	 1.72435   	 0.166626  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 5)                                                                                                         	 0.00296497	 808       	 0         	 0         	 5.45031   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 55) 	 0.00191782	 100       	 15.7732   	 0         	 3.55613   	 4.43548   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 55, fromLeft: 1)                              	 0.00162376	 800       	 0         	 0         	 23.8459   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00105063	 100       	 23.7954   	 0         	 5.71089   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 55, r2: 55)                            	 0.000949291	 100       	 31.8659   	 0         	 7.18431   	 4.43548   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000923129	 100       	 0.541636  	 0         	 2.16654   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 55)                           	 0.000803184	 100       	 0         	 0         	 5.4782    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                        	 0.000482901	 100       	 0         	 0         	 9.1116    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 5)                                                                                                         	 0.000380991	 101       	 0         	 0         	 1.06039   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000361331	 100       	 0.691886  	 0         	 11.0702   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 1)                                                                                                         	 0.000309486	 101       	 0         	 0         	 1.30539   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 55, leftOrthog: 1)                        	 0.000252367	 100       	 108.968   	 0         	 42.0023   	 2.59434   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 50, fromLeft: 1)                              	 0.000206166	 100       	 0         	 0         	 21.342    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.78596   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.78594   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.54193   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.05927   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.0579    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.85034   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.79251   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.32545   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.204392  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.180931  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.118857  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.055812  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0101231 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00413835	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00190124	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00182992	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00117961	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000923129	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000803184	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000361331	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23203669772160 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23203493701632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23203292375168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23203091048704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23202889722240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23202688395776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23202487069312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23202285742848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23202084416384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23201883089920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23201681763456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23201480436992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23201279110528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23201077784064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23200876457600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23200675131136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23200473804672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23200272478208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23200071151744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23199869825280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23199668498816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23199467172352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23199265845888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23199064519424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23198863192960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23198661866496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23198460540032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23198259213568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23198057887104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23197856560640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23197655234176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23197453907712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23197252577152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23197051250688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23196849924224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23196648597760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23196447271296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23196245944832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23196044618368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23195843291904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23195641965440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23195440638976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23195239312512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23195037986048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23194836659584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23194635333120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23194434006656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23194232680192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23194031353728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23193830027264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23193628700800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23193427374336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23193226047872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23193024721408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23192823394944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23192622068480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23192420742016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23192219415552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23192018089088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23191816762624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23191615436160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23191414109696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23191212783232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23203564111616 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23203385493248 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2800, m: 56)                                                                             	 1.62562   	 600       	 22.6863   	 0         	 0.935396  	 24.2531   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 2800)                                                                              	 1.20249   	 700       	 10.1549   	 0         	 1.4753    	 6.88327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 56)                                                                             	 0.266242  	 100       	 20.6128   	 0         	 0.850931  	 24.2238   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2800, m: 50)                                                                             	 0.234956  	 100       	 20.8549   	 0         	 0.962051  	 21.6776   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 56)                         	 0.174488  	 600       	 60.3879   	 0         	 8.71311   	 6.93069   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 56)	 0.160837  	 700       	 61.8086   	 0         	 9.98352   	 6.19106   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 2500)                                                                              	 0.156835  	 100       	 9.92311   	 0         	 1.44453   	 6.86942   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 56)                           	 0.107687  	 700       	 114.156   	 0         	 16.4711   	 6.93069   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 56)                                                                               	 0.0460927 	 100       	 2.12615   	 0         	 0.141454  	 15.0307   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 56, r2: 56, leftOrthog: 1)                      	 0.0388789 	 600       	 271.02    	 0         	 58.8501   	 4.60526   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 50)                         	 0.0260434 	 100       	 60.2071   	 0         	 8.69735   	 6.92247   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 50)	 0.0234993 	 100       	 53.959    	 0         	 9.17814   	 5.87908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 50)                           	 0.0157967 	 100       	 99.2615   	 0         	 15.1728   	 6.54206   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 50, n: 50, r2: 56)                         	 0.0155914 	 100       	 100.569   	 0         	 15.3726   	 6.54206   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 50)                                                                                	 0.00548149	 100       	 3.58782   	 0         	 1.18946   	 3.01635   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 56, r2: 56, leftOrthog: 1)                      	 0.00536094	 100       	 292.486   	 0         	 63.6116   	 4.598     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 1) 	 0.00456945	 100       	 0.122553  	 0         	 0.980774  	 0.124955  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 50, r2: 50, leftOrthog: 1)                      	 0.00454902	 100       	 307.759   	 0         	 74.7414   	 4.11765   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 2, r2: 1)                             	 0.00390378	 100       	 0.286901  	 0         	 1.72182   	 0.166627  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 6)                                                                                                         	 0.00313015	 808       	 0         	 0         	 7.43427   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 56) 	 0.00218776	 100       	 14.3343   	 0         	 3.1945    	 4.48718   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 56, fromLeft: 1)                              	 0.0016548 	 800       	 0         	 0         	 24.2572   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00135324	 100       	 18.4741   	 0         	 4.43379   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 56, r2: 56)                            	 0.00115381	 100       	 27.1796   	 0         	 6.05716   	 4.48718   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000941124	 100       	 0.53128   	 0         	 2.12512   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 56)                           	 0.000887228	 100       	 0         	 0         	 5.04943   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                        	 0.000551798	 100       	 0         	 0         	 8.11891   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 6)                                                                                                         	 0.000393604	 101       	 0         	 0         	 1.23169   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000379918	 100       	 0.658037  	 0         	 10.5286   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 56, leftOrthog: 1)                        	 0.000376197	 100       	 74.4291   	 0         	 28.4957   	 2.61194   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 1)                                                                                                         	 0.000326387	 101       	 0         	 0         	 1.48535   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 50, fromLeft: 1)                              	 0.000191635	 100       	 0         	 0         	 23.3778   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.37328   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.37326   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.72185   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.45773   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.45631   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.22419   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.17291   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.36481   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.217476  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.191094  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.128541  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.049165  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0102001 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00440194	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00199055	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00184643	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00106997	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000941124	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000887228	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000379918	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22378628310912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22378390218752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22378188892288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22377987565824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22377786239360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22377584912896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22377383586432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22377182259968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22376980933504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22376779607040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22376578280576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22376376954112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22376175627648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22375974301184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22375772974720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22375571648256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22375370321792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22375168995328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22374967668864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22374766342400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22374565015936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22374363689472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22374162363008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22373961036544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22373759710080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22373558383616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22373357057152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22373155730688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22372954404224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22372753077760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22372551751296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22372350424832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22372149094272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22371947767808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22371746441344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22371545114880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22371343788416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22371142461952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22370941135488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22370739809024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22370538482560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22370337156096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22370135829632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22369934503168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22369733176704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22369531850240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22369330523776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22369129197312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22368927870848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22368726544384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22368525217920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22368323891456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22368122564992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22367921238528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22367719912064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22367518585600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22367317259136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22367115932672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22366914606208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22366713279744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22366511953280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22366310626816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22366109300352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22378522650368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22378516059904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2850, m: 57)                                                                             	 1.44782   	 600       	 26.8615   	 0         	 1.08811   	 24.6863   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 2850)                                                                              	 1.27189   	 700       	 10.1244   	 0         	 1.44506   	 7.00621   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 57)                                                                             	 0.239089  	 100       	 23.7809   	 0         	 0.964683  	 24.6515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2850, m: 50)                                                                             	 0.202257  	 100       	 24.6592   	 0         	 1.13737   	 21.681    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 57)                         	 0.161981  	 600       	 68.5979   	 0         	 9.72405   	 7.05446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 2500)                                                                              	 0.160467  	 100       	 10.0466   	 0         	 1.43733   	 6.98977   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 57)	 0.152942  	 700       	 66.499    	 0         	 10.7337   	 6.19536   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 57)                           	 0.105887  	 700       	 122.427   	 0         	 17.3546   	 7.05446   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 57, r2: 57, leftOrthog: 1)                      	 0.0557681 	 600       	 199.246   	 0         	 42.5059   	 4.6875    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 57)                                                                               	 0.044021  	 100       	 2.26596   	 0         	 0.149928  	 15.1136   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 50)                         	 0.0242103 	 100       	 67.0996   	 0         	 9.52485   	 7.04469   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 50)	 0.0173602 	 100       	 73.415    	 0         	 12.5713   	 5.8399    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 50, n: 50, r2: 57)                         	 0.014436  	 100       	 112.531   	 0         	 17.0574   	 6.59722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 50)                           	 0.011359  	 100       	 143.015   	 0         	 21.678    	 6.59722   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 57, r2: 57, leftOrthog: 1)                      	 0.00883423	 100       	 183.887   	 0         	 39.3015   	 4.67888   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 50, r2: 50, leftOrthog: 1)                      	 0.0081149 	 100       	 175.603   	 0         	 42.6376   	 4.1185    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 50)                                                                                	 0.00549192	 100       	 3.67205   	 0         	 1.20177   	 3.05555   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 1) 	 0.00443179	 100       	 0.128616  	 0         	 1.02929   	 0.124956  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 2, r2: 1)                             	 0.00384729	 100       	 0.296313  	 0         	 1.77829   	 0.166628  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 7)                                                                                                         	 0.00320775	 808       	 0         	 0         	 9.8741    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 57) 	 0.00186744	 100       	 17.3982   	 0         	 3.8337    	 4.53822   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 57, fromLeft: 1)                              	 0.0017296 	 800       	 0         	 0         	 24.0444   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000994387	 100       	 25.1411   	 0         	 6.03387   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 57, r2: 57)                            	 0.000915676	 100       	 35.482    	 0         	 7.81849   	 4.53822   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000888815	 100       	 0.562547  	 0         	 2.25019   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 57)                           	 0.000806961	 100       	 0         	 0         	 5.65083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                        	 0.000488165	 100       	 0         	 0         	 9.3411    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 7)                                                                                                         	 0.000385376	 101       	 0         	 0         	 1.46766   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335527	 100       	 0.745097  	 0         	 11.9215   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 1)                                                                                                         	 0.00032753	 101       	 0         	 0         	 1.72686   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 57, leftOrthog: 1)                        	 0.000278268	 100       	 102.419   	 0         	 38.9553   	 2.62915   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 50, fromLeft: 1)                              	 0.000193469	 100       	 0         	 0         	 23.5697   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.14282   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.1428    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.74633   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.21605   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.21474   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.00835   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.93319   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.43785   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.201622  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.176602  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.122009  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0729955 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0104036 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00440882	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00192307	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00189694	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0012588 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000888815	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000806961	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335527	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22953814038400 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22953580292096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22953378965632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22953177639168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22952976312704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22952774986240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22952573659776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22952372333312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22952171006848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22951969680384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22951768353920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22951567027456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22951365700992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22951164374528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22950963048064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22950761721600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22950560395136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22950359068672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22950157742208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22949956415744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22949755089280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22949553762816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22949352436352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22949151109888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22948949783424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22948748456960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22948547130496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22948345804032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22948144477568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22947943151104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22947741824640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22947540498176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22947339167616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22947137841152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22946936514688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22946735188224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22946533861760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22946332535296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22946131208832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22945929882368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22945728555904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22945527229440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22945325902976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22945124576512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22944923250048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22944721923584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22944520597120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22944319270656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22944117944192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22943916617728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22943715291264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22943513964800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22943312638336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22943111311872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22942909985408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22942708658944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22942507332480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22942306006016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22942104679552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22941903353088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22941702026624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22941500700160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22941299373696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22953708377856 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22953701787392 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2900, m: 58)                                                                             	 1.51463   	 600       	 27.0519   	 0         	 1.07693   	 25.1195   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 2900)                                                                              	 1.28815   	 700       	 10.532    	 0         	 1.47731   	 7.12915   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 58)                                                                             	 0.241411  	 100       	 24.3858   	 0         	 0.972355  	 25.0791   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2900, m: 50)                                                                             	 0.210205  	 100       	 24.1431   	 0         	 1.11339   	 21.6843   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 58)                         	 0.169108  	 600       	 69.2263   	 0         	 9.64394   	 7.17822   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 2500)                                                                              	 0.157776  	 100       	 10.5782   	 0         	 1.48779   	 7.11003   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 58)	 0.153737  	 700       	 67.7122   	 0         	 10.9192   	 6.20121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 58)                           	 0.107368  	 700       	 127.206   	 0         	 17.7211   	 7.17822   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 58, r2: 58, leftOrthog: 1)                      	 0.0433144 	 600       	 270.273   	 0         	 56.6641   	 4.76974   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 58)                                                                               	 0.0430944 	 100       	 2.35529   	 0         	 0.155008  	 15.1946   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 50)                         	 0.0262145 	 100       	 64.1631   	 0         	 8.95274   	 7.16686   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 50)	 0.0222915 	 100       	 57.5107   	 0         	 9.90871   	 5.80406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 50, n: 50, r2: 58)                         	 0.0188452 	 100       	 89.2537   	 0         	 13.4188   	 6.65138   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 50)                           	 0.0156916 	 100       	 107.191   	 0         	 16.1156   	 6.65138   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 50, r2: 50, leftOrthog: 1)                      	 0.0102612 	 100       	 141.309   	 0         	 34.3041   	 4.11932   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 58, r2: 58, leftOrthog: 1)                      	 0.00826702	 100       	 203.459   	 0         	 42.746    	 4.75972   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 50)                                                                                	 0.00548076	 100       	 3.77075   	 0         	 1.21881   	 3.0938    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 1) 	 0.00472807	 100       	 0.122672  	 0         	 0.981711  	 0.124957  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 2, r2: 1)                             	 0.00415895	 100       	 0.278916  	 0         	 1.67388   	 0.166628  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 8)                                                                                                         	 0.00333024	 808       	 0         	 0         	 12.4224   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 58) 	 0.00194596	 100       	 17.2871   	 0         	 3.7674    	 4.58861   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 58, fromLeft: 1)                              	 0.0017374 	 800       	 0         	 0         	 24.7837   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00103541	 100       	 24.1451   	 0         	 5.79482   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 58, r2: 58)                            	 0.000967318	 100       	 34.7766   	 0         	 7.57889   	 4.58861   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00082151	 100       	 0.608635  	 0         	 2.43454   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 58)                           	 0.000815113	 100       	 0         	 0         	 5.69246   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                        	 0.00048144	 100       	 0         	 0         	 9.63775   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 8)                                                                                                         	 0.000373619	 101       	 0         	 0         	 1.7301    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330915	 100       	 0.755481  	 0         	 12.0877   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 1)                                                                                                         	 0.000317592	 101       	 0         	 0         	 2.03532   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 58, leftOrthog: 1)                        	 0.000272023	 100       	 106.609   	 0         	 40.2907   	 2.64599   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 50, fromLeft: 1)                              	 0.000202214	 100       	 0         	 0         	 22.946    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.33666   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.33664   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.84185   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.30875   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.3075    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.07374   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.00934   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.45141   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.215203  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.182702  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.128186  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0621146 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0104849 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00450289	 1110      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00212784	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00193961	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00119755	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00082151	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000815113	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330915	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23358500968320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23358313850880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23358112524416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23357911197952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23357709871488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23357508545024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23357307218560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23357105892096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23356904565632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23356703239168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23356501912704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23356300586240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23356099259776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23355897933312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23355696606848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23355495280384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23355293953920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23355092627456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23354891300992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23354689974528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23354488648064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23354287321600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23354085995136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23353884668672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23353683342208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23353482015744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23353280689280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23353079362816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23352878036352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23352676709888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23352475383424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23352274056960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23352072726400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23351871399936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23351670073472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23351468747008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23351267420544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23351066094080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23350864767616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23350663441152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23350462114688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23350260788224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23350059461760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23349858135296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23349656808832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23349455482368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23349254155904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23349052829440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23348851502976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23348650176512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23348448850048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23348247523584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23348046197120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23347844870656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23347643544192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23347442217728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23347240891264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23347039564800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23346838238336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23346636911872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23346435585408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23346234258944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23346032932480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23358395307776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23358388717312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2950, m: 59)                                                                             	 1.53716   	 600       	 28.058    	 0         	 1.09805   	 25.5526   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 2950)                                                                              	 1.36939   	 700       	 10.4285   	 0         	 1.438     	 7.25208   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 59)                                                                             	 0.244379  	 100       	 24.9275   	 0         	 0.977301  	 25.5064   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2950, m: 50)                                                                             	 0.202921  	 100       	 25.441    	 0         	 1.17307   	 21.6875   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 59)                         	 0.173795  	 600       	 70.9038   	 0         	 9.71021   	 7.30198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 59)	 0.172235  	 700       	 61.8895   	 0         	 9.9681    	 6.20876   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 2500)                                                                              	 0.167801  	 100       	 10.2908   	 0         	 1.42331   	 7.23022   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 59)                           	 0.114587  	 700       	 125.464   	 0         	 17.1821   	 7.30198   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 59, r2: 59, leftOrthog: 1)                      	 0.0520203 	 600       	 236.883   	 0         	 48.822    	 4.85197   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 59)                                                                               	 0.0427884 	 100       	 2.41304   	 0         	 0.157987  	 15.2737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 50)                         	 0.0241859 	 100       	 71.9634   	 0         	 9.87289   	 7.28899   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 50, n: 50, r2: 59)                         	 0.0187349 	 100       	 92.9015   	 0         	 13.8565   	 6.70455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 50)	 0.0176443 	 100       	 73.1396   	 0         	 12.6726   	 5.77147   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 50)                           	 0.011369  	 100       	 153.092   	 0         	 22.834    	 6.70455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 50, r2: 50, leftOrthog: 1)                      	 0.00883388	 100       	 166.971   	 0         	 40.5258   	 4.12011   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 59, r2: 59, leftOrthog: 1)                      	 0.00862321	 100       	 201.839   	 0         	 41.6979   	 4.84051   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 50)                                                                                	 0.00563201	 100       	 3.75827   	 0         	 1.20028   	 3.13115   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 1) 	 0.00449449	 100       	 0.131272  	 0         	 1.05053   	 0.124958  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 2, r2: 1)                             	 0.00391059	 100       	 0.301745  	 0         	 1.81088   	 0.166629  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 9)                                                                                                         	 0.0033559 	 808       	 0         	 0         	 15.6019   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 59) 	 0.00188933	 100       	 18.4245   	 0         	 3.9722    	 4.63836   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 59, fromLeft: 1)                              	 0.00188215	 800       	 0         	 0         	 23.6734   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 59, r2: 59)                            	 0.000920417	 100       	 37.8198   	 0         	 8.1537    	 4.63836   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000901938	 100       	 27.7181   	 0         	 6.65234   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000855917	 100       	 0.584169  	 0         	 2.33668   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 59)                           	 0.000810054	 100       	 0         	 0         	 5.82677   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                        	 0.00046572	 100       	 0         	 0         	 10.1348   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 9)                                                                                                         	 0.000368688	 101       	 0         	 0         	 1.9724    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 59, leftOrthog: 1)                        	 0.000342017	 100       	 86.253    	 0         	 32.3961   	 2.66245   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000341816	 100       	 0.731388  	 0         	 11.7022   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 1)                                                                                                         	 0.000305909	 101       	 0         	 0         	 2.37718   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 50, fromLeft: 1)                              	 0.000203026	 100       	 0         	 0         	 23.2483   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.4708    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.47078   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.9438    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.32826   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.32696   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.09923   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.02725   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.54283   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.217618  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.196263  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.130787  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0698195 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0104709 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00449622	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00208517	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00183253	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0013072 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000855917	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000810054	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000341816	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22604977317760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22604748417024 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22604547090560 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22604345764096 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22604144437632 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22603943111168 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22603741784704 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22603540458240 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22603339131776 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22603137805312 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22602936478848 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22602735152384 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22602533825920 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22602332499456 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22602131172992 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22601929846528 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22601728520064 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22601527193600 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22601325867136 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22601124540672 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22600923214208 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22600721887744 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22600520561280 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22600319234816 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22600117908352 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22599916581888 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22599715255424 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22599513928960 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22599312602496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22599111276032 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22598909949568 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22598708623104 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22598507292544 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22598305966080 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22598104639616 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22597903313152 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22597701986688 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22597500660224 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22597299333760 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22597098007296 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22596896680832 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22596695354368 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22596494027904 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22596292701440 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22596091374976 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22595890048512 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22595688722048 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22595487395584 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22595286069120 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22595084742656 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22594883416192 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22594682089728 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22594480763264 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22594279436800 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22594078110336 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22593876783872 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22593675457408 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22593474130944 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22593272804480 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22593071478016 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22592870151552 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22592668825088 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22592467498624 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22604871657216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22604865066752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3000, m: 60)                                                                             	 1.60328   	 600       	 28.292    	 0         	 1.08875   	 25.9858   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 3000)                                                                              	 1.38681   	 700       	 10.83     	 0         	 1.46847   	 7.37502   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 60)                                                                             	 0.25746   	 100       	 24.4698   	 0         	 0.943556  	 25.9336   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3000, m: 50)                                                                             	 0.236554  	 100       	 22.1937   	 0         	 1.02319   	 21.6906   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 60)                         	 0.183845  	 600       	 70.4943   	 0         	 9.49323   	 7.42574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 2500)                                                                              	 0.172112  	 100       	 10.3746   	 0         	 1.41145   	 7.35033   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 60)	 0.157057  	 700       	 69.5288   	 0         	 11.1817   	 6.21811   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 60)                           	 0.108424  	 700       	 139.453   	 0         	 18.7796   	 7.42574   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 60, r2: 60, leftOrthog: 1)                      	 0.0442684 	 600       	 292.759   	 0         	 59.3326   	 4.93421   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 60)                                                                               	 0.0429102 	 100       	 2.44697   	 0         	 0.159403  	 15.3509   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 50)                         	 0.0253772 	 100       	 70.9298   	 0         	 9.57079   	 7.41107   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 50)	 0.0215854 	 100       	 60.2259   	 0         	 10.4886   	 5.74205   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 50, n: 50, r2: 60)                         	 0.015823  	 100       	 113.758   	 0         	 16.8362   	 6.75676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 50)                           	 0.0148985 	 100       	 120.817   	 0         	 17.8809   	 6.75676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 60, r2: 60, leftOrthog: 1)                      	 0.00681299	 100       	 264.201   	 0         	 53.6857   	 4.92126   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 50, r2: 50, leftOrthog: 1)                      	 0.00678492	 100       	 221.079   	 0         	 53.6484   	 4.12088   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 50)                                                                                	 0.00578875	 100       	 3.74288   	 0         	 1.1816    	 3.16763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 1) 	 0.00467435	 100       	 0.12836   	 0         	 1.02722   	 0.124958  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 2, r2: 1)                             	 0.00408081	 100       	 0.29406   	 0         	 1.76475   	 0.16663   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 10)                                                                                                       	 0.00360359	 808       	 0         	 0         	 17.9376   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 60) 	 0.00193752	 100       	 18.5805   	 0         	 3.96383   	 4.6875    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 60, fromLeft: 1)                              	 0.001928  	 800       	 0         	 0         	 23.9005   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00100321	 100       	 24.92     	 0         	 5.98081   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 60, r2: 60)                            	 0.000935731	 100       	 38.4726   	 0         	 8.20749   	 4.6875    
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 60)                           	 0.000854042	 100       	 0         	 0         	 5.62033   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000833461	 100       	 0.599908  	 0         	 2.39963   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                        	 0.00048651	 100       	 0         	 0         	 9.86619   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 10)                                                                                                        	 0.000369704	 101       	 0         	 0         	 2.18553   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000344149	 100       	 0.72643   	 0         	 11.6229   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                                                        	 0.00030504	 101       	 0         	 0         	 2.64883   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 60, leftOrthog: 1)                        	 0.000289689	 100       	 103.559   	 0         	 38.6622   	 2.67857   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 50, fromLeft: 1)                              	 0.000195077	 100       	 0         	 0         	 24.6057   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.67415   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.67413   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.03877   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.44797   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.4467    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.20054   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.1402    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.56471   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.226048  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.185255  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.128339  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.058156  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0112508 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00476485	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00212307	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00204998	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122132	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000854042	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000833461	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344149	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22788069275520 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22787888506880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22787687180416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22787485853952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22787284527488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22787083201024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22786881874560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22786680548096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22786479221632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22786277895168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22786076568704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22785875242240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22785673915776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22785472589312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22785271262848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22785069936384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22784868609920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22784667283456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22784465956992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22784264630528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22784063304064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22783861977600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22783660651136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22783459324672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22783257998208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22783056671744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22782855345280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22782654018816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22782452692352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22782251365888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22782050039424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22781848712960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22781647382400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22781446055936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22781244729472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22781043403008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22780842076544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22780640750080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22780439423616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22780238097152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22780036770688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22779835444224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22779634117760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22779432791296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22779231464832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22779030138368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22778828811904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22778627485440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22778426158976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22778224832512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22778023506048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22777822179584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22777620853120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22777419526656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22777218200192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22777016873728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22776815547264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22776614220800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22776412894336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22776211567872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22776010241408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22775808914944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22775607588480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22787963614976 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22787783644928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3050, m: 61)                                                                             	 1.76624   	 600       	 26.9873   	 0         	 1.02151   	 26.419    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 3050)                                                                              	 1.52531   	 700       	 10.3472   	 0         	 1.38      	 7.49796   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 61)                                                                             	 0.268156  	 100       	 24.2834   	 0         	 0.921201  	 26.3606   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3050, m: 50)                                                                             	 0.236483  	 100       	 22.5703   	 0         	 1.04041   	 21.6936   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 61)                         	 0.184116  	 600       	 73.9691   	 0         	 9.79787   	 7.5495    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 61)	 0.179953  	 700       	 62.1923   	 0         	 9.98372   	 6.22937   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 2500)                                                                              	 0.178285  	 100       	 10.3507   	 0         	 1.38556   	 7.47035   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 61)                           	 0.11615   	 700       	 136.794   	 0         	 18.1196   	 7.5495    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 61, r2: 61, leftOrthog: 1)                      	 0.0568509 	 600       	 239.554   	 0         	 47.7537   	 5.01645   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 61)                                                                               	 0.0455345 	 100       	 2.34438   	 0         	 0.151973  	 15.4263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 50)                         	 0.0244211 	 100       	 76.184    	 0         	 10.1132   	 7.5331    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 50)	 0.0243596 	 100       	 53.798    	 0         	 9.41229   	 5.71572   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 50, n: 50, r2: 61)                         	 0.0161737 	 100       	 115.032   	 0         	 16.8965   	 6.80804   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 50)                           	 0.0136089 	 100       	 136.712   	 0         	 20.081    	 6.80804   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 11)                                                                                                       	 0.0102694 	 808       	 0         	 0         	 7.61624   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 61, r2: 61, leftOrthog: 1)                      	 0.00894053	 100       	 208.097   	 0         	 41.6031   	 5.00197   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 50, r2: 50, leftOrthog: 1)                      	 0.00818707	 100       	 186.269   	 0         	 45.1932   	 4.12162   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 50)                                                                                	 0.00580088	 100       	 3.82125   	 0         	 1.19292   	 3.20327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 1) 	 0.00497769	 100       	 0.122547  	 0         	 0.980696  	 0.124959  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 2, r2: 1)                             	 0.00438506	 100       	 0.278217  	 0         	 1.66967   	 0.16663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 61) 	 0.00203555	 100       	 18.2801   	 0         	 3.85979   	 4.73602   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 61, fromLeft: 1)                              	 0.00198029	 800       	 0         	 0         	 24.0515   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 61, r2: 61)                            	 0.00103307	 100       	 36.0189   	 0         	 7.60529   	 4.73602   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000949392	 100       	 26.3326   	 0         	 6.31983   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000843575	 100       	 0.592716  	 0         	 2.37086   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 61)                           	 0.00082905	 100       	 0         	 0         	 5.88626   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                        	 0.000510991	 100       	 0         	 0         	 9.55007   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 11)                                                                                                        	 0.000382623	 101       	 0         	 0         	 2.32291   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000334909	 100       	 0.746471  	 0         	 11.9435   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 61, leftOrthog: 1)                        	 0.000323724	 100       	 94.2161   	 0         	 34.9681   	 2.69435   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 1)                                                                                                        	 0.000304209	 101       	 0         	 0         	 2.92168   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 50, fromLeft: 1)                              	 0.000205657	 100       	 0         	 0         	 23.7288   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.06448   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.06445   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.21038   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.63844   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.63717   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.39293   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.31641   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.7094    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.22566   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.211326  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.135178  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0743022 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0114672 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0108924 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00218594	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00203435	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00139615	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000843575	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00082905	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334909	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23267885217664 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23267649775616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23267448449152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23267247122688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23267045796224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23266844469760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23266643143296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23266441816832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23266240490368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23266039163904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23265837837440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23265636510976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23265435184512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23265233858048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23265032531584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23264831205120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23264629878656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23264428552192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23264227225728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23264025899264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23263824572800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23263623246336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23263421919872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23263220593408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23263019266944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23262817940480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23262616614016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23262415287552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23262213961088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23262012634624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23261811308160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23261609981696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23261408651136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23261207324672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23261005998208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23260804671744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23260603345280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23260402018816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23260200692352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23259999365888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23259798039424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23259596712960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23259395386496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23259194060032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23258992733568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23258791407104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23258590080640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23258388754176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23258187427712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23257986101248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23257784774784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23257583448320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23257382121856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23257180795392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23256979468928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23256778142464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23256576816000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23256375489536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23256174163072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23255972836608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23255771510144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23255570183680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23255368857216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23267779557120 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23267772966656 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3100, m: 62)                                                                             	 1.79988   	 600       	 27.8069   	 0         	 1.03555   	 26.8521   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 3100)                                                                              	 1.55313   	 700       	 10.6699   	 0         	 1.40008   	 7.62089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 62)                                                                             	 0.267455  	 100       	 25.1519   	 0         	 0.938942  	 26.7875   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3100, m: 50)                                                                             	 0.228879  	 100       	 23.7024   	 0         	 1.09245   	 21.6965   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 62)                         	 0.188762  	 600       	 75.755    	 0         	 9.87258   	 7.67327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 2500)                                                                              	 0.178544  	 100       	 10.6759   	 0         	 1.40652   	 7.5903    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 62)	 0.171265  	 700       	 67.0014   	 0         	 10.7329   	 6.24261   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 62)                           	 0.117814  	 700       	 141.604   	 0         	 18.4542   	 7.67327   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 62, r2: 62, leftOrthog: 1)                      	 0.0624743 	 600       	 228.889   	 0         	 44.8918   	 5.09868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 62)                                                                               	 0.0460444 	 100       	 2.35642   	 0         	 0.152027  	 15.5      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 50)                         	 0.0246454 	 100       	 77.9862   	 0         	 10.1875   	 7.65508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 50)	 0.0208734 	 100       	 63.3341   	 0         	 11.1261   	 5.69239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 50, n: 50, r2: 62)                         	 0.0167861 	 100       	 114.499   	 0         	 16.6947   	 6.85841   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 50)                           	 0.0139852 	 100       	 137.431   	 0         	 20.0384   	 6.85841   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 50, r2: 50, leftOrthog: 1)                      	 0.00883361	 100       	 175.466   	 0         	 42.5647   	 4.12234   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 62, r2: 62, leftOrthog: 1)                      	 0.00825893	 100       	 232.718   	 0         	 45.7868   	 5.08263   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 50)                                                                                	 0.00607896	 100       	 3.72869   	 0         	 1.15151   	 3.23809   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 1) 	 0.00444921	 100       	 0.139351  	 0         	 1.11516   	 0.12496   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 12)                                                                                                       	 0.0039763 	 808       	 0         	 0         	 23.4091   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 2, r2: 1)                             	 0.00387613	 100       	 0.319907  	 0         	 1.91985   	 0.166631  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 62, fromLeft: 1)                              	 0.00207365	 800       	 0         	 0         	 23.7279   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 62) 	 0.00201097	 100       	 19.1151   	 0         	 3.99568   	 4.78395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00124934	 100       	 20.0105   	 0         	 4.80253   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 62, r2: 62)                            	 0.00101623	 100       	 37.8259   	 0         	 7.90684   	 4.78395   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000877199	 100       	 0.569996  	 0         	 2.27998   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 62)                           	 0.000821494	 100       	 0         	 0         	 6.03778   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000529045	 100       	 0.47255   	 0         	 7.56079   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 62, leftOrthog: 1)                        	 0.000523594	 100       	 59.2062   	 0         	 21.849    	 2.70979   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                        	 0.000498913	 100       	 0         	 0         	 9.94161   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 12)                                                                                                        	 0.000373509	 101       	 0         	 0         	 2.59592   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 1)                                                                                                        	 0.000326608	 101       	 0         	 0         	 2.9687    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 50, fromLeft: 1)                              	 0.000201163	 100       	 0         	 0         	 24.6566   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.12974   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.12972   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.26265   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.66643   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.66493   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.42445   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.34225   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.73775   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.231443  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.198598  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.136692  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0800904 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.011344  	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00517533	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00227481	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00200931	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00111217	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000877199	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000821494	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000529045	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22535857448832 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22535626287104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22535424960640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22535223634176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22535022307712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22534820981248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22534619654784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22534418328320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22534217001856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22534015675392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22533814348928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22533613022464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22533411696000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22533210369536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22533009043072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22532807716608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22532606390144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22532405063680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22532203737216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22532002410752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22531801084288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22531599757824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22531398431360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22531197104896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22530995778432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22530794451968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22530593125504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22530391799040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22530190472576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22529989146112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22529787819648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22529586493184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22529385162624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22529183836160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22528982509696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22528781183232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22528579856768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22528378530304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22528177203840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22527975877376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22527774550912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22527573224448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22527371897984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22527170571520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22526969245056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22526767918592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22526566592128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22526365265664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22526163939200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22525962612736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22525761286272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22525559959808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22525358633344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22525157306880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22524955980416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22524754653952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22524553327488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22524352001024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22524150674560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22523949348096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22523748021632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22523546695168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22523345368704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22535751788288 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22535745197824 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3150, m: 63)                                                                             	 1.86704   	 600       	 28.1247   	 0         	 1.03076   	 27.2853   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 3150)                                                                              	 1.64493   	 700       	 10.5698   	 0         	 1.36493   	 7.74383   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 63)                                                                             	 0.273176  	 100       	 25.4259   	 0         	 0.93429   	 27.2142   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3150, m: 50)                                                                             	 0.231489  	 100       	 23.8132   	 0         	 1.09742   	 21.6993   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 63)                         	 0.194378  	 600       	 77.1836   	 0         	 9.8991    	 7.79703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 2500)                                                                              	 0.191801  	 100       	 10.2597   	 0         	 1.33068   	 7.71016   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 63)	 0.182392  	 700       	 64.5331   	 0         	 10.3122   	 6.25791   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 63)                           	 0.124126  	 700       	 141.012   	 0         	 18.0853   	 7.79703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 63, r2: 63, leftOrthog: 1)                      	 0.0599511 	 600       	 250.251   	 0         	 48.3024   	 5.18092   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 63)                                                                               	 0.0467652 	 100       	 2.35752   	 0         	 0.151395  	 15.572    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 50)                         	 0.0255141 	 100       	 77.7805   	 0         	 10.0013   	 7.77701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 50, n: 50, r2: 63)                         	 0.0226422 	 100       	 87.6462   	 0         	 12.6878   	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 50)	 0.0194429 	 100       	 68.6369   	 0         	 12.1011   	 5.67197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 50)                           	 0.0126611 	 100       	 156.74    	 0         	 22.6899   	 6.90789   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 50, r2: 50, leftOrthog: 1)                      	 0.0105528 	 100       	 149.25    	 0         	 36.199    	 4.12304   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 63, r2: 63, leftOrthog: 1)                      	 0.00864109	 100       	 229.659   	 0         	 44.4794   	 5.16326   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 50)                                                                                	 0.00636821	 100       	 3.63785   	 0         	 1.11177   	 3.27212   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 1) 	 0.00450223	 100       	 0.139931  	 0         	 1.1198    	 0.12496   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 13)                                                                                                       	 0.00424391	 808       	 0         	 0         	 25.7408   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 2, r2: 1)                             	 0.00390098	 100       	 0.322996  	 0         	 1.93839   	 0.166631  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 63, fromLeft: 1)                              	 0.00213056	 800       	 0         	 0         	 23.8451   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 63) 	 0.00190613	 100       	 20.8223   	 0         	 4.30989   	 4.83129   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 63, r2: 63)                            	 0.000958652	 100       	 41.4019   	 0         	 8.56953   	 4.83129   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000934885	 100       	 26.7413   	 0         	 6.4179    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000852004	 100       	 0.586852  	 0         	 2.34741   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 63)                           	 0.00079368	 100       	 0         	 0         	 6.35017   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                        	 0.000476945	 100       	 0         	 0         	 10.5673   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 13)                                                                                                        	 0.000375735	 101       	 0         	 0         	 2.79559   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00035018	 100       	 0.713919  	 0         	 11.4227   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 1)                                                                                                        	 0.000334357	 101       	 0         	 0         	 3.14155   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 63, leftOrthog: 1)                        	 0.000301949	 100       	 104.322   	 0         	 38.2846   	 2.72491   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 50, fromLeft: 1)                              	 0.000203184	 100       	 0         	 0         	 24.8051   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.49017   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.49014   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.51071   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.76866   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.76736   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.50007   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.41847   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.8431    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.24347   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.208243  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.141647  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0794469 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0109714 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00543095	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00233374	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00193017	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00117405	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000852004	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00079368	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00035018	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23310681466752 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23310465230848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23310263904384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23310062577920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23309861251456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23309659924992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23309458598528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23309257272064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23309055945600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23308854619136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23308653292672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23308451966208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23308250639744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23308049313280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23307847986816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23307646660352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23307445333888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23307244007424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23307042680960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23306841354496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23306640028032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23306438701568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23306237375104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23306036048640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23305834722176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23305633395712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23305432069248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23305230742784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23305029416320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23304828089856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23304626763392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23304425436928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23304224106368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23304022779904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23303821453440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23303620126976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23303418800512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23303217474048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23303016147584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23302814821120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23302613494656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23302412168192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23302210841728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23302009515264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23301808188800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23301606862336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23301405535872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23301204209408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23301002882944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23300801556480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23300600230016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23300398903552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23300197577088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23299996250624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23299794924160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23299593597696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23299392271232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23299190944768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23298989618304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23298788291840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23298586965376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23298385638912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23298184312448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23310575806208 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23310569215744 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3200, m: 64)                                                                             	 1.95029   	 600       	 28.2267   	 0         	 1.01834   	 27.7185   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 3200)                                                                              	 1.70272   	 700       	 10.705    	 0         	 1.36079   	 7.86677   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 64)                                                                             	 0.280433  	 100       	 25.5605   	 0         	 0.924742  	 27.6407   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3200, m: 50)                                                                             	 0.22773   	 100       	 24.5905   	 0         	 1.13309   	 21.7021   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 64)                         	 0.20425   	 600       	 77.0067   	 0         	 9.7221    	 7.92079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 2500)                                                                              	 0.197602  	 100       	 10.2758   	 0         	 1.31237   	 7.82994   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 64)	 0.188161  	 700       	 64.19     	 0         	 10.229    	 6.27531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 64)                           	 0.140289  	 700       	 130.802   	 0         	 16.5138   	 7.92079   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 64, r2: 64, leftOrthog: 1)                      	 0.0512444 	 600       	 306.934   	 0         	 58.3174   	 5.26316   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 64)                                                                               	 0.0464911 	 100       	 2.40907   	 0         	 0.154008  	 15.6425   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 50)	 0.0260688 	 100       	 51.7094   	 0         	 9.14505   	 5.65436   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 50)                         	 0.0256599 	 100       	 79.8132   	 0         	 10.1043   	 7.89889   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 50)                           	 0.0188628 	 100       	 108.573   	 0         	 15.6074   	 6.95652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 50, n: 50, r2: 64)                         	 0.0188079 	 100       	 108.89    	 0         	 15.653    	 6.95652   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 64, r2: 64, leftOrthog: 1)                      	 0.00812914	 100       	 251.933   	 0         	 48.0437   	 5.24384   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 50, r2: 50, leftOrthog: 1)                      	 0.00750496	 100       	 213.192   	 0         	 51.6991   	 4.12371   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 50)                                                                                	 0.00610174	 100       	 3.87866   	 0         	 1.17344   	 3.30539   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 1) 	 0.00482937	 100       	 0.132522  	 0         	 1.06051   	 0.124961  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 14)                                                                                                       	 0.00451584	 808       	 0         	 0         	 28.0556   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 2, r2: 1)                             	 0.00423599	 100       	 0.302172  	 0         	 1.81341   	 0.166632  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 64, fromLeft: 1)                              	 0.00255622	 800       	 0         	 0         	 20.5103   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 64) 	 0.00191742	 100       	 21.3621   	 0         	 4.37922   	 4.87805   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000969272	 100       	 25.7926   	 0         	 6.19021   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 64, r2: 64)                            	 0.000954024	 100       	 42.9339   	 0         	 8.80146   	 4.87805   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000879725	 100       	 0.568359  	 0         	 2.27344   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 64)                           	 0.000795124	 100       	 0         	 0         	 6.43925   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                        	 0.000470803	 100       	 0         	 0         	 10.875    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 14)                                                                                                        	 0.000370521	 101       	 0         	 0         	 3.053     	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 1)                                                                                                        	 0.00034563	 101       	 0         	 0         	 3.27286   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335379	 100       	 0.745425  	 0         	 11.9268   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 64, leftOrthog: 1)                        	 0.000294246	 100       	 108.753   	 0         	 39.6947   	 2.73973   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 50, fromLeft: 1)                              	 0.000215425	 100       	 0         	 0         	 23.767    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.52662   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.5266    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.4768    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.82672   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.82541   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.57463   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.50494   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.90643   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.249687  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.220977  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.164342  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0671728 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0113944 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00570279	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00277165	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00186695	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00110882	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000879725	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000795124	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335379	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23437966178176 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23437770745856 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23437569419392 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23437368092928 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23437166766464 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23436965440000 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23436764113536 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23436562787072 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23436361460608 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23436160134144 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23435958807680 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23435757481216 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23435556154752 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23435354828288 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23435153501824 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23434952175360 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23434750848896 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23434549522432 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23434348195968 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23434146869504 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23433945543040 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23433744216576 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23433542890112 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23433341563648 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23433140237184 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23432938910720 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23432737584256 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23432536257792 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23432334931328 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23432133604864 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23431932278400 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23431730951936 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23431529621376 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23431328294912 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23431126968448 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23430925641984 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23430724315520 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23430522989056 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23430321662592 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23430120336128 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23429919009664 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23429717683200 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23429516356736 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23429315030272 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23429113703808 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23428912377344 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23428711050880 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23428509724416 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23428308397952 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23428107071488 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23427905745024 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23427704418560 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23427503092096 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23427301765632 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23427100439168 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23426899112704 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23426697786240 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23426496459776 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23426295133312 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23426093806848 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23425892480384 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23425691153920 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23425489827456 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23437860517632 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23437853927168 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 3250)                                                                              	 1.96605   	 700       	 9.71268   	 0         	 1.21565   	 7.98971   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3250, m: 65)                                                                             	 1.69241   	 600       	 34.0764   	 0         	 1.21046   	 28.1517   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 65)                                                                             	 0.263303  	 100       	 28.0808   	 0         	 1.00049   	 28.067    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3250, m: 50)                                                                             	 0.242004  	 100       	 23.5017   	 0         	 1.08279   	 21.7047   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 2500)                                                                              	 0.21567   	 100       	 9.71018   	 0         	 1.22146   	 7.94965   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 65)                         	 0.203024  	 600       	 81.1602   	 0         	 10.0888   	 8.04455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 65)	 0.200448  	 700       	 61.8553   	 0         	 9.82631   	 6.29487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 65)                           	 0.137266  	 700       	 140.048   	 0         	 17.409    	 8.04455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 65, r2: 65, leftOrthog: 1)                      	 0.0795258 	 600       	 207.197   	 0         	 38.7618   	 5.34539   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 65)                                                                               	 0.0469948 	 100       	 2.42048   	 0         	 0.15406   	 15.7113   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 50)                         	 0.0257916 	 100       	 81.9065   	 0         	 10.2118   	 8.02073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 50)	 0.0207281 	 100       	 65.732    	 0         	 11.6557   	 5.63949   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 50, n: 50, r2: 65)                         	 0.0205537 	 100       	 102.78    	 0         	 14.6738   	 7.00431   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 50)                           	 0.0135708 	 100       	 155.666   	 0         	 22.2243   	 7.00431   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 65, r2: 65, leftOrthog: 1)                      	 0.00991239	 100       	 213.117   	 0         	 40.0267   	 5.32438   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 50, r2: 50, leftOrthog: 1)                      	 0.00727171	 100       	 223.469   	 0         	 54.1826   	 4.12437   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 50)                                                                                	 0.00613944	 100       	 3.93628   	 0         	 1.17926   	 3.33793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 1) 	 0.00478243	 100       	 0.135914  	 0         	 1.08765   	 0.124962  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 15)                                                                                                       	 0.00476574	 808       	 0         	 0         	 30.5178   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 2, r2: 1)                             	 0.00417969	 100       	 0.311028  	 0         	 1.86655   	 0.166632  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 65, fromLeft: 1)                              	 0.00245036	 800       	 0         	 0         	 22.0702   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 65) 	 0.00193616	 100       	 21.8216   	 0         	 4.43146   	 4.92424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 65, r2: 65)                            	 0.000945557	 100       	 44.6827   	 0         	 9.07402   	 4.92424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0009352 	 100       	 26.7322   	 0         	 6.41574   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00091584	 100       	 0.545947  	 0         	 2.18379   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 65)                           	 0.0008353 	 100       	 0         	 0         	 6.22531   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                        	 0.000486649	 100       	 0         	 0         	 10.6853   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 15)                                                                                                        	 0.000372113	 101       	 0         	 0         	 3.25708   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000339428	 100       	 0.736533  	 0         	 11.7845   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 1)                                                                                                        	 0.000328011	 101       	 0         	 0         	 3.695     	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 65, leftOrthog: 1)                        	 0.000327514	 100       	 99.2324   	 0         	 36.029    	 2.75424   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 50, fromLeft: 1)                              	 0.000229035	 100       	 0         	 0         	 22.704    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.77295   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.77293   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.92998   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.60696   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.60562   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.34461   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.24471   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.18786   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.250305  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.227894  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.155962  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0970374 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0112882 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00595251	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0026794 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00223929	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00153895	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00091584	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.0008353 	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339428	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22372945917824 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22372753074176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22372551747712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22372350421248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22372149094784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22371947768320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22371746441856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22371545115392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22371343788928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22371142462464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22370941136000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22370739809536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22370538483072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22370337156608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22370135830144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22369934503680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22369733177216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22369531850752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22369330524288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22369129197824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22368927871360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22368726544896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22368525218432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22368323891968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22368122565504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22367921239040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22367719912576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22367518586112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22367317259648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22367115933184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22366914606720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22366713280256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22366511949696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22366310623232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22366109296768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22365907970304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22365706643840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22365505317376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22365303990912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22365102664448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22364901337984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22364700011520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22364498685056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22364297358592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22364096032128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22363894705664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22363693379200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22363492052736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22363290726272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22363089399808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22362888073344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22362686746880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22362485420416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22362284093952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22362082767488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22361881441024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22361680114560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22361478788096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22361277461632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22361076135168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22360874808704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22360673482240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22360472155776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22372840257280 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22372833666816 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 3300)                                                                              	 1.97837   	 700       	 10.1045   	 0         	 1.24553   	 8.11264   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3300, m: 66)                                                                             	 1.75778   	 600       	 34.3469   	 0         	 1.20158   	 28.5848   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3300, m: 50)                                                                             	 0.295514  	 100       	 19.5422   	 0         	 0.900261  	 21.7073   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 66)                                                                             	 0.266727  	 100       	 28.5798   	 0         	 1.00304   	 28.4932   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 2500)                                                                              	 0.210803  	 100       	 10.241    	 0         	 1.26913   	 8.06927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 66)                         	 0.205695  	 600       	 83.861    	 0         	 10.2666   	 8.16832   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 66)	 0.194632  	 700       	 65.4194   	 0         	 10.3567   	 6.31661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 66)                           	 0.139868  	 700       	 143.884   	 0         	 17.6149   	 8.16832   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 66, r2: 66, leftOrthog: 1)                      	 0.0680245 	 600       	 253.582   	 0         	 46.7205   	 5.42763   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 66)                                                                               	 0.0483846 	 100       	 2.38713   	 0         	 0.151288  	 15.7787   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 50, n: 50, r2: 66)                         	 0.0273973 	 100       	 79.497    	 0         	 11.2741   	 7.05128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 50)	 0.0257868 	 100       	 53.4381   	 0         	 9.49632   	 5.62725   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 50)                         	 0.0254969 	 100       	 85.4222   	 0         	 10.4909   	 8.14252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 50)                           	 0.0176809 	 100       	 123.184   	 0         	 17.4697   	 7.05128   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 66, r2: 66, leftOrthog: 1)                      	 0.00846973	 100       	 257.151   	 0         	 47.5776   	 5.40487   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 50, r2: 50, leftOrthog: 1)                      	 0.00822601	 100       	 200.583   	 0         	 48.6263   	 4.125     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 50)                                                                                	 0.00634911	 100       	 3.88505   	 0         	 1.15292   	 3.36975   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 16)                                                                                                       	 0.00502913	 808       	 0         	 0         	 32.904    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 1) 	 0.00460792	 100       	 0.143232  	 0         	 1.1462    	 0.124962  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 2, r2: 1)                             	 0.00403529	 100       	 0.327114  	 0         	 1.96308   	 0.166633  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 66, fromLeft: 1)                              	 0.00235895	 800       	 0         	 0         	 23.6363   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 66) 	 0.0020153 	 100       	 21.6146   	 0         	 4.34912   	 4.96988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00150438	 100       	 16.6182   	 0         	 3.98836   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 66, r2: 66)                            	 0.000996084	 100       	 43.7313   	 0         	 8.79926   	 4.96988   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 66)                           	 0.000866895	 100       	 0         	 0         	 6.0907    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000831866	 100       	 0.601058  	 0         	 2.40423   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                        	 0.000504584	 100       	 0         	 0         	 10.4641   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 16)                                                                                                        	 0.000399111	 101       	 0         	 0         	 3.2392    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 66, leftOrthog: 1)                        	 0.000334936	 100       	 98.5263   	 0         	 35.5889   	 2.76846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333201	 100       	 0.750298  	 0         	 12.0048   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 1)                                                                                                        	 0.000322088	 101       	 0         	 0         	 4.01381   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 50, fromLeft: 1)                              	 0.00022118	 100       	 0         	 0         	 23.872    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.1295    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.12946   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.13415   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.76343   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.76217   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.45709   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.3684    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.19553   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.260093  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.227042  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.16258   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0850551 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0112935 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00625491	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00258013	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00203484	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00132568	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000866895	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000831866	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333201	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22460792371072 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22460598577152 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22460397250688 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22460195924224 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22459994597760 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22459793271296 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22459591944832 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22459390618368 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22459189291904 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22458987965440 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22458786638976 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22458585312512 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22458383986048 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22458182659584 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22457981333120 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22457780006656 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22457578680192 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22457377353728 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22457176027264 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22456974700800 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22456773374336 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22456572047872 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22456370721408 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22456169394944 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22455968068480 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22455766742016 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22455565415552 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22455364089088 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22455162762624 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22454961436160 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22454760109696 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22454558783232 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22454357452672 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22454156126208 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22453954799744 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22453753473280 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22453552146816 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22453350820352 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22453149493888 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22452948167424 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22452746840960 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22452545514496 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22452344188032 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22452142861568 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22451941535104 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22451740208640 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22451538882176 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22451337555712 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22451136229248 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22450934902784 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22450733576320 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22450532249856 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22450330923392 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22450129596928 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22449928270464 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22449726944000 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22449525617536 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22449324291072 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22449122964608 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22448921638144 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22448720311680 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22448518985216 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22448317658752 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22460686710528 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22460680120064 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 3350)                                                                              	 2.09237   	 700       	 9.99492   	 0         	 1.21363   	 8.23558   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3350, m: 67)                                                                             	 1.74137   	 600       	 36.2704   	 0         	 1.24993   	 29.018    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 67)                                                                             	 0.264178  	 100       	 29.7366   	 0         	 1.02826   	 28.9192   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3350, m: 50)                                                                             	 0.241473  	 100       	 24.278    	 0         	 1.1183    	 21.7097   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 2500)                                                                              	 0.225207  	 100       	 9.87734   	 0         	 1.2062    	 8.18881   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 67)	 0.213879  	 700       	 61.1581   	 0         	 9.64555   	 6.34055   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 67)                         	 0.213089  	 600       	 84.6865   	 0         	 10.2129   	 8.29208   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 67)                           	 0.150736  	 700       	 139.671   	 0         	 16.8439   	 8.29208   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 67, r2: 67, leftOrthog: 1)                      	 0.0718229 	 600       	 251.254   	 0         	 45.6007   	 5.50987   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 67)                                                                               	 0.0492527 	 100       	 2.38058   	 0         	 0.150246  	 15.8446   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 50)                         	 0.0261751 	 100       	 85.7496   	 0         	 10.376    	 8.26426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 50)	 0.0222022 	 100       	 62.809    	 0         	 11.1809   	 5.61755   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 50, n: 50, r2: 67)                         	 0.0215286 	 100       	 104.257   	 0         	 14.6893   	 7.09746   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 50)                           	 0.0144505 	 100       	 155.323   	 0         	 21.8844   	 7.09746   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 67, r2: 67, leftOrthog: 1)                      	 0.00888234	 100       	 252.692   	 0         	 46.067    	 5.48533   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 50, r2: 50, leftOrthog: 1)                      	 0.00771427	 100       	 217.13    	 0         	 52.6297   	 4.12562   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 50)                                                                                	 0.00627094	 100       	 4.01321   	 0         	 1.18005   	 3.40089   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 17)                                                                                                       	 0.00536919	 808       	 0         	 0         	 34.7929   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 1) 	 0.00463229	 100       	 0.144637  	 0         	 1.15744   	 0.124963  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 2, r2: 1)                             	 0.00403995	 100       	 0.331688  	 0         	 1.99052   	 0.166634  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 67, fromLeft: 1)                              	 0.00248881	 800       	 0         	 0         	 23.087    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 67) 	 0.00197841	 100       	 22.6899   	 0         	 4.52443   	 5.01497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 67, r2: 67)                            	 0.000967886	 100       	 46.3794   	 0         	 9.2482    	 5.01497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000946094	 100       	 26.4244   	 0         	 6.34186   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000915067	 100       	 0.546408  	 0         	 2.18563   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 67)                           	 0.000860634	 100       	 0         	 0         	 6.22797   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                        	 0.000506789	 100       	 0         	 0         	 10.5764   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 17)                                                                                                        	 0.000384414	 101       	 0         	 0         	 3.57323   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000337687	 100       	 0.740331  	 0         	 11.8453   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 1)                                                                                                        	 0.00033138	 101       	 0         	 0         	 4.14509   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 67, leftOrthog: 1)                        	 0.000305201	 100       	 109.764   	 0         	 39.4494   	 2.78239   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 50, fromLeft: 1)                              	 0.000226433	 100       	 0         	 0         	 23.6715   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.14791   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.14788   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.23781   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.66407   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.66273   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.38814   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.32385   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.29628   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.261739  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.242692  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.170195  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0887247 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0119516 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00659177	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00271524	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00217133	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00142491	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000915067	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000860634	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337687	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22946545764224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22946332534784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22946131208320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22945929881856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22945728555392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22945527228928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22945325902464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22945124576000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22944923249536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22944721923072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22944520596608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22944319270144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22944117943680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22943916617216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22943715290752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22943513964288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22943312637824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22943111311360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22942909984896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22942708658432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22942507331968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22942306005504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22942104679040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22941903352576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22941702026112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22941500699648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22941299373184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22941098046720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22940896720256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22940695393792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22940494067328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22940292740864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22940091410304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22939890083840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22939688757376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22939487430912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22939286104448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22939084777984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22938883451520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22938682125056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22938480798592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22938279472128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22938078145664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22937876819200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22937675492736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22937474166272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22937272839808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22937071513344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22936870186880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22936668860416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22936467533952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22936266207488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22936064881024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22935863554560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22935662228096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22935460901632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22935259575168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22935058248704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22934856922240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22934655595776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22934454269312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22934252942848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22934051616384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22946440103680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22946433513216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 3400)                                                                              	 2.08192   	 700       	 10.5016   	 0         	 1.25639   	 8.35852   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3400, m: 68)                                                                             	 1.75415   	 600       	 37.6426   	 0         	 1.27814   	 29.4512   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3400, m: 50)                                                                             	 0.286625  	 100       	 20.7588   	 0         	 0.956091  	 21.7122   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 68)                                                                             	 0.255278  	 100       	 31.6988   	 0         	 1.08021   	 29.345    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 2500)                                                                              	 0.220917  	 100       	 10.3706   	 0         	 1.24822   	 8.30828   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 68)	 0.215234  	 700       	 62.4541   	 0         	 9.80949   	 6.3667    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 68)                         	 0.213758  	 600       	 88.2581   	 0         	 10.4871   	 8.41584   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 68)                           	 0.141208  	 700       	 155.871   	 0         	 18.5212   	 8.41584   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 68, r2: 68, leftOrthog: 1)                      	 0.0774857 	 600       	 243.476   	 0         	 43.5393   	 5.59211   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 68)                                                                               	 0.0481197 	 100       	 2.473     	 0         	 0.155446  	 15.9091   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 50)                         	 0.0260975 	 100       	 88.5909   	 0         	 10.5642   	 8.38595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 50)	 0.024133  	 100       	 58.509    	 0         	 10.4289   	 5.6103    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 50, n: 50, r2: 68)                         	 0.0205427 	 100       	 112.546   	 0         	 15.7564   	 7.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 50)                           	 0.0160026 	 100       	 144.477   	 0         	 20.2267   	 7.14286   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 50)                                                                                	 0.00685248	 100       	 3.74559   	 0         	 1.09158   	 3.43136   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 18)                                                                                                       	 0.00597919	 808       	 0         	 0         	 35.0271   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 50, r2: 50, leftOrthog: 1)                      	 0.00532971	 100       	 318.967   	 0         	 77.3025   	 4.12621   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 68, r2: 68, leftOrthog: 1)                      	 0.00492361	 100       	 469.574   	 0         	 84.3686   	 5.56574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 1) 	 0.00482917	 100       	 0.140811  	 0         	 1.12682   	 0.124963  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 2, r2: 1)                             	 0.00421206	 100       	 0.322882  	 0         	 1.93767   	 0.166634  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 68, fromLeft: 1)                              	 0.00256987	 800       	 0         	 0         	 23.0312   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 68) 	 0.00207249	 100       	 22.3114   	 0         	 4.40978   	 5.05952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 68, r2: 68)                            	 0.00104352	 100       	 44.3114   	 0         	 8.75802   	 5.05952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00100997	 100       	 24.7532   	 0         	 5.94076   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 68)                           	 0.000855103	 100       	 0         	 0         	 6.36181   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000821049	 100       	 0.608977  	 0         	 2.43591   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                        	 0.000487832	 100       	 0         	 0         	 11.1514   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 18)                                                                                                        	 0.00038081	 101       	 0         	 0         	 3.81923   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000342919	 100       	 0.729035  	 0         	 11.6646   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 1)                                                                                                        	 0.000327817	 101       	 0         	 0         	 4.43662   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 68, leftOrthog: 1)                        	 0.000290747	 100       	 116.94    	 0         	 41.8233   	 2.79605   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 50, fromLeft: 1)                              	 0.000221862	 100       	 0         	 0         	 24.5197   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.25995   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.25992   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.28028   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.73019   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.72892   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.43527   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.34417   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.30969   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.261409  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.246269  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.162466  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0880298 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0121288 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00717565	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00279173	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00232938	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00150503	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000855103	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000821049	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000342919	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22574471452544 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22574280992768 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22574079666304 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22573878339840 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22573677013376 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22573475686912 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22573274360448 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22573073033984 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22572871707520 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22572670381056 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22572469054592 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22572267728128 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22572066401664 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22571865075200 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22571663748736 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22571462422272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22571261095808 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22571059769344 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22570858442880 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22570657116416 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22570455789952 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22570254463488 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22570053137024 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22569851810560 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22569650484096 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22569449157632 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22569247831168 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22569046504704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22568845178240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22568643851776 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22568442525312 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22568241198848 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22568039868288 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22567838541824 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22567637215360 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22567435888896 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22567234562432 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22567033235968 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22566831909504 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22566630583040 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22566429256576 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22566227930112 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22566026603648 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22565825277184 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22565623950720 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22565422624256 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22565221297792 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22565019971328 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22564818644864 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22564617318400 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22564415991936 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22564214665472 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22564013339008 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22563812012544 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22563610686080 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22563409359616 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22563208033152 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22563006706688 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22562805380224 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22562604053760 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22562402727296 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22562201400832 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22562000074368 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22574365792000 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22574359201536 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 3450)                                                                              	 2.23939   	 700       	 10.2003   	 0         	 1.20266   	 8.48146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3450, m: 69)                                                                             	 1.88543   	 600       	 36.5895   	 0         	 1.22437   	 29.8843   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 69)                                                                             	 0.273792  	 100       	 30.431    	 0         	 1.02218   	 29.7707   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3450, m: 50)                                                                             	 0.243587  	 100       	 24.7859   	 0         	 1.14144   	 21.7145   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 69)	 0.233072  	 700       	 59.289    	 0         	 9.27104   	 6.39508   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 2500)                                                                              	 0.23148   	 100       	 10.1892   	 0         	 1.20902   	 8.42766   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 69)                         	 0.223579  	 600       	 88.1592   	 0         	 10.3236   	 8.5396    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 69)                           	 0.151601  	 700       	 151.685   	 0         	 17.7625   	 8.5396    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 69, r2: 69, leftOrthog: 1)                      	 0.0941948 	 600       	 209.253   	 0         	 36.8771   	 5.67434   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 69)                                                                               	 0.0491003 	 100       	 2.45925   	 0         	 0.15397   	 15.9722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 50)	 0.0301114 	 100       	 47.5069   	 0         	 8.47519   	 5.60541   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 50)                         	 0.0268793 	 100       	 88.5627   	 0         	 10.4098   	 8.5076    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 50, n: 50, r2: 69)                         	 0.0236768 	 100       	 100.542   	 0         	 13.9884   	 7.1875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 50)                           	 0.015005  	 100       	 158.647   	 0         	 22.0726   	 7.1875    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 50, r2: 50, leftOrthog: 1)                      	 0.0135551 	 100       	 127.259   	 0         	 30.8372   	 4.12679   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 69, r2: 69, leftOrthog: 1)                      	 0.0118756 	 100       	 200.452   	 0         	 35.5027   	 5.64611   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 50)                                                                                	 0.00655203	 100       	 3.99366   	 0         	 1.15384   	 3.46119   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 19)                                                                                                       	 0.00593487	 808       	 0         	 0         	 39.3185   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 1) 	 0.00442049	 100       	 0.156091  	 0         	 1.24909   	 0.124964  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 2, r2: 1)                             	 0.0038214 	 100       	 0.361125  	 0         	 2.16717   	 0.166634  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 69, fromLeft: 1)                              	 0.00262648	 800       	 0         	 0         	 23.2025   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 69) 	 0.00210801	 100       	 22.5853   	 0         	 4.42541   	 5.10355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00114783	 100       	 21.7803   	 0         	 5.22727   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 69, r2: 69)                            	 0.00108205	 100       	 43.9999   	 0         	 8.62144   	 5.10355   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000885976	 100       	 0.564349  	 0         	 2.2574    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 69)                           	 0.00083632	 100       	 0         	 0         	 6.60034   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                        	 0.000699761	 100       	 0         	 0         	 7.88841   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 19)                                                                                                        	 0.000443683	 101       	 0         	 0         	 3.46013   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 1)                                                                                                        	 0.000340719	 101       	 0         	 0         	 4.50577   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000328379	 100       	 0.761315  	 0         	 12.181    	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 69, leftOrthog: 1)                        	 0.000302908	 100       	 113.896   	 0         	 40.5404   	 2.80945   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 50, fromLeft: 1)                              	 0.000245976	 100       	 0         	 0         	 22.4412   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.66075   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.66073   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.50141   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.88379   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.88249   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.57491   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.47742   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.45191   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.275283  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.269712  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.17151   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.119928  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0122123 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00741903	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00287245	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0022488 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00188777	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000885976	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00083632	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328379	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22680703121280 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22680514324480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22680312998016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22680111671552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22679910345088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22679709018624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22679507692160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22679306365696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22679105039232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22678903712768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22678702386304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22678501059840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22678299733376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22678098406912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22677897080448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22677695753984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22677494427520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22677293101056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22677091774592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22676890448128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22676689121664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22676487795200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22676286468736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22676085142272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22675883815808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22675682489344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22675481162880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22675279836416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22675078509952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22674877183488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22674675857024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22674474530560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22674273200000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22674071873536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22673870547072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22673669220608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22673467894144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22673266567680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22673065241216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22672863914752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22672662588288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22672461261824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22672259935360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22672058608896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22671857282432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22671655955968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22671454629504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22671253303040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22671051976576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22670850650112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22670649323648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22670447997184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22670246670720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22670045344256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22669844017792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22669642691328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22669441364864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22669240038400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22669038711936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22668837385472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22668636059008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22668434732544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22668233406080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22680597460736 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22680590870272 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 3500)                                                                              	 2.25346   	 700       	 10.5837   	 0         	 1.23003   	 8.60439   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3500, m: 70)                                                                             	 2.02721   	 600       	 35.5317   	 0         	 1.17199   	 30.3175   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3500, m: 50)                                                                             	 0.301792  	 100       	 20.2954   	 0         	 0.93455   	 21.7168   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 70)                                                                             	 0.269857  	 100       	 31.776    	 0         	 1.05232   	 30.1962   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 2500)                                                                              	 0.240966  	 100       	 10.0725   	 0         	 1.17849   	 8.54697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 70)                         	 0.226402  	 600       	 90.9002   	 0         	 10.4925   	 8.66337   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 70)	 0.215471  	 700       	 65.9487   	 0         	 10.2633   	 6.42568   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 70)                           	 0.149042  	 700       	 161.096   	 0         	 18.595    	 8.66337   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 70, r2: 70, leftOrthog: 1)                      	 0.122007  	 600       	 168.679   	 0         	 29.302    	 5.75658   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 70)                                                                               	 0.0474415 	 100       	 2.58213   	 0         	 0.16104   	 16.034    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 50)	 0.0305297 	 100       	 47.4948   	 0         	 8.47699   	 5.60278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 50)                         	 0.0269815 	 100       	 90.8031   	 0         	 10.5228   	 8.62919   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 50, n: 50, r2: 70)                         	 0.022329  	 100       	 109.723   	 0         	 15.1731   	 7.2314    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 50)                           	 0.0173731 	 100       	 141.023   	 0         	 19.5014   	 7.2314    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 50, r2: 50, leftOrthog: 1)                      	 0.00700097	 100       	 249.965   	 0         	 60.563    	 4.12736   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 70, r2: 70, leftOrthog: 1)                      	 0.00696358	 100       	 351.83    	 0         	 61.4396   	 5.72644   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 50)                                                                                	 0.0069273 	 100       	 3.84949   	 0         	 1.10288   	 3.49039   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 20)                                                                                                       	 0.00646836	 808       	 0         	 0         	 39.973    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 70) 	 0.00607706	 100       	 8.06311   	 0         	 1.56655   	 5.14706   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 70)                           	 0.0046454 	 100       	 0         	 0         	 1.20549   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 1) 	 0.00447546	 100       	 0.156408  	 0         	 1.25162   	 0.124964  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 2, r2: 1)                             	 0.00388422	 100       	 0.360433  	 0         	 2.16301   	 0.166635  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 70, fromLeft: 1)                              	 0.00272623	 800       	 0         	 0         	 23.0061   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 70, r2: 70)                            	 0.0012711 	 100       	 38.5492   	 0         	 7.48956   	 5.14706   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000951881	 100       	 26.2638   	 0         	 6.30331   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000906471	 100       	 0.55159   	 0         	 2.20636   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                        	 0.00050278	 100       	 0         	 0         	 11.1381   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 20)                                                                                                        	 0.000439779	 101       	 0         	 0         	 3.67457   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333636	 100       	 0.74932   	 0         	 11.9891   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 1)                                                                                                        	 0.000331381	 101       	 0         	 0         	 4.87656   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 70, leftOrthog: 1)                        	 0.000318537	 100       	 109.877   	 0         	 38.928    	 2.82258   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 50, fromLeft: 1)                              	 0.000233429	 100       	 0         	 0         	 23.9902   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.98514   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.98512   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.6002    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.12365   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.12232   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.79046   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.6463    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.50135   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.276664  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.256553  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.17157   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.13629   	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0124755 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0077423 	 1110      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.0046454 	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00295966	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00229834	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00131807	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000906471	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333636	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23281982850944 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23281809745920 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23281608419456 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23281407092992 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23281205766528 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23281004440064 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23280803113600 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23280601787136 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23280400460672 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23280199134208 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23279997807744 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23279796481280 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23279595154816 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23279393828352 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23279192501888 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23278991175424 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23278789848960 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23278588522496 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23278387196032 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23278185869568 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23277984543104 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23277783216640 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23277581890176 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23277380563712 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23277179237248 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23276977910784 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23276776584320 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23276575257856 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23276373931392 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23276172604928 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23275971278464 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23275769952000 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23275568621440 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23275367294976 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23275165968512 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23274964642048 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23274763315584 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23274561989120 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23274360662656 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23274159336192 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23273958009728 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23273756683264 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23273555356800 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23273354030336 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23273152703872 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23272951377408 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23272750050944 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23272548724480 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23272347398016 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23272146071552 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23271944745088 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23271743418624 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23271542092160 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23271340765696 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23271139439232 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23270938112768 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23270736786304 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23270535459840 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23270334133376 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23270132806912 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23269931480448 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23269730153984 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23269528827520 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23281704883968 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23281698617088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 3550)                                                                              	 2.41165   	 700       	 10.3194   	 0         	 1.18242   	 8.72733   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3550, m: 71)                                                                             	 1.97057   	 600       	 38.1419   	 0         	 1.24036   	 30.7507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 71)                                                                             	 0.281169  	 100       	 31.3752   	 0         	 1.02461   	 30.6215   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 71)	 0.275141  	 700       	 53.1246   	 0         	 8.22556   	 6.45848   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3550, m: 50)                                                                             	 0.25352   	 100       	 24.505    	 0         	 1.12828   	 21.719    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 2500)                                                                              	 0.243397  	 100       	 10.2575   	 0         	 1.18362   	 8.66619   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 71)                         	 0.239455  	 600       	 89.6813   	 0         	 10.206    	 8.78713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 71)                           	 0.165015  	 700       	 151.828   	 0         	 17.2784   	 8.78713   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 71, r2: 71, leftOrthog: 1)                      	 0.128427  	 600       	 167.214   	 0         	 28.6383   	 5.83882   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 71)                                                                               	 0.0491958 	 100       	 2.52562   	 0         	 0.156924  	 16.0946   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 50)	 0.0335095 	 100       	 43.883    	 0         	 7.833     	 5.60233   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 50)                         	 0.0277054 	 100       	 90.975    	 0         	 10.3963   	 8.75074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 50, n: 50, r2: 71)                         	 0.0222095 	 100       	 113.488   	 0         	 15.6005   	 7.27459   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 50)                           	 0.0165824 	 100       	 151.998   	 0         	 20.8944   	 7.27459   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 71, r2: 71, leftOrthog: 1)                      	 0.0110117 	 100       	 228.893   	 0         	 39.4186   	 5.80673   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 50, r2: 50, leftOrthog: 1)                      	 0.00940075	 100       	 188.815   	 0         	 45.741    	 4.12791   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 21)                                                                                                       	 0.00707662	 808       	 0         	 0         	 40.2823   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 50)                                                                                	 0.00688956	 100       	 3.94315   	 0         	 1.12054   	 3.51899   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 1) 	 0.00481546	 100       	 0.147442  	 0         	 1.17987   	 0.124965  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 2, r2: 1)                             	 0.00422249	 100       	 0.336295  	 0         	 2.01815   	 0.166635  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 71, fromLeft: 1)                              	 0.00286107	 800       	 0         	 0         	 22.5526   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 71) 	 0.00236058	 100       	 21.3549   	 0         	 4.11458   	 5.19006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 71, r2: 71)                            	 0.00116301	 100       	 43.3444   	 0         	 8.35143   	 5.19006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000958506	 100       	 26.0823   	 0         	 6.25974   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 71)                           	 0.000833449	 100       	 0         	 0         	 6.81505   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000825952	 100       	 0.605362  	 0         	 2.42145   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                        	 0.000499589	 100       	 0         	 0         	 11.3693   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 21)                                                                                                        	 0.000453022	 101       	 0         	 0         	 3.74551   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 1)                                                                                                        	 0.000377648	 101       	 0         	 0         	 4.49307   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 71, leftOrthog: 1)                        	 0.000377104	 100       	 94.1385   	 0         	 33.2004   	 2.83546   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000346847	 100       	 0.720779  	 0         	 11.5325   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 50, fromLeft: 1)                              	 0.000228307	 100       	 0         	 0         	 24.8788   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.25197   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.25194   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.89038   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.04141   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.04012   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.71104   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.66194   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.55445   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.315827  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.290329  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.186982  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.149216  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0121761 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00840688	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00308938	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00205908	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0019035 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000833449	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000825952	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346847	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23197674289024 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23197453903872 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23197252577408 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23197051250944 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23196849924480 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23196648598016 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23196447271552 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23196245945088 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23196044618624 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23195843292160 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23195641965696 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23195440639232 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23195239312768 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23195037986304 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23194836659840 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23194635333376 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23194434006912 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23194232680448 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23194031353984 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23193830027520 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23193628701056 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23193427374592 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23193226048128 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23193024721664 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23192823395200 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23192622068736 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23192420742272 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23192219415808 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23192018089344 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23191816762880 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23191615436416 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23191414109952 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23191212779392 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23191011452928 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23190810126464 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23190608800000 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23190407473536 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23190206147072 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23190004820608 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23189803494144 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23189602167680 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23189400841216 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23189199514752 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23188998188288 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23188796861824 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23188595535360 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23188394208896 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23188192882432 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23187991555968 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23187790229504 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23187588903040 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23187387576576 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23187186250112 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23186984923648 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23186783597184 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23186582270720 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23186380944256 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23186179617792 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23185978291328 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23185776964864 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23185575638400 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23185374311936 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23185172985472 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23197568628480 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23197562038016 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 3600)                                                                              	 2.40359   	 700       	 10.7977   	 0         	 1.22004   	 8.85027   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3600, m: 72)                                                                             	 2.16851   	 600       	 36.1456   	 0         	 1.15911   	 31.1838   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 72)                                                                             	 0.293449  	 100       	 30.9151   	 0         	 0.995761  	 31.0467   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3600, m: 50)                                                                             	 0.277401  	 100       	 22.7108   	 0         	 1.04556   	 21.7211   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 2500)                                                                              	 0.246497  	 100       	 10.4144   	 0         	 1.18543   	 8.78533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 72)	 0.241138  	 700       	 62.3682   	 0         	 9.60474   	 6.49348   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 72)                         	 0.235497  	 600       	 95.0961   	 0         	 10.6719   	 8.91089   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 72)                           	 0.152589  	 700       	 171.227   	 0         	 19.2155   	 8.91089   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 72, r2: 72, leftOrthog: 1)                      	 0.112115  	 600       	 199.748   	 0         	 33.7353   	 5.92105   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 72)                                                                               	 0.0494172 	 100       	 2.54972   	 0         	 0.15784   	 16.1538   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 50)	 0.0284928 	 100       	 52.3642   	 0         	 9.34413   	 5.60397   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 50)                         	 0.028033  	 100       	 92.4625   	 0         	 10.4216   	 8.87224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 50, n: 50, r2: 72)                         	 0.0225531 	 100       	 114.929   	 0         	 15.7069   	 7.31707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 50)                           	 0.0192509 	 100       	 134.643   	 0         	 18.4012   	 7.31707   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 22)                                                                                                       	 0.00756149	 808       	 0         	 0         	 41.3751   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 50)                                                                                	 0.00662744	 100       	 4.17455   	 0         	 1.17692   	 3.547     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 50, r2: 50, leftOrthog: 1)                      	 0.0053055 	 100       	 339.27    	 0         	 82.1788   	 4.12844   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 72, r2: 72, leftOrthog: 1)                      	 0.00511596	 100       	 506.65    	 0         	 86.063    	 5.88697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 1) 	 0.00474947	 100       	 0.151596  	 0         	 1.2131    	 0.124965  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 2, r2: 1)                             	 0.00415186	 100       	 0.346833  	 0         	 2.08138   	 0.166636  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 72, fromLeft: 1)                              	 0.00294491	 800       	 0         	 0         	 22.5322   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 72) 	 0.00209659	 100       	 24.7259   	 0         	 4.72539   	 5.23256   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 72, r2: 72)                            	 0.00106889	 100       	 48.499    	 0         	 9.2687    	 5.23256   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000969059	 100       	 25.7982   	 0         	 6.19157   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 72)                           	 0.00086133	 100       	 0         	 0         	 6.68733   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000828831	 100       	 0.603259  	 0         	 2.41304   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                        	 0.000500316	 100       	 0         	 0         	 11.5127   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 22)                                                                                                        	 0.000444878	 101       	 0         	 0         	 3.9957    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000338635	 100       	 0.738258  	 0         	 11.8121   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 1)                                                                                                        	 0.000326305	 101       	 0         	 0         	 5.44766   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 72, leftOrthog: 1)                        	 0.000289542	 100       	 124.334   	 0         	 43.6552   	 2.8481    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 50, fromLeft: 1)                              	 0.000213105	 100       	 0         	 0         	 27.0289   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.3283    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.32827   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.80323   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.24535   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.24409   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.92034   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.78878   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.65671   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.287052  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.276477  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.177061  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.122826  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0124009 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00883299	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00315801	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00206763	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00140172	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00086133	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000828831	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338635	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23009589131136 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23009414866944 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23009213540480 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23009012214016 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23008810887552 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23008609561088 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23008408234624 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23008206908160 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23008005581696 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23007804255232 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23007602928768 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23007401602304 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23007200275840 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23006998949376 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23006797622912 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23006596296448 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23006394969984 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23006193643520 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23005992317056 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23005790990592 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23005589664128 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23005388337664 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23005187011200 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23004985684736 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23004784358272 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23004583031808 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23004381705344 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23004180378880 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23003979052416 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23003777725952 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23003576399488 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23003375073024 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23003173742464 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23002972416000 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23002771089536 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23002569763072 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23002368436608 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23002167110144 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23001965783680 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23001764457216 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23001563130752 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23001361804288 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23001160477824 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23000959151360 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23000757824896 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23000556498432 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23000355171968 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23000153845504 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22999952519040 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22999751192576 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22999549866112 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22999348539648 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22999147213184 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22998945886720 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22998744560256 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22998543233792 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22998341907328 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22998140580864 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22997939254400 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22997737927936 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22997536601472 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22997335275008 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22997133948544 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23009310004992 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23009304864512 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 3650)                                                                              	 2.58035   	 700       	 10.483    	 0         	 1.16825   	 8.97321   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3650, m: 73)                                                                             	 2.38369   	 600       	 34.2718   	 0         	 1.08397   	 31.617    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 73)                                                                             	 0.312171  	 100       	 29.8739   	 0         	 0.949229  	 31.4717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 73)	 0.309716  	 700       	 49.9754   	 0         	 7.65244   	 6.53065   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 2500)                                                                              	 0.255336  	 100       	 10.3337   	 0         	 1.16052   	 8.9044    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3650, m: 50)                                                                             	 0.254546  	 100       	 25.0937   	 0         	 1.15515   	 21.7232   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 73)                         	 0.249581  	 600       	 93.5207   	 0         	 10.3513   	 9.03465   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 73)                           	 0.171914  	 700       	 158.4     	 0         	 17.5325   	 9.03465   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 73, r2: 73, leftOrthog: 1)                      	 0.15521   	 600       	 150.383   	 0         	 25.0501   	 6.00329   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 73)                                                                               	 0.0512085 	 100       	 2.4947    	 0         	 0.153881  	 16.2119   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 50)	 0.0329915 	 100       	 45.9058   	 0         	 8.18636   	 5.6076    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 50)                         	 0.0287388 	 100       	 92.7143   	 0         	 10.3088   	 8.99369   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 50, n: 50, r2: 73)                         	 0.0263583 	 100       	 101.088   	 0         	 13.7369   	 7.35887   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 50)                           	 0.0192232 	 100       	 138.609   	 0         	 18.8356   	 7.35887   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 73, r2: 73, leftOrthog: 1)                      	 0.0101562 	 100       	 262.351   	 0         	 43.9658   	 5.96717   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 50, r2: 50, leftOrthog: 1)                      	 0.00910232	 100       	 200.498   	 0         	 48.559    	 4.12896   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 23)                                                                                                       	 0.00817131	 808       	 0         	 0         	 41.8471   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 50)                                                                                	 0.00685609	 100       	 4.10826   	 0         	 1.14934   	 3.57444   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 1) 	 0.00456514	 100       	 0.159908  	 0         	 1.27961   	 0.124966  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 2, r2: 1)                             	 0.00392778	 100       	 0.371712  	 0         	 2.23068   	 0.166636  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 73, fromLeft: 1)                              	 0.00370997	 800       	 0         	 0         	 18.3859   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 73) 	 0.00222846	 100       	 23.9133   	 0         	 4.53371   	 5.27457   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 73, r2: 73)                            	 0.00118848	 100       	 44.8389   	 0         	 8.50096   	 5.27457   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000942444	 100       	 26.5268   	 0         	 6.36643   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 73)                           	 0.000870539	 100       	 0         	 0         	 6.70849   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000834184	 100       	 0.599388  	 0         	 2.39755   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                        	 0.000481743	 100       	 0         	 0         	 12.1226   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 73, leftOrthog: 1)                        	 0.000450106	 100       	 81.092    	 0         	 28.3489   	 2.8605    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 23)                                                                                                        	 0.000442629	 101       	 0         	 0         	 4.19855   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000348546	 100       	 0.717265  	 0         	 11.4762   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 1)                                                                                                        	 0.000332325	 101       	 0         	 0         	 5.59212   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 50, fromLeft: 1)                              	 0.000240156	 100       	 0         	 0         	 24.3175   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.12403   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.124     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.23055   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.53877   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.53749   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.18484   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.00162   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.84254   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.349501  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.305621  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.196254  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.174919  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0125368 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00942801	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00395013	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00219288	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00205889	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000870539	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000834184	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000348546	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22424188213120 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22423957137408 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22423755810944 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22423554484480 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22423353158016 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22423151831552 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22422950505088 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22422749178624 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22422547852160 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22422346525696 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22422145199232 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22421943872768 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22421742546304 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22421541219840 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22421339893376 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22421138566912 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22420937240448 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22420735913984 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22420534587520 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22420333261056 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22420131934592 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22419930608128 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22419729281664 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22419527955200 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22419326628736 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22419125302272 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22418923975808 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22418722649344 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22418521322880 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22418319996416 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22418118669952 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22417917343488 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22417716012928 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22417514686464 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22417313360000 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22417112033536 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22416910707072 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22416709380608 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22416508054144 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22416306727680 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22416105401216 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22415904074752 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22415702748288 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22415501421824 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22415300095360 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22415098768896 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22414897442432 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22414696115968 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22414494789504 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22414293463040 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22414092136576 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22413890810112 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22413689483648 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22413488157184 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22413286830720 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22413085504256 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22412884177792 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22412682851328 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22412481524864 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22412280198400 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22412078871936 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22411877545472 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22411676219008 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22424082552576 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22424075962112 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3700, m: 74)                                                                             	 2.56263   	 600       	 33.2069   	 0         	 1.03609   	 32.0502   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 3700)                                                                              	 2.50259   	 700       	 11.259    	 0         	 1.23777   	 9.09614   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 74)                                                                             	 0.291227  	 100       	 32.9056   	 0         	 1.03164   	 31.8966   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3700, m: 50)                                                                             	 0.259407  	 100       	 24.9608   	 0         	 1.14893   	 21.7253   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 74)                         	 0.258421  	 600       	 94.0845   	 0         	 10.273    	 9.15842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 74)	 0.258273  	 700       	 61.6931   	 0         	 9.39015   	 6.56998   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 2500)                                                                              	 0.254439  	 100       	 10.6548   	 0         	 1.1808    	 9.02338   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 74)                           	 0.170561  	 700       	 166.308   	 0         	 18.159    	 9.15842   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 74, r2: 74, leftOrthog: 1)                      	 0.127953  	 600       	 190.019   	 0         	 31.2247   	 6.08553   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 74)                                                                               	 0.0493933 	 100       	 2.62181   	 0         	 0.161155  	 16.2688   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 50)                         	 0.028829  	 100       	 94.9737   	 0         	 10.4194   	 9.1151    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 50)	 0.0277655 	 100       	 55.3925   	 0         	 9.86836   	 5.61314   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 50, n: 50, r2: 74)                         	 0.0268003 	 100       	 102.163   	 0         	 13.8058   	 7.4       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 50)                           	 0.0173978 	 100       	 157.376   	 0         	 21.2671   	 7.4       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 74, r2: 74, leftOrthog: 1)                      	 0.00989834	 100       	 276.612   	 0         	 45.7411   	 6.04733   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 24)                                                                                                       	 0.00850025	 808       	 0         	 0         	 43.8018   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 50)                                                                                	 0.00716875	 100       	 3.99883   	 0         	 1.11038   	 3.60133   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 50, r2: 50, leftOrthog: 1)                      	 0.00601033	 100       	 307.803   	 0         	 74.5383   	 4.12946   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 1) 	 0.00447803	 100       	 0.165251  	 0         	 1.32237   	 0.124966  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 2, r2: 1)                             	 0.00388039	 100       	 0.381405  	 0         	 2.28884   	 0.166637  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 74, fromLeft: 1)                              	 0.00312239	 800       	 0         	 0         	 22.4484   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 74) 	 0.00232705	 100       	 23.5319   	 0         	 4.42654   	 5.31609   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 74, r2: 74)                            	 0.00131287	 100       	 41.7101   	 0         	 7.846     	 5.31609   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000997048	 100       	 25.074    	 0         	 6.01776   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000890162	 100       	 0.561696  	 0         	 2.24678   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 74)                           	 0.000846467	 100       	 0         	 0         	 6.99378   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                        	 0.000475403	 100       	 0         	 0         	 12.4526   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 24)                                                                                                        	 0.000457972	 101       	 0         	 0         	 4.23432   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 74, leftOrthog: 1)                        	 0.000440499	 100       	 83.9957   	 0         	 29.2396   	 2.87267   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 1)                                                                                                        	 0.000340068	 101       	 0         	 0         	 5.70239   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000325587	 100       	 0.767844  	 0         	 12.2855   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 50, fromLeft: 1)                              	 0.000237494	 100       	 0         	 0         	 24.9269   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.11375   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.11372   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.09358   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.71569   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.71438   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.35565   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.16266   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.7642    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.315048  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.292844  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.193152  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.144302  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0127594 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0097737 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00335988	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00293425	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00191273	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000890162	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000846467	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000325587	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22903726012288 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22903517079552 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22903315753088 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22903114426624 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22902913100160 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22902711773696 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22902510447232 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22902309120768 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22902107794304 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22901906467840 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22901705141376 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22901503814912 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22901302488448 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22901101161984 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22900899835520 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22900698509056 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22900497182592 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22900295856128 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22900094529664 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22899893203200 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22899691876736 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22899490550272 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22899289223808 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22899087897344 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22898886570880 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22898685244416 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22898483917952 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22898282591488 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22898081265024 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22897879938560 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22897678612096 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22897477285632 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22897275955072 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22897074628608 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22896873302144 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22896671975680 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22896470649216 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22896269322752 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22896067996288 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22895866669824 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22895665343360 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22895464016896 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22895262690432 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22895061363968 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22894860037504 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22894658711040 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22894457384576 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22894256058112 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22894054731648 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22893853405184 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22893652078720 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22893450752256 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22893249425792 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22893048099328 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22892846772864 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22892645446400 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22892444119936 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22892242793472 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22892041467008 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22891840140544 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22891638814080 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22891437487616 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22891236161152 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22903620351744 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22903613761280 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3750, m: 75)                                                                             	 2.81484   	 600       	 31.4739   	 0         	 0.968923  	 32.4833   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 3750)                                                                              	 2.66442   	 700       	 11.0097   	 0         	 1.19423   	 9.21908   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 75)                                                                             	 0.306498  	 100       	 32.1168   	 0         	 0.993676  	 32.3212   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3750, m: 50)                                                                             	 0.263976  	 100       	 24.8602   	 0         	 1.14419   	 21.7273   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 75)                         	 0.263456  	 600       	 96.0787   	 0         	 10.3509   	 9.28218   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 2500)                                                                              	 0.262831  	 100       	 10.5938   	 0         	 1.15877   	 9.14229   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 75)	 0.241073  	 700       	 68.0552   	 0         	 10.2936   	 6.61142   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 75)                           	 0.168576  	 700       	 175.18    	 0         	 18.8728   	 9.28218   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 75, r2: 75, leftOrthog: 1)                      	 0.101001  	 600       	 250.617   	 0         	 40.6334   	 6.16776   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 75)                                                                               	 0.0488057 	 100       	 2.68924   	 0         	 0.164735  	 16.3246   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 50)	 0.0311438 	 100       	 50.1704   	 0         	 8.92633   	 5.6205    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 50)                         	 0.0284138 	 100       	 98.9836   	 0         	 10.7166   	 9.23645   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 50, n: 50, r2: 75)                         	 0.0259003 	 100       	 108.589   	 0         	 14.5944   	 7.44048   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 50)                           	 0.0215865 	 100       	 130.29    	 0         	 17.5109   	 7.44048   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 75, r2: 75, leftOrthog: 1)                      	 0.0105416 	 100       	 266.8     	 0         	 43.5418   	 6.12745   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 25)                                                                                                       	 0.00885961	 808       	 0         	 0         	 45.6002   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 50, r2: 50, leftOrthog: 1)                      	 0.00885106	 100       	 211.839   	 0         	 51.2933   	 4.12996   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 50)                                                                                	 0.00717089	 100       	 4.06736   	 0         	 1.1212    	 3.62769   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 1) 	 0.00437223	 100       	 0.171537  	 0         	 1.37266   	 0.124967  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 2, r2: 1)                             	 0.00375212	 100       	 0.399774  	 0         	 2.39907   	 0.166637  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 75, fromLeft: 1)                              	 0.0032117 	 800       	 0         	 0         	 22.418    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 75) 	 0.00221741	 100       	 25.3674   	 0         	 4.73525   	 5.35714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 75, r2: 75)                            	 0.00118805	 100       	 47.3466   	 0         	 8.83803   	 5.35714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000981535	 100       	 25.4703   	 0         	 6.11287   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 75)                           	 0.00084781	 100       	 0         	 0         	 7.07706   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00082236	 100       	 0.608006  	 0         	 2.43202   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 75, leftOrthog: 1)                        	 0.000506549	 100       	 74.0304   	 0         	 25.6639   	 2.88462   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                        	 0.0004755 	 100       	 0         	 0         	 12.6183   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 25)                                                                                                        	 0.00045834	 101       	 0         	 0         	 4.40721   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 1)                                                                                                        	 0.000381731	 101       	 0         	 0         	 5.29168   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000346977	 100       	 0.720509  	 0         	 11.5281   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 50, fromLeft: 1)                              	 0.000216224	 100       	 0         	 0         	 27.749    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.79764   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.79761   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.49149   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.02188   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.02061   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.63642   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.43412   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.93442   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.318752  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.278806  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.195103  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.1209    	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0130009 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0101752 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00342793	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00221965	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00157378	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00084781	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00082236	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346977	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22821168760704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22820973176832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22820771850368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22820570523904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22820369197440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22820167870976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22819966544512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22819765218048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22819563891584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22819362565120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22819161238656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22818959912192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22818758585728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22818557259264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22818355932800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22818154606336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22817953279872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22817751953408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22817550626944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22817349300480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22817147974016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22816946647552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22816745321088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22816543994624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22816342668160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22816141341696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22815940015232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22815738688768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22815537362304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22815336035840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22815134709376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22814933382912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22814732052352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22814530725888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22814329399424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22814128072960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22813926746496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22813725420032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22813524093568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22813322767104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22813121440640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22812920114176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22812718787712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22812517461248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22812316134784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22812114808320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22811913481856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22811712155392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22811510828928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22811309502464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22811108176000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22810906849536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22810705523072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22810504196608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22810302870144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22810101543680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22809900217216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22809698890752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22809497564288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22809296237824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22809094911360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22808893584896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22808692258432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22821063100160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22821056509696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 3800)                                                                              	 2.58076   	 700       	 11.8273   	 0         	 1.26604   	 9.34202   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3800, m: 76)                                                                             	 2.47572   	 600       	 37.2357   	 0         	 1.13122   	 32.9165   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3800, m: 50)                                                                             	 0.336815  	 100       	 19.7438   	 0         	 0.908629  	 21.7292   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 76)                                                                             	 0.297811  	 100       	 33.941    	 0         	 1.0365    	 32.7457   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 2500)                                                                              	 0.262173  	 100       	 10.904    	 0         	 1.1774    	 9.26111   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 76)                         	 0.260123  	 600       	 101.254   	 0         	 10.7649   	 9.40594   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 76)	 0.255946  	 700       	 66.0152   	 0         	 9.9197    	 6.65496   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 76)                           	 0.167439  	 700       	 183.52    	 0         	 19.5111   	 9.40594   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 76, r2: 76, leftOrthog: 1)                      	 0.129487  	 600       	 203.408   	 0         	 32.5452   	 6.25      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 76)                                                                               	 0.0487875 	 100       	 2.72611   	 0         	 0.166436  	 16.3793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 50)                         	 0.0300253 	 100       	 96.1856   	 0         	 10.2787   	 9.35776   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 50)	 0.0297269 	 100       	 53.4197   	 0         	 9.48906   	 5.62961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 50, n: 50, r2: 76)                         	 0.0279008 	 100       	 103.51    	 0         	 13.8376   	 7.48031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 50)                           	 0.018283  	 100       	 157.961   	 0         	 21.1169   	 7.48031   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 26)                                                                                                       	 0.00987864	 808       	 0         	 0         	 44.2334   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 50)                                                                                	 0.00724983	 100       	 4.09204   	 0         	 1.12003   	 3.65352   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 76, r2: 76, leftOrthog: 1)                      	 0.00592806	 100       	 487.174   	 0         	 78.4812   	 6.20753   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 50, r2: 50, leftOrthog: 1)                      	 0.00584443	 100       	 325.096   	 0         	 78.7075   	 4.13043   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 1) 	 0.00469653	 100       	 0.161822  	 0         	 1.29491   	 0.124967  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 2, r2: 1)                             	 0.00401805	 100       	 0.378293  	 0         	 2.27016   	 0.166637  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 76, fromLeft: 1)                              	 0.00337281	 800       	 0         	 0         	 21.9203   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 76) 	 0.00212779	 100       	 27.1455   	 0         	 5.02906   	 5.39773   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 76, r2: 76)                            	 0.00112588	 100       	 51.3021   	 0         	 9.50439   	 5.39773   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00101069	 100       	 24.7357   	 0         	 5.93657   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000860868	 100       	 0.580809  	 0         	 2.32324   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 76)                           	 0.000841861	 100       	 0         	 0         	 7.22209   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                        	 0.000486069	 100       	 0         	 0         	 12.5085   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 26)                                                                                                        	 0.000464042	 101       	 0         	 0         	 4.52718   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 76, leftOrthog: 1)                        	 0.00040952	 100       	 92.7916   	 0         	 32.0375   	 2.89634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000352461	 100       	 0.709298  	 0         	 11.3488   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 1)                                                                                                        	 0.000349248	 101       	 0         	 0         	 6.01521   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 50, fromLeft: 1)                              	 0.00021574	 100       	 0         	 0         	 28.1821   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.48052   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.48048   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.46332   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.71437   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.71307   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.31033   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.15913   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.85018   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.31906   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.292497  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.190865  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.141669  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0130912 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.011178  	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00358855	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00198871	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00161008	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000860868	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000841861	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000352461	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22598105831296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22597903312896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22597701986432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22597500659968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22597299333504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22597098007040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22596896680576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22596695354112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22596494027648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22596292701184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22596091374720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22595890048256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22595688721792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22595487395328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22595286068864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22595084742400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22594883415936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22594682089472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22594480763008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22594279436544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22594078110080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22593876783616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22593675457152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22593474130688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22593272804224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22593071477760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22592870151296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22592668824832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22592467498368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22592266171904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22592064845440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22591863518976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22591662188416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22591460861952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22591259535488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22591058209024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22590856882560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22590655556096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22590454229632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22590252903168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22590051576704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22589850250240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22589648923776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22589447597312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22589246270848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22589044944384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22588843617920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22588642291456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22588440964992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22588239638528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22588038312064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22587836985600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22587635659136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22587434332672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22587233006208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22587031679744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22586830353280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22586629026816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22586427700352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22586226373888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22586025047424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22585823720960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22585622394496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22598000170752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22597993580288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 3850)                                                                              	 2.79091   	 700       	 11.3742   	 0         	 1.20171   	 9.46495   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3850, m: 77)                                                                             	 2.43472   	 600       	 39.377    	 0         	 1.18073   	 33.3497   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 77)                                                                             	 0.315895  	 100       	 32.8455   	 0         	 0.990216  	 33.17     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 77)                         	 0.276804  	 600       	 98.9582   	 0         	 10.3842   	 9.5297    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 77)	 0.274048  	 700       	 63.5083   	 0         	 9.47806   	 6.70056   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 2500)                                                                              	 0.263746  	 100       	 11.1246   	 0         	 1.18601   	 9.37986   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3850, m: 50)                                                                             	 0.249441  	 100       	 27.0104   	 0         	 1.24294   	 21.7311   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 77)                           	 0.189564  	 700       	 168.583   	 0         	 17.6903   	 9.5297    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 77, r2: 77, leftOrthog: 1)                      	 0.110839  	 600       	 247.133   	 0         	 39.0277   	 6.33224   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 77)                                                                               	 0.0501552 	 100       	 2.68666   	 0         	 0.163493  	 16.4329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 50)	 0.0319029 	 100       	 50.6066   	 0         	 8.97221   	 5.64037   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 50)                         	 0.0291854 	 100       	 101.575   	 0         	 10.7157   	 9.47902   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 50, n: 50, r2: 77)                         	 0.0257658 	 100       	 115.056   	 0         	 15.3009   	 7.51953   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 50)                           	 0.0217376 	 100       	 136.377   	 0         	 18.1363   	 7.51953   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 77, r2: 77, leftOrthog: 1)                      	 0.0104326 	 100       	 284.156   	 0         	 45.1934   	 6.28756   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 27)                                                                                                       	 0.0100751 	 808       	 0         	 0         	 46.7715   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 50)                                                                                	 0.00757298	 100       	 3.98345   	 0         	 1.0828    	 3.67885   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 50, r2: 50, leftOrthog: 1)                      	 0.00755473	 100       	 254.807   	 0         	 61.6832   	 4.1309    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 1) 	 0.00497707	 100       	 0.154709  	 0         	 1.238     	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 2, r2: 1)                             	 0.00435536	 100       	 0.353588  	 0         	 2.12189   	 0.166638  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 77, fromLeft: 1)                              	 0.00345382	 800       	 0         	 0         	 21.9731   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 77) 	 0.00228927	 100       	 25.8991   	 0         	 4.76274   	 5.43785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 77, r2: 77)                            	 0.00126164	 100       	 46.9942   	 0         	 8.64205   	 5.43785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000987199	 100       	 25.3242   	 0         	 6.0778    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000867661	 100       	 0.576262  	 0         	 2.30505   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 77)                           	 0.000851892	 100       	 0         	 0         	 7.23096   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000527594	 100       	 0.473849  	 0         	 7.58159   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                        	 0.000482652	 100       	 0         	 0         	 12.7628   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 27)                                                                                                        	 0.000477589	 101       	 0         	 0         	 4.56794   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 77, leftOrthog: 1)                        	 0.00035762	 100       	 107.656   	 0         	 37.0225   	 2.90785   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 1)                                                                                                        	 0.000350924	 101       	 0         	 0         	 6.21673   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 50, fromLeft: 1)                              	 0.000216636	 100       	 0         	 0         	 28.4348   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.31808   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.31806   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.46284   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.53353   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.53204   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.1826    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.06223   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.05021   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.332742  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.313217  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.216919  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.129184  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0131996 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0113862 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00367046	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00231111	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00177564	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000867661	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000851892	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000527594	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22650085369728 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22649912682496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22649711356032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22649510029568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22649308703104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22649107376640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22648906050176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22648704723712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22648503397248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22648302070784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22648100744320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22647899417856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22647698091392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22647496764928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22647295438464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22647094112000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22646892785536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22646691459072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22646490132608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22646288806144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22646087479680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22645886153216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22645684826752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22645483500288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22645282173824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22645080847360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22644879520896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22644678194432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22644476867968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22644275541504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22644074215040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22643872888576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22643671558016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22643470231552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22643268905088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22643067578624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22642866252160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22642664925696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22642463599232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22642262272768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22642060946304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22641859619840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22641658293376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22641456966912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22641255640448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22641054313984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22640852987520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22640651661056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22640450334592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22640249008128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22640047681664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22639846355200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22639645028736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22639443702272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22639242375808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22639041049344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22638839722880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22638638396416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22638437069952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22638235743488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22638034417024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22637833090560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22637631764096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22649807734528 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22649801144064 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 3900)                                                                              	 2.79592   	 700       	 11.8019   	 0         	 1.23092   	 9.58789   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3900, m: 78)                                                                             	 2.45476   	 600       	 40.597    	 0         	 1.2017    	 33.7828   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3900, m: 50)                                                                             	 0.332636  	 100       	 20.5179   	 0         	 0.944095  	 21.7329   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 78)                                                                             	 0.30888   	 100       	 34.4697   	 0         	 1.02606   	 33.5942   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 78)                         	 0.284481  	 600       	 100.088   	 0         	 10.3681   	 9.65347   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 2500)                                                                              	 0.27178   	 100       	 11.0765   	 0         	 1.16613   	 9.49852   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 78)	 0.25456   	 700       	 70.4377   	 0         	 10.438    	 6.74817   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 78)                           	 0.178545  	 700       	 186.052   	 0         	 19.2731   	 9.65347   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 78, r2: 78, leftOrthog: 1)                      	 0.0795563 	 600       	 357.899   	 0         	 55.7955   	 6.41447   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 78)                                                                               	 0.0501781 	 100       	 2.72031   	 0         	 0.165012  	 16.4855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 50, n: 50, r2: 78)                         	 0.0320687 	 100       	 94.859    	 0         	 12.5506   	 7.55814   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 50)	 0.0312459 	 100       	 52.5509   	 0         	 9.29658   	 5.65271   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 50)                         	 0.0298528 	 100       	 101.9     	 0         	 10.6143   	 9.60024   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 50)                           	 0.0193883 	 100       	 156.898   	 0         	 20.7589   	 7.55814   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 28)                                                                                                       	 0.0112142 	 808       	 0         	 0         	 45.1907   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 50, r2: 50, leftOrthog: 1)                      	 0.00827722	 100       	 235.586   	 0         	 57.0239   	 4.13136   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 78, r2: 78, leftOrthog: 1)                      	 0.00788646	 100       	 385.725   	 0         	 60.5766   	 6.36755   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 50)                                                                                	 0.00730319	 100       	 4.19907   	 0         	 1.13375   	 3.7037    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 1) 	 0.00479205	 100       	 0.162769  	 0         	 1.30249   	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 2, r2: 1)                             	 0.00417209	 100       	 0.373913  	 0         	 2.24386   	 0.166638  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 78, fromLeft: 1)                              	 0.0034776 	 800       	 0         	 0         	 22.3934   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 78) 	 0.00220366	 100       	 27.6086   	 0         	 5.04034   	 5.47753   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0011992 	 100       	 20.8471   	 0         	 5.00331   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 78, r2: 78)                            	 0.00119791	 100       	 50.7883   	 0         	 9.27212   	 5.47753   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000885205	 100       	 0.564841  	 0         	 2.25936   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 78)                           	 0.000838594	 100       	 0         	 0         	 7.44103   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                        	 0.000489441	 100       	 0         	 0         	 12.7492   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 28)                                                                                                        	 0.000458136	 101       	 0         	 0         	 4.93827   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 1)                                                                                                        	 0.00036677	 101       	 0         	 0         	 6.16844   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00035749	 100       	 0.69932   	 0         	 11.1891   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 78, leftOrthog: 1)                        	 0.000307459	 100       	 126.846   	 0         	 43.4529   	 2.91916   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 50, fromLeft: 1)                              	 0.000215843	 100       	 0         	 0         	 28.9099   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.70621   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.70618   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.74378   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.65943   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.65809   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.24741   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.14646   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.07501   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.347601  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.292802  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.203303  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0960275 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0136519 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0125286 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00369344	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00221012	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00150164	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000885205	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000838594	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00035749	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22503085291392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22502877161472 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22502675835008 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22502474508544 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22502273182080 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22502071855616 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22501870529152 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22501669202688 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22501467876224 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22501266549760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22501065223296 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22500863896832 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22500662570368 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22500461243904 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22500259917440 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22500058590976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22499857264512 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22499655938048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22499454611584 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22499253285120 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22499051958656 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22498850632192 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22498649305728 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22498447979264 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22498246652800 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22498045326336 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22497843999872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22497642673408 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22497441346944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22497240020480 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22497038694016 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22496837367552 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22496636036992 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22496434710528 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22496233384064 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22496032057600 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22495830731136 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22495629404672 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22495428078208 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22495226751744 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22495025425280 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22494824098816 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22494622772352 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22494421445888 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22494220119424 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22494018792960 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22493817466496 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22493616140032 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22493414813568 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22493213487104 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22493012160640 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22492810834176 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22492609507712 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22492408181248 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22492206854784 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22492005528320 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22491804201856 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22491602875392 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22491401548928 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22491200222464 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22490998896000 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22490797569536 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22490596243072 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22502979630848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22502973040384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 3950)                                                                              	 2.97635   	 700       	 11.5183   	 0         	 1.18613   	 9.71083   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3950, m: 79)                                                                             	 2.86938   	 600       	 36.0838   	 0         	 1.05459   	 34.216    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 79)                                                                             	 0.340033  	 100       	 32.1197   	 0         	 0.944191  	 34.0182   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 79)                         	 0.295226  	 600       	 100.202   	 0         	 10.2485   	 9.77723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 2500)                                                                              	 0.278645  	 100       	 11.0809   	 0         	 1.1522    	 9.61711   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3950, m: 50)                                                                             	 0.277666  	 100       	 24.895    	 0         	 1.1454    	 21.7347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 79)	 0.273212  	 700       	 67.6242   	 0         	 9.948     	 6.79777   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 79)                           	 0.18265   	 700       	 188.956   	 0         	 19.3261   	 9.77723   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 79, r2: 79, leftOrthog: 1)                      	 0.129955  	 600       	 227.636   	 0         	 35.0387   	 6.49671   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 79)                                                                               	 0.0506862 	 100       	 2.72756   	 0         	 0.164936  	 16.5371   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 50)	 0.0335376 	 100       	 49.8098   	 0         	 8.79014   	 5.66655   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 50)                         	 0.0323171 	 100       	 96.5587   	 0         	 9.93259   	 9.7214    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 50, n: 50, r2: 79)                         	 0.0303455 	 100       	 102.832   	 0         	 13.5374   	 7.59615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 50)                           	 0.0223917 	 100       	 139.36    	 0         	 18.3461   	 7.59615   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 29)                                                                                                       	 0.0117911 	 808       	 0         	 0         	 46.1046   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 79, r2: 79, leftOrthog: 1)                      	 0.00972884	 100       	 320.747   	 0         	 49.7475   	 6.44751   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 50, r2: 50, leftOrthog: 1)                      	 0.00792306	 100       	 249.273   	 0         	 60.3303   	 4.1318    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 50)                                                                                	 0.0073991 	 100       	 4.21221   	 0         	 1.12987   	 3.72806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 1) 	 0.00440731	 100       	 0.179248  	 0         	 1.43435   	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 2, r2: 1)                             	 0.0037517 	 100       	 0.421142  	 0         	 2.52728   	 0.166639  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 79, fromLeft: 1)                              	 0.00372921	 800       	 0         	 0         	 21.4214   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 79) 	 0.00234779	 100       	 26.5824   	 0         	 4.81848   	 5.51676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 79, r2: 79)                            	 0.00132558	 100       	 47.0811   	 0         	 8.5342    	 5.51676   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00110986	 100       	 0.450506  	 0         	 1.80202   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000994547	 100       	 25.1371   	 0         	 6.0329    	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 79)                           	 0.000862383	 100       	 0         	 0         	 7.32853   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000527178	 100       	 0.474223  	 0         	 7.58757   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                        	 0.000480449	 100       	 0         	 0         	 13.1544   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 29)                                                                                                        	 0.00042718	 101       	 0         	 0         	 5.48528   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 79, leftOrthog: 1)                        	 0.000411944	 100       	 95.8868   	 0         	 32.7229   	 2.93027   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 1)                                                                                                        	 0.000337811	 101       	 0         	 0         	 6.93642   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 50, fromLeft: 1)                              	 0.000242974	 100       	 0         	 0         	 26.011    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.5421   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.5421   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.06706   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.15606   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.15433   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.73141   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.53777   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.2624    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.358884  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.313504  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.210119  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.148018  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0137684 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0130365 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00397218	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0021879 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00196485	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00110986	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000862383	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000527178	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23416766187392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23416564344832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23416363018368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23416161691904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23415960365440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23415759038976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23415557712512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23415356386048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23415155059584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23414953733120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23414752406656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23414551080192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23414349753728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23414148427264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23413947100800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23413745774336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23413544447872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23413343121408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23413141794944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23412940468480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23412739142016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23412537815552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23412336489088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23412135162624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23411933836160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23411732509696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23411531183232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23411329856768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23411128530304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23410927203840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23410725877376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23410524550912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23410323220352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23410121893888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23409920567424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23409719240960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23409517914496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23409316588032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23409115261568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23408913935104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23408712608640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23408511282176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23408309955712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23408108629248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23407907302784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23407705976320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23407504649856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23407303323392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23407101996928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23406900670464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23406699344000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23406498017536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23406296691072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23406095364608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23405894038144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23405692711680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23405491385216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23405290058752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23405088732288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23404887405824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23404686079360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23404484752896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23404283426432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23416660526848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23416653936384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 4000)                                                                              	 2.89103   	 700       	 12.3143   	 0         	 1.25225   	 9.83377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4000, m: 80)                                                                             	 2.77325   	 600       	 38.7704   	 0         	 1.11894   	 34.6492   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4000, m: 50)                                                                             	 0.336134  	 100       	 20.825    	 0         	 0.95807   	 21.7364   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 80)                                                                             	 0.3298    	 100       	 33.96     	 0         	 0.986004  	 34.442    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 80)                         	 0.29944   	 600       	 102.592   	 0         	 10.3617   	 9.90099   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 80)	 0.289349  	 700       	 65.8029   	 0         	 9.60723   	 6.84932   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 2500)                                                                              	 0.281786  	 100       	 11.235    	 0         	 1.15401   	 9.73562   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 80, r2: 80, leftOrthog: 1)                      	 0.193538  	 600       	 158.728   	 0         	 24.1267   	 6.57895   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 80)                           	 0.185195  	 700       	 193.525   	 0         	 19.5461   	 9.90099   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 80)                                                                               	 0.0506387 	 100       	 2.76468   	 0         	 0.166671  	 16.5877   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 50)	 0.0315547 	 100       	 53.8746   	 0         	 9.48194   	 5.68182   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 50)                         	 0.0304276 	 100       	 105.168   	 0         	 10.685    	 9.84252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 50, n: 50, r2: 80)                         	 0.0293533 	 100       	 109.017   	 0         	 14.2812   	 7.63359   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 50)                           	 0.020456  	 100       	 156.433   	 0         	 20.4927   	 7.63359   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 30)                                                                                                       	 0.0123253 	 808       	 0         	 0         	 47.2004   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 80, r2: 80, leftOrthog: 1)                      	 0.00822431	 100       	 389.091   	 0         	 59.6087   	 6.52742   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 50)                                                                                	 0.0075781 	 100       	 4.1787    	 0         	 1.11374   	 3.75197   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 50, r2: 50, leftOrthog: 1)                      	 0.00674163	 100       	 296.664   	 0         	 71.7927   	 4.13223   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 1) 	 0.00443522	 100       	 0.180374  	 0         	 1.44336   	 0.124969  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 2, r2: 1)                             	 0.00381966	 100       	 0.418886  	 0         	 2.51373   	 0.166639  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 80, fromLeft: 1)                              	 0.00376175	 800       	 0         	 0         	 21.7771   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 80) 	 0.00225647	 100       	 28.3628   	 0         	 5.10531   	 5.55556   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 80, r2: 80)                            	 0.00121331	 100       	 52.7483   	 0         	 9.4947    	 5.55556   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000977806	 100       	 25.5674   	 0         	 6.13619   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 80)                           	 0.000875243	 100       	 0         	 0         	 7.31225   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000838324	 100       	 0.596428  	 0         	 2.38571   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 30)                                                                                                        	 0.00049268	 101       	 0         	 0         	 4.92003   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                        	 0.000490851	 100       	 0         	 0         	 13.0386   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 80, leftOrthog: 1)                        	 0.000381525	 100       	 104.842   	 0         	 35.6464   	 2.94118   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 1)                                                                                                        	 0.000378165	 101       	 0         	 0         	 6.4099    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000360151	 100       	 0.694153  	 0         	 11.1065   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 50, fromLeft: 1)                              	 0.000216307	 100       	 0         	 0         	 29.5876   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.3675   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.3674   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.89089   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.14679   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.14549   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.71244   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.48982   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.18039   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.360199  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.327595  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.210684  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.208886  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0142629 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.013687  	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00397805	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00219871	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00123461	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000875243	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000838324	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000360151	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22417719555968 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22417514686464 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22417313360000 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22417112033536 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22416910707072 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22416709380608 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22416508054144 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22416306727680 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22416105401216 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22415904074752 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22415702748288 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22415501421824 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22415300095360 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22415098768896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22414897442432 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22414696115968 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22414494789504 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22414293463040 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22414092136576 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22413890810112 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22413689483648 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22413488157184 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22413286830720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22413085504256 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22412884177792 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22412682851328 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22412481524864 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22412280198400 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22412078871936 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22411877545472 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22411676219008 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22411474892544 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22411273561984 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22411072235520 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22410870909056 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22410669582592 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22410468256128 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22410266929664 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22410065603200 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22409864276736 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22409662950272 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22409461623808 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22409260297344 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22409058970880 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22408857644416 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22408656317952 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22408454991488 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22408253665024 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22408052338560 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22407851012096 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22407649685632 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22407448359168 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22407247032704 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22407045706240 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22406844379776 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22406643053312 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22406441726848 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22406240400384 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22406039073920 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22405837747456 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22405636420992 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22405435094528 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22405233768064 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22417613895424 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22417607304960 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 4050)                                                                              	 3.17416   	 700       	 11.6418   	 0         	 1.16924   	 9.9567    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4050, m: 81)                                                                             	 2.88018   	 600       	 38.7485   	 0         	 1.1045    	 35.0823   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 81)                                                                             	 0.366908  	 100       	 31.2933   	 0         	 0.897537  	 34.8657   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 81)                         	 0.310528  	 600       	 102.685   	 0         	 10.2431   	 10.0248   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 2500)                                                                              	 0.290435  	 100       	 11.1731   	 0         	 1.13386   	 9.85404   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 81)	 0.289837  	 700       	 67.7067   	 0         	 9.80864   	 6.90276   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4050, m: 50)                                                                             	 0.281173  	 100       	 25.2069   	 0         	 1.15957   	 21.7381   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 81, r2: 81, leftOrthog: 1)                      	 0.188282  	 600       	 169.354   	 0         	 25.4241   	 6.66118   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 81)                           	 0.180926  	 700       	 205.614   	 0         	 20.5106   	 10.0248   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 81)                                                                               	 0.0509125 	 100       	 2.78419   	 0         	 0.167346  	 16.6373   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 50)	 0.0371003 	 100       	 46.6439   	 0         	 8.18539   	 5.69843   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 50, n: 50, r2: 81)                         	 0.0338051 	 100       	 97.0416   	 0         	 12.6514   	 7.67045   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 50)                         	 0.0322855 	 100       	 101.609   	 0         	 10.1981   	 9.96359   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 50)                           	 0.0262711 	 100       	 124.871   	 0         	 16.2795   	 7.67045   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 31)                                                                                                       	 0.0128648 	 808       	 0         	 0         	 48.2862   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 81, r2: 81, leftOrthog: 1)                      	 0.0126247 	 100       	 259.847   	 0         	 39.3274   	 6.60728   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 50, r2: 50, leftOrthog: 1)                      	 0.00770525	 100       	 262.808   	 0         	 63.593    	 4.13265   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 50)                                                                                	 0.00732278	 100       	 4.39268   	 0         	 1.16349   	 3.77542   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 1) 	 0.00466201	 100       	 0.173745  	 0         	 1.3903    	 0.124969  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 2, r2: 1)                             	 0.00400891	 100       	 0.4041    	 0         	 2.425     	 0.166639  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 81, fromLeft: 1)                              	 0.00381401	 800       	 0         	 0         	 22.019    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 81) 	 0.00237462	 100       	 27.6297   	 0         	 4.93923   	 5.59392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 81, r2: 81)                            	 0.00131049	 100       	 50.0653   	 0         	 8.94995   	 5.59392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00097903	 100       	 25.5355   	 0         	 6.12851   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 81)                           	 0.000902413	 100       	 0         	 0         	 7.18075   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000855224	 100       	 0.584642  	 0         	 2.33857   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                        	 0.000485143	 100       	 0         	 0         	 13.3569   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 31)                                                                                                        	 0.000460251	 101       	 0         	 0         	 5.44225   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 81, leftOrthog: 1)                        	 0.000369917	 100       	 109.484   	 0         	 37.0894   	 2.9519    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 1)                                                                                                        	 0.000367377	 101       	 0         	 0         	 6.81806   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333482	 100       	 0.749666  	 0         	 11.9947   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 50, fromLeft: 1)                              	 0.000218648	 100       	 0         	 0         	 29.6367   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.0718   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.0718   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.48127   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.25202   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.25073   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.80251   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.57917   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.47192   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.377598  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.333973  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.212516  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.208982  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0145366 	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0141775 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00403266	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00221408	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00138262	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000902413	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000855224	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333482	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22567645816704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22567435888640 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22567234562176 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22567033235712 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22566831909248 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22566630582784 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22566429256320 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22566227929856 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22566026603392 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22565825276928 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22565623950464 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22565422624000 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22565221297536 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22565019971072 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22564818644608 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22564617318144 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22564415991680 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22564214665216 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22564013338752 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22563812012288 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22563610685824 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22563409359360 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22563208032896 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22563006706432 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22562805379968 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22562604053504 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22562402727040 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22562201400576 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22562000074112 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22561798747648 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22561597421184 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22561396094720 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22561194764160 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22560993437696 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22560792111232 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22560590784768 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22560389458304 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22560188131840 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22559986805376 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22559785478912 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22559584152448 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22559382825984 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22559181499520 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22558980173056 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22558778846592 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22558577520128 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22558376193664 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22558174867200 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22557973540736 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22557772214272 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22557570887808 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22557369561344 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22557168234880 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22556966908416 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22556765581952 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22556564255488 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22556362929024 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22556161602560 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22555960276096 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22555758949632 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22555557623168 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22555356296704 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22555154970240 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22567540156160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22567533565696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 4100)                                                                              	 3.16862   	 700       	 12.0994   	 0         	 1.20038   	 10.0796   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4100, m: 82)                                                                             	 2.98254   	 600       	 38.8216   	 0         	 1.09309   	 35.5155   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4100, m: 50)                                                                             	 0.371712  	 100       	 19.3026   	 0         	 0.887891  	 21.7398   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 82)                                                                             	 0.35952   	 100       	 32.7297   	 0         	 0.927471  	 35.2892   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 82)                         	 0.315296  	 600       	 104.924   	 0         	 10.3388   	 10.1485   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 2500)                                                                              	 0.290755  	 100       	 11.4366   	 0         	 1.14682   	 9.97239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 82)	 0.263014  	 700       	 76.9075   	 0         	 11.053    	 6.95807   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 82)                           	 0.187765  	 700       	 205.554   	 0         	 20.2545   	 10.1485   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 82, r2: 82, leftOrthog: 1)                      	 0.119359  	 600       	 277.164   	 0         	 41.1014   	 6.74342   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 82)                                                                               	 0.0509121 	 100       	 2.81858   	 0         	 0.168918  	 16.686    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 50, n: 50, r2: 82)                         	 0.0394628 	 100       	 85.1942   	 0         	 11.0545   	 7.70677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 50)	 0.0363808 	 100       	 48.4321   	 0         	 8.47259   	 5.71632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 50)                         	 0.0351877 	 100       	 95.5446   	 0         	 9.4743    	 10.0846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 50)                           	 0.0229814 	 100       	 146.292   	 0         	 18.9823   	 7.70677   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 32)                                                                                                       	 0.0138717 	 808       	 0         	 0         	 47.7167   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 82, r2: 82, leftOrthog: 1)                      	 0.00902945	 100       	 372.337   	 0         	 55.6798   	 6.68711   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 50)                                                                                	 0.00797138	 100       	 4.09799   	 0         	 1.07886   	 3.79844   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 50, r2: 50, leftOrthog: 1)                      	 0.00635539	 100       	 322.561   	 0         	 78.044    	 4.13306   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 1) 	 0.0049232 	 100       	 0.166558  	 0         	 1.33279   	 0.12497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 2, r2: 1)                             	 0.0042673 	 100       	 0.384318  	 0         	 2.30628   	 0.16664   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 82, fromLeft: 1)                              	 0.00398381	 800       	 0         	 0         	 21.6043   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 82) 	 0.00221076	 100       	 30.4149   	 0         	 5.40051   	 5.63187   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 82, r2: 82)                            	 0.00119536	 100       	 56.2508   	 0         	 9.98795   	 5.63187   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00102241	 100       	 24.4521   	 0         	 5.86849   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000894549	 100       	 0.558941  	 0         	 2.23576   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 82)                           	 0.000836624	 100       	 0         	 0         	 7.84104   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                        	 0.000493154	 100       	 0         	 0         	 13.3021   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 32)                                                                                                        	 0.000471733	 101       	 0         	 0         	 5.48107   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 82, leftOrthog: 1)                        	 0.000372578	 100       	 110.044   	 0         	 37.1466   	 2.96243   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 1)                                                                                                        	 0.000359494	 101       	 0         	 0         	 7.19233   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000339265	 100       	 0.736887  	 0         	 11.7902   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 50, fromLeft: 1)                              	 0.000208538	 100       	 0         	 0         	 31.4571   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.1172   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.1172   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.39946   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.39909   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.39776   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.9042    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.76469   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.46735   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.390969  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.306529  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.216209  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.135117  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0151961 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0147075 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00419235	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00242183	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00137062	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000894549	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000836624	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339265	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22388512376704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22388322330624 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22388121004160 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22387919677696 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22387718351232 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22387517024768 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22387315698304 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22387114371840 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22386913045376 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22386711718912 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22386510392448 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22386309065984 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22386107739520 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22385906413056 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22385705086592 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22385503760128 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22385302433664 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22385101107200 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22384899780736 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22384698454272 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22384497127808 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22384295801344 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22384094474880 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22383893148416 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22383691821952 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22383490495488 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22383289169024 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22383087842560 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22382886516096 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22382685189632 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22382483863168 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22382282536704 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22382081206144 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22381879879680 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22381678553216 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22381477226752 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22381275900288 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22381074573824 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22380873247360 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22380671920896 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22380470594432 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22380269267968 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22380067941504 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22379866615040 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22379665288576 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22379463962112 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22379262635648 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22379061309184 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22378859982720 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22378658656256 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22378457329792 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22378256003328 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22378054676864 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22377853350400 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22377652023936 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22377450697472 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22377249371008 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22377048044544 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22376846718080 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22376645391616 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22376444065152 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22376242738688 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22376041412224 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22388406716160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22388400125696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 4150)                                                                              	 3.31007   	 700       	 12.0113   	 0         	 1.17728   	 10.2026   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4150, m: 83)                                                                             	 3.24081   	 600       	 37.051    	 0         	 1.03066   	 35.9487   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 83)                                                                             	 0.385093  	 100       	 31.3061   	 0         	 0.876614  	 35.7125   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 83)                         	 0.334187  	 600       	 102.659   	 0         	 9.99377   	 10.2723   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 83)	 0.29465   	 700       	 70.7691   	 0         	 10.088    	 7.01519   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 2500)                                                                              	 0.29415   	 100       	 11.5804   	 0         	 1.14764   	 10.0907   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4150, m: 50)                                                                             	 0.277084  	 100       	 26.2105   	 0         	 1.20556   	 21.7414   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 83)                           	 0.207117  	 700       	 193.249   	 0         	 18.8127   	 10.2723   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 83, r2: 83, leftOrthog: 1)                      	 0.117549  	 600       	 291.855   	 0         	 42.7585   	 6.82566   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 83)                                                                               	 0.0524175 	 100       	 2.77102   	 0         	 0.165593  	 16.7339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 50, n: 50, r2: 83)                         	 0.0401102 	 100       	 85.8759   	 0         	 11.0914   	 7.74254   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 50)	 0.0347728 	 100       	 51.6064   	 0         	 8.99783   	 5.73543   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 50)                         	 0.0337634 	 100       	 102.019   	 0         	 9.99638   	 10.2056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 50)                           	 0.0236777 	 100       	 145.475   	 0         	 18.789    	 7.74254   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 33)                                                                                                       	 0.0143609 	 808       	 0         	 0         	 49.017    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 83, r2: 83, leftOrthog: 1)                      	 0.0141498 	 100       	 243.43    	 0         	 35.9737   	 6.76689   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 50, r2: 50, leftOrthog: 1)                      	 0.00934937	 100       	 221.94    	 0         	 53.6934   	 4.13347   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 50)                                                                                	 0.00756031	 100       	 4.38693   	 0         	 1.1481    	 3.82104   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 1) 	 0.00461433	 100       	 0.179875  	 0         	 1.43934   	 0.12497   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 83, fromLeft: 1)                              	 0.00408231	 800       	 0         	 0         	 21.6003   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 2, r2: 1)                             	 0.00391117	 100       	 0.424426  	 0         	 2.54696   	 0.16664   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 83) 	 0.00257576	 100       	 26.7455   	 0         	 4.71752   	 5.6694    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 83, r2: 83)                            	 0.0015296 	 100       	 45.038    	 0         	 7.94405   	 5.6694    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00101211	 100       	 24.7009   	 0         	 5.92821   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 83)                           	 0.000857624	 100       	 0         	 0         	 7.74232   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00084218	 100       	 0.593697  	 0         	 2.37479   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                        	 0.0004943 	 100       	 0         	 0         	 13.4331   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 33)                                                                                                        	 0.0004679 	 101       	 0         	 0         	 5.69865   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 1)                                                                                                        	 0.000346729	 101       	 0         	 0         	 7.69016   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 83, leftOrthog: 1)                        	 0.000340881	 100       	 121.743   	 0         	 40.9527   	 2.97278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000336845	 100       	 0.742181  	 0         	 11.8749   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 50, fromLeft: 1)                              	 0.000210052	 100       	 0         	 0         	 31.6112   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.639    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.639    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.66182   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.63783   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.63655   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.15752   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.9554    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.61178   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.409073  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.336612  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.236235  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.141389  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0156699 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0146451 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00429236	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00205121	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00161907	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000857624	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00084218	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336845	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22516887955328 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22516701587456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22516500260992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22516298934528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22516097608064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22515896281600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22515694955136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22515493628672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22515292302208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22515090975744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22514889649280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22514688322816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22514486996352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22514285669888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22514084343424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22513883016960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22513681690496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22513480364032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22513279037568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22513077711104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22512876384640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22512675058176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22512473731712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22512272405248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22512071078784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22511869752320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22511668425856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22511467099392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22511265772928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22511064446464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22510863120000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22510661793536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22510460462976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22510259136512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22510057810048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22509856483584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22509655157120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22509453830656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22509252504192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22509051177728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22508849851264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22508648524800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22508447198336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22508245871872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22508044545408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22507843218944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22507641892480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22507440566016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22507239239552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22507037913088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22506836586624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22506635260160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22506433933696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22506232607232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22506031280768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22505829954304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22505628627840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22505427301376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22505225974912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22505024648448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22504823321984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22504621995520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22504420669056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22516782294784 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22516775704320 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 4200)                                                                              	 3.21361   	 700       	 12.8244   	 0         	 1.24201   	 10.3255   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4200, m: 84)                                                                             	 2.88738   	 600       	 43.1075   	 0         	 1.18486   	 36.3819   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 84)                                                                             	 0.371175  	 100       	 33.2674   	 0         	 0.920624  	 36.1357   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 84)                         	 0.332262  	 600       	 107.031   	 0         	 10.2953   	 10.396    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 84)	 0.30398   	 700       	 70.7193   	 0         	 9.99694   	 7.07409   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 2500)                                                                              	 0.290817  	 100       	 11.9955   	 0         	 1.17501   	 10.2088   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4200, m: 50)                                                                             	 0.26849   	 100       	 27.3753   	 0         	 1.25904   	 21.743    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 84)                           	 0.218287  	 700       	 190.068   	 0         	 18.2827   	 10.396    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 84, r2: 84, leftOrthog: 1)                      	 0.084678  	 600       	 419.97    	 0         	 60.7957   	 6.90789   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 84)                                                                               	 0.0534047 	 100       	 2.75257   	 0         	 0.164031  	 16.7808   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 50, n: 50, r2: 84)                         	 0.0342831 	 100       	 102.908   	 0         	 13.231    	 7.77778   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 50)                         	 0.0327517 	 100       	 107.719   	 0         	 10.4313   	 10.3265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 50)	 0.0319218 	 100       	 57.2649   	 0         	 9.94931   	 5.75567   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 50)                           	 0.0204009 	 100       	 172.933   	 0         	 22.2343   	 7.77778   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 34)                                                                                                       	 0.0143875 	 808       	 0         	 0         	 51.9366   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 84, r2: 84, leftOrthog: 1)                      	 0.0084972 	 100       	 415.196   	 0         	 60.6423   	 6.84664   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 50, r2: 50, leftOrthog: 1)                      	 0.00810771	 100       	 259.013   	 0         	 62.6564   	 4.13386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 50)                                                                                	 0.00786275	 100       	 4.28178   	 0         	 1.11411   	 3.84322   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0069723 	 100       	 3.58562   	 0         	 0.860548  	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 1) 	 0.0049952 	 100       	 0.168161  	 0         	 1.34561   	 0.12497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 2, r2: 1)                             	 0.00435622	 100       	 0.385656  	 0         	 2.3143    	 0.16664   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 84, fromLeft: 1)                              	 0.00413123	 800       	 0         	 0         	 21.862    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 84) 	 0.00229644	 100       	 30.7259   	 0         	 5.38434   	 5.70652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 84, r2: 84)                            	 0.00126555	 100       	 55.7546   	 0         	 9.77033   	 5.70652   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000891849	 100       	 0.560633  	 0         	 2.24253   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 84)                           	 0.000855058	 100       	 0         	 0         	 7.85912   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                        	 0.000486827	 100       	 0         	 0         	 13.8037   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 34)                                                                                                        	 0.000433023	 101       	 0         	 0         	 6.34424   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 1)                                                                                                        	 0.000381464	 101       	 0         	 0         	 7.20173   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 84, leftOrthog: 1)                        	 0.000349882	 100       	 120.04    	 0         	 40.2421   	 2.98295   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329768	 100       	 0.758109  	 0         	 12.1297   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 50, fromLeft: 1)                              	 0.000211076	 100       	 0         	 0         	 31.8369   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.8331   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.8331   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.39311   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.09466   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.09334   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.68575   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.58045   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.51229   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.406269  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.343194  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.244309  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.101633  	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.015721  	 20        
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0156888 	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0043423 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0021079 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122029	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000891849	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000855058	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329768	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23419735029632 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23419517134848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23419315808384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23419114481920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23418913155456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23418711828992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23418510502528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23418309176064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23418107849600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23417906523136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23417705196672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23417503870208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23417302543744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23417101217280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23416899890816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23416698564352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23416497237888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23416295911424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23416094584960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23415893258496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23415691932032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23415490605568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23415289279104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23415087952640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23414886626176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23414685299712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23414483973248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23414282646784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23414081320320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23413879993856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23413678667392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23413477340928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23413276010368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23413074683904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23412873357440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23412672030976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23412470704512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23412269378048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23412068051584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23411866725120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23411665398656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23411464072192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23411262745728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23411061419264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23410860092800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23410658766336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23410457439872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23410256113408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23410054786944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23409853460480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23409652134016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23409450807552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23409249481088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23409048154624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23408846828160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23408645501696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23408444175232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23408242848768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23408041522304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23407840195840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23407638869376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23407437542912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23407236216448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23419629369088 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23419622778624 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 4250)                                                                              	 3.46555   	 700       	 12.3219   	 0         	 1.1793    	 10.4485   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4250, m: 85)                                                                             	 3.314     	 600       	 38.9156   	 0         	 1.05706   	 36.815    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 85)                                                                             	 0.389239  	 100       	 32.4832   	 0         	 0.888522  	 36.5587   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 85)                         	 0.336771  	 600       	 109.414   	 0         	 10.4008   	 10.5198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 85)	 0.335196  	 700       	 66.1218   	 0         	 9.2676    	 7.13473   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 2500)                                                                              	 0.303829  	 100       	 11.7552   	 0         	 1.1383    	 10.327    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4250, m: 50)                                                                             	 0.295994  	 100       	 25.1272   	 0         	 1.15556   	 21.7445   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 85)                           	 0.21373   	 700       	 201.136   	 0         	 19.1197   	 10.5198   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 85, r2: 85, leftOrthog: 1)                      	 0.0926755 	 600       	 397.597   	 0         	 56.8798   	 6.99013   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 85)                                                                               	 0.0543518 	 100       	 2.7368    	 0         	 0.162644  	 16.8269   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 50, n: 50, r2: 85)                         	 0.047529  	 100       	 76.0063   	 0         	 9.7288    	 7.8125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 50)	 0.0425374 	 100       	 43.785    	 0         	 7.57922   	 5.77699   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 50)                         	 0.0336002 	 100       	 107.514   	 0         	 10.291    	 10.4474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 50)                           	 0.0230769 	 100       	 156.542   	 0         	 20.0374   	 7.8125    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 35)                                                                                                       	 0.0183413 	 808       	 0         	 0         	 43.1725   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 85, r2: 85, leftOrthog: 1)                      	 0.0178998 	 100       	 201.818   	 0         	 29.1378   	 6.92634   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 50)                                                                                	 0.00781812	 100       	 4.37018   	 0         	 1.13071   	 3.865     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 50, r2: 50, leftOrthog: 1)                      	 0.00769487	 100       	 276.158   	 0         	 66.7978   	 4.13424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 1) 	 0.00477349	 100       	 0.178067  	 0         	 1.42487   	 0.124971  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 85, fromLeft: 1)                              	 0.00456819	 800       	 0         	 0         	 20.2443   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 2, r2: 1)                             	 0.00411683	 100       	 0.412939  	 0         	 2.47802   	 0.166641  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 85) 	 0.00231228	 100       	 31.2462   	 0         	 5.44052   	 5.74324   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 85, r2: 85)                            	 0.00126741	 100       	 57.006    	 0         	 9.92575   	 5.74324   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00106017	 100       	 23.5811   	 0         	 5.65947   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000956237	 100       	 0.522883  	 0         	 2.09153   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 85)                           	 0.000865523	 100       	 0         	 0         	 7.85652   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                        	 0.000502371	 100       	 0         	 0         	 13.5358   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 85, leftOrthog: 1)                        	 0.000498299	 100       	 85.2902   	 0         	 28.4969   	 2.99296   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 35)                                                                                                        	 0.000477119	 101       	 0         	 0         	 5.92724   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 1)                                                                                                        	 0.000372624	 101       	 0         	 0         	 7.58942   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000331693	 100       	 0.753709  	 0         	 12.0593   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 50, fromLeft: 1)                              	 0.000220397	 100       	 0         	 0         	 30.8534   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.1194   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.1193   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.93885   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.76106   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.75967   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.22812   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.05359   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.7772    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.41896   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.384819  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.242191  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.118768  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0196934 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0154955 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00478859	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00359562	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00247364	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000956237	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000865523	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331693	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23443785779072 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23443609217024 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23443407890560 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23443206564096 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23443005237632 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23442803911168 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23442602584704 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23442401258240 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23442199931776 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23441998605312 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23441797278848 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23441595952384 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23441394625920 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23441193299456 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23440991972992 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23440790646528 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23440589320064 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23440387993600 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23440186667136 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23439985340672 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23439784014208 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23439582687744 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23439381361280 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23439180034816 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23438978708352 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23438777381888 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23438576055424 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23438374728960 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23438173402496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23437972076032 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23437770749568 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23437569423104 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23437368092544 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23437166766080 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23436965439616 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23436764113152 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23436562786688 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23436361460224 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23436160133760 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23435958807296 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23435757480832 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23435556154368 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23435354827904 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23435153501440 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23434952174976 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23434750848512 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23434549522048 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23434348195584 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23434146869120 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23433945542656 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23433744216192 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23433542889728 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23433341563264 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23433140236800 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23432938910336 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23432737583872 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23432536257408 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23432334930944 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23432133604480 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23431932278016 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23431730951552 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23431529625088 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23431328298624 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23443680118528 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23443501496064 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 4300)                                                                              	 3.44289   	 700       	 12.8459   	 0         	 1.21516   	 10.5714   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4300, m: 86)                                                                             	 3.43379   	 600       	 38.8992   	 0         	 1.04433   	 37.2482   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 86)                                                                             	 0.396463  	 100       	 32.6462   	 0         	 0.882771  	 36.9815   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 86)                         	 0.357372  	 600       	 106.789   	 0         	 10.0332   	 10.6436   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 2500)                                                                              	 0.306927  	 100       	 11.9103   	 0         	 1.14029   	 10.445    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 86)	 0.305737  	 700       	 74.7438   	 0         	 10.3853   	 7.19705   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4300, m: 50)                                                                             	 0.298147  	 100       	 25.2392   	 0         	 1.16064   	 21.746    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 86)                           	 0.217725  	 700       	 204.496   	 0         	 19.2131   	 10.6436   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 86, r2: 86, leftOrthog: 1)                      	 0.116211  	 600       	 328.396   	 0         	 46.4337   	 7.07237   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 86)                                                                               	 0.0540414 	 100       	 2.7849    	 0         	 0.165059  	 16.8722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 50, n: 50, r2: 86)                         	 0.0442431 	 100       	 83.5837   	 0         	 10.6521   	 7.84672   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 50)                         	 0.037423  	 100       	 98.8163   	 0         	 9.35032   	 10.5682   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 50)	 0.0362893 	 100       	 52.3019   	 0         	 9.01863   	 5.79932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 50)                           	 0.0228584 	 100       	 161.778   	 0         	 20.6173   	 7.84672   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 36)                                                                                                       	 0.0177338 	 808       	 0         	 0         	 47.2395   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 50, r2: 50, leftOrthog: 1)                      	 0.00979642	 100       	 219.468   	 0         	 53.0806   	 4.13462   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 86, r2: 86, leftOrthog: 1)                      	 0.00942151	 100       	 392.506   	 0         	 56.0243   	 7.006     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 50)                                                                                	 0.00813574	 100       	 4.26103   	 0         	 1.0964    	 3.88639   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 1) 	 0.00481231	 100       	 0.178708  	 0         	 1.43      	 0.124971  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 86, fromLeft: 1)                              	 0.00441876	 800       	 0         	 0         	 21.4243   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 2, r2: 1)                             	 0.004113  	 100       	 0.418186  	 0         	 2.50951   	 0.166641  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 86) 	 0.00242798	 100       	 30.4616   	 0         	 5.27056   	 5.77957   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 86, r2: 86)                            	 0.00136418	 100       	 54.2158   	 0         	 9.38059   	 5.77957   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000998779	 100       	 25.0306   	 0         	 6.00733   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000938155	 100       	 0.532961  	 0         	 2.13184   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 86)                           	 0.000891584	 100       	 0         	 0         	 7.7166    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                        	 0.000527398	 100       	 0         	 0         	 13.0452   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 36)                                                                                                        	 0.000473079	 101       	 0         	 0         	 6.14866   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 86, leftOrthog: 1)                        	 0.000375239	 100       	 114.594   	 0         	 38.1623   	 3.00279   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 1)                                                                                                        	 0.000356005	 101       	 0         	 0         	 8.17067   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335449	 100       	 0.74527   	 0         	 11.9243   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 50, fromLeft: 1)                              	 0.000208863	 100       	 0         	 0         	 32.9403   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.2749   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.2748   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.00543   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.91574   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.91437   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.37621   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.18244   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.75795   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.440037  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.349266  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.246061  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.135804  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0190903 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0154309 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00462763	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00221887	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00143429	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000938155	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000891584	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335449	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22608512735104 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22608305186816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22608103860352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22607902533888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22607701207424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22607499880960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22607298554496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22607097228032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22606895901568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22606694575104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22606493248640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22606291922176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22606090595712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22605889269248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22605687942784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22605486616320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22605285289856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22605083963392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22604882636928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22604681310464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22604479984000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22604278657536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22604077331072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22603876004608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22603674678144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22603473351680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22603272025216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22603070698752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22602869372288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22602668045824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22602466719360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22602265392896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22602064062336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22601862735872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22601661409408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22601460082944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22601258756480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22601057430016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22600856103552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22600654777088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22600453450624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22600252124160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22600050797696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22599849471232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22599648144768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22599446818304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22599245491840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22599044165376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22598842838912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22598641512448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22598440185984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22598238859520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22598037533056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22597836206592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22597634880128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22597433553664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22597232227200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22597030900736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22596829574272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22596628247808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22596426921344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22596225594880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22596024268416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22608407074560 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22608400484096 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 4350)                                                                              	 3.59284   	 700       	 12.7442   	 0         	 1.19168   	 10.6943   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4350, m: 87)                                                                             	 3.37681   	 600       	 40.9515   	 0         	 1.08678   	 37.6814   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 87)                                                                             	 0.409176  	 100       	 32.3718   	 0         	 0.865459  	 37.4042   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 87)                         	 0.350337  	 600       	 112.778   	 0         	 10.4741   	 10.7673   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 87)	 0.335568  	 700       	 70.2159   	 0         	 9.67025   	 7.26102   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 2500)                                                                              	 0.307196  	 100       	 12.1766   	 0         	 1.15276   	 10.5629   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4350, m: 50)                                                                             	 0.303513  	 100       	 25.0813   	 0         	 1.15329   	 21.7475   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 87)                           	 0.220536  	 700       	 209.014   	 0         	 19.4119   	 10.7673   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 87, r2: 87, leftOrthog: 1)                      	 0.17268   	 600       	 228.806   	 0         	 31.9803   	 7.15461   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 87)                                                                               	 0.05303   	 100       	 2.87102   	 0         	 0.169715  	 16.9167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 50)	 0.0419287 	 100       	 46.1379   	 0         	 7.92393   	 5.8226    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 50, n: 50, r2: 87)                         	 0.0374106 	 100       	 101.161   	 0         	 12.837    	 7.88043   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 50)                         	 0.0341465 	 100       	 110.831   	 0         	 10.3687   	 10.689    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 50)                           	 0.0245766 	 100       	 153.988   	 0         	 19.5405   	 7.88043   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 37)                                                                                                       	 0.0182834 	 808       	 0         	 0         	 48.4002   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 87, r2: 87, leftOrthog: 1)                      	 0.0108996 	 100       	 347.213   	 0         	 49.0025   	 7.08561   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 50, r2: 50, leftOrthog: 1)                      	 0.00859674	 100       	 253.003   	 0         	 61.186    	 4.13498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 50)                                                                                	 0.00855284	 100       	 4.11169   	 0         	 1.05228   	 3.9074    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 1) 	 0.00623282	 100       	 0.139584  	 0         	 1.11693   	 0.124971  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 2, r2: 1)                             	 0.00551944	 100       	 0.315249  	 0         	 1.89179   	 0.166641  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 87, fromLeft: 1)                              	 0.00449026	 800       	 0         	 0         	 21.5763   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 87) 	 0.00250132	 100       	 30.26     	 0         	 5.20333   	 5.81551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 87, r2: 87)                            	 0.00140605	 100       	 53.8317   	 0         	 9.25658   	 5.81551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0010075 	 100       	 24.8139   	 0         	 5.95534   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 87)                           	 0.000910566	 100       	 0         	 0         	 7.6436    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000894445	 100       	 0.559006  	 0         	 2.23602   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                        	 0.000509502	 100       	 0         	 0         	 13.6604   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 37)                                                                                                        	 0.000476657	 101       	 0         	 0         	 6.27202   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000340189	 100       	 0.734886  	 0         	 11.7582   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 1)                                                                                                        	 0.00032942	 101       	 0         	 0         	 9.07534   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 87, leftOrthog: 1)                        	 0.000327432	 100       	 132.852   	 0         	 44.1008   	 3.01247   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 50, fromLeft: 1)                              	 0.000208436	 100       	 0         	 0         	 33.3915   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.5324   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.5324   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.28463   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.85524   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.85392   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.34679   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.14253   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.90859   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.422901  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.386231  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.252038  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.192504  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.019599  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0161673 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0046987 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00243105	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00167888	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000910566	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000894445	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340189	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22999119099776 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22998945884160 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22998744557696 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22998543231232 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22998341904768 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22998140578304 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22997939251840 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22997737925376 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22997536598912 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22997335272448 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22997133945984 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22996932619520 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22996731293056 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22996529966592 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22996328640128 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22996127313664 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22995925987200 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22995724660736 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22995523334272 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22995322007808 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22995120681344 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22994919354880 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22994718028416 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22994516701952 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22994315375488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22994114049024 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22993912722560 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22993711396096 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22993510069632 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22993308743168 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22993107416704 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22992906090240 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22992704759680 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22992503433216 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22992302106752 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22992100780288 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22991899453824 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22991698127360 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22991496800896 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22991295474432 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22991094147968 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22990892821504 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22990691495040 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22990490168576 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22990288842112 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22990087515648 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22989886189184 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22989684862720 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22989483536256 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22989282209792 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22989080883328 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22988879556864 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22988678230400 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22988476903936 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22988275577472 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22988074251008 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22987872924544 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22987671598080 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22987470271616 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22987268945152 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22987067618688 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22986866292224 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22986664965760 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22998841022208 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22998834870016 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 4400)                                                                              	 3.50242   	 700       	 13.5292   	 0         	 1.25071   	 10.8173   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4400, m: 88)                                                                             	 3.28272   	 600       	 43.5947   	 0         	 1.14378   	 38.1145   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 88)                                                                             	 0.394629  	 100       	 34.3411   	 0         	 0.907854  	 37.8267   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 88)                         	 0.353745  	 600       	 115.587   	 0         	 10.613    	 10.8911   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4400, m: 50)                                                                             	 0.351468  	 100       	 21.9081   	 0         	 1.00732   	 21.749    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 88)	 0.341708  	 700       	 71.0988   	 0         	 9.70421   	 7.3266    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 2500)                                                                              	 0.315813  	 100       	 12.1165   	 0         	 1.13442   	 10.6808   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 88)                           	 0.228989  	 700       	 208.321   	 0         	 19.1276   	 10.8911   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 88, r2: 88, leftOrthog: 1)                      	 0.189804  	 600       	 215.424   	 0         	 29.7677   	 7.23684   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 88)                                                                               	 0.0527882 	 100       	 2.91732   	 0         	 0.172008  	 16.9604   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 50, n: 50, r2: 88)                         	 0.0484868 	 100       	 79.8568   	 0         	 10.091    	 7.91367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 50)	 0.0364605 	 100       	 54.0859   	 0         	 9.25055   	 5.84677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 50)                         	 0.0328509 	 100       	 117.866   	 0         	 10.9037   	 10.8097   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 50)                           	 0.0232464 	 100       	 166.563   	 0         	 21.0475   	 7.91367   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 38)                                                                                                       	 0.0182451 	 808       	 0         	 0         	 51.1592   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 88, r2: 88, leftOrthog: 1)                      	 0.00881598	 100       	 439.202   	 0         	 61.2967   	 7.16519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 50, r2: 50, leftOrthog: 1)                      	 0.00865021	 100       	 254.329   	 0         	 61.5014   	 4.13534   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 50)                                                                                	 0.00829156	 100       	 4.30155   	 0         	 1.09509   	 3.92804   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 88, fromLeft: 1)                              	 0.00475619	 800       	 0         	 0         	 20.8409   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 1) 	 0.0046965 	 100       	 0.187373  	 0         	 1.49933   	 0.124972  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 2, r2: 1)                             	 0.00401775	 100       	 0.438056  	 0         	 2.62873   	 0.166641  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 88) 	 0.00262782	 100       	 29.4692   	 0         	 5.03656   	 5.85106   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 88, r2: 88)                            	 0.0015583 	 100       	 49.6952   	 0         	 8.49336   	 5.85106   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0009748 	 100       	 25.6463   	 0         	 6.15511   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 88)                           	 0.000881089	 100       	 0         	 0         	 7.99011   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000852684	 100       	 0.586384  	 0         	 2.34553   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                        	 0.0005008 	 100       	 0         	 0         	 14.0575   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 38)                                                                                                        	 0.000441211	 101       	 0         	 0         	 6.95903   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 1)                                                                                                        	 0.000380447	 101       	 0         	 0         	 8.07051   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 88, leftOrthog: 1)                        	 0.000336817	 100       	 130.635   	 0         	 43.2282   	 3.02198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000336051	 100       	 0.743935  	 0         	 11.903    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 50, fromLeft: 1)                              	 0.000206992	 100       	 0         	 0         	 34.011    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.3602   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.3602   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.13768   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.82968   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.82839   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.29954   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.0816    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.82653   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.436058  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.385493  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.257811  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.207607  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0195675 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0163272 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00496319	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00235853	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00216253	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000881089	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000852684	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336051	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23078448256896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23078268561408 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23078067234944 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23077865908480 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23077664582016 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23077463255552 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23077261929088 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23077060602624 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23076859276160 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23076657949696 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23076456623232 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23076255296768 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23076053970304 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23075852643840 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23075651317376 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23075449990912 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23075248664448 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23075047337984 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23074846011520 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23074644685056 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23074443358592 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23074242032128 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23074040705664 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23073839379200 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23073638052736 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23073436726272 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23073235399808 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23073034073344 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23072832746880 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23072631420416 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23072430093952 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23072228767488 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23072027436928 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23071826110464 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23071624784000 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23071423457536 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23071222131072 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23071020804608 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23070819478144 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23070618151680 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23070416825216 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23070215498752 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23070014172288 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23069812845824 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23069611519360 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23069410192896 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23069208866432 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23069007539968 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23068806213504 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23068604887040 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23068403560576 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23068202234112 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23068000907648 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23067799581184 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23067598254720 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23067396928256 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23067195601792 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23066994275328 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23066792948864 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23066591622400 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23066390295936 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23066188969472 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23065987643008 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23078342596352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23078163699456 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 4450)                                                                              	 3.71232   	 700       	 13.2044   	 0         	 1.20696   	 10.9402   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4450, m: 89)                                                                             	 3.53193   	 600       	 41.9158   	 0         	 1.08737   	 38.5477   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 89)                                                                             	 0.420703  	 100       	 32.949    	 0         	 0.861434  	 38.249    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 89)	 0.37695   	 700       	 66.4567   	 0         	 8.98825   	 7.39373   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 89)                         	 0.361578  	 600       	 116.982   	 0         	 10.6204   	 11.0149   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 2500)                                                                              	 0.311359  	 100       	 12.5691   	 0         	 1.16395   	 10.7986   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4450, m: 50)                                                                             	 0.27845   	 100       	 27.9673   	 0         	 1.28583   	 21.7504   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 89)                           	 0.243417  	 700       	 202.73    	 0         	 18.4051   	 11.0149   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 89, r2: 89, leftOrthog: 1)                      	 0.173201  	 600       	 244.214   	 0         	 33.3668   	 7.31908   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 89)                                                                               	 0.0544681 	 100       	 2.85947   	 0         	 0.168172  	 17.0033   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 50, n: 50, r2: 89)                         	 0.0451229 	 100       	 87.7714   	 0         	 11.0454   	 7.94643   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 50)                         	 0.0335183 	 100       	 118.159   	 0         	 10.8101   	 10.9304   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 50)	 0.0329239 	 100       	 61.065    	 0         	 10.3997   	 5.87179   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 50)                           	 0.0206903 	 100       	 191.418   	 0         	 24.0886   	 7.94643   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 39)                                                                                                       	 0.0186991 	 808       	 0         	 0         	 52.5786   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 89, r2: 89, leftOrthog: 1)                      	 0.0137984 	 100       	 287.026   	 0         	 39.6186   	 7.24473   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 50, r2: 50, leftOrthog: 1)                      	 0.00890667	 100       	 249.813   	 0         	 60.4042   	 4.13569   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 50)                                                                                	 0.00860844	 100       	 4.20129   	 0         	 1.06407   	 3.94832   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 89, fromLeft: 1)                              	 0.00489007	 800       	 0         	 0         	 20.7336   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 1) 	 0.00473641	 100       	 0.187906  	 0         	 1.50359   	 0.124972  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 2, r2: 1)                             	 0.00407252	 100       	 0.437076  	 0         	 2.62285   	 0.166642  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 89) 	 0.00242492	 100       	 32.665    	 0         	 5.54937   	 5.88624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 89, r2: 89)                            	 0.0014042 	 100       	 56.4094   	 0         	 9.58326   	 5.88624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000959792	 100       	 26.0473   	 0         	 6.25135   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000873272	 100       	 0.572559  	 0         	 2.29024   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 89)                           	 0.000846078	 100       	 0         	 0         	 8.4153    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                        	 0.000504056	 100       	 0         	 0         	 14.1254   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 39)                                                                                                        	 0.000468542	 101       	 0         	 0         	 6.72554   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 89, leftOrthog: 1)                        	 0.000389359	 100       	 114.29    	 0         	 37.703    	 3.03134   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 1)                                                                                                        	 0.000387461	 101       	 0         	 0         	 8.13295   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335793	 100       	 0.744506  	 0         	 11.9121   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 50, fromLeft: 1)                              	 0.000198714	 100       	 0         	 0         	 35.8304   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.8538   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.8538   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.41967   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.00566   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.00436   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.50718   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.28555   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.03229   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.441179  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.417035  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.269584  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.196295  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0200592 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0163291 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00508878	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00250089	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00204954	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000873272	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000846078	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335793	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22920362813312 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22920160077824 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22919958751360 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22919757424896 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22919556098432 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22919354771968 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22919153445504 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22918952119040 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22918750792576 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22918549466112 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22918348139648 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22918146813184 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22917945486720 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22917744160256 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22917542833792 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22917341507328 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22917140180864 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22916938854400 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22916737527936 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22916536201472 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22916334875008 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22916133548544 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22915932222080 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22915730895616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22915529569152 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22915328242688 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22915126916224 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22914925589760 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22914724263296 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22914522936832 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22914321610368 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22914120283904 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22913918953344 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22913717626880 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22913516300416 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22913314973952 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22913113647488 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22912912321024 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22912710994560 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22912509668096 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22912308341632 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22912107015168 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22911905688704 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22911704362240 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22911503035776 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22911301709312 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22911100382848 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22910899056384 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22910697729920 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22910496403456 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22910295076992 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22910093750528 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22909892424064 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22909691097600 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22909489771136 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22909288444672 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22909087118208 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22908885791744 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22908684465280 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22908483138816 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22908281812352 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22908080485888 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22907879159424 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22920257152768 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22920250562304 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4500, m: 90)                                                                             	 3.76663   	 600       	 40.6437   	 0         	 1.04266   	 38.9809   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 4500)                                                                              	 3.71837   	 700       	 13.6323   	 0         	 1.23222   	 11.0631   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 90)                                                                             	 0.422757  	 100       	 33.5299   	 0         	 0.867051  	 38.6712   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 90)                         	 0.375093  	 600       	 116.611   	 0         	 10.4691   	 11.1386   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 90)	 0.354073  	 700       	 72.9511   	 0         	 9.77584   	 7.46238   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 2500)                                                                              	 0.320378  	 100       	 12.4896   	 0         	 1.14412   	 10.9163   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4500, m: 50)                                                                             	 0.307764  	 100       	 25.5878   	 0         	 1.17636   	 21.7517   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 90)                           	 0.245296  	 700       	 208.035   	 0         	 18.6769   	 11.1386   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 90, r2: 90, leftOrthog: 1)                      	 0.151716  	 600       	 288.301   	 0         	 38.9527   	 7.40132   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 90)                                                                               	 0.0550453 	 100       	 2.86128   	 0         	 0.167862  	 17.0455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 50, n: 50, r2: 90)                         	 0.0519969 	 100       	 77.8893   	 0         	 9.76213   	 7.97872   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 50)	 0.0342665 	 100       	 59.8252   	 0         	 10.144    	 5.89758   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 50)                         	 0.0342554 	 100       	 118.229   	 0         	 10.6985   	 11.0511   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 40)                                                                                                       	 0.0210804 	 808       	 0         	 0         	 49.0617   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 50)                           	 0.0207478 	 100       	 195.202   	 0         	 24.4653   	 7.97872   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 50, r2: 50, leftOrthog: 1)                      	 0.0118659 	 100       	 189.619   	 0         	 45.8457   	 4.13603   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 90, r2: 90, leftOrthog: 1)                      	 0.00973264	 100       	 416.125   	 0         	 56.815    	 7.32422   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 50)                                                                                	 0.00841689	 100       	 4.35631   	 0         	 1.09779   	 3.96825   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 90, fromLeft: 1)                              	 0.00476252	 800       	 0         	 0         	 21.77     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 1) 	 0.00469623	 100       	 0.191643  	 0         	 1.53349   	 0.124972  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 2, r2: 1)                             	 0.00405548	 100       	 0.443844  	 0         	 2.66346   	 0.166642  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 90) 	 0.00241058	 100       	 33.6019   	 0         	 5.67499   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 90, r2: 90)                            	 0.00132025	 100       	 61.3519   	 0         	 10.3617   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00116528	 100       	 21.4541   	 0         	 5.14899   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 90)                           	 0.000906703	 100       	 0         	 0         	 7.94086   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000834223	 100       	 0.59936   	 0         	 2.39744   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                        	 0.000514185	 100       	 0         	 0         	 14.0027   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 40)                                                                                                        	 0.000495581	 101       	 0         	 0         	 6.52164   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 90, leftOrthog: 1)                        	 0.00043721	 100       	 102.925   	 0         	 33.851    	 3.04054   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 1)                                                                                                        	 0.000377963	 101       	 0         	 0         	 8.5511    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335881	 100       	 0.744311  	 0         	 11.909    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 50, fromLeft: 1)                              	 0.000207372	 100       	 0         	 0         	 34.7202   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 13.3719   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 13.3718   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.61798   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.35284   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.35156   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.78295   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.5522    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.04717   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.46251   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.395446  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.271419  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.173752  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0224681 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0168531 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00496989	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00222662	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00153273	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000906703	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000834223	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335881	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23046779754368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23046593177600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23046391851136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23046190524672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23045989198208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23045787871744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23045586545280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23045385218816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23045183892352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23044982565888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23044781239424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23044579912960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23044378586496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23044177260032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23043975933568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23043774607104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23043573280640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23043371954176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23043170627712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23042969301248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23042767974784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23042566648320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23042365321856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23042163995392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23041962668928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23041761342464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23041560016000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23041358689536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23041157363072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23040956036608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23040754710144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23040553383680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23040352053120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23040150726656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23039949400192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23039748073728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23039546747264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23039345420800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23039144094336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23038942767872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23038741441408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23038540114944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23038338788480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23038137462016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23037936135552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23037734809088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23037533482624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23037332156160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23037130829696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23036929503232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23036728176768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23036526850304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23036325523840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23036124197376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23035922870912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23035721544448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23035520217984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23035318891520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23035117565056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23034916238592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23034714912128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23034513585664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23034312259200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23046674093824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23046667503360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 4550)                                                                              	 3.93026   	 700       	 13.332    	 0         	 1.19184   	 11.1861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4550, m: 91)                                                                             	 3.80672   	 600       	 41.5712   	 0         	 1.05473   	 39.414    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 91)                                                                             	 0.441705  	 100       	 32.8087   	 0         	 0.839243  	 39.0932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 91)	 0.381551  	 700       	 69.8018   	 0         	 9.26674   	 7.53252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 91)                         	 0.379794  	 600       	 119.049   	 0         	 10.5705   	 11.2624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 2500)                                                                              	 0.322884  	 100       	 12.6679   	 0         	 1.14808   	 11.034    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4550, m: 50)                                                                             	 0.292215  	 100       	 27.2488   	 0         	 1.25264   	 21.7531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 91)                           	 0.255813  	 700       	 206.205   	 0         	 18.3092   	 11.2624   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 91, r2: 91, leftOrthog: 1)                      	 0.125541  	 600       	 360.155   	 0         	 48.1262   	 7.48355   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 91)                                                                               	 0.0553607 	 100       	 2.87659   	 0         	 0.16835   	 17.0869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 50, n: 50, r2: 91)                         	 0.0521355 	 100       	 79.4181   	 0         	 9.91418   	 8.01056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 50)	 0.0404668 	 100       	 51.6596   	 0         	 8.72023   	 5.92411   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 50)                         	 0.0349441 	 100       	 118.489   	 0         	 10.6062   	 11.1717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 50)                           	 0.0272214 	 100       	 152.105   	 0         	 18.988    	 8.01056   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 41)                                                                                                       	 0.0228257 	 808       	 0         	 0         	 47.6042   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 91, r2: 91, leftOrthog: 1)                      	 0.0139008 	 100       	 297.861   	 0         	 40.2315   	 7.40367   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 50, r2: 50, leftOrthog: 1)                      	 0.0100505 	 100       	 226.356   	 0         	 54.7234   	 4.13636   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 50)                                                                                	 0.00861971	 100       	 4.31182   	 0         	 1.08124   	 3.98783   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 91, fromLeft: 1)                              	 0.00491294	 800       	 0         	 0         	 21.575    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 1) 	 0.00462897	 100       	 0.196588  	 0         	 1.57305   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 2, r2: 1)                             	 0.00397562	 100       	 0.45779   	 0         	 2.74714   	 0.166642  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 91) 	 0.00269879	 100       	 30.6841   	 0         	 5.15224   	 5.9555    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 91, r2: 91)                            	 0.00161002	 100       	 51.434    	 0         	 8.6364    	 5.9555    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000988357	 100       	 25.2945   	 0         	 6.07068   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 91)                           	 0.000909939	 100       	 0         	 0         	 8.00054   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000842509	 100       	 0.593465  	 0         	 2.37386   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                        	 0.000507021	 100       	 0         	 0         	 14.3584   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 41)                                                                                                        	 0.0004739 	 101       	 0         	 0         	 6.9905    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 91, leftOrthog: 1)                        	 0.00043852	 100       	 103.758   	 0         	 34.0235   	 3.0496    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 1)                                                                                                        	 0.000372587	 101       	 0         	 0         	 8.89135   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000332775	 100       	 0.751258  	 0         	 12.0201   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 50, fromLeft: 1)                              	 0.000202476	 100       	 0         	 0         	 35.9549   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 13.679    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 13.679    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.88003   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.3644    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.3631    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.80319   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.596     	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.26176   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.467862  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.429346  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.28862   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.149931  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0241792 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0171548 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00511542	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0026782 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230903	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000909939	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000842509	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000332775	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22666667759488 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22666488571904 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22666287245440 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22666085918976 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22665884592512 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22665683266048 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22665481939584 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22665280613120 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22665079286656 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22664877960192 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22664676633728 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22664475307264 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22664273980800 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22664072654336 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22663871327872 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22663670001408 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22663468674944 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22663267348480 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22663066022016 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22662864695552 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22662663369088 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22662462042624 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22662260716160 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22662059389696 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22661858063232 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22661656736768 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22661455410304 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22661254083840 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22661052757376 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22660851430912 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22660650104448 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22660448777984 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22660247447424 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22660046120960 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22659844794496 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22659643468032 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22659442141568 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22659240815104 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22659039488640 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22658838162176 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22658636835712 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22658435509248 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22658234182784 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22658032856320 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22657831529856 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22657630203392 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22657428876928 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22657227550464 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22657026224000 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22656824897536 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22656623571072 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22656422244608 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22656220918144 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22656019591680 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22655818265216 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22655616938752 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22655415612288 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22655214285824 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22655012959360 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22654811632896 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22654610306432 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22654408979968 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22654207653504 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22666562098944 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22666383509248 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4600, m: 92)                                                                             	 3.97196   	 600       	 41.1697   	 0         	 1.03319   	 39.8472   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 4600)                                                                              	 3.90114   	 700       	 13.8792   	 0         	 1.22727   	 11.309    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 92)                                                                             	 0.42715   	 100       	 34.6763   	 0         	 0.877548  	 39.515    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 92)	 0.426253  	 700       	 64.4222   	 0         	 8.47206   	 7.60408   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 92)                         	 0.391935  	 600       	 119.207   	 0         	 10.4695   	 11.3861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 2500)                                                                              	 0.313153  	 100       	 13.3484   	 0         	 1.197     	 11.1515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4600, m: 50)                                                                             	 0.29926   	 100       	 26.8997   	 0         	 1.23652   	 21.7544   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 92)                           	 0.260594  	 700       	 209.169   	 0         	 18.3705   	 11.3861   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 92, r2: 92, leftOrthog: 1)                      	 0.146958  	 600       	 317.923   	 0         	 42.0212   	 7.56579   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 92)                                                                               	 0.0532557 	 100       	 3.02315   	 0         	 0.176507  	 17.1277   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 50, n: 50, r2: 92)                         	 0.0504472 	 100       	 83.8897   	 0         	 10.4315   	 8.04196   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 50)	 0.0489921 	 100       	 43.5172   	 0         	 7.3122    	 5.95132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 50)                         	 0.0353896 	 100       	 119.583   	 0         	 10.5899   	 11.2922   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 50)                           	 0.0315345 	 100       	 134.202   	 0         	 16.6878   	 8.04196   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 42)                                                                                                       	 0.0250196 	 808       	 0         	 0         	 45.5743   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 92, r2: 92, leftOrthog: 1)                      	 0.0119227 	 100       	 354.953   	 0         	 47.434    	 7.48308   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 50, r2: 50, leftOrthog: 1)                      	 0.0107938 	 100       	 213.085   	 0         	 51.5111   	 4.13669   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 50)                                                                                	 0.00865808	 100       	 4.35045   	 0         	 1.08569   	 4.00709   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 92, fromLeft: 1)                              	 0.00505543	 800       	 0         	 0         	 21.4303   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 1) 	 0.0045513 	 100       	 0.20214   	 0         	 1.61747   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 2, r2: 1)                             	 0.00382965	 100       	 0.480462  	 0         	 2.88319   	 0.166643  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 92) 	 0.00267217	 100       	 31.6747   	 0         	 5.28829   	 5.98958   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 92, r2: 92)                            	 0.00159478	 100       	 53.0733   	 0         	 8.86094   	 5.98958   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000933089	 100       	 26.7927   	 0         	 6.43025   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.0009306 	 100       	 0.537288  	 0         	 2.14915   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 92)                           	 0.000874424	 100       	 0         	 0         	 8.41697   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                        	 0.000492181	 100       	 0         	 0         	 14.9538   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 42)                                                                                                        	 0.000483191	 101       	 0         	 0         	 7.02331   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 92, leftOrthog: 1)                        	 0.000442828	 100       	 103.878   	 0         	 33.9635   	 3.05851   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 1)                                                                                                        	 0.000372632	 101       	 0         	 0         	 9.10711   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000332869	 100       	 0.751046  	 0         	 12.0167   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 50, fromLeft: 1)                              	 0.000224213	 100       	 0         	 0         	 32.8259   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 13.9024   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 13.9024   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.83471   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.57612   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.57475   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.0209    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.75163   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.22295   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.482468  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.478704  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.297553  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.170117  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0263676 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0174247 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00527964	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00290457	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00239517	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.0009306 	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000874424	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000332869	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22587409512320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22587233003520 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22587031677056 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22586830350592 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22586629024128 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22586427697664 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22586226371200 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22586025044736 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22585823718272 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22585622391808 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22585421065344 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22585219738880 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22585018412416 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22584817085952 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22584615759488 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22584414433024 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22584213106560 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22584011780096 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22583810453632 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22583609127168 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22583407800704 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22583206474240 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22583005147776 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22582803821312 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22582602494848 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22582401168384 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22582199841920 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22581998515456 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22581797188992 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22581595862528 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22581394536064 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22581193209600 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22580991879040 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22580790552576 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22580589226112 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22580387899648 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22580186573184 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22579985246720 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22579783920256 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22579582593792 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22579381267328 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22579179940864 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22578978614400 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22578777287936 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22578575961472 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22578374635008 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22578173308544 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22577971982080 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22577770655616 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22577569329152 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22577368002688 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22577166676224 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22576965349760 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22576764023296 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22576562696832 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22576361370368 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22576160043904 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22575958717440 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22575757390976 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22575556064512 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22575354738048 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22575153411584 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22574952085120 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22587303851776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22587125282560 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4650, m: 93)                                                                             	 4.16297   	 600       	 40.5756   	 0         	 1.00733   	 40.2804   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 4650)                                                                              	 4.12312   	 700       	 13.5649   	 0         	 1.18658   	 11.432    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 93)                                                                             	 0.44372   	 100       	 34.111    	 0         	 0.854128  	 39.9367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 93)                         	 0.387622  	 600       	 124.506   	 0         	 10.8173   	 11.5099   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 93)	 0.384654  	 700       	 73.6038   	 0         	 9.58752   	 7.67705   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 2500)                                                                              	 0.33142   	 100       	 12.8866   	 0         	 1.14354   	 11.269    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4650, m: 50)                                                                             	 0.303107  	 100       	 26.8469   	 0         	 1.23402   	 21.7557   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 93)                           	 0.252919  	 700       	 222.621   	 0         	 19.3417   	 11.5099   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 93, r2: 93, leftOrthog: 1)                      	 0.112175  	 600       	 430.234   	 0         	 56.2543   	 7.64803   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 50, n: 50, r2: 93)                         	 0.0759321 	 100       	 56.9522   	 0         	 7.05472   	 8.07292   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 93)                                                                               	 0.0550857 	 100       	 2.95448   	 0         	 0.172095  	 17.1677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 50)                         	 0.03792   	 100       	 114.043   	 0         	 9.99259   	 11.4127   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 50)	 0.0326354 	 100       	 66.6302   	 0         	 11.1437   	 5.97916   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 43)                                                                                                       	 0.0266001 	 808       	 0         	 0         	 44.9319   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 50)                           	 0.0204365 	 100       	 211.606   	 0         	 26.2119   	 8.07292   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 93, r2: 93, leftOrthog: 1)                      	 0.0181054 	 100       	 238.852   	 0         	 31.5839   	 7.56245   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0123082 	 100       	 188.898   	 0         	 45.6605   	 4.13701   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 50)                                                                                	 0.00884433	 100       	 4.31538   	 0         	 1.07187   	 4.02601   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 93, fromLeft: 1)                              	 0.00613977	 800       	 0         	 0         	 18.0312   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 1) 	 0.00490902	 100       	 0.189447  	 0         	 1.5159    	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 2, r2: 1)                             	 0.00423274	 100       	 0.439431  	 0         	 2.63697   	 0.166643  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00403455	 100       	 0.12393   	 0         	 0.495719  	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 93) 	 0.00254676	 100       	 33.9608   	 0         	 5.63822   	 6.02332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 93, r2: 93)                            	 0.00151236	 100       	 57.1889   	 0         	 9.49458   	 6.02332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.0009643 	 100       	 25.9255   	 0         	 6.22213   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 93)                           	 0.000859076	 100       	 0         	 0         	 8.66047   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 43)                                                                                                        	 0.000546019	 101       	 0         	 0         	 6.36315   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                        	 0.000481873	 100       	 0         	 0         	 15.4398   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 1)                                                                                                        	 0.000395208	 101       	 0         	 0         	 8.79132   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335365	 100       	 0.745456  	 0         	 11.9273   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 93, leftOrthog: 1)                        	 0.00033085	 100       	 140.547   	 0         	 45.8214   	 3.06728   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 50, fromLeft: 1)                              	 0.00022836	 100       	 0         	 0         	 32.5801   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 14.8946   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 14.8946   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.55491   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.90956   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.90507   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.2243    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.96488   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.46339   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.502438  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.424745  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.279101  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.142919  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0280232 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0175285 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00636813	 900       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00403455	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00283816	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00263923	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000859076	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335365	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22868031612800 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22867815163904 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22867613837440 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22867412510976 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22867211184512 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22867009858048 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22866808531584 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22866607205120 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22866405878656 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22866204552192 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22866003225728 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22865801899264 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22865600572800 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22865399246336 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22865197919872 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22864996593408 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22864795266944 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22864593940480 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22864392614016 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22864191287552 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22863989961088 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22863788634624 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22863587308160 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22863385981696 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22863184655232 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22862983328768 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22862782002304 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22862580675840 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22862379349376 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22862178022912 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22861976696448 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22861775369984 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22861574039424 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22861372712960 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22861171386496 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22860970060032 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22860768733568 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22860567407104 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22860366080640 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22860164754176 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22859963427712 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22859762101248 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22859560774784 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22859359448320 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22859158121856 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22858956795392 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22858755468928 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22858554142464 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22858352816000 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22858151489536 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22857950163072 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22857748836608 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22857547510144 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22857346183680 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22857144857216 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22856943530752 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22856742204288 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22856540877824 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22856339551360 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22856138224896 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22855936898432 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22855735571968 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22855534245504 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22867925952256 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22867919361792 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 4700)                                                                              	 4.05863   	 700       	 14.2298   	 0         	 1.23149   	 11.5549   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4700, m: 94)                                                                             	 3.71413   	 600       	 46.962    	 0         	 1.15347   	 40.7135   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 94)                                                                             	 0.442671  	 100       	 34.9311   	 0         	 0.865528  	 40.3582   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 94)	 0.411192  	 700       	 70.986    	 0         	 9.15787   	 7.75137   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 94)                         	 0.405721  	 600       	 122.831   	 0         	 10.5582   	 11.6337   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 2500)                                                                              	 0.323653  	 100       	 13.4793   	 0         	 1.18381   	 11.3864   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4700, m: 50)                                                                             	 0.297055  	 100       	 27.6885   	 0         	 1.27263   	 21.757    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 94)                           	 0.274969  	 700       	 211.445   	 0         	 18.1753   	 11.6337   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 94, r2: 94, leftOrthog: 1)                      	 0.169419  	 600       	 294.153   	 0         	 38.0521   	 7.73026   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 94)                                                                               	 0.058028  	 100       	 2.83484   	 0         	 0.164748  	 17.2071   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 50, n: 50, r2: 94)                         	 0.0467735 	 100       	 94.4552   	 0         	 11.6562   	 8.10345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 50)	 0.0395367 	 100       	 56.0998   	 0         	 9.33816   	 6.00758   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 50)                         	 0.0341559 	 100       	 129.348   	 0         	 11.2153   	 11.5332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 50)                           	 0.0252271 	 100       	 175.129   	 0         	 21.6117   	 8.10345   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 44)                                                                                                       	 0.0237469 	 808       	 0         	 0         	 52.6987   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 94, r2: 94, leftOrthog: 1)                      	 0.00899709	 100       	 491.047   	 0         	 64.2583   	 7.64178   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 50)                                                                                	 0.00889011	 100       	 4.3494    	 0         	 1.07535   	 4.04462   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 50, r2: 50, leftOrthog: 1)                      	 0.00740021	 100       	 317.558   	 0         	 76.7546   	 4.13732   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 94, fromLeft: 1)                              	 0.00530557	 800       	 0         	 0         	 21.3174   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 1) 	 0.00452932	 100       	 0.207537  	 0         	 1.66065   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 2, r2: 1)                             	 0.00385196	 100       	 0.488063  	 0         	 2.92879   	 0.166643  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 94) 	 0.00245089	 100       	 36.0522   	 0         	 5.95245   	 6.0567    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 94, r2: 94)                            	 0.00139024	 100       	 63.5576   	 0         	 10.4938   	 6.0567    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000989178	 100       	 25.2735   	 0         	 6.06564   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000917626	 100       	 0.544884  	 0         	 2.17954   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 94)                           	 0.00086874	 100       	 0         	 0         	 8.65621   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 44)                                                                                                        	 0.00049209	 101       	 0         	 0         	 7.22469   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                        	 0.000489355	 100       	 0         	 0         	 15.3672   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 94, leftOrthog: 1)                        	 0.000417322	 100       	 112.623   	 0         	 36.6144   	 3.07592   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 1)                                                                                                        	 0.0003897 	 101       	 0         	 0         	 9.12292   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330109	 100       	 0.757326  	 0         	 12.1172   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 50, fromLeft: 1)                              	 0.000207156	 100       	 0         	 0         	 36.3011   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 13.7837   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 13.7837   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.05357   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.26502   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.26367   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.70718   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.51188   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.39117   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.487639  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.457709  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.305438  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.186234  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.025118  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0181116 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00551272	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0029607 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00258775	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000917626	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00086874	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330109	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23198348478336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23198124992512 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23197923666048 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23197722339584 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23197521013120 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23197319686656 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23197118360192 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23196917033728 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23196715707264 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23196514380800 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23196313054336 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23196111727872 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23195910401408 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23195709074944 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23195507748480 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23195306422016 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23195105095552 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23194903769088 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23194702442624 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23194501116160 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23194299789696 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23194098463232 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23193897136768 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23193695810304 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23193494483840 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23193293157376 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23193091830912 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23192890504448 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23192689177984 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23192487851520 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23192286525056 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23192085198592 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23191883868032 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23191682541568 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23191481215104 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23191279888640 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23191078562176 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23190877235712 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23190675909248 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23190474582784 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23190273256320 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23190071929856 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23189870603392 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23189669276928 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23189467950464 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23189266624000 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23189065297536 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23188863971072 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23188662644608 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23188461318144 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23188259991680 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23188058665216 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23187857338752 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23187656012288 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23187454685824 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23187253359360 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23187052032896 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23186850706432 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23186649379968 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23186448053504 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23186246727040 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23186045400576 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23185844074112 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23198242817792 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23198236227328 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 4750)                                                                              	 4.3004    	 700       	 13.8629   	 0         	 1.18711   	 11.6778   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4750, m: 95)                                                                             	 4.29292   	 600       	 41.9408   	 0         	 1.0193    	 41.1467   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 95)                                                                             	 0.455881  	 100       	 34.6445   	 0         	 0.849555  	 40.7795   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 95)	 0.418543  	 700       	 71.8953   	 0         	 9.18554   	 7.82701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 95)                         	 0.41728   	 600       	 123.281   	 0         	 10.4853   	 11.7574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 2500)                                                                              	 0.339576  	 100       	 13.1203   	 0         	 1.14053   	 11.5037   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4750, m: 50)                                                                             	 0.298142  	 100       	 27.881    	 0         	 1.2814    	 21.7582   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 95)                           	 0.292011  	 700       	 205.527   	 0         	 17.4806   	 11.7574   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 95, r2: 95, leftOrthog: 1)                      	 0.142212  	 600       	 361.732   	 0         	 46.3017   	 7.8125    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 95)                                                                               	 0.0549197 	 100       	 3.02715   	 0         	 0.175529  	 17.2459   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 50, n: 50, r2: 95)                         	 0.0451755 	 100       	 99.8881   	 0         	 12.281    	 8.13356   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 50)	 0.0395803 	 100       	 57.1623   	 0         	 9.46936   	 6.03655   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 50)                         	 0.0377766 	 100       	 119.452   	 0         	 10.2503   	 11.6536   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 45)                                                                                                       	 0.0277609 	 808       	 0         	 0         	 47.1513   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 50)                           	 0.0245774 	 100       	 183.603   	 0         	 22.5735   	 8.13356   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 95, r2: 95, leftOrthog: 1)                      	 0.0152616 	 100       	 295.676   	 0         	 38.2947   	 7.72107   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0117184 	 100       	 202.673   	 0         	 48.9828   	 4.13763   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 50)                                                                                	 0.00890884	 100       	 4.39638   	 0         	 1.08207   	 4.06293   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 95) 	 0.00646194	 100       	 13.9664   	 0         	 2.29343   	 6.08974   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 95, fromLeft: 1)                              	 0.005526  	 800       	 0         	 0         	 20.9048   	 0         
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 95)                           	 0.00468806	 100       	 0         	 0         	 1.62114   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 1) 	 0.00460943	 100       	 0.206099  	 0         	 1.64914   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 2, r2: 1)                             	 0.00387526	 100       	 0.490289  	 0         	 2.94215   	 0.166643  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 95, r2: 95)                            	 0.00159661	 100       	 56.526    	 0         	 9.28217   	 6.08974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000953925	 100       	 26.2075   	 0         	 6.2898    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000916299	 100       	 0.545673  	 0         	 2.18269   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                        	 0.000500849	 100       	 0         	 0         	 15.1742   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 45)                                                                                                        	 0.000486164	 101       	 0         	 0         	 7.47896   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 95, leftOrthog: 1)                        	 0.000424641	 100       	 111.859   	 0         	 36.2659   	 3.08442   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 1)                                                                                                        	 0.000362192	 101       	 0         	 0         	 10.0389   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000359543	 100       	 0.695327  	 0         	 11.1252   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 50, fromLeft: 1)                              	 0.000201384	 100       	 0         	 0         	 37.7388   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 15.1489   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 15.1489   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.69296   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.97779   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.97642   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.37066   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.10187   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.64889   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.501186  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.469194  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.322061  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.169616  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0291101 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0185971 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00572738	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00468806	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00237936	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0021676 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000916299	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000359543	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22850366506880 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22850165532672 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22849964206208 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22849762879744 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22849561553280 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22849360226816 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22849158900352 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22848957573888 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22848756247424 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22848554920960 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22848353594496 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22848152268032 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22847950941568 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22847749615104 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22847548288640 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22847346962176 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22847145635712 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22846944309248 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22846742982784 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22846541656320 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22846340329856 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22846139003392 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22845937676928 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22845736350464 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22845535024000 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22845333697536 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22845132371072 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22844931044608 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22844729718144 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22844528391680 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22844327065216 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22844125738752 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22843924408192 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22843723081728 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22843521755264 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22843320428800 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22843119102336 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22842917775872 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22842716449408 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22842515122944 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22842313796480 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22842112470016 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22841911143552 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22841709817088 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22841508490624 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22841307164160 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22841105837696 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22840904511232 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22840703184768 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22840501858304 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22840300531840 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22840099205376 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22839897878912 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22839696552448 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22839495225984 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22839293899520 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22839092573056 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22838891246592 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22838689920128 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22838488593664 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22838287267200 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22838085940736 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22837884614272 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22850260846336 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22850254255872 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 4800)                                                                              	 4.29904   	 700       	 14.3098   	 0         	 1.21262   	 11.8008   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4800, m: 96)                                                                             	 4.15602   	 600       	 44.705    	 0         	 1.07516   	 41.5799   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 96)                                                                             	 0.456542  	 100       	 35.3265   	 0         	 0.857424  	 41.2007   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 96)	 0.427455  	 700       	 72.5679   	 0         	 9.18124   	 7.90393   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 96)                         	 0.424533  	 600       	 125.041   	 0         	 10.5243   	 11.8812   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 2500)                                                                              	 0.339192  	 100       	 13.4113   	 0         	 1.15406   	 11.621    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4800, m: 50)                                                                             	 0.317096  	 100       	 26.4904   	 0         	 1.21742   	 21.7594   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 96)                           	 0.30967   	 700       	 199.992   	 0         	 16.8327   	 11.8812   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 96, r2: 96, leftOrthog: 1)                      	 0.153587  	 600       	 345.629   	 0         	 43.7797   	 7.89474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 50, n: 50, r2: 96)                         	 0.0565681 	 100       	 81.4594   	 0         	 9.97878   	 8.16327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 96)                                                                               	 0.0536429 	 100       	 3.13182   	 0         	 0.181198  	 17.284    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 50)	 0.042276  	 100       	 54.5936   	 0         	 8.9999    	 6.06602   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 50)                         	 0.0375775 	 100       	 122.627   	 0         	 10.4151   	 11.7739   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 50)                           	 0.0276711 	 100       	 166.528   	 0         	 20.3996   	 8.16327   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 46)                                                                                                       	 0.0271545 	 808       	 0         	 0         	 50.3704   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 96, r2: 96, leftOrthog: 1)                      	 0.0122401 	 100       	 376.466   	 0         	 48.2629   	 7.80031   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 50)                                                                                	 0.00913437	 100       	 4.34257   	 0         	 1.06411   	 4.08093   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 50, r2: 50, leftOrthog: 1)                      	 0.00788719	 100       	 304.291   	 0         	 73.5369   	 4.13793   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 96, fromLeft: 1)                              	 0.0067585 	 800       	 0         	 0         	 17.4543   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 96) 	 0.0054104 	 100       	 17.0339   	 0         	 2.7822    	 6.12245   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 1) 	 0.00482668	 100       	 0.198895  	 0         	 1.59149   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 2, r2: 1)                             	 0.00412373	 100       	 0.465597  	 0         	 2.79397   	 0.166644  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 96)                           	 0.00375814	 100       	 0         	 0         	 2.04356   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 96, r2: 96)                            	 0.0014636 	 100       	 62.9682   	 0         	 10.2848   	 6.12245   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000990533	 100       	 25.2389   	 0         	 6.05734   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000844218	 100       	 0.592264  	 0         	 2.36906   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                        	 0.000521621	 100       	 0         	 0         	 14.7233   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 46)                                                                                                        	 0.000462321	 101       	 0         	 0         	 8.03944   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 1)                                                                                                        	 0.000409281	 101       	 0         	 0         	 9.08129   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 96, leftOrthog: 1)                        	 0.00040042	 100       	 119.874   	 0         	 38.7593   	 3.09278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000336468	 100       	 0.743013  	 0         	 11.8882   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 50, fromLeft: 1)                              	 0.000213563	 100       	 0         	 0         	 35.9613   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 14.7995   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 14.7995   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.50369   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.80588   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.80461   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.19894   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.9833    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.64737   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.519669  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.479968  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.342928  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.174115  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0285477 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0186084 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00697206	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00375814	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00218078	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00174371	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000844218	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336468	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23353432160128 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23353213577216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23353012250752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23352810924288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23352609597824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23352408271360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23352206944896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23352005618432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23351804291968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23351602965504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23351401639040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23351200312576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23350998986112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23350797659648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23350596333184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23350395006720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23350193680256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23349992353792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23349791027328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23349589700864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23349388374400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23349187047936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23348985721472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23348784395008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23348583068544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23348381742080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23348180415616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23347979089152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23347777762688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23347576436224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23347375109760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23347173783296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23346972452736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23346771126272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23346569799808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23346368473344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23346167146880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23345965820416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23345764493952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23345563167488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23345361841024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23345160514560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23344959188096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23344757861632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23344556535168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23344355208704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23344153882240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23343952555776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23343751229312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23343549902848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23343348576384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23343147249920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23342945923456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23342744596992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23342543270528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23342341944064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23342140617600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23341939291136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23341737964672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23341536638208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23341335311744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23341133985280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23340932658816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23353326499584 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23353319909120 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4850, m: 97)                                                                             	 4.89335   	 600       	 39.1677   	 0         	 0.932275  	 42.013    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 4850)                                                                              	 4.69363   	 700       	 13.5207   	 0         	 1.13394   	 11.9237   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 97)                         	 0.551562  	 600       	 99.2824   	 0         	 8.27012   	 12.005    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 97)	 0.452644  	 700       	 70.6385   	 0         	 8.84962   	 7.98209   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 97)                                                                             	 0.450415  	 100       	 36.5568   	 0         	 0.878311  	 41.6217   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 2500)                                                                              	 0.365289  	 100       	 12.7123   	 0         	 1.08299   	 11.7381   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 97)                           	 0.337023  	 700       	 189.563   	 0         	 15.7904   	 12.005    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4850, m: 50)                                                                             	 0.311565  	 100       	 27.2415   	 0         	 1.25187   	 21.7606   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 97, r2: 97, leftOrthog: 1)                      	 0.174984  	 600       	 312.944   	 0         	 39.231    	 7.97697   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 97)                                                                               	 0.0562817 	 100       	 3.01608   	 0         	 0.174124  	 17.3214   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 50, n: 50, r2: 97)                         	 0.0555828 	 100       	 84.6394   	 0         	 10.3312   	 8.19257   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 50)                         	 0.0436932 	 100       	 107.671   	 0         	 9.05237   	 11.8943   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 50)	 0.0426907 	 100       	 55.1526   	 0         	 9.04741   	 6.09595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 50)                           	 0.0273758 	 100       	 171.849   	 0         	 20.9762   	 8.19257   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 47)                                                                                                       	 0.0267986 	 808       	 0         	 0         	 53.2825   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 97, r2: 97, leftOrthog: 1)                      	 0.0142036 	 100       	 331.218   	 0         	 42.0354   	 7.87952   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 50, r2: 50, leftOrthog: 1)                      	 0.00956583	 100       	 253.507   	 0         	 61.2597   	 4.13823   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 50)                                                                                	 0.0094186 	 100       	 4.2646    	 0         	 1.04049   	 4.09863   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 97, fromLeft: 1)                              	 0.00562271	 800       	 0         	 0         	 21.4194   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 1) 	 0.00480911	 100       	 0.201701  	 0         	 1.61394   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 2, r2: 1)                             	 0.00406505	 100       	 0.477239  	 0         	 2.86383   	 0.166644  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 97) 	 0.00239729	 100       	 39.2485   	 0         	 6.37688   	 6.15482   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 97, r2: 97)                            	 0.0013926 	 100       	 67.5642   	 0         	 10.9774   	 6.15482   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00100233	 100       	 24.942    	 0         	 5.98607   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000902761	 100       	 0.553856  	 0         	 2.21543   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 97)                           	 0.000851961	 100       	 0         	 0         	 9.1084    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                        	 0.000508166	 100       	 0         	 0         	 15.2706   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 47)                                                                                                        	 0.000496255	 101       	 0         	 0         	 7.65252   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 1)                                                                                                        	 0.00040198	 101       	 0         	 0         	 9.44724   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 97, leftOrthog: 1)                        	 0.000391131	 100       	 123.999   	 0         	 39.9866   	 3.10102   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000357869	 100       	 0.69858   	 0         	 11.1773   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 50, fromLeft: 1)                              	 0.000219725	 100       	 0         	 0         	 35.3169   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 17.1943   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 17.1943   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.87531   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.81361   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.81225   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.06484   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.71161   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.06834   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.65184   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.502541  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.369857  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.199145  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.028205  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0194404 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00584243	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00217343	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00186156	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000902761	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000851961	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000357869	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22466853312384 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22466638374912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22466437048448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22466235721984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22466034395520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22465833069056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22465631742592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22465430416128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22465229089664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22465027763200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22464826436736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22464625110272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22464423783808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22464222457344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22464021130880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22463819804416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22463618477952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22463417151488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22463215825024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22463014498560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22462813172096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22462611845632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22462410519168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22462209192704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22462007866240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22461806539776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22461605213312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22461403886848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22461202560384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22461001233920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22460799907456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22460598580992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22460397250432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22460195923968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22459994597504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22459793271040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22459591944576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22459390618112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22459189291648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22458987965184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22458786638720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22458585312256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22458383985792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22458182659328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22457981332864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22457780006400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22457578679936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22457377353472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22457176027008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22456974700544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22456773374080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22456572047616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22456370721152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22456169394688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22455968068224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22455766741760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22455565415296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22455364088832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22455162762368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22454961435904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22454760109440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22454558782976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22454357456512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22466747651840 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22466741061376 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4900, m: 98)                                                                             	 5.01342   	 600       	 39.4243   	 0         	 0.928806  	 42.4462   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 4900)                                                                              	 4.6232    	 700       	 14.1556   	 0         	 1.17507   	 12.0466   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 98)                         	 0.569853  	 600       	 99.0984   	 0         	 8.17056   	 12.1287   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 98)	 0.47223   	 700       	 69.7868   	 0         	 8.65684   	 8.06146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 98)                                                                             	 0.447476  	 100       	 37.5596   	 0         	 0.89337   	 42.0426   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 2500)                                                                              	 0.362667  	 100       	 13.0678   	 0         	 1.10228   	 11.8552   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 98)                           	 0.358355  	 700       	 183.85    	 0         	 15.1582   	 12.1287   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4900, m: 50)                                                                             	 0.316032  	 100       	 27.1333   	 0         	 1.24684   	 21.7618   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 98, r2: 98, leftOrthog: 1)                      	 0.142932  	 600       	 395.093   	 0         	 49.0238   	 8.05921   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 98)                                                                               	 0.0562561 	 100       	 3.04856   	 0         	 0.175625  	 17.3583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 50, n: 50, r2: 98)                         	 0.0554861 	 100       	 86.5442   	 0         	 10.5266   	 8.22148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 50)	 0.0464145 	 100       	 51.7511   	 0         	 8.44736   	 6.1263    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 50)                         	 0.0444949 	 100       	 107.922   	 0         	 8.98267   	 12.0145   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 48)                                                                                                       	 0.0298288 	 808       	 0         	 0         	 49.9285   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 50)                           	 0.0294866 	 100       	 162.854   	 0         	 19.8083   	 8.22148   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 98, r2: 98, leftOrthog: 1)                      	 0.0146027 	 100       	 328.843   	 0         	 41.3188   	 7.95868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 50, r2: 50, leftOrthog: 1)                      	 0.0105356 	 100       	 232.544   	 0         	 56.1902   	 4.13851   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 50)                                                                                	 0.00956922	 100       	 4.24973   	 0         	 1.03248   	 4.11605   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 98, fromLeft: 1)                              	 0.0057931 	 800       	 0         	 0         	 21.2203   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 1) 	 0.00458616	 100       	 0.213686  	 0         	 1.70984   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 2, r2: 1)                             	 0.00387534	 100       	 0.505762  	 0         	 3.03499   	 0.166644  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 98) 	 0.00262757	 100       	 36.5509   	 0         	 5.90781   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 98, r2: 98)                            	 0.00162059	 100       	 59.2623   	 0         	 9.57873   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00110275	 100       	 22.6706   	 0         	 5.44093   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000912856	 100       	 0.547732  	 0         	 2.19093   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 98)                           	 0.000824548	 100       	 0         	 0         	 9.50824   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                        	 0.000486691	 100       	 0         	 0         	 16.1088   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 48)                                                                                                        	 0.000479302	 101       	 0         	 0         	 8.09177   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 98, leftOrthog: 1)                        	 0.00042112	 100       	 116.356   	 0         	 37.424    	 3.10914   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 1)                                                                                                        	 0.000377876	 101       	 0         	 0         	 10.2637   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000351505	 100       	 0.711227  	 0         	 11.3796   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 50, fromLeft: 1)                              	 0.000224511	 100       	 0         	 0         	 34.9203   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 16.9966   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 16.9966   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.53407   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.92848   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.92711   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.12775   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.83318   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.99543   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.670937  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.525859  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.393338  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.168492  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0311727 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0204069 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00601761	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00231635	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00176542	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000912856	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000824548	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351505	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22788483999616 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22788291160064 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22788089833600 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22787888507136 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22787687180672 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22787485854208 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22787284527744 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22787083201280 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22786881874816 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22786680548352 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22786479221888 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22786277895424 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22786076568960 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22785875242496 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22785673916032 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22785472589568 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22785271263104 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22785069936640 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22784868610176 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22784667283712 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22784465957248 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22784264630784 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22784063304320 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22783861977856 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22783660651392 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22783459324928 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22783257998464 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22783056672000 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22782855345536 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22782654019072 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22782452692608 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22782251366144 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22782050035584 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22781848709120 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22781647382656 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22781446056192 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22781244729728 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22781043403264 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22780842076800 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22780640750336 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22780439423872 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22780238097408 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22780036770944 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22779835444480 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22779634118016 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22779432791552 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22779231465088 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22779030138624 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22778828812160 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22778627485696 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22778426159232 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22778224832768 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22778023506304 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22777822179840 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22777620853376 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22777419526912 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22777218200448 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22777016873984 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22776815547520 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22776614221056 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22776412894592 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22776211568128 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22776010241664 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22788378339072 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22788371748608 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 4950)                                                                              	 4.89562   	 700       	 13.7813   	 0         	 1.13244   	 12.1696   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4950, m: 99)                                                                             	 4.87396   	 600       	 41.8064   	 0         	 0.974977  	 42.8794   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 99)                         	 0.580846  	 600       	 100.23    	 0         	 8.18035   	 12.2525   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 99)	 0.529417  	 700       	 64.1535   	 0         	 7.87933   	 8.142     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 99)                                                                             	 0.4562    	 100       	 37.597    	 0         	 0.885402  	 42.4632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 99)                           	 0.394681  	 700       	 172.091   	 0         	 14.0454   	 12.2525   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 2500)                                                                              	 0.367497  	 100       	 13.1588   	 0         	 1.09911   	 11.9722   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4950, m: 50)                                                                             	 0.301403  	 100       	 28.7406   	 0         	 1.32063   	 21.7629   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 99, r2: 99, leftOrthog: 1)                      	 0.184689  	 600       	 315.222   	 0         	 38.7181   	 8.14145   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 99)                                                                               	 0.0556813 	 100       	 3.11146   	 0         	 0.178875  	 17.3946   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 50, n: 50, r2: 99)                         	 0.049344  	 100       	 99.313    	 0         	 12.0379   	 8.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 50)                         	 0.0475813 	 100       	 102.992   	 0         	 8.48739   	 12.1347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 50)	 0.0408563 	 100       	 59.9785   	 0         	 9.74145   	 6.15704   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 49)                                                                                                       	 0.0334695 	 808       	 0         	 0         	 46.3708   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 50)                           	 0.0253806 	 100       	 193.08    	 0         	 23.4037   	 8.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 99, r2: 99, leftOrthog: 1)                      	 0.0128579 	 100       	 381.127   	 0         	 47.4168   	 8.0378    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 50, r2: 50, leftOrthog: 1)                      	 0.0101435 	 100       	 243.999   	 0         	 58.954    	 4.1388    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 50)                                                                                	 0.00938308	 100       	 4.38732   	 0         	 1.06149   	 4.13319   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 99, fromLeft: 1)                              	 0.00596897	 800       	 0         	 0         	 21.0175   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 1) 	 0.00477534	 100       	 0.207315  	 0         	 1.65886   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 2, r2: 1)                             	 0.00408708	 100       	 0.484454  	 0         	 2.90711   	 0.166644  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 99) 	 0.00238069	 100       	 41.1688   	 0         	 6.62027   	 6.21859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 99, r2: 99)                            	 0.00137734	 100       	 71.159    	 0         	 11.4429   	 6.21859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00095514	 100       	 26.1742   	 0         	 6.2818    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000952278	 100       	 0.525057  	 0         	 2.10023   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 99)                           	 0.000824027	 100       	 0         	 0         	 9.61134   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                        	 0.000505338	 100       	 0         	 0         	 15.6727   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 49)                                                                                                        	 0.000498062	 101       	 0         	 0         	 7.94921   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 1)                                                                                                        	 0.000389566	 101       	 0         	 0         	 10.1631   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 99, leftOrthog: 1)                        	 0.000383234	 100       	 129.164   	 0         	 41.4368   	 3.11713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330418	 100       	 0.756617  	 0         	 12.1059   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 50, fromLeft: 1)                              	 0.000212351	 100       	 0         	 0         	 37.2967   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 17.02     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 17.02     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.68665   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.73812   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.73674   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.97485   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.68724   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.2725    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.678726  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.577429  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.425526  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.208074  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0348625 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0201419 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00618132	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0028576 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00263476	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000952278	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000824027	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330418	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22610620786560 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22610385561600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22610184235136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22609982908672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22609781582208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22609580255744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22609378929280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22609177602816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22608976276352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22608774949888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22608573623424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22608372296960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22608170970496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22607969644032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22607768317568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22607566991104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22607365664640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22607164338176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22606963011712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22606761685248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22606560358784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22606359032320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22606157705856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22605956379392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22605755052928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22605553726464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22605352400000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22605151073536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22604949747072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22604748420608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22604547094144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22604345767680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22604144437120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22603943110656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22603741784192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22603540457728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22603339131264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22603137804800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22602936478336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22602735151872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22602533825408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22602332498944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22602131172480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22601929846016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22601728519552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22601527193088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22601325866624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22601124540160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22600923213696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22600721887232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22600520560768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22600319234304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22600117907840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22599916581376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22599715254912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22599513928448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22599312601984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22599111275520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22598909949056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22598708622592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22598507296128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22598305969664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22598104643200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22610515126016 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22610508535552 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5000, m: 100)                                                                              	 4.98365   	 600       	 42.1378   	 0         	 0.972878  	 43.3125   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 5000)                                                                               	 4.83021   	 700       	 14.3955   	 0         	 1.17108   	 12.2925   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 100)                        	 0.609005  	 600       	 98.5213   	 0         	 7.96052   	 12.3762   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 100)	 0.532257  	 700       	 65.7578   	 0         	 7.99614   	 8.22368   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 100)                                                                              	 0.450632  	 100       	 38.8344   	 0         	 0.905573  	 42.8837   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 100)                          	 0.398805  	 700       	 175.525   	 0         	 14.1824   	 12.3762   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 2500)                                                                               	 0.373835  	 100       	 13.1966   	 0         	 1.0916    	 12.0891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5000, m: 50)                                                                               	 0.311438  	 100       	 28.0955   	 0         	 1.29092   	 21.764    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 100, r2: 100, leftOrthog: 1)                      	 0.194809  	 600       	 307.995   	 0         	 37.4521   	 8.22368   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 100)                                                                                	 0.0560644 	 100       	 3.12141   	 0         	 0.17908   	 17.4303   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 50, n: 50, r2: 100)                         	 0.053112  	 100       	 94.1407   	 0         	 11.3722   	 8.27815   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 50) 	 0.044061  	 100       	 56.7396   	 0         	 9.16912   	 6.18812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 50)                         	 0.043535  	 100       	 114.85    	 0         	 9.37176   	 12.2549   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 50)                                                                                                         	 0.0317402 	 808       	 0         	 0         	 50.9133   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 50)                           	 0.0275271 	 100       	 181.639   	 0         	 21.9421   	 8.27815   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 100, r2: 100, leftOrthog: 1)                      	 0.0110943 	 100       	 450.681   	 0         	 55.5239   	 8.11688   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 50)                                                                                 	 0.00947041	 100       	 4.39966   	 0         	 1.06014   	 4.15006   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 50, r2: 50, leftOrthog: 1)                        	 0.00822262	 100       	 304.039   	 0         	 73.4559   	 4.13907   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 100, fromLeft: 1)                              	 0.00618132	 800       	 0         	 0         	 20.7076   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 1)  	 0.00465812	 100       	 0.214679  	 0         	 1.71778   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 2, r2: 1)                              	 0.00393979	 100       	 0.507641  	 0         	 3.04625   	 0.166644  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 100)  	 0.00239383	 100       	 41.7741   	 0         	 6.68386   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 100, r2: 100)                            	 0.00139906	 100       	 71.4765   	 0         	 11.4362   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00123397	 100       	 20.2598   	 0         	 4.86235   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000904197	 100       	 0.552977  	 0         	 2.21191   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 100)                            	 0.000824951	 100       	 0         	 0         	 9.69755   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 100, leftOrthog: 1)                         	 0.000526816	 100       	 94.9098   	 0         	 30.3711   	 3.125     
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.000513141	 100       	 0         	 0         	 15.5903   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                                          	 0.000468444	 101       	 0         	 0         	 8.6243    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                          	 0.000382307	 101       	 0         	 0         	 10.5674   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000345028	 100       	 0.724579  	 0         	 11.5933   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 50, fromLeft: 1)                               	 0.000211636	 100       	 0         	 0         	 37.8008   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 17.1565   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 17.1565   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.64209   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.91328   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.91193   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.11907   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.80178   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.21351   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.706886  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.583369  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.431671  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.214652  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0331041 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0206332 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00639295	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0025386 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00207068	 4452      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000904197	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000824951	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000345028	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22966055257984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22965861214208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22965659887744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22965458561280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22965257234816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22965055908352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22964854581888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22964653255424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22964451928960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22964250602496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22964049276032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22963847949568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22963646623104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22963445296640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22963243970176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22963042643712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22962841317248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22962639990784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22962438664320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22962237337856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22962036011392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22961834684928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22961633358464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22961432032000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22961230705536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22961029379072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22960828052608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22960626726144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22960425399680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22960224073216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22960022746752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22959821420288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22959620089728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22959418763264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22959217436800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22959016110336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22958814783872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22958613457408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22958412130944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22958210804480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22958009478016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22957808151552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22957606825088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22957405498624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22957204172160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22957002845696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22956801519232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22956600192768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22956398866304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22956197539840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22955996213376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22955794886912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22955593560448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22955392233984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22955190907520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22954989581056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22954788254592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22954586928128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22954385601664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22954184275200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22953982948736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22953781622272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22953580295808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22965949597440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22965943006976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 5050)                                                                               	 5.22978   	 700       	 13.6985   	 0         	 1.10335   	 12.4154   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5050, m: 101)                                                                              	 5.15337   	 600       	 41.9848   	 0         	 0.959747  	 43.7457   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 101)                        	 0.533362  	 600       	 115.903   	 0         	 9.27221   	 12.5      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 101)	 0.529529  	 700       	 68.106    	 0         	 8.19915   	 8.30647   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 101)                                                                              	 0.474946  	 100       	 37.5869   	 0         	 0.867975  	 43.3041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 101)                          	 0.408239  	 700       	 176.664   	 0         	 14.1331   	 12.5      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 2500)                                                                               	 0.386751  	 100       	 13.0105   	 0         	 1.06591   	 12.206    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5050, m: 50)                                                                               	 0.329176  	 100       	 26.8473   	 0         	 1.2335    	 21.7651   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 101, r2: 101, leftOrthog: 1)                      	 0.192695  	 600       	 320.807   	 0         	 38.6239   	 8.30592   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 101)                                                                                	 0.0559708 	 100       	 3.1579    	 0         	 0.180809  	 17.4654   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 50)                         	 0.0469851 	 100       	 108.556   	 0         	 8.77216   	 12.375    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 50, n: 50, r2: 101)                         	 0.0445336 	 100       	 114.532   	 0         	 13.7891   	 8.30592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 50) 	 0.0413274 	 100       	 61.7145   	 0         	 9.92272   	 6.21952   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 51)                                                                                                         	 0.0345618 	 808       	 0         	 0         	 48.6459   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 50)                           	 0.0252785 	 100       	 201.772   	 0         	 24.2926   	 8.30592   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 101, r2: 101, leftOrthog: 1)                      	 0.0189139 	 100       	 269.669   	 0         	 32.9029   	 8.19592   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0135345 	 100       	 186.561   	 0         	 45.0701   	 4.13934   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 50)                                                                                 	 0.00952898	 100       	 4.42509   	 0         	 1.06202   	 4.16666   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 101, fromLeft: 1)                              	 0.00634384	 800       	 0         	 0         	 20.5826   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 1)  	 0.00488302	 100       	 0.206839  	 0         	 1.65504   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 2, r2: 1)                              	 0.0041951 	 100       	 0.481514  	 0         	 2.88946   	 0.166645  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 101)  	 0.00240329	 100       	 42.446    	 0         	 6.75774   	 6.28109   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 101, r2: 101)                            	 0.00136137	 100       	 74.9319   	 0         	 11.9298   	 6.28109   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00100694	 100       	 24.8276   	 0         	 5.95862   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000930736	 100       	 0.537209  	 0         	 2.14884   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 101)                            	 0.00084285	 100       	 0         	 0         	 9.58652   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 101)                                                                                                         	 0.000506622	 100       	 0         	 0         	 15.9488   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                          	 0.000499732	 101       	 0         	 0         	 8.24602   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 101, leftOrthog: 1)                         	 0.00049543	 100       	 101.932   	 0         	 32.5374   	 3.13275   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 1)                                                                                                          	 0.000359267	 101       	 0         	 0         	 11.47     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000338319	 100       	 0.738948  	 0         	 11.8232   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 50, fromLeft: 1)                               	 0.000215163	 100       	 0         	 0         	 37.5529   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 17.911    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 17.911    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.2713   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.04837   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.047     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.31467   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.01346   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.62606   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.625888  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.578142  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.439074  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.225639  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0359274 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0206249 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00655901	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0023916 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00228022	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000930736	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00084285	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338319	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23114529204096 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23114306021376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23114104694912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23113903368448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23113702041984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23113500715520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23113299389056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23113098062592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23112896736128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23112695409664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23112494083200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23112292756736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23112091430272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23111890103808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23111688777344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23111487450880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23111286124416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23111084797952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23110883471488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23110682145024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23110480818560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23110279492096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23110078165632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23109876839168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23109675512704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23109474186240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23109272859776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23109071533312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23108870206848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23108668880384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23108467553920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23108266227456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23108064896896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23107863570432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23107662243968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23107460917504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23107259591040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23107058264576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23106856938112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23106655611648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23106454285184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23106252958720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23106051632256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23105850305792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23105648979328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23105447652864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23105246326400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23105044999936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23104843673472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23104642347008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23104441020544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23104239694080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23104038367616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23103837041152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23103635714688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23103434388224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23103233061760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23103031735296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23102830408832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23102629082368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23102427755904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23102226429440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23102025102976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23114423543552 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23114416953088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5100, m: 102)                                                                              	 5.22382   	 600       	 42.661    	 0         	 0.965644  	 44.1789   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 5100)                                                                               	 5.15814   	 700       	 14.3054   	 0         	 1.14093   	 12.5384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 102)                        	 0.584616  	 600       	 108.913   	 0         	 8.62765   	 12.6238   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 102)	 0.518936  	 700       	 71.6015   	 0         	 8.53382   	 8.39032   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 102)                                                                              	 0.467854  	 100       	 38.916    	 0         	 0.890032  	 43.7243   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 102)                          	 0.389425  	 700       	 190.755   	 0         	 15.1107   	 12.6238   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 2500)                                                                               	 0.386583  	 100       	 13.2734   	 0         	 1.07714   	 12.3228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5100, m: 50)                                                                               	 0.328359  	 100       	 27.1806   	 0         	 1.24875   	 21.7662   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 102, r2: 102, leftOrthog: 1)                      	 0.173792  	 600       	 366.372   	 0         	 43.6773   	 8.38816   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 102)                                                                                	 0.0564232 	 100       	 3.16359   	 0         	 0.180777  	 17.5      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 50, n: 50, r2: 102)                         	 0.0547939 	 100       	 94.9375   	 0         	 11.3925   	 8.33333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 50)                         	 0.0472672 	 100       	 110.055   	 0         	 8.80786   	 12.4951   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 50) 	 0.0468996 	 100       	 55.4802   	 0         	 8.87513   	 6.2512    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 52)                                                                                                         	 0.0345033 	 808       	 0         	 0         	 50.6579   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 50)                           	 0.0308246 	 100       	 168.762   	 0         	 20.2514   	 8.33333   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 102, r2: 102, leftOrthog: 1)                      	 0.0121372 	 100       	 428.601   	 0         	 51.7952   	 8.27492   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0103706 	 100       	 245.886   	 0         	 59.3984   	 4.13961   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 50)                                                                                 	 0.00970124	 100       	 4.39806   	 0         	 1.05141   	 4.183     
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 102, fromLeft: 1)                              	 0.00695365	 800       	 0         	 0         	 19.1513   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 1)  	 0.00485023	 100       	 0.210299  	 0         	 1.68272   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 2, r2: 1)                              	 0.00417183	 100       	 0.488994  	 0         	 2.93435   	 0.166645  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 102)  	 0.00241189	 100       	 43.1363   	 0         	 6.83414   	 6.31188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 102, r2: 102)                            	 0.00144984	 100       	 71.7596   	 0         	 11.369    	 6.31188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000995249	 100       	 25.1193   	 0         	 6.02864   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000869048	 100       	 0.575342  	 0         	 2.30137   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 102)                            	 0.000805459	 100       	 0         	 0         	 10.1309   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                          	 0.000501589	 101       	 0         	 0         	 8.37658   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 102)                                                                                                         	 0.000501557	 100       	 0         	 0         	 16.2693   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 102, leftOrthog: 1)                         	 0.000456652	 100       	 111.682   	 0         	 35.5632   	 3.14039   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 1)                                                                                                          	 0.000371779	 101       	 0         	 0         	 11.3013   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000338531	 100       	 0.738485  	 0         	 11.8158   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 50, fromLeft: 1)                               	 0.000248926	 100       	 0         	 0         	 32.7808   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 18.0143   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 18.0143   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.2783   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.15649   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.15518   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.35387   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.07646   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.55442   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.687672  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.573097  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.425871  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.196756  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0358782 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0216603 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00720257	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0024271 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00205143	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000869048	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000805459	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338531	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22863211083648 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22862983325696 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22862781999232 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22862580672768 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22862379346304 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22862178019840 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22861976693376 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22861775366912 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22861574040448 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22861372713984 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22861171387520 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22860970061056 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22860768734592 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22860567408128 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22860366081664 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22860164755200 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22859963428736 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22859762102272 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22859560775808 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22859359449344 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22859158122880 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22858956796416 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22858755469952 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22858554143488 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22858352817024 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22858151490560 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22857950164096 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22857748837632 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22857547511168 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22857346184704 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22857144858240 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22856943531776 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22856742201216 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22856540874752 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22856339548288 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22856138221824 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22855936895360 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22855735568896 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22855534242432 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22855332915968 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22855131589504 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22854930263040 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22854728936576 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22854527610112 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22854326283648 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22854124957184 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22853923630720 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22853722304256 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22853520977792 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22853319651328 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22853118324864 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22852916998400 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22852715671936 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22852514345472 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22852313019008 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22852111692544 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22851910366080 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22851709039616 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22851507713152 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22851306386688 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22851105060224 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22850903733760 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22850702407296 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22863105423104 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22863098832640 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 5150)                                                                               	 5.38768   	 700       	 14.1027   	 0         	 1.11384   	 12.6613   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5150, m: 103)                                                                              	 5.29194   	 600       	 43.3627   	 0         	 0.971995  	 44.612    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 103)                        	 0.591892  	 600       	 110.77    	 0         	 8.6895    	 12.7475   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 103)                                                                              	 0.5362    	 100       	 34.6247   	 0         	 0.784352  	 44.1443   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 103)	 0.522317  	 700       	 73.2848   	 0         	 8.64696   	 8.47522   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 2500)                                                                               	 0.405535  	 100       	 12.9006   	 0         	 1.03707   	 12.4394   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 103)                          	 0.390306  	 700       	 195.977   	 0         	 15.3737   	 12.7475   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5150, m: 50)                                                                               	 0.325329  	 100       	 27.7027   	 0         	 1.27268   	 21.7672   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 103, r2: 103, leftOrthog: 1)                      	 0.167642  	 600       	 391.094   	 0         	 46.1719   	 8.47039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 50, n: 50, r2: 103)                         	 0.056994  	 100       	 93.0712   	 0         	 11.1324   	 8.36039   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 103)                                                                                	 0.0566409 	 100       	 3.18233   	 0         	 0.181494  	 17.534    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 50) 	 0.0479244 	 100       	 55.3894   	 0         	 8.81556   	 6.28314   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 50)                         	 0.0452538 	 100       	 117.217   	 0         	 9.29176   	 12.6151   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 53)                                                                                                         	 0.03468   	 808       	 0         	 0         	 52.3569   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 50)                           	 0.0262244 	 100       	 202.274   	 0         	 24.1943   	 8.36039   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 103, r2: 103, leftOrthog: 1)                      	 0.0118438 	 100       	 447.87    	 0         	 53.6122   	 8.35388   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 50)                                                                                 	 0.00997345	 100       	 4.32815   	 0         	 1.03074   	 4.19909   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 50, r2: 50, leftOrthog: 1)                        	 0.00939124	 100       	 274.192   	 0         	 66.2319   	 4.13987   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 103, fromLeft: 1)                              	 0.00678329	 800       	 0         	 0         	 20.0191   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 1)  	 0.00494775	 100       	 0.208175  	 0         	 1.66573   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 2, r2: 1)                              	 0.00421963	 100       	 0.488194  	 0         	 2.92954   	 0.166645  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 103)  	 0.00243321	 100       	 43.6009   	 0         	 6.87454   	 6.34236   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 103, r2: 103)                            	 0.00139872	 100       	 75.848    	 0         	 11.9589   	 6.34236   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00105011	 100       	 23.8071   	 0         	 5.71369   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000926417	 100       	 0.539714  	 0         	 2.15886   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 103)                            	 0.000844974	 100       	 0         	 0         	 9.75178   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                          	 0.000518254	 101       	 0         	 0         	 8.26313   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 103)                                                                                                         	 0.000500781	 100       	 0         	 0         	 16.4543   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 103, leftOrthog: 1)                         	 0.000395313	 100       	 130.277   	 0         	 41.3849   	 3.14792   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 1)                                                                                                          	 0.000381798	 101       	 0         	 0         	 11.2164   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000334189	 100       	 0.74808   	 0         	 11.9693   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 50, fromLeft: 1)                               	 0.000221959	 100       	 0         	 0         	 37.124    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 18.4694   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 18.4694   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.5996   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.2824    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.28104   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.48521   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.21011   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.80319   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.69519   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.577622  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.422148  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.189272  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0360809 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0217729 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00700525	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230747	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0020917 	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000926417	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000844974	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334189	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22806953895808 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22806746097664 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22806544771200 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22806343444736 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22806142118272 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22805940791808 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22805739465344 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22805538138880 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22805336812416 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22805135485952 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22804934159488 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22804732833024 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22804531506560 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22804330180096 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22804128853632 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22803927527168 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22803726200704 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22803524874240 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22803323547776 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22803122221312 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22802920894848 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22802719568384 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22802518241920 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22802316915456 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22802115588992 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22801914262528 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22801712936064 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22801511609600 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22801310283136 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22801108956672 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22800907630208 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22800706303744 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22800504973184 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22800303646720 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22800102320256 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22799900993792 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22799699667328 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22799498340864 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22799297014400 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22799095687936 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22798894361472 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22798693035008 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22798491708544 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22798290382080 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22798089055616 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22797887729152 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22797686402688 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22797485076224 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22797283749760 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22797082423296 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22796881096832 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22796679770368 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22796478443904 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22796277117440 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22796075790976 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22795874464512 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22795673138048 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22795471811584 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22795270485120 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22795069158656 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22794867832192 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22794666505728 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22794465179264 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22806848235264 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22806841644800 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5200, m: 104)                                                                              	 5.78766   	 600       	 40.8147   	 0         	 0.906083  	 45.0452   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 5200)                                                                               	 5.35056   	 700       	 14.6182   	 0         	 1.14345   	 12.7843   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 104)                        	 0.616612  	 600       	 109.456   	 0         	 8.50388   	 12.8713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 104)                                                                              	 0.548273  	 100       	 34.523    	 0         	 0.77468   	 44.5642   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 104)	 0.523703  	 700       	 75.2878   	 0         	 8.79416   	 8.56112   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 2500)                                                                               	 0.399071  	 100       	 13.3636   	 0         	 1.06431   	 12.5561   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 104)                          	 0.398908  	 700       	 197.39    	 0         	 15.3357   	 12.8713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5200, m: 50)                                                                               	 0.34346   	 100       	 26.4951   	 0         	 1.21714   	 21.7683   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 104, r2: 104, leftOrthog: 1)                      	 0.181984  	 600       	 370.868   	 0         	 43.363    	 8.55263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 50, n: 50, r2: 104)                         	 0.0604454 	 100       	 89.4692   	 0         	 10.6675   	 8.3871    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 104)                                                                                	 0.0575354 	 100       	 3.16327   	 0         	 0.180063  	 17.5676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 50)                         	 0.0497227 	 100       	 108.763   	 0         	 8.54042   	 12.7351   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 50) 	 0.0488507 	 100       	 55.4342   	 0         	 8.77776   	 6.3153    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 54)                                                                                                         	 0.0360434 	 808       	 0         	 0         	 52.2954   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 50)                           	 0.0319686 	 100       	 169.166   	 0         	 20.1698   	 8.3871    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 104, r2: 104, leftOrthog: 1)                      	 0.0132142 	 100       	 409.256   	 0         	 48.5314   	 8.4328    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0111452 	 100       	 233.285   	 0         	 56.3473   	 4.14013   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 50)                                                                                 	 0.00971548	 100       	 4.49454   	 0         	 1.06634   	 4.21492   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 104, fromLeft: 1)                              	 0.00654959	 800       	 0         	 0         	 21.1379   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 1)  	 0.00463009	 100       	 0.224618  	 0         	 1.79729   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 2, r2: 1)                              	 0.00389652	 100       	 0.533809  	 0         	 3.20326   	 0.166645  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 104)  	 0.0025181 	 100       	 42.9531   	 0         	 6.74033   	 6.37255   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 104, r2: 104)                            	 0.00148837	 100       	 72.6699   	 0         	 11.4036   	 6.37255   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00112179	 100       	 22.2859   	 0         	 5.3486    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000914776	 100       	 0.546582  	 0         	 2.18633   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 104)                            	 0.000861297	 100       	 0         	 0         	 9.65985   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 104, leftOrthog: 1)                         	 0.00073016	 100       	 71.2173   	 0         	 22.5704   	 3.15534   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 104)                                                                                                         	 0.000678573	 100       	 0         	 0         	 12.261    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                          	 0.000532483	 101       	 0         	 0         	 8.19406   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 1)                                                                                                          	 0.000371511	 101       	 0         	 0         	 11.7445   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000331225	 100       	 0.754774  	 0         	 12.0764   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 50, fromLeft: 1)                               	 0.000222736	 100       	 0         	 0         	 37.3536   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.0819   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.0819   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.533    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.96544   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.96409   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.10674   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.73692   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.75935   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.727902  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.579702  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.436261  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.207073  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.037626  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0219108 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00677232	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00220126	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00139682	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000914776	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000861297	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331225	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23420609910656 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23420389550080 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23420188223616 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23419986897152 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23419785570688 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23419584244224 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23419382917760 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23419181591296 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23418980264832 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23418778938368 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23418577611904 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23418376285440 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23418174958976 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23417973632512 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23417772306048 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23417570979584 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23417369653120 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23417168326656 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23416967000192 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23416765673728 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23416564347264 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23416363020800 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23416161694336 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23415960367872 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23415759041408 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23415557714944 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23415356388480 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23415155062016 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23414953735552 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23414752409088 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23414551082624 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23414349756160 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23414148425600 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23413947099136 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23413745772672 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23413544446208 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23413343119744 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23413141793280 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23412940466816 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23412739140352 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23412537813888 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23412336487424 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23412135160960 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23411933834496 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23411732508032 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23411531181568 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23411329855104 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23411128528640 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23410927202176 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23410725875712 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23410524549248 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23410323222784 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23410121896320 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23409920569856 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23409719243392 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23409517916928 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23409316590464 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23409115264000 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23408913937536 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23408712611072 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23408511284608 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23408309958144 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23408108631680 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23420504250112 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23420497659648 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5250, m: 105)                                                                              	 5.90827   	 600       	 41.1459   	 0         	 0.904736  	 45.4784   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 5250)                                                                               	 5.6042    	 700       	 14.3631   	 0         	 1.11279   	 12.9072   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 105)                        	 0.60072   	 600       	 115.624   	 0         	 8.89752   	 12.995    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 105)	 0.567279  	 700       	 71.5851   	 0         	 8.27765   	 8.648     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 105)                                                                              	 0.563943  	 100       	 34.2122   	 0         	 0.760545  	 44.9838   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 105)                          	 0.42365   	 700       	 191.275   	 0         	 14.7191   	 12.995    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 2500)                                                                               	 0.40876   	 100       	 13.2971   	 0         	 1.04928   	 12.6726   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5250, m: 50)                                                                               	 0.3493    	 100       	 26.3026   	 0         	 1.20825   	 21.7693   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 105, r2: 105, leftOrthog: 1)                      	 0.215631  	 600       	 322.112   	 0         	 37.3037   	 8.63487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 50, n: 50, r2: 105)                         	 0.0590509 	 100       	 93.3517   	 0         	 11.0955   	 8.41346   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 105)                                                                                	 0.0578138 	 100       	 3.17831   	 0         	 0.18058   	 17.6006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 50) 	 0.0497239 	 100       	 55.5568   	 0         	 8.75234   	 6.34766   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 50)                         	 0.0492691 	 100       	 111.885   	 0         	 8.70363   	 12.855    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 55)                                                                                                         	 0.0480663 	 808       	 0         	 0         	 40.6805   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 50)                           	 0.0260108 	 100       	 211.931   	 0         	 25.1895   	 8.41346   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 105, r2: 105, leftOrthog: 1)                      	 0.0187839 	 100       	 293.47    	 0         	 34.4785   	 8.51167   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0169608 	 100       	 154.768   	 0         	 37.3803   	 4.14038   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 50)                                                                                 	 0.0100267 	 100       	 4.40491   	 0         	 1.04122   	 4.23052   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 105, fromLeft: 1)                              	 0.00673532	 800       	 0         	 0         	 20.9522   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 1)  	 0.00463552	 100       	 0.226512  	 0         	 1.81244   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 2, r2: 1)                              	 0.00388884	 100       	 0.540007  	 0         	 3.24045   	 0.166646  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 105)  	 0.00250019	 100       	 44.0967   	 0         	 6.88748   	 6.40244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 105, r2: 105)                            	 0.00147744	 100       	 74.6224   	 0         	 11.6553   	 6.40244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00106987	 100       	 23.3673   	 0         	 5.60815   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000889273	 100       	 0.562257  	 0         	 2.24903   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 105)                            	 0.000824033	 100       	 0         	 0         	 10.1938   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 105, leftOrthog: 1)                         	 0.000823365	 100       	 63.7627   	 0         	 20.1612   	 3.16265   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                          	 0.000491419	 101       	 0         	 0         	 9.0432    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 105)                                                                                                         	 0.000490722	 100       	 0         	 0         	 17.1176   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 1)                                                                                                          	 0.000398352	 101       	 0         	 0         	 11.156    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033451	 100       	 0.747362  	 0         	 11.9578   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 50, fromLeft: 1)                               	 0.000215454	 100       	 0         	 0         	 38.9874   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.7261   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.7261   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.9858   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.10531   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.10398   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.28683   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.87933   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.02299   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.71011   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.624139  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.455027  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.252199  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0494468 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0224669 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00695077	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00253641	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00244661	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000889273	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000824033	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033451	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23247376013184 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23247181572096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23246980245632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23246778919168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23246577592704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23246376266240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23246174939776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23245973613312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23245772286848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23245570960384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23245369633920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23245168307456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23244966980992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23244765654528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23244564328064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23244363001600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23244161675136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23243960348672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23243759022208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23243557695744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23243356369280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23243155042816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23242953716352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23242752389888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23242551063424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23242349736960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23242148410496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23241947084032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23241745757568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23241544431104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23241343104640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23241141778176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23240940447616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23240739121152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23240537794688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23240336468224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23240135141760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23239933815296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23239732488832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23239531162368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23239329835904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23239128509440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23238927182976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23238725856512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23238524530048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23238323203584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23238121877120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23237920550656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23237719224192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23237517897728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23237316571264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23237115244800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23236913918336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23236712591872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23236511265408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23236309938944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23236108612480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23235907286016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23235705959552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23235504633088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23235303306624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23235101980160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23234900653696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23247270352640 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23247263762176 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5300, m: 106)                                                                              	 6.01536   	 600       	 41.5791   	 0         	 0.905635  	 45.9116   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 5300)                                                                               	 5.56992   	 700       	 14.8683   	 0         	 1.14107   	 13.0301   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 106)                        	 0.61486   	 600       	 116.223   	 0         	 8.85927   	 13.1188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 106)	 0.588268  	 700       	 71.0886   	 0         	 8.13759   	 8.73583   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 106)                                                                              	 0.564234  	 100       	 34.849    	 0         	 0.767542  	 45.4034   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 106)                          	 0.446216  	 700       	 186.84    	 0         	 14.2422   	 13.1188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 2500)                                                                               	 0.398998  	 100       	 13.8813   	 0         	 1.0854    	 12.789    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5300, m: 50)                                                                               	 0.346647  	 100       	 26.7563   	 0         	 1.22903   	 21.7703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 106, r2: 106, leftOrthog: 1)                      	 0.190468  	 600       	 375.187   	 0         	 43.0403   	 8.71711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 50) 	 0.0652593 	 100       	 43.1816   	 0         	 6.76808   	 6.38018   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 106)                                                                                	 0.0614965 	 100       	 3.01643   	 0         	 0.171067  	 17.6331   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 50, n: 50, r2: 106)                         	 0.0554241 	 100       	 101.364   	 0         	 12.0107   	 8.43949   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 50)                         	 0.0492982 	 100       	 113.96    	 0         	 8.78305   	 12.9749   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 56)                                                                                                         	 0.0400346 	 808       	 0         	 0         	 50.634    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 50)                           	 0.0359329 	 100       	 156.347   	 0         	 18.5256   	 8.43949   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 50, r2: 50, leftOrthog: 1)                        	 0.012033  	 100       	 220.228   	 0         	 53.1871   	 4.14062   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 106, r2: 106, leftOrthog: 1)                      	 0.0119601 	 100       	 469.729   	 0         	 54.68     	 8.59051   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 50)                                                                                 	 0.00981729	 100       	 4.54979   	 0         	 1.07158   	 4.24587   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 106, fromLeft: 1)                              	 0.00717955	 800       	 0         	 0         	 20.032    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 1)  	 0.00464232	 100       	 0.228334  	 0         	 1.82702   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 2, r2: 1)                              	 0.00388933	 100       	 0.545081  	 0         	 3.2709    	 0.166646  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 106)  	 0.00249608	 100       	 45.0146   	 0         	 6.99849   	 6.43204   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 106, r2: 106)                            	 0.00151596	 100       	 74.118    	 0         	 11.5233   	 6.43204   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00106325	 100       	 23.5128   	 0         	 5.64308   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00093962	 100       	 0.53213   	 0         	 2.12852   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 106)                            	 0.000813573	 100       	 0         	 0         	 10.4232   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 106)                                                                                                         	 0.000510587	 100       	 0         	 0         	 16.6083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                          	 0.000503003	 101       	 0         	 0         	 8.99557   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 106, leftOrthog: 1)                         	 0.000372331	 100       	 142.346   	 0         	 44.9063   	 3.16986   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 1)                                                                                                          	 0.000367217	 101       	 0         	 0         	 12.3219   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000345676	 100       	 0.723221  	 0         	 11.5715   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 50, fromLeft: 1)                               	 0.000224165	 100       	 0         	 0         	 37.8293   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.895    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.895    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.014    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.20807   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.20666   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.37145   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.98774   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.97874   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.720646  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.660665  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.487554  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.214833  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0414154 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0232827 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00740372	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00257563	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00238785	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00093962	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000813573	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000345676	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22451824441216 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22451605989376 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22451404662912 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22451203336448 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22451002009984 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22450800683520 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22450599357056 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22450398030592 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22450196704128 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22449995377664 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22449794051200 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22449592724736 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22449391398272 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22449190071808 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22448988745344 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22448787418880 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22448586092416 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22448384765952 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22448183439488 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22447982113024 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22447780786560 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22447579460096 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22447378133632 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22447176807168 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22446975480704 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22446774154240 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22446572827776 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22446371501312 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22446170174848 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22445968848384 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22445767521920 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22445566195456 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22445364864896 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22445163538432 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22444962211968 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22444760885504 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22444559559040 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22444358232576 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22444156906112 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22443955579648 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22443754253184 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22443552926720 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22443351600256 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22443150273792 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22442948947328 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22442747620864 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22442546294400 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22442344967936 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22442143641472 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22441942315008 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22441740988544 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22441539662080 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22441338335616 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22441137009152 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22440935682688 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22440734356224 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22440533029760 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22440331703296 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22440130376832 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22439929050368 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22439727723904 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22439526397440 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22439325070976 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22451718780672 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22451712190208 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5350, m: 107)                                                                              	 6.17674   	 600       	 41.6497   	 0         	 0.898693  	 46.3447   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 5350)                                                                               	 5.79838   	 700       	 14.6905   	 0         	 1.11689   	 13.1531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 107)                        	 0.615309  	 600       	 119.456   	 0         	 9.02063   	 13.2426   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 107)                                                                              	 0.581665  	 100       	 34.4455   	 0         	 0.751713  	 45.8227   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 107)	 0.577052  	 700       	 74.6207   	 0         	 8.456     	 8.82458   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 107)                          	 0.429684  	 700       	 199.572   	 0         	 15.0705   	 13.2426   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 2500)                                                                               	 0.411481  	 100       	 13.7134   	 0         	 1.06261   	 12.9054   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5350, m: 50)                                                                               	 0.349958  	 100       	 26.7532   	 0         	 1.22883   	 21.7712   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 107, r2: 107, leftOrthog: 1)                      	 0.180965  	 600       	 406.171   	 0         	 46.1592   	 8.79934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 50, n: 50, r2: 107)                         	 0.0623554 	 100       	 91.8044   	 0         	 10.8449   	 8.46519   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 107)                                                                                	 0.0562376 	 100       	 3.32962   	 0         	 0.188486  	 17.6651   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 50) 	 0.0493588 	 100       	 58.2368   	 0         	 9.08126   	 6.41286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 50)                         	 0.0473127 	 100       	 120.993   	 0         	 9.23978   	 13.0948   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 57)                                                                                                         	 0.0446018 	 808       	 0         	 0         	 47.0868   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 50)                           	 0.0311531 	 100       	 183.754   	 0         	 21.707    	 8.46519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 107, r2: 107, leftOrthog: 1)                      	 0.0189319 	 100       	 302.374   	 0         	 34.8787   	 8.6693    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0119887 	 100       	 223.127   	 0         	 53.884    	 4.14087   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 50)                                                                                 	 0.0102078 	 100       	 4.4247    	 0         	 1.03842   	 4.261     
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 107, fromLeft: 1)                              	 0.00687432	 800       	 0         	 0         	 21.3181   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 1)  	 0.00475523	 100       	 0.225015  	 0         	 1.80046   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 2, r2: 1)                              	 0.00404208	 100       	 0.52943   	 0         	 3.17698   	 0.166646  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 107)  	 0.00268048	 100       	 42.7125   	 0         	 6.61046   	 6.46135   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 107, r2: 107)                            	 0.00163953	 100       	 69.8309   	 0         	 10.8075   	 6.46135   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00128796	 100       	 0.388211  	 0         	 1.55284   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00100911	 100       	 24.7744   	 0         	 5.94585   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 107)                            	 0.000861073	 100       	 0         	 0         	 9.94109   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                          	 0.000543916	 101       	 0         	 0         	 8.46748   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 107)                                                                                                         	 0.000522417	 100       	 0         	 0         	 16.3854   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 1)                                                                                                          	 0.000409801	 101       	 0         	 0         	 11.2386   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 107, leftOrthog: 1)                         	 0.000399022	 100       	 134.078   	 0         	 42.2032   	 3.17696   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000335453	 100       	 0.745261  	 0         	 11.9242   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 50, fromLeft: 1)                               	 0.000221206	 100       	 0         	 0         	 38.697    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 20.4059   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 20.4059   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.3606   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.40358   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.40185   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.55493   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.1646    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.22007   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.725986  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.633847  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.466519  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.212284  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0460779 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.023173  	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00709553	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230091	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00229398	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00128796	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000861073	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335453	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23129555445632 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23129338406912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23129137080448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23128935753984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23128734427520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23128533101056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23128331774592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23128130448128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23127929121664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23127727795200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23127526468736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23127325142272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23127123815808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23126922489344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23126721162880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23126519836416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23126318509952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23126117183488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23125915857024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23125714530560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23125513204096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23125311877632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23125110551168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23124909224704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23124707898240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23124506571776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23124305245312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23124103918848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23123902592384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23123701265920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23123499939456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23123298612992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23123097282432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23122895955968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23122694629504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23122493303040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23122291976576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23122090650112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23121889323648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23121687997184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23121486670720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23121285344256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23121084017792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23120882691328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23120681364864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23120480038400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23120278711936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23120077385472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23119876059008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23119674732544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23119473406080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23119272079616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23119070753152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23118869426688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23118668100224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23118466773760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23118265447296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23118064120832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23117862794368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23117661467904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23117460141440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23117258814976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23117057488512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23129449785088 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23129443194624 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5400, m: 108)                                                                              	 6.27044   	 600       	 42.1883   	 0         	 0.901886  	 46.7779   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 5400)                                                                               	 5.63748   	 700       	 15.5374   	 0         	 1.17034   	 13.276    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 108)                        	 0.693592  	 600       	 108.973   	 0         	 8.15279   	 13.3663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 108)                                                                              	 0.581375  	 100       	 35.1098   	 0         	 0.759264  	 46.2419   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 108)	 0.573044  	 700       	 77.362    	 0         	 8.67849   	 8.91422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 108)                          	 0.438992  	 700       	 200.869   	 0         	 15.028    	 13.3663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 2500)                                                                               	 0.404218  	 100       	 14.2201   	 0         	 1.09203   	 13.0217   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5400, m: 50)                                                                               	 0.348232  	 100       	 27.1371   	 0         	 1.24641   	 21.7722   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 108, r2: 108, leftOrthog: 1)                      	 0.165339  	 600       	 457.138   	 0         	 51.4704   	 8.88158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 50, n: 50, r2: 108)                         	 0.069326  	 100       	 84.1243   	 0         	 9.90797   	 8.49057   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 108)                                                                                	 0.0596854 	 100       	 3.16661   	 0         	 0.178938  	 17.6966   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 50) 	 0.0490358 	 100       	 59.7931   	 0         	 9.27649   	 6.44566   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 50)                         	 0.0481514 	 100       	 121.118   	 0         	 9.1655    	 13.2146   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 58)                                                                                                         	 0.0477131 	 808       	 0         	 0         	 45.5743   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 50)                           	 0.0301609 	 100       	 193.363   	 0         	 22.7739   	 8.49057   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 108, r2: 108, leftOrthog: 1)                      	 0.0201595 	 100       	 289.292   	 0         	 33.0693   	 8.74806   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0141489 	 100       	 190.827   	 0         	 46.0812   	 4.1411    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 50)                                                                                 	 0.0105397 	 100       	 4.3328    	 0         	 1.01331   	 4.2759    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 108, fromLeft: 1)                              	 0.00720336	 800       	 0         	 0         	 20.7263   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 1)  	 0.00472041	 100       	 0.228794  	 0         	 1.83069   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 2, r2: 1)                              	 0.00395673	 100       	 0.545906  	 0         	 3.27584   	 0.166646  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 108)  	 0.00248411	 100       	 46.9544   	 0         	 7.23445   	 6.49038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 108, r2: 108)                            	 0.00146432	 100       	 79.6546   	 0         	 12.2727   	 6.49038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000974838	 100       	 25.6453   	 0         	 6.15487   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000890796	 100       	 0.561296  	 0         	 2.24518   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 108)                            	 0.000852768	 100       	 0         	 0         	 10.1317   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 108, leftOrthog: 1)                         	 0.000668046	 100       	 80.8328   	 0         	 25.3875   	 3.18396   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 108)                                                                                                         	 0.000499623	 100       	 0         	 0         	 17.293    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                          	 0.000486157	 101       	 0         	 0         	 9.63968   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 1)                                                                                                          	 0.000409836	 101       	 0         	 0         	 11.4348   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000349025	 100       	 0.716281  	 0         	 11.4605   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 50, fromLeft: 1)                               	 0.000227267	 100       	 0         	 0         	 38.017    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 20.3063   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 20.3062   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.0946   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.57732   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.57597   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.65065   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.25974   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.05224   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.812044  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.629284  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.474574  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.200315  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0491087 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0238384 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00743063	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00219368	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00184334	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000890796	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000852768	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000349025	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22957181216640 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22957002844160 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22956801517696 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22956600191232 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22956398864768 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22956197538304 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22955996211840 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22955794885376 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22955593558912 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22955392232448 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22955190905984 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22954989579520 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22954788253056 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22954586926592 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22954385600128 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22954184273664 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22953982947200 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22953781620736 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22953580294272 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22953378967808 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22953177641344 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22952976314880 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22952774988416 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22952573661952 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22952372335488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22952171009024 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22951969682560 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22951768356096 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22951567029632 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22951365703168 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22951164376704 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22950963050240 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22950761719680 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22950560393216 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22950359066752 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22950157740288 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22949956413824 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22949755087360 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22949553760896 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22949352434432 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22949151107968 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22948949781504 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22948748455040 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22948547128576 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22948345802112 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22948144475648 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22947943149184 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22947741822720 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22947540496256 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22947339169792 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22947137843328 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22946936516864 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22946735190400 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22946533863936 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22946332537472 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22946131211008 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22945929884544 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22945728558080 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22945527231616 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22945325905152 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22945124578688 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22944923252224 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22944721925760 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22957075556096 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22956896864000 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5450, m: 109)                                                                              	 6.49742   	 600       	 41.856    	 0         	 0.886572  	 47.2111   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 5450)                                                                               	 5.94807   	 700       	 15.139    	 0         	 1.12986   	 13.3989   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 109)                        	 0.643928  	 600       	 120.668   	 0         	 8.94496   	 13.4901   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 109)                                                                              	 0.602113  	 100       	 34.5313   	 0         	 0.740047  	 46.661    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 109)	 0.575473  	 700       	 79.3      	 0         	 8.80648   	 9.00473   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 109)                          	 0.438577  	 700       	 206.696   	 0         	 15.322    	 13.4901   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 2500)                                                                               	 0.417402  	 100       	 14.0253   	 0         	 1.06754   	 13.1379   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5450, m: 50)                                                                               	 0.342019  	 100       	 27.8859   	 0         	 1.28075   	 21.7731   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 109, r2: 109, leftOrthog: 1)                      	 0.189874  	 600       	 409.228   	 0         	 45.6533   	 8.96382   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 50, n: 50, r2: 109)                         	 0.0616865 	 100       	 96.3015   	 0         	 11.3088   	 8.51562   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 109)                                                                                	 0.0568577 	 100       	 3.35487   	 0         	 0.189244  	 17.7277   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 50) 	 0.0540307 	 100       	 55.3481   	 0         	 8.54328   	 6.47855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 50)                         	 0.0468853 	 100       	 126.703   	 0         	 9.50201   	 13.3343   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 59)                                                                                                         	 0.046858  	 808       	 0         	 0         	 48.0199   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 50)                           	 0.0329395 	 100       	 180.346   	 0         	 21.1782   	 8.51562   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 109, r2: 109, leftOrthog: 1)                      	 0.0164623 	 100       	 360.855   	 0         	 40.8819   	 8.82677   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0123858 	 100       	 220.01    	 0         	 53.1253   	 4.14134   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 50)                                                                                 	 0.0102244 	 100       	 4.51536   	 0         	 1.05239   	 4.29058   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 109, fromLeft: 1)                              	 0.0072627 	 800       	 0         	 0         	 20.9394   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 1)  	 0.00474948	 100       	 0.229499  	 0         	 1.83633   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 2, r2: 1)                              	 0.00404216	 100       	 0.539316  	 0         	 3.23629   	 0.166646  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 109)  	 0.00247149	 100       	 48.0722   	 0         	 7.37402   	 6.51914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 109, r2: 109)                            	 0.00145253	 100       	 81.7954   	 0         	 12.547    	 6.51914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00100924	 100       	 24.7712   	 0         	 5.94509   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000920474	 100       	 0.543198  	 0         	 2.17279   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 109)                            	 0.000859932	 100       	 0         	 0         	 10.1403   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                          	 0.000519134	 101       	 0         	 0         	 9.18299   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 109)                                                                                                         	 0.000515499	 100       	 0         	 0         	 16.9156   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 109, leftOrthog: 1)                         	 0.000395179	 100       	 137.912   	 0         	 43.2209   	 3.19087   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 1)                                                                                                          	 0.00039374	 101       	 0         	 0         	 12.1075   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000334245	 100       	 0.747954  	 0         	 11.9673   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 50, fromLeft: 1)                               	 0.000235217	 100       	 0         	 0         	 37.0722   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 21.0899   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 21.0898   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.6664   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.78362   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.78223   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.90069   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.49841   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.37569   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.753509  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.636725  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.477011  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.219117  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0482864 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0241543 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00749792	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00219213	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00208431	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000920474	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000859932	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334245	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22670410106752 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22670179559424 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22669978232960 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22669776906496 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22669575580032 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22669374253568 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22669172927104 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22668971600640 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22668770274176 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22668568947712 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22668367621248 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22668166294784 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22667964968320 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22667763641856 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22667562315392 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22667360988928 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22667159662464 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22666958336000 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22666757009536 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22666555683072 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22666354356608 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22666153030144 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22665951703680 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22665750377216 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22665549050752 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22665347724288 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22665146397824 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22664945071360 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22664743744896 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22664542418432 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22664341091968 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22664139765504 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22663938434944 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22663737108480 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22663535782016 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22663334455552 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22663133129088 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22662931802624 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22662730476160 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22662529149696 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22662327823232 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22662126496768 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22661925170304 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22661723843840 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22661522517376 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22661321190912 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22661119864448 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22660918537984 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22660717211520 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22660515885056 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22660314558592 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22660113232128 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22659911905664 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22659710579200 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22659509252736 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22659307926272 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22659106599808 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22658905273344 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22658703946880 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22658502620416 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22658301293952 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22658099967488 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22657898641024 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22670304446208 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22670297855744 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5500, m: 110)                                                                              	 6.58696   	 600       	 42.4339   	 0         	 0.89064   	 47.6442   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 5500)                                                                               	 5.9463    	 700       	 15.5641   	 0         	 1.15103   	 13.5219   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 110)                        	 0.65365   	 600       	 122.176   	 0         	 8.97435   	 13.6139   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 110)	 0.610208  	 700       	 76.9738   	 0         	 8.4623    	 9.09609   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 110)                                                                              	 0.605786  	 100       	 34.9546   	 0         	 0.742454  	 47.0798   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 110)                          	 0.455435  	 700       	 204.574   	 0         	 15.0269   	 13.6139   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 2500)                                                                               	 0.417442  	 100       	 14.2805   	 0         	 1.07744   	 13.2541   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5500, m: 50)                                                                               	 0.343895  	 100       	 27.9882   	 0         	 1.28539   	 21.774    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 110, r2: 110, leftOrthog: 1)                      	 0.250302  	 600       	 319.055   	 0         	 35.2701   	 9.04605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 50, n: 50, r2: 110)                         	 0.06876   	 100       	 87.9872   	 0         	 10.3025   	 8.54037   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 110)                                                                                	 0.0581647 	 100       	 3.30957   	 0         	 0.186367  	 17.7583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 50) 	 0.0533802 	 100       	 57.1373   	 0         	 8.77479   	 6.51153   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 50)                         	 0.0477248 	 100       	 126.769   	 0         	 9.42236   	 13.454    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 60)                                                                                                         	 0.0470551 	 808       	 0         	 0         	 49.4536   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 50)                           	 0.0363525 	 100       	 166.426   	 0         	 19.487    	 8.54037   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 110, r2: 110, leftOrthog: 1)                      	 0.0162124 	 100       	 373.171   	 0         	 41.9037   	 8.90544   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0152386 	 100       	 180.463   	 0         	 43.5736   	 4.14157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 50)                                                                                 	 0.0108047 	 100       	 4.3191    	 0         	 1.00327   	 4.30504   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 110, fromLeft: 1)                              	 0.00756995	 800       	 0         	 0         	 20.4599   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 1)  	 0.00492923	 100       	 0.223159  	 0         	 1.78559   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 110)  	 0.00488637	 100       	 24.7628   	 0         	 3.78195   	 6.54762   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 2, r2: 1)                              	 0.00410862	 100       	 0.53546   	 0         	 3.21315   	 0.166646  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 110)                            	 0.00315952	 100       	 0         	 0         	 2.78523   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 110, r2: 110)                            	 0.00154086	 100       	 78.5277   	 0         	 11.9933   	 6.54762   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000999038	 100       	 25.0241   	 0         	 6.00578   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000938933	 100       	 0.532519  	 0         	 2.13008   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 110, leftOrthog: 1)                         	 0.000575993	 100       	 95.4873   	 0         	 29.8615   	 3.19767   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                          	 0.000533157	 101       	 0         	 0         	 9.09301   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 110)                                                                                                         	 0.000508998	 100       	 0         	 0         	 17.2889   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 1)                                                                                                          	 0.000402912	 101       	 0         	 0         	 12.0324   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000341321	 100       	 0.732448  	 0         	 11.7192   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 50, fromLeft: 1)                               	 0.000231449	 100       	 0         	 0         	 38.0213   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 21.3333   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 21.3332   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.7112   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.93592   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.93451   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.05145   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.5948    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.37455   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.771134  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.673404  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.497437  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.282329  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0485001 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0244663 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0078014 	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00315952	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00240884	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00182375	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000938933	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000341321	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22875662280576 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22875465574400 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22875264247936 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22875062921472 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22874861595008 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22874660268544 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22874458942080 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22874257615616 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22874056289152 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22873854962688 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22873653636224 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22873452309760 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22873250983296 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22873049656832 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22872848330368 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22872647003904 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22872445677440 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22872244350976 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22872043024512 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22871841698048 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22871640371584 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22871439045120 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22871237718656 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22871036392192 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22870835065728 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22870633739264 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22870432412800 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22870231086336 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22870029759872 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22869828433408 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22869627106944 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22869425780480 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22869224449920 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22869023123456 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22868821796992 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22868620470528 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22868419144064 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22868217817600 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22868016491136 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22867815164672 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22867613838208 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22867412511744 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22867211185280 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22867009858816 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22866808532352 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22866607205888 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22866405879424 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22866204552960 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22866003226496 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22865801900032 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22865600573568 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22865399247104 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22865197920640 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22864996594176 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22864795267712 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22864593941248 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22864392614784 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22864191288320 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22863989961856 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22863788635392 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22863587308928 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22863385982464 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22863184656000 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22875556620032 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22875550029568 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5550, m: 111)                                                                              	 6.40505   	 600       	 44.84     	 0         	 0.932663  	 48.0774   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 5550)                                                                               	 6.27831   	 700       	 15.1467   	 0         	 1.11007   	 13.6448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 111)                        	 0.666271  	 600       	 123.16    	 0         	 8.96516   	 13.7376   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 111)	 0.650288  	 700       	 74.332    	 0         	 8.08989   	 9.18825   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 111)                                                                              	 0.603218  	 100       	 35.7446   	 0         	 0.75254   	 47.4985   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 111)                          	 0.481759  	 700       	 198.718   	 0         	 14.4652   	 13.7376   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 2500)                                                                               	 0.449635  	 100       	 13.4983   	 0         	 1.00959   	 13.3702   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5550, m: 50)                                                                               	 0.358336  	 100       	 27.1044   	 0         	 1.24475   	 21.775    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 111, r2: 111, leftOrthog: 1)                      	 0.324711  	 600       	 252.711   	 0         	 27.6844   	 9.12829   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 50, n: 50, r2: 111)                         	 0.0597913 	 100       	 103.033   	 0         	 12.0298   	 8.56481   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 111)                                                                                	 0.0584025 	 100       	 3.32606   	 0         	 0.186978  	 17.7885   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 61)                                                                                                         	 0.0543343 	 808       	 0         	 0         	 44.2677   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 50) 	 0.054044  	 100       	 57.5549   	 0         	 8.79431   	 6.54456   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 50)                         	 0.0492992 	 100       	 124.962   	 0         	 9.20618   	 13.5737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 50)                           	 0.0322672 	 100       	 190.921   	 0         	 22.2914   	 8.56481   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 111, r2: 111, leftOrthog: 1)                      	 0.0123158 	 100       	 500.21    	 0         	 55.6774   	 8.98407   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 50)                                                                                 	 0.0107578 	 100       	 4.38441   	 0         	 1.01508   	 4.31929   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 50, r2: 50, leftOrthog: 1)                        	 0.00964155	 100       	 287.817   	 0         	 69.4909   	 4.14179   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 111, fromLeft: 1)                              	 0.00759999	 800       	 0         	 0         	 20.7512   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 1)  	 0.00473584	 100       	 0.234383  	 0         	 1.8754    	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 2, r2: 1)                              	 0.00391982	 100       	 0.566353  	 0         	 3.39853   	 0.166647  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 111)  	 0.00278994	 100       	 44.1622   	 0         	 6.71584   	 6.57583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00202922	 100       	 12.32     	 0         	 2.95679   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 111, r2: 111)                            	 0.00149493	 100       	 82.4187   	 0         	 12.5336   	 6.57583   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 111)                            	 0.00111649	 100       	 0         	 0         	 7.95348   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000932603	 100       	 0.536134  	 0         	 2.14454   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 111, leftOrthog: 1)                         	 0.000605309	 100       	 91.6887   	 0         	 28.6135   	 3.20439   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                          	 0.000544936	 101       	 0         	 0         	 9.04473   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 111)                                                                                                         	 0.000500948	 100       	 0         	 0         	 17.7264   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 1)                                                                                                          	 0.000426819	 101       	 0         	 0         	 11.5478   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333918	 100       	 0.748687  	 0         	 11.979    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 50, fromLeft: 1)                               	 0.000228695	 100       	 0         	 0         	 38.829    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 21.5159   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 21.5158   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.0133   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.76729   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.76593   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.89596   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.425     	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.73871   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.77739   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.711857  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.519441  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.347273  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.055807  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0255018 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00782869	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00315676	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00274021	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00111649	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000932603	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333918	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23196966143872 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23196782815232 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23196581488768 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23196380162304 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23196178835840 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23195977509376 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23195776182912 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23195574856448 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23195373529984 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23195172203520 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23194970877056 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23194769550592 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23194568224128 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23194366897664 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23194165571200 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23193964244736 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23193762918272 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23193561591808 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23193360265344 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23193158938880 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23192957612416 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23192756285952 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23192554959488 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23192353633024 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23192152306560 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23191950980096 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23191749653632 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23191548327168 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23191347000704 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23191145674240 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23190944347776 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23190743021312 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23190541690752 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23190340364288 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23190139037824 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23189937711360 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23189736384896 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23189535058432 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23189333731968 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23189132405504 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23188931079040 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23188729752576 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23188528426112 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23188327099648 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23188125773184 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23187924446720 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23187723120256 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23187521793792 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23187320467328 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23187119140864 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23186917814400 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23186716487936 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23186515161472 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23186313835008 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23186112508544 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23185911182080 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23185709855616 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23185508529152 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23185307202688 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23185105876224 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23184904549760 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23184703223296 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23184501896832 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23196860483328 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23196853892864 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5600, m: 112)                                                                              	 6.99387   	 600       	 42.1848   	 0         	 0.8696    	 48.5106   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 5600)                                                                               	 6.2085    	 700       	 15.7348   	 0         	 1.14287   	 13.7678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 112)                        	 0.686182  	 600       	 122.847   	 0         	 8.86256   	 13.8614   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 112)                                                                              	 0.62254   	 100       	 35.262    	 0         	 0.735896  	 47.9171   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 112)	 0.59896   	 700       	 83.0388   	 0         	 8.94698   	 9.28121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 112)                          	 0.449411  	 700       	 218.831   	 0         	 15.7871   	 13.8614   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 2500)                                                                               	 0.428585  	 100       	 14.4157   	 0         	 1.06893   	 13.4861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5600, m: 50)                                                                               	 0.360066  	 100       	 27.2172   	 0         	 1.24988   	 21.7758   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 112, r2: 112, leftOrthog: 1)                      	 0.247714  	 600       	 340.294   	 0         	 36.9462   	 9.21053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 50, n: 50, r2: 112)                         	 0.0650115 	 100       	 96.4753   	 0         	 11.2325   	 8.58896   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 50) 	 0.0577962 	 100       	 54.8825   	 0         	 8.3438    	 6.57764   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 112)                                                                                	 0.0576269 	 100       	 3.40119   	 0         	 0.190883  	 17.8182   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 50)                         	 0.0553695 	 100       	 113.275   	 0         	 8.27234   	 13.6933   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 62)                                                                                                         	 0.0542192 	 808       	 0         	 0         	 45.828    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 50)                           	 0.0352558 	 100       	 177.9     	 0         	 20.7126   	 8.58896   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 112, r2: 112, leftOrthog: 1)                      	 0.0193599 	 100       	 323.968   	 0         	 35.7476   	 9.06266   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 50, r2: 50, leftOrthog: 1)                        	 0.0114432 	 100       	 244.688   	 0         	 59.0746   	 4.14201   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 50)                                                                                 	 0.0112435 	 100       	 4.23949   	 0         	 0.978345  	 4.33333   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 112, fromLeft: 1)                              	 0.0082826 	 800       	 0         	 0         	 19.3856   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 1)  	 0.00482325	 100       	 0.232209  	 0         	 1.858     	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 2, r2: 1)                              	 0.00403486	 100       	 0.555162  	 0         	 3.33137   	 0.166647  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 112)  	 0.00264109	 100       	 47.4955   	 0         	 7.19218   	 6.60377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 112, r2: 112)                            	 0.00154935	 100       	 80.9629   	 0         	 12.2601   	 6.60377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00100726	 100       	 24.8198   	 0         	 5.95676   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 112)                            	 0.000923587	 100       	 0         	 0         	 9.70131   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000867046	 100       	 0.576671  	 0         	 2.30668   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 112, leftOrthog: 1)                         	 0.000776213	 100       	 72.1451   	 0         	 22.4681   	 3.21101   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                          	 0.000537693	 101       	 0         	 0         	 9.31684   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 112)                                                                                                         	 0.000506706	 100       	 0         	 0         	 17.6828   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 1)                                                                                                          	 0.000427345	 101       	 0         	 0         	 11.7226   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336425	 100       	 0.743108  	 0         	 11.8897   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 50, fromLeft: 1)                               	 0.000229705	 100       	 0         	 0         	 39.0066   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 22.0317   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 22.0316   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.9038   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.45861   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.45728   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.50257   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.0341    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.64833   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.807571  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.664221  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.490251  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.279293  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.055691  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0260415 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00851231	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00233669	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00208692	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000923587	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000867046	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336425	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22443700332416 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22443485816832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22443284490368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22443083163904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22442881837440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22442680510976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22442479184512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22442277858048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22442076531584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22441875205120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22441673878656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22441472552192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22441271225728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22441069899264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22440868572800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22440667246336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22440465919872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22440264593408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22440063266944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22439861940480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22439660614016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22439459287552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22439257961088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22439056634624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22438855308160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22438653981696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22438452655232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22438251328768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22438050002304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22437848675840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22437647349376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22437446022912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22437244692352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22437043365888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22436842039424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22436640712960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22436439386496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22436238060032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22436036733568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22435835407104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22435634080640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22435432754176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22435231427712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22435030101248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22434828774784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22434627448320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22434426121856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22434224795392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22434023468928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22433822142464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22433620816000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22433419489536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22433218163072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22433016836608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22432815510144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22432614183680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22432412857216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22432211530752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22432010204288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22431808877824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22431607551360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22431406224896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22431204898432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22443594671872 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22443588081408 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5650, m: 113)                                                                              	 6.67266   	 600       	 45.4104   	 0         	 0.927809  	 48.9437   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 5650)                                                                               	 6.641     	 700       	 15.1076   	 0         	 1.0876    	 13.8907   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 113)	 0.662516  	 700       	 77.2356   	 0         	 8.23851   	 9.37494   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 113)                        	 0.66083   	 600       	 131.008   	 0         	 9.36763   	 13.9851   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 113)                                                                              	 0.63841   	 100       	 35.0022   	 0         	 0.724151  	 48.3355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 113)                          	 0.506521  	 700       	 199.405   	 0         	 14.2583   	 13.9851   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 2500)                                                                               	 0.439702  	 100       	 14.3013   	 0         	 1.05141   	 13.6021   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5650, m: 50)                                                                               	 0.359855  	 100       	 27.4764   	 0         	 1.26173   	 21.7767   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 113, r2: 113, leftOrthog: 1)                      	 0.240313  	 600       	 360.254   	 0         	 38.7671   	 9.29276   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 63)                                                                                                         	 0.0681803 	 808       	 0         	 0         	 37.6291   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 113)                                                                                	 0.0589462 	 100       	 3.35476   	 0         	 0.187968  	 17.8475   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 50, n: 50, r2: 113)                         	 0.0578777 	 100       	 110.31    	 0         	 12.8077   	 8.6128    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 50) 	 0.0538054 	 100       	 60.1147   	 0         	 9.0935    	 6.61073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 50)                         	 0.0534777 	 100       	 119.386   	 0         	 8.64313   	 13.8128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 50)                           	 0.0301151 	 100       	 212.003   	 0         	 24.6149   	 8.6128    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 113, r2: 113, leftOrthog: 1)                      	 0.0223754 	 100       	 285.335   	 0         	 31.2142   	 9.14121   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 50, r2: 50, leftOrthog: 1)                        	 0.0148319 	 100       	 190.467   	 0         	 45.9818   	 4.14223   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 50)                                                                                 	 0.0105827 	 100       	 4.55145   	 0         	 1.04699   	 4.34717   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 113, fromLeft: 1)                              	 0.00796804	 800       	 0         	 0         	 20.5124   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 1)  	 0.00486635	 100       	 0.232207  	 0         	 1.85798   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 2, r2: 1)                              	 0.00415217	 100       	 0.544294  	 0         	 3.26615   	 0.166647  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 113)  	 0.00257419	 100       	 49.6039   	 0         	 7.48009   	 6.63146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 113, r2: 113)                            	 0.00150747	 100       	 84.7051   	 0         	 12.7732   	 6.63146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000982609	 100       	 25.4425   	 0         	 6.10619   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000933159	 100       	 0.535814  	 0         	 2.14326   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 113)                            	 0.000871605	 100       	 0         	 0         	 10.3717   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 113, leftOrthog: 1)                         	 0.00059308	 100       	 95.2654   	 0         	 29.6081   	 3.21754   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                          	 0.000546573	 101       	 0         	 0         	 9.3133    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 113)                                                                                                         	 0.000512069	 100       	 0         	 0         	 17.6539   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 1)                                                                                                          	 0.000412957	 101       	 0         	 0         	 12.3267   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336116	 100       	 0.743791  	 0         	 11.9007   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 50, fromLeft: 1)                               	 0.000224956	 100       	 0         	 0         	 40.1856   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 22.3634   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 22.3634   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.6534   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.97475   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.97337   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.09417   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.72987   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.09129   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.773168  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.723762  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.542296  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.278114  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0696519 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0261555 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00819299	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00324906	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00267203	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000933159	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000871605	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336116	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22984841897856 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22984651696128 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22984450369664 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22984249043200 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22984047716736 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22983846390272 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22983645063808 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22983443737344 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22983242410880 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22983041084416 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22982839757952 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22982638431488 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22982437105024 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22982235778560 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22982034452096 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22981833125632 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22981631799168 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22981430472704 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22981229146240 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22981027819776 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22980826493312 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22980625166848 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22980423840384 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22980222513920 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22980021187456 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22979819860992 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22979618534528 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22979417208064 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22979215881600 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22979014555136 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22978813228672 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22978611902208 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22978410571648 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22978209245184 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22978007918720 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22977806592256 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22977605265792 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22977403939328 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22977202612864 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22977001286400 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22976799959936 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22976598633472 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22976397307008 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22976195980544 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22975994654080 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22975793327616 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22975592001152 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22975390674688 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22975189348224 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22974988021760 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22974786695296 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22974585368832 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22974384042368 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22974182715904 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22973981389440 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22973780062976 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22973578736512 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22973377410048 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22973176083584 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22972974757120 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22972773430656 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22972572104192 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22972370777728 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22984736237312 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22984729646848 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5700, m: 114)                                                                              	 7.35718   	 600       	 42.2885   	 0         	 0.856444  	 49.3769   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 5700)                                                                               	 6.44416   	 700       	 15.9861   	 0         	 1.14075   	 14.0136   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 114)                        	 0.671737  	 600       	 132.333   	 0         	 9.37936   	 14.1089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 114)                                                                              	 0.648687  	 100       	 35.06     	 0         	 0.719126  	 48.7537   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 114)	 0.646814  	 700       	 81.3774   	 0         	 8.59372   	 9.46941   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 114)                          	 0.485423  	 700       	 213.645   	 0         	 15.1425   	 14.1089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 2500)                                                                               	 0.434274  	 100       	 14.7355   	 0         	 1.07418   	 13.7179   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5700, m: 50)                                                                               	 0.375014  	 100       	 26.599    	 0         	 1.2214    	 21.7776   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 114, r2: 114, leftOrthog: 1)                      	 0.263024  	 600       	 337.964   	 0         	 36.0495   	 9.375     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 50, n: 50, r2: 114)                         	 0.0777003 	 100       	 83.629    	 0         	 9.68336   	 8.63636   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 64)                                                                                                         	 0.0596404 	 808       	 0         	 0         	 44.3936   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 114)                                                                                	 0.0584481 	 100       	 3.41329   	 0         	 0.190939  	 17.8763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 50) 	 0.0573194 	 100       	 57.5372   	 0         	 8.66024   	 6.64384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 50)                         	 0.0488284 	 100       	 133.078   	 0         	 9.55175   	 13.9323   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 50)                           	 0.0397204 	 100       	 163.593   	 0         	 18.9424   	 8.63636   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 114, r2: 114, leftOrthog: 1)                      	 0.0211914 	 100       	 306.634   	 0         	 33.2585   	 9.21972   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 50, r2: 50, leftOrthog: 1)                        	 0.0177866 	 100       	 160.233   	 0         	 38.6807   	 4.14244   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 50)                                                                                 	 0.0110861 	 100       	 4.38988   	 0         	 1.00667   	 4.36081   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 114, fromLeft: 1)                              	 0.00878699	 800       	 0         	 0         	 18.9313   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 1)  	 0.00508931	 100       	 0.223999  	 0         	 1.79231   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 2, r2: 1)                              	 0.00429986	 100       	 0.53025   	 0         	 3.18187   	 0.166647  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00410541	 100       	 6.08952   	 0         	 1.46149   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 114)  	 0.00268841	 100       	 48.3408   	 0         	 7.2596    	 6.65888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 114, r2: 114)                            	 0.00154922	 100       	 83.8871   	 0         	 12.5978   	 6.65888   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 114)                            	 0.000953687	 100       	 0         	 0         	 9.56289   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000917751	 100       	 0.54481   	 0         	 2.17924   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 114, leftOrthog: 1)                         	 0.000670925	 100       	 84.9573   	 0         	 26.3517   	 3.22398   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                          	 0.000550647	 101       	 0         	 0         	 9.39113   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 114)                                                                                                         	 0.000532522	 100       	 0         	 0         	 17.1261   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 1)                                                                                                          	 0.000444878	 101       	 0         	 0         	 11.6239   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000337124	 100       	 0.741567  	 0         	 11.8651   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 50, fromLeft: 1)                               	 0.000259914	 100       	 0         	 0         	 35.0885   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 23.2073   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 23.2073   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.6048   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.87929   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.87793   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.96134   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.43933   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.88952   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.802371  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.711911  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.530992  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.302673  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0611685 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.02718   	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0090469 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0024897 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00176764	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000953687	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000917751	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337124	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22539718735744 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22539518601216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22539317274752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22539115948288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22538914621824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22538713295360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22538511968896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22538310642432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22538109315968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22537907989504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22537706663040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22537505336576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22537304010112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22537102683648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22536901357184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22536700030720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22536498704256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22536297377792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22536096051328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22535894724864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22535693398400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22535492071936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22535290745472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22535089419008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22534888092544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22534686766080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22534485439616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22534284113152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22534082786688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22533881460224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22533680133760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22533478807296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22533277476736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22533076150272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22532874823808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22532673497344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22532472170880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22532270844416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22532069517952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22531868191488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22531666865024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22531465538560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22531264212096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22531062885632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22530861559168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22530660232704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22530458906240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22530257579776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22530056253312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22529854926848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22529653600384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22529452273920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22529250947456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22529049620992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22528848294528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22528646968064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22528445641600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22528244315136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22528042988672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22527841662208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22527640335744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22527439009280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22527237682816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22539613075200 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22539606484736 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5750, m: 115)                                                                              	 7.02133   	 600       	 45.4876   	 0         	 0.913222  	 49.8101   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 5750)                                                                               	 6.69906   	 700       	 15.786    	 0         	 1.11668   	 14.1366   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 115)                        	 0.700348  	 600       	 130.296   	 0         	 9.15471   	 14.2327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 115)	 0.678442  	 700       	 79.7949   	 0         	 8.34273   	 9.56461   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 115)                                                                              	 0.657382  	 100       	 35.2059   	 0         	 0.71598   	 49.1717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 115)                          	 0.506167  	 700       	 210.328   	 0         	 14.7779   	 14.2327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 2500)                                                                               	 0.449205  	 100       	 14.4947   	 0         	 1.04779   	 13.8336   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5750, m: 50)                                                                               	 0.373385  	 100       	 26.9494   	 0         	 1.23744   	 21.7784   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 115, r2: 115, leftOrthog: 1)                      	 0.288316  	 600       	 316.502   	 0         	 33.4666   	 9.45724   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 50, n: 50, r2: 115)                         	 0.0791935 	 100       	 83.498    	 0         	 9.64221   	 8.65964   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 65)                                                                                                         	 0.0647702 	 808       	 0         	 0         	 42.1651   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 115)                                                                                	 0.0598164 	 100       	 3.36446   	 0         	 0.187908  	 17.9048   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 50) 	 0.0568818 	 100       	 59.1138   	 0         	 8.85344   	 6.67693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 50)                         	 0.0475247 	 100       	 139.138   	 0         	 9.9018    	 14.0518   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 50)                           	 0.0299988 	 100       	 220.426   	 0         	 25.4544   	 8.65964   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 115, r2: 115, leftOrthog: 1)                      	 0.0253174 	 100       	 261.184   	 0         	 28.0898   	 9.29819   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0186007 	 100       	 154.564   	 0         	 37.3104   	 4.14265   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 50)                                                                                 	 0.0112445 	 100       	 4.3725    	 0         	 0.9996    	 4.37425   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 115, fromLeft: 1)                              	 0.00810767	 800       	 0         	 0         	 20.879    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 1)  	 0.00496425	 100       	 0.231656  	 0         	 1.85357   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 2, r2: 1)                              	 0.00418003	 100       	 0.550236  	 0         	 3.3018    	 0.166647  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 115)  	 0.00264017	 100       	 50.0915   	 0         	 7.49194   	 6.68605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 115, r2: 115)                            	 0.00159831	 100       	 82.7438   	 0         	 12.3756   	 6.68605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00117638	 100       	 21.2516   	 0         	 5.10038   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000940014	 100       	 0.531907  	 0         	 2.12763   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 115)                            	 0.00085758	 100       	 0         	 0         	 10.7279   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 115)                                                                                                         	 0.000518405	 100       	 0         	 0         	 17.7467   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                          	 0.000504984	 101       	 0         	 0         	 10.4003   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 115, leftOrthog: 1)                         	 0.000450565	 100       	 127.618   	 0         	 39.506    	 3.23034   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 1)                                                                                                          	 0.000442924	 101       	 0         	 0         	 11.8576   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000339154	 100       	 0.737128  	 0         	 11.7941   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 50, fromLeft: 1)                               	 0.000234645	 100       	 0         	 0         	 39.2082   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 22.9813   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 22.9813   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.737    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.48172   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.48033   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.57686   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.11191   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.15951   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.828242  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.742928  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.541944  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.332684  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0662365 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0273296 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00834231	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00268822	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00259369	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000940014	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00085758	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339154	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22857657030528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22857480398848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22857279072384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22857077745920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22856876419456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22856675092992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22856473766528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22856272440064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22856071113600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22855869787136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22855668460672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22855467134208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22855265807744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22855064481280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22854863154816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22854661828352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22854460501888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22854259175424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22854057848960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22853856522496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22853655196032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22853453869568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22853252543104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22853051216640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22852849890176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22852648563712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22852447237248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22852245910784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22852044584320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22851843257856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22851641931392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22851440604928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22851239274368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22851037947904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22850836621440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22850635294976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22850433968512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22850232642048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22850031315584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22849829989120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22849628662656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22849427336192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22849226009728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22849024683264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22848823356800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22848622030336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22848420703872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22848219377408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22848018050944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22847816724480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22847615398016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22847414071552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22847212745088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22847011418624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22846810092160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22846608765696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22846407439232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22846206112768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22846004786304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22845803459840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22845602133376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22845400806912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22845199480448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22857551369984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22857372747520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5800, m: 116)                                                                              	 7.46709   	 600       	 43.8977   	 0         	 0.873704  	 50.2432   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 5800)                                                                               	 6.59217   	 700       	 16.4641   	 0         	 1.15461   	 14.2595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 116)                        	 0.735126  	 600       	 127.398   	 0         	 8.87395   	 14.3564   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 116)	 0.703008  	 700       	 79.1893   	 0         	 8.19722   	 9.6605    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 116)                                                                              	 0.657579  	 100       	 35.8102   	 0         	 0.72213   	 49.5896   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 116)                          	 0.519247  	 700       	 210.425   	 0         	 14.6572   	 14.3564   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 2500)                                                                               	 0.426966  	 100       	 15.514    	 0         	 1.11217   	 13.9493   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5800, m: 50)                                                                               	 0.380915  	 100       	 26.6464   	 0         	 1.22347   	 21.7792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 116, r2: 116, leftOrthog: 1)                      	 0.364456  	 600       	 256.969   	 0         	 26.9374   	 9.53947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 50, n: 50, r2: 116)                         	 0.0839536 	 100       	 80.1395   	 0         	 9.22986   	 8.68263   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 66)                                                                                                         	 0.0641676 	 808       	 0         	 0         	 43.8807   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 116)                                                                                	 0.0599633 	 100       	 3.38541   	 0         	 0.188782  	 17.9329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 50) 	 0.0597771 	 100       	 57.3464   	 0         	 8.54641   	 6.70999   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 50)                         	 0.0487473 	 100       	 138.018   	 0         	 9.7393    	 14.1712   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 50)                           	 0.037094  	 100       	 181.377   	 0         	 20.8896   	 8.68263   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 116, r2: 116, leftOrthog: 1)                      	 0.0185358 	 100       	 362.973   	 0         	 38.7105   	 9.37662   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 50, r2: 50, leftOrthog: 1)                        	 0.0166118 	 100       	 174.575   	 0         	 42.1388   	 4.14286   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 50)                                                                                 	 0.0110867 	 100       	 4.47984   	 0         	 1.02104   	 4.38751   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 116, fromLeft: 1)                              	 0.00831252	 800       	 0         	 0         	 20.7202   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 1)  	 0.0051538 	 100       	 0.225077  	 0         	 1.80092   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 2, r2: 1)                              	 0.00435204	 100       	 0.533083  	 0         	 3.19887   	 0.166648  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 116)  	 0.00257366	 100       	 52.2835   	 0         	 7.78844   	 6.71296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 116, r2: 116)                            	 0.00153195	 100       	 87.836    	 0         	 13.0845   	 6.71296   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00095952	 100       	 0.521094  	 0         	 2.08438   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000939833	 100       	 26.6005   	 0         	 6.38411   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 116)                            	 0.000847177	 100       	 0         	 0         	 10.954    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                          	 0.00053686	 101       	 0         	 0         	 9.93332   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 116)                                                                                                         	 0.000524116	 100       	 0         	 0         	 17.706    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 116, leftOrthog: 1)                         	 0.00052182	 100       	 111.149   	 0         	 34.3413   	 3.23661   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 1)                                                                                                          	 0.000405663	 101       	 0         	 0         	 13.1459   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000327456	 100       	 0.763461  	 0         	 12.2154   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 50, fromLeft: 1)                               	 0.000247387	 100       	 0         	 0         	 37.5121   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 23.5503   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 23.5502   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.6209   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.1346   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.1331   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.13882   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.56555   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.03022   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.868767  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.770513  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.562225  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.400126  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0656343 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0276861 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00855991	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00249289	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00242418	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00095952	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000847177	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327456	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22553852147584 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22553678571520 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22553477245056 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22553275918592 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22553074592128 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22552873265664 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22552671939200 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22552470612736 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22552269286272 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22552067959808 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22551866633344 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22551665306880 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22551463980416 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22551262653952 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22551061327488 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22550860001024 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22550658674560 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22550457348096 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22550256021632 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22550054695168 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22549853368704 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22549652042240 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22549450715776 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22549249389312 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22549048062848 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22548846736384 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22548645409920 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22548444083456 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22548242756992 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22548041430528 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22547840104064 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22547638777600 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22547437447040 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22547236120576 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22547034794112 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22546833467648 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22546632141184 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22546430814720 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22546229488256 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22546028161792 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22545826835328 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22545625508864 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22545424182400 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22545222855936 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22545021529472 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22544820203008 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22544618876544 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22544417550080 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22544216223616 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22544014897152 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22543813570688 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22543612244224 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22543410917760 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22543209591296 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22543008264832 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22542806938368 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22542605611904 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22542404285440 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22542202958976 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22542001632512 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22541800306048 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22541598979584 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22541397653120 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22553573709568 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22553567921920 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5850, m: 117)                                                                              	 7.4338    	 600       	 45.2445   	 0         	 0.892813  	 50.6764   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 5850)                                                                               	 7.00973   	 700       	 15.8873   	 0         	 1.10463   	 14.3824   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 117)	 0.728632  	 700       	 78.558    	 0         	 8.05139   	 9.75708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 117)                        	 0.684667  	 600       	 140.356   	 0         	 9.69293   	 14.4802   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 117)                                                                              	 0.670531  	 100       	 35.7265   	 0         	 0.714426  	 50.0073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 117)                          	 0.540729  	 700       	 207.336   	 0         	 14.3186   	 14.4802   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 2500)                                                                               	 0.457199  	 100       	 14.737    	 0         	 1.04778   	 14.0649   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5850, m: 50)                                                                               	 0.375839  	 100       	 27.239    	 0         	 1.25064   	 21.7801   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 117, r2: 117, leftOrthog: 1)                      	 0.248905  	 600       	 386.079   	 0         	 40.1258   	 9.62171   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 67)                                                                                                         	 0.072721  	 808       	 0         	 0         	 39.9017   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 50, n: 50, r2: 117)                         	 0.0625744 	 100       	 109.382   	 0         	 12.5649   	 8.70536   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 117)                                                                                	 0.0603076 	 100       	 3.3951    	 0         	 0.189031  	 17.9605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 50) 	 0.0557773 	 100       	 62.651    	 0         	 9.29124   	 6.74301   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 50)                         	 0.0497189 	 100       	 137.664   	 0         	 9.63318   	 14.2906   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 50)                           	 0.0329836 	 100       	 207.512   	 0         	 23.8373   	 8.70536   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 117, r2: 117, leftOrthog: 1)                      	 0.0228549 	 100       	 299.477   	 0         	 31.6739   	 9.455     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0143403 	 100       	 203.971   	 0         	 49.2319   	 4.14306   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 50)                                                                                 	 0.011286  	 100       	 4.44504   	 0         	 1.0101    	 4.40058   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 117, fromLeft: 1)                              	 0.00844827	 800       	 0         	 0         	 20.7402   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 1)  	 0.00514576	 100       	 0.227371  	 0         	 1.81928   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 2, r2: 1)                              	 0.00434798	 100       	 0.538181  	 0         	 3.22945   	 0.166648  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 117)  	 0.00264828	 100       	 51.6902   	 0         	 7.66959   	 6.73963   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 117, r2: 117)                            	 0.0016068 	 100       	 85.194    	 0         	 12.6408   	 6.73963   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000959561	 100       	 0.521072  	 0         	 2.08429   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000951318	 100       	 26.2793   	 0         	 6.30704   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 117)                            	 0.000844111	 100       	 0         	 0         	 11.0886   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                          	 0.000532289	 101       	 0         	 0         	 10.1704   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 117)                                                                                                         	 0.000504812	 100       	 0         	 0         	 18.5416   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 1)                                                                                                          	 0.00042868	 101       	 0         	 0         	 12.6285   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 117, leftOrthog: 1)                         	 0.00041165	 100       	 142.111   	 0         	 43.8236   	 3.24279   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333823	 100       	 0.7489    	 0         	 11.9824   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 50, fromLeft: 1)                               	 0.000242056	 100       	 0         	 0         	 38.6687   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 23.9631   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 23.963    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 13.2743   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.87381   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.87236   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.96502   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.54047   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.47822   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.797911  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.792203  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.579668  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.286512  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0741868 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0281583 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00869033	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00319614	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00252203	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000959561	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000844111	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333823	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22426857539456 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22426641491968 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22426440165504 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22426238839040 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22426037512576 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22425836186112 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22425634859648 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22425433533184 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22425232206720 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22425030880256 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22424829553792 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22424628227328 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22424426900864 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22424225574400 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22424024247936 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22423822921472 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22423621595008 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22423420268544 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22423218942080 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22423017615616 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22422816289152 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22422614962688 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22422413636224 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22422212309760 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22422010983296 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22421809656832 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22421608330368 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22421407003904 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22421205677440 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22421004350976 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22420803024512 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22420601698048 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22420400367488 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22420199041024 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22419997714560 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22419796388096 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22419595061632 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22419393735168 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22419192408704 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22418991082240 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22418789755776 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22418588429312 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22418387102848 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22418185776384 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22417984449920 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22417783123456 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22417581796992 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22417380470528 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22417179144064 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22416977817600 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22416776491136 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22416575164672 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22416373838208 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22416172511744 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22415971185280 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22415769858816 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22415568532352 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22415367205888 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22415165879424 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22414964552960 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22414763226496 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22414561900032 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22414360573568 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22426751878912 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22426745288448 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5900, m: 118)                                                                              	 7.91072   	 600       	 43.6164   	 0         	 0.85339   	 51.1096   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 5900)                                                                               	 6.88084   	 700       	 16.6034   	 0         	 1.14464   	 14.5054   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 118)                        	 0.742634  	 600       	 132.746   	 0         	 9.08974   	 14.604    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 118)                                                                              	 0.68368   	 100       	 35.641    	 0         	 0.706813  	 50.4249   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 118)	 0.68304   	 700       	 86.1505   	 0         	 8.74241   	 9.85432   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 118)                          	 0.517336  	 700       	 222.317   	 0         	 15.223    	 14.604    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 2500)                                                                               	 0.45569   	 100       	 15.0376   	 0         	 1.06044   	 14.1804   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5900, m: 50)                                                                               	 0.396552  	 100       	 26.037    	 0         	 1.1954    	 21.7809   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 118, r2: 118, leftOrthog: 1)                      	 0.297905  	 600       	 330.917   	 0         	 34.1013   	 9.70395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 50, n: 50, r2: 118)                         	 0.0852146 	 100       	 81.6996   	 0         	 9.36084   	 8.72781   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 68)                                                                                                         	 0.0776204 	 808       	 0         	 0         	 38.5073   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 118)                                                                                	 0.0609202 	 100       	 3.38968   	 0         	 0.188443  	 17.9878   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 50) 	 0.0552096 	 100       	 64.5177   	 0         	 9.52153   	 6.77599   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 50)                         	 0.054813  	 100       	 127.014   	 0         	 8.81432   	 14.4099   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 50)                           	 0.0360656 	 100       	 193.037   	 0         	 22.1175   	 8.72781   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 118, r2: 118, leftOrthog: 1)                      	 0.0232118 	 100       	 299.933   	 0         	 31.4615   	 9.53335   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0178604 	 100       	 165.17    	 0         	 39.8647   	 4.14326   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 50)                                                                                 	 0.0112314 	 100       	 4.51116   	 0         	 1.02213   	 4.41347   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 118, fromLeft: 1)                              	 0.00947397	 800       	 0         	 0         	 18.8123   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 1)  	 0.0055595 	 100       	 0.212249  	 0         	 1.69828   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 2, r2: 1)                              	 0.00456468	 100       	 0.517014  	 0         	 3.10243   	 0.166648  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 118)  	 0.00277087	 100       	 50.2514   	 0         	 7.42699   	 6.76606   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 118, r2: 118)                            	 0.00171991	 100       	 80.9575   	 0         	 11.9652   	 6.76606   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000995816	 100       	 25.105    	 0         	 6.02521   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000903992	 100       	 0.553102  	 0         	 2.21241   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 118)                            	 0.000856397	 100       	 0         	 0         	 11.0229   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                          	 0.000537604	 101       	 0         	 0         	 10.2202   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 118)                                                                                                         	 0.000507754	 100       	 0         	 0         	 18.5917   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 1)                                                                                                          	 0.000431382	 101       	 0         	 0         	 12.7367   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 118, leftOrthog: 1)                         	 0.000363634	 100       	 162.251   	 0         	 49.9403   	 3.2489    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000335497	 100       	 0.745163  	 0         	 11.9226   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 50, fromLeft: 1)                               	 0.000255011	 100       	 0         	 0         	 37.018    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 24.7429   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 24.7429   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 13.3356   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.6494   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.648    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.60873   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.05187   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.34776   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.883658  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.74658   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.559686  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.339341  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0790972 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0288883 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00972899	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230776	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00229321	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000903992	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000856397	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335497	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23437640042368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23437435201536 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23437233875072 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23437032548608 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23436831222144 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23436629895680 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23436428569216 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23436227242752 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23436025916288 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23435824589824 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23435623263360 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23435421936896 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23435220610432 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23435019283968 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23434817957504 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23434616631040 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23434415304576 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23434213978112 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23434012651648 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23433811325184 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23433609998720 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23433408672256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23433207345792 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23433006019328 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23432804692864 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23432603366400 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23432402039936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23432200713472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23431999387008 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23431798060544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23431596734080 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23431395407616 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23431194077056 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23430992750592 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23430791424128 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23430590097664 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23430388771200 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23430187444736 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23429986118272 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23429784791808 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23429583465344 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23429382138880 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23429180812416 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23428979485952 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23428778159488 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23428576833024 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23428375506560 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23428174180096 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23427972853632 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23427771527168 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23427570200704 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23427368874240 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23427167547776 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23426966221312 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23426764894848 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23426563568384 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23426362241920 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23426160915456 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23425959588992 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23425758262528 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23425556936064 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23425355609600 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23425154283136 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23437534381824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23437527791360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5950, m: 119)                                                                              	 7.2702    	 600       	 48.6759   	 0         	 0.944378  	 51.5427   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 5950)                                                                               	 7.25877   	 700       	 16.1425   	 0         	 1.10351   	 14.6283   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 119)                        	 0.754461  	 600       	 134.016   	 0         	 9.09954   	 14.7277   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 119)	 0.715253  	 700       	 84.5633   	 0         	 8.49694   	 9.9522    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 119)                                                                              	 0.683291  	 100       	 36.2682   	 0         	 0.713348  	 50.8423   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 119)                          	 0.537962  	 700       	 219.274   	 0         	 14.8885   	 14.7277   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 2500)                                                                               	 0.476844  	 100       	 14.6131   	 0         	 1.02219   	 14.2959   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5950, m: 50)                                                                               	 0.375474  	 100       	 27.7316   	 0         	 1.27316   	 21.7817   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 119, r2: 119, leftOrthog: 1)                      	 0.289869  	 600       	 348.811   	 0         	 35.6432   	 9.78618   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 50, n: 50, r2: 119)                         	 0.0908058 	 100       	 77.9741   	 0         	 8.91132   	 8.75      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 69)                                                                                                         	 0.0742932 	 808       	 0         	 0         	 41.4239   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 119)                                                                                	 0.0615896 	 100       	 3.38125   	 0         	 0.187694  	 18.0147   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 50) 	 0.0551947 	 100       	 65.7762   	 0         	 9.66034   	 6.80889   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 50)                         	 0.0505829 	 100       	 139.978   	 0         	 9.63426   	 14.5292   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 50)                           	 0.0325008 	 100       	 217.856   	 0         	 24.8979   	 8.75      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 119, r2: 119, leftOrthog: 1)                      	 0.013873  	 100       	 510.381   	 0         	 53.1003   	 9.61166   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0115354 	 100       	 257.902   	 0         	 62.2433   	 4.14345   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 50)                                                                                 	 0.0111268 	 100       	 4.59849   	 0         	 1.03893   	 4.42618   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 119, fromLeft: 1)                              	 0.0086695 	 800       	 0         	 0         	 20.9079   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 1)  	 0.00576748	 100       	 0.206329  	 0         	 1.65091   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 2, r2: 1)                              	 0.00503979	 100       	 0.472242  	 0         	 2.83377   	 0.166648  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 119)  	 0.00419593	 100       	 33.7494   	 0         	 4.96882   	 6.79224   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 119)                            	 0.00236935	 100       	 0         	 0         	 4.01798   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 119, r2: 119)                            	 0.00164762	 100       	 85.9484   	 0         	 12.6539   	 6.79224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000966673	 100       	 25.8619   	 0         	 6.20686   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000934742	 100       	 0.534907  	 0         	 2.13963   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 119, leftOrthog: 1)                         	 0.000911615	 100       	 65.2688   	 0         	 20.0523   	 3.25492   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                          	 0.000521123	 101       	 0         	 0         	 10.6984   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 119)                                                                                                         	 0.000502285	 100       	 0         	 0         	 18.9534   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 1)                                                                                                          	 0.000405299	 101       	 0         	 0         	 13.7558   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329899	 100       	 0.757808  	 0         	 12.1249   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 50, fromLeft: 1)                               	 0.000241209	 100       	 0         	 0         	 39.4678   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 24.096    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 24.0959   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 13.5265   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.7711    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.76972   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.78521   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.39056   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.74674   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.896817  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.780411  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.577151  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.316189  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0757219 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.029514  	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00891071	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00307775	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00270745	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00236935	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000934742	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329899	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22464435177344 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22464222455808 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22464021129344 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22463819802880 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22463618476416 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22463417149952 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22463215823488 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22463014497024 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22462813170560 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22462611844096 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22462410517632 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22462209191168 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22462007864704 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22461806538240 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22461605211776 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22461403885312 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22461202558848 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22461001232384 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22460799905920 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22460598579456 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22460397252992 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22460195926528 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22459994600064 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22459793273600 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22459591947136 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22459390620672 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22459189294208 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22458987967744 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22458786641280 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22458585314816 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22458383988352 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22458182661888 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22457981331328 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22457780004864 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22457578678400 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22457377351936 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22457176025472 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22456974699008 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22456773372544 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22456572046080 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22456370719616 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22456169393152 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22455968066688 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22455766740224 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22455565413760 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22455364087296 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22455162760832 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22454961434368 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22454760107904 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22454558781440 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22454357454976 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22454156128512 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22453954802048 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22453753475584 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22453552149120 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22453350822656 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22453149496192 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22452948169728 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22452746843264 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22452545516800 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22452344190336 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22452142863872 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22451941537408 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22464329516800 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22464322926336 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 6000)                                                                               	 7.22341   	 700       	 16.6339   	 0         	 1.12763   	 14.7513   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6000, m: 120)                                                                              	 7.17121   	 600       	 50.6023   	 0         	 0.973573  	 51.9759   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 120)                        	 0.837044  	 600       	 123.864   	 0         	 8.34021   	 14.8515   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 120)	 0.735     	 700       	 84.5714   	 0         	 8.41448   	 10.0507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 120)                                                                              	 0.669119  	 100       	 37.6615   	 0         	 0.734721  	 51.2595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 120)                          	 0.56978   	 700       	 212.292   	 0         	 14.2944   	 14.8515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 2500)                                                                               	 0.457597  	 100       	 15.4826   	 0         	 1.07434   	 14.4112   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 120, r2: 120, leftOrthog: 1)                      	 0.380992  	 600       	 272.132   	 0         	 27.576    	 9.86842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6000, m: 50)                                                                               	 0.370506  	 100       	 28.3396   	 0         	 1.30103   	 21.7824   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 50, n: 50, r2: 120)                         	 0.0856126 	 100       	 84.0997   	 0         	 9.58737   	 8.77193   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 70)                                                                                                         	 0.0791278 	 808       	 0         	 0         	 40.0284   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 50) 	 0.0635425 	 100       	 58.2287   	 0         	 8.51084   	 6.84172   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 120)                                                                                	 0.0616923 	 100       	 3.40399   	 0         	 0.188678  	 18.0412   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 50)                         	 0.0567124 	 100       	 126.956   	 0         	 8.66689   	 14.6484   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 50)                           	 0.0366718 	 100       	 196.336   	 0         	 22.3823   	 8.77193   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 50, r2: 50, leftOrthog: 1)                        	 0.016418  	 100       	 182.726   	 0         	 44.0978   	 4.14365   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 120, r2: 120, leftOrthog: 1)                      	 0.0142436 	 100       	 505.489   	 0         	 52.1665   	 9.68992   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 50)                                                                                 	 0.0117644 	 100       	 4.39178   	 0         	 0.989427  	 4.43871   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 120, fromLeft: 1)                              	 0.00910597	 800       	 0         	 0         	 20.2417   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 1)  	 0.00484019	 100       	 0.247924  	 0         	 1.98372   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 2, r2: 1)                              	 0.00408896	 100       	 0.586947  	 0         	 3.52207   	 0.166648  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 120)  	 0.00266611	 100       	 54.0112   	 0         	 7.92164   	 6.81818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 120, r2: 120)                            	 0.00161523	 100       	 89.1512   	 0         	 13.0755   	 6.81818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000982252	 100       	 25.4517   	 0         	 6.10841   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000910638	 100       	 0.549066  	 0         	 2.19626   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 120)                            	 0.000878297	 100       	 0         	 0         	 10.9302   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                          	 0.00054789	 101       	 0         	 0         	 10.3232   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 120)                                                                                                         	 0.000531787	 100       	 0         	 0         	 18.0523   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 120, leftOrthog: 1)                         	 0.000492231	 100       	 121.894   	 0         	 37.3808   	 3.26087   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 1)                                                                                                          	 0.000426625	 101       	 0         	 0         	 13.2575   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000335761	 100       	 0.744577  	 0         	 11.9132   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 50, fromLeft: 1)                               	 0.00024114	 100       	 0         	 0         	 39.8109   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 23.8507   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 23.8506   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 13.2251   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.79316   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.79181   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.71547   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.27253   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.69278   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.980351  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.806049  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.612156  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.412146  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0806341 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0300365 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00934711	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00402419	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00355343	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000910638	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000878297	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335761	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22749693761408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22749502236672 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22749300910208 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22749099583744 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22748898257280 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22748696930816 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22748495604352 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22748294277888 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22748092951424 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22747891624960 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22747690298496 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22747488972032 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22747287645568 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22747086319104 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22746884992640 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22746683666176 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22746482339712 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22746281013248 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22746079686784 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22745878360320 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22745677033856 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22745475707392 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22745274380928 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22745073054464 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22744871728000 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22744670401536 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22744469075072 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22744267748608 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22744066422144 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22743865095680 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22743663769216 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22743462442752 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22743261112192 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22743059785728 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22742858459264 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22742657132800 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22742455806336 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22742254479872 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22742053153408 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22741851826944 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22741650500480 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22741449174016 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22741247847552 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22741046521088 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22740845194624 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22740643868160 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22740442541696 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22740241215232 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22740039888768 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22739838562304 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22739637235840 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22739435909376 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22739234582912 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22739033256448 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22738831929984 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22738630603520 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22738429277056 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22738227950592 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22738026624128 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22737825297664 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22737623971200 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22737422644736 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22737221318272 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22749588100864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22749581510400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6050, m: 121)                                                                              	 8.43195   	 600       	 44.1212   	 0         	 0.841862  	 52.4091   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 6050)                                                                               	 7.39897   	 700       	 16.6486   	 0         	 1.11929   	 14.8742   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 121)	 0.750888  	 700       	 85.0623   	 0         	 8.38068   	 10.1498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 121)                                                                              	 0.723579  	 100       	 35.4097   	 0         	 0.685218  	 51.6766   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 121)                        	 0.690022  	 600       	 154.044   	 0         	 10.2866   	 14.9752   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 121)                          	 0.55489   	 700       	 223.484   	 0         	 14.9236   	 14.9752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 2500)                                                                               	 0.470466  	 100       	 15.3091   	 0         	 1.05387   	 14.5265   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6050, m: 50)                                                                               	 0.3957    	 100       	 26.7563   	 0         	 1.2283    	 21.7832   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 121, r2: 121, leftOrthog: 1)                      	 0.268376  	 600       	 396.062   	 0         	 39.8026   	 9.95066   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 50, n: 50, r2: 121)                         	 0.0847557 	 100       	 86.3718   	 0         	 9.82212   	 8.7936    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 71)                                                                                                         	 0.0842169 	 808       	 0         	 0         	 38.6918   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 121)                                                                                	 0.0627953 	 100       	 3.37207   	 0         	 0.186638  	 18.0674   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 50) 	 0.0542836 	 100       	 69.4593   	 0         	 10.104    	 6.87445   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 50)                         	 0.0463479 	 100       	 157.947   	 0         	 10.6955   	 14.7676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 50)                           	 0.0318757 	 100       	 229.658   	 0         	 26.1164   	 8.7936    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 121, r2: 121, leftOrthog: 1)                      	 0.0272244 	 100       	 268.894   	 0         	 27.5277   	 9.76815   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0160352 	 100       	 188.647   	 0         	 45.5248   	 4.14384   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 50)                                                                                 	 0.0114218 	 100       	 4.56728   	 0         	 1.02611   	 4.45108   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 121, fromLeft: 1)                              	 0.00908735	 800       	 0         	 0         	 20.6226   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 1)  	 0.0051155 	 100       	 0.236536  	 0         	 1.8926    	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 2, r2: 1)                              	 0.00423989	 100       	 0.570769  	 0         	 3.42499   	 0.166648  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 121)  	 0.00287574	 100       	 50.9121   	 0         	 7.43906   	 6.84389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 121, r2: 121)                            	 0.00179613	 100       	 81.5143   	 0         	 11.9105   	 6.84389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000977348	 100       	 25.5794   	 0         	 6.13906   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 121)                            	 0.000900213	 100       	 0         	 0         	 10.753    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000883394	 100       	 0.565999  	 0         	 2.264     	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 121, leftOrthog: 1)                         	 0.000745765	 100       	 81.1248   	 0         	 24.8336   	 3.26674   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                          	 0.000539976	 101       	 0         	 0         	 10.6242   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 121)                                                                                                         	 0.000523019	 100       	 0         	 0         	 18.5079   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 1)                                                                                                          	 0.00042367	 101       	 0         	 0         	 13.5407   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00034609	 100       	 0.722355  	 0         	 11.5577   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 50, fromLeft: 1)                               	 0.000252685	 100       	 0         	 0         	 38.3086   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.0563   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.0563   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.1183   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.1174   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.116    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.1571   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.61402   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.88086   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.822103  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.813163  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.592802  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.312382  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0857035 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0304652 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00934004	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00289401	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230719	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000900213	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000883394	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00034609	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22746816358272 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22746616555520 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22746415229056 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22746213902592 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22746012576128 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22745811249664 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22745609923200 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22745408596736 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22745207270272 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22745005943808 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22744804617344 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22744603290880 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22744401964416 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22744200637952 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22743999311488 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22743797985024 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22743596658560 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22743395332096 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22743194005632 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22742992679168 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22742791352704 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22742590026240 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22742388699776 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22742187373312 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22741986046848 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22741784720384 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22741583393920 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22741382067456 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22741180740992 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22740979414528 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22740778088064 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22740576761600 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22740375431040 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22740174104576 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22739972778112 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22739771451648 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22739570125184 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22739368798720 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22739167472256 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22738966145792 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22738764819328 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22738563492864 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22738362166400 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22738160839936 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22737959513472 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22737758187008 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22737556860544 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22737355534080 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22737154207616 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22736952881152 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22736751554688 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22736550228224 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22736348901760 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22736147575296 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22735946248832 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22735744922368 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22735543595904 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22735342269440 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22735140942976 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22734939616512 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22734738290048 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22734536963584 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22734335637120 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22746710697728 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22746704107264 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6100, m: 122)                                                                              	 8.68089   	 600       	 43.9273   	 0         	 0.831292  	 52.8422   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 6100)                                                                               	 7.45805   	 700       	 16.9296   	 0         	 1.12886   	 14.9971   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 122)	 0.756298  	 700       	 86.7666   	 0         	 8.46544   	 10.2495   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 122)                                                                              	 0.729338  	 100       	 35.7132   	 0         	 0.68556   	 52.0935   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 122)                        	 0.723426  	 600       	 150.604   	 0         	 9.97442   	 15.099    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 122)                          	 0.56345   	 700       	 225.591   	 0         	 14.9408   	 15.099    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 2500)                                                                               	 0.46946   	 100       	 15.5944   	 0         	 1.06506   	 14.6417   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6100, m: 50)                                                                               	 0.394226  	 100       	 27.0784   	 0         	 1.24304   	 21.7839   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 122, r2: 122, leftOrthog: 1)                      	 0.31201   	 600       	 349.19    	 0         	 34.8045   	 10.0329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 50, n: 50, r2: 122)                         	 0.0894032 	 100       	 83.2408   	 0         	 9.44306   	 8.81503   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 72)                                                                                                         	 0.0860579 	 808       	 0         	 0         	 38.9382   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 50) 	 0.0646763 	 100       	 59.4035   	 0         	 8.60036   	 6.90709   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 122)                                                                                	 0.0619661 	 100       	 3.44543   	 0         	 0.190427  	 18.0932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 50)                         	 0.0488769 	 100       	 152.26    	 0         	 10.2279   	 14.8868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 50)                           	 0.0422929 	 100       	 175.964   	 0         	 19.9618   	 8.81503   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 122, r2: 122, leftOrthog: 1)                      	 0.0230824 	 100       	 322.41    	 0         	 32.7442   	 9.84633   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0188855 	 100       	 161.5     	 0         	 38.9717   	 4.14402   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 50)                                                                                 	 0.011872  	 100       	 4.43621   	 0         	 0.993937  	 4.46327   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 122, fromLeft: 1)                              	 0.00970421	 800       	 0         	 0         	 19.6322   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 1)  	 0.0050457 	 100       	 0.24179   	 0         	 1.93464   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 2, r2: 1)                              	 0.00425431	 100       	 0.573536  	 0         	 3.44159   	 0.166648  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 122)  	 0.00275609	 100       	 54.004    	 0         	 7.86156   	 6.86937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 122, r2: 122)                            	 0.0017054 	 100       	 87.2758   	 0         	 12.7051   	 6.86937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00101447	 100       	 24.6435   	 0         	 5.91444   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000923432	 100       	 0.541458  	 0         	 2.16583   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 122)                            	 0.000861039	 100       	 0         	 0         	 11.3351   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                          	 0.000544784	 101       	 0         	 0         	 10.6787   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 122)                                                                                                         	 0.000526911	 100       	 0         	 0         	 18.5231   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 1)                                                                                                          	 0.000463949	 101       	 0         	 0         	 12.5393   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 122, leftOrthog: 1)                         	 0.00041438	 100       	 147.208   	 0         	 44.9829   	 3.27253   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00034278	 100       	 0.729331  	 0         	 11.6693   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 50, fromLeft: 1)                               	 0.000253928	 100       	 0         	 0         	 38.4361   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.6222   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.6221   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.2982   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.4837   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.4823   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.4492   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.86642   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.93938   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.862721  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.828776  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.611702  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.354393  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0875936 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0310463 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00995814	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0025095 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00239231	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000923432	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000861039	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00034278	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23426822489984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23426630674432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23426429347968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23426228021504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23426026695040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23425825368576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23425624042112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23425422715648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23425221389184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23425020062720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23424818736256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23424617409792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23424416083328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23424214756864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23424013430400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23423812103936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23423610777472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23423409451008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23423208124544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23423006798080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23422805471616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23422604145152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23422402818688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23422201492224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23422000165760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23421798839296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23421597512832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23421396186368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23421194859904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23420993533440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23420792206976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23420590880512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23420389549952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23420188223488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23419986897024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23419785570560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23419584244096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23419382917632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23419181591168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23418980264704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23418778938240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23418577611776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23418376285312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23418174958848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23417973632384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23417772305920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23417570979456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23417369652992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23417168326528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23416967000064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23416765673600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23416564347136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23416363020672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23416161694208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23415960367744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23415759041280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23415557714816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23415356388352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23415155061888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23414953735424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23414752408960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23414551082496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23414349756032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23426716829440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23426710238976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6150, m: 123)                                                                              	 8.54736   	 600       	 45.7196   	 0         	 0.858175  	 53.2754   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 6150)                                                                               	 7.69882   	 700       	 16.8068   	 0         	 1.11155   	 15.1201   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 123)	 0.747099  	 700       	 90.226    	 0         	 8.71768   	 10.3498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 123)                        	 0.74566   	 600       	 149.736   	 0         	 9.83631   	 15.2228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 123)                                                                              	 0.717548  	 100       	 36.8975   	 0         	 0.702673  	 52.5102   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 123)                          	 0.561493  	 700       	 231.99    	 0         	 15.2397   	 15.2228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 2500)                                                                               	 0.485122  	 100       	 15.3373   	 0         	 1.03933   	 14.7569   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6150, m: 50)                                                                               	 0.418102  	 100       	 25.7413   	 0         	 1.18162   	 21.7847   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 123, r2: 123, leftOrthog: 1)                      	 0.302     	 600       	 369.709   	 0         	 36.5501   	 10.1151   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 50, n: 50, r2: 123)                         	 0.0992269 	 100       	 76.2343   	 0         	 8.62749   	 8.83621   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 73)                                                                                                         	 0.0913683 	 808       	 0         	 0         	 37.7009   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 123)                                                                                	 0.0625467 	 100       	 3.44143   	 0         	 0.189938  	 18.1187   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 50) 	 0.0540779 	 100       	 72.3864   	 0         	 10.4309   	 6.93962   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 50)                         	 0.0479842 	 100       	 157.646   	 0         	 10.5056   	 15.0059   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 50)                           	 0.0325483 	 100       	 232.408   	 0         	 26.3018   	 8.83621   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 123, r2: 123, leftOrthog: 1)                      	 0.0248186 	 100       	 304.791   	 0         	 30.7111   	 9.92448   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0172014 	 100       	 178.764   	 0         	 43.1359   	 4.1442    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 50)                                                                                 	 0.012042  	 100       	 4.41511   	 0         	 0.98655   	 4.4753    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 123, fromLeft: 1)                              	 0.0100826 	 800       	 0         	 0         	 19.2066   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 1)  	 0.00550259	 100       	 0.223531  	 0         	 1.78854   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 2, r2: 1)                              	 0.00463198	 100       	 0.531091  	 0         	 3.18689   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 123)  	 0.00271177	 100       	 55.7901   	 0         	 8.09183   	 6.89462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 123, r2: 123)                            	 0.00166254	 100       	 90.9991   	 0         	 13.1986   	 6.89462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00102052	 100       	 24.4973   	 0         	 5.87936   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000938481	 100       	 0.532776  	 0         	 2.1311    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 123)                            	 0.000845776	 100       	 0         	 0         	 11.6343   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 123, leftOrthog: 1)                         	 0.000602159	 100       	 102.132   	 0         	 31.1546   	 3.27825   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                          	 0.0005467 	 101       	 0         	 0         	 10.7891   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 123)                                                                                                         	 0.000509462	 100       	 0         	 0         	 19.3145   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 1)                                                                                                          	 0.000446573	 101       	 0         	 0         	 13.2081   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000340601	 100       	 0.733997  	 0         	 11.7439   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 50, fromLeft: 1)                               	 0.000246798	 100       	 0         	 0         	 39.8707   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.7761   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.7761   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.6409   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.3082   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.3068   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.2574   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.74556   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.19599   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.893892  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.809391  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.600336  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.344622  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.092871  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0313246 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0103293 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00294914	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00252264	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000938481	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000845776	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340601	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23153180161920 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23152960727040 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23152759400576 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23152558074112 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23152356747648 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23152155421184 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23151954094720 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23151752768256 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23151551441792 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23151350115328 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23151148788864 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23150947462400 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23150746135936 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23150544809472 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23150343483008 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23150142156544 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23149940830080 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23149739503616 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23149538177152 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23149336850688 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23149135524224 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23148934197760 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23148732871296 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23148531544832 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23148330218368 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23148128891904 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23147927565440 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23147726238976 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23147524912512 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23147323586048 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23147122259584 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23146920933120 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23146719602560 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23146518276096 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23146316949632 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23146115623168 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23145914296704 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23145712970240 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23145511643776 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23145310317312 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23145108990848 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23144907664384 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23144706337920 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23144505011456 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23144303684992 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23144102358528 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23143901032064 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23143699705600 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23143498379136 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23143297052672 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23143095726208 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23142894399744 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23142693073280 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23142491746816 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23142290420352 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23142089093888 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23141887767424 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23141686440960 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23141485114496 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23141283788032 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23141082461568 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23140881135104 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23140679808640 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23153074501376 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23153067910912 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6200, m: 124)                                                                              	 8.96888   	 600       	 44.6423   	 0         	 0.831194  	 53.7086   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 6200)                                                                               	 7.46182   	 700       	 17.767    	 0         	 1.16558   	 15.243    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 124)	 0.770889  	 700       	 89.8076   	 0         	 8.59354   	 10.4506   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 124)                        	 0.747948  	 600       	 152.948   	 0         	 9.96631   	 15.3465   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 124)                                                                              	 0.730193  	 100       	 36.8505   	 0         	 0.696255  	 52.9268   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 124)                          	 0.558293  	 700       	 239.057   	 0         	 15.5772   	 15.3465   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 2500)                                                                               	 0.47459   	 100       	 15.9314   	 0         	 1.07124   	 14.8719   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6200, m: 50)                                                                               	 0.389839  	 100       	 27.832    	 0         	 1.27755   	 21.7854   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 124, r2: 124, leftOrthog: 1)                      	 0.190679  	 600       	 599.949   	 0         	 58.8337   	 10.1974   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 74)                                                                                                         	 0.101896  	 808       	 0         	 0         	 34.7381   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 50, n: 50, r2: 124)                         	 0.0930358 	 100       	 82.6348   	 0         	 9.32974   	 8.85714   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 124)                                                                                	 0.0606093 	 100       	 3.58031   	 0         	 0.197329  	 18.1438   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 50)                         	 0.0526892 	 100       	 145.912   	 0         	 9.64715   	 15.1249   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 50) 	 0.0474134 	 100       	 84.1113   	 0         	 12.0641   	 6.97203   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 50)                           	 0.0310356 	 100       	 247.716   	 0         	 27.9679   	 8.85714   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 124, r2: 124, leftOrthog: 1)                      	 0.0225034 	 100       	 341.637   	 0         	 34.1549   	 10.0026   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0155644 	 100       	 199.173   	 0         	 48.0584   	 4.14439   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 50)                                                                                 	 0.0123907 	 100       	 4.33121   	 0         	 0.965242  	 4.48717   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 124, fromLeft: 1)                              	 0.00974146	 800       	 0         	 0         	 20.2036   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 1)  	 0.00519175	 100       	 0.238841  	 0         	 1.91103   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 2, r2: 1)                              	 0.00431356	 100       	 0.574931  	 0         	 3.44995   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 124)  	 0.00275702	 100       	 55.7704   	 0         	 8.05973   	 6.91964   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 124, r2: 124)                            	 0.00167227	 100       	 91.947    	 0         	 13.2878   	 6.91964   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00104262	 100       	 23.978    	 0         	 5.75471   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000999617	 100       	 0.500192  	 0         	 2.00077   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 124)                            	 0.000864533	 100       	 0         	 0         	 11.4744   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 124)                                                                                                         	 0.000559133	 100       	 0         	 0         	 17.7418   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                          	 0.000537785	 101       	 0         	 0         	 11.1182   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 124, leftOrthog: 1)                         	 0.000505386	 100       	 122.679   	 0         	 37.3576   	 3.2839    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 1)                                                                                                          	 0.00045928	 101       	 0         	 0         	 13.0186   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033469	 100       	 0.74696   	 0         	 11.9514   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 50, fromLeft: 1)                               	 0.000260929	 100       	 0         	 0         	 38.018    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 27.4196   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 27.4196   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.7575   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.8311   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.8297   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.6358   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.1495   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.9488    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.894716  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.826251  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.595314  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.229252  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.103453  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.032426  	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0100024 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00265707	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00252378	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000999617	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000864533	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033469	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22359836370816 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22359599736832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22359398410368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22359197083904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22358995757440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22358794430976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22358593104512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22358391778048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22358190451584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22357989125120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22357787798656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22357586472192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22357385145728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22357183819264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22356982492800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22356781166336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22356579839872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22356378513408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22356177186944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22355975860480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22355774534016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22355573207552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22355371881088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22355170554624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22354969228160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22354767901696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22354566575232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22354365248768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22354163922304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22353962595840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22353761269376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22353559942912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22353358612352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22353157285888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22352955959424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22352754632960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22352553306496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22352351980032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22352150653568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22351949327104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22351748000640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22351546674176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22351345347712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22351144021248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22350942694784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22350741368320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22350540041856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22350338715392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22350137388928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22349936062464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22349734736000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22349533409536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22349332083072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22349130756608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22348929430144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22348728103680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22348526777216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22348325450752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22348124124288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22347922797824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22347721471360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22347520144896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22347318818432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22359730710272 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22359724119808 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6250, m: 125)                                                                              	 9.21181   	 600       	 44.525    	 0         	 0.822379  	 54.1418   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 6250)                                                                               	 7.77489   	 700       	 17.4674   	 0         	 1.13676   	 15.3659   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 125)                        	 0.766981  	 600       	 152.791   	 0         	 9.87639   	 15.4703   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 125)	 0.749772  	 700       	 94.8205   	 0         	 8.98607   	 10.5519   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 125)                                                                              	 0.747157  	 100       	 36.5971   	 0         	 0.686067  	 53.3433   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 125)                          	 0.56191   	 700       	 243.311   	 0         	 15.7276   	 15.4703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 2500)                                                                               	 0.489327  	 100       	 15.6997   	 0         	 1.04756   	 14.9869   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6250, m: 50)                                                                               	 0.402651  	 100       	 27.1637   	 0         	 1.24684   	 21.7861   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 125, r2: 125, leftOrthog: 1)                      	 0.313864  	 600       	 373.37    	 0         	 36.3215   	 10.2796   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 75)                                                                                                         	 0.103241  	 808       	 0         	 0         	 35.2187   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 50, n: 50, r2: 125)                         	 0.0929112 	 100       	 84.0856   	 0         	 9.47141   	 8.87784   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 125)                                                                                	 0.0625135 	 100       	 3.49925   	 0         	 0.192599  	 18.1686   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 50) 	 0.0607739 	 100       	 66.8461   	 0         	 9.54356   	 7.00431   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 50)                         	 0.0504223 	 100       	 154.941   	 0         	 10.1642   	 15.2439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 50)                           	 0.0372772 	 100       	 209.578   	 0         	 23.6069   	 8.87784   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 125, r2: 125, leftOrthog: 1)                      	 0.0261563 	 100       	 298.686   	 0         	 29.6296   	 10.0806   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0221006 	 100       	 141.399   	 0         	 34.1167   	 4.14456   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 50)                                                                                 	 0.0119376 	 100       	 4.5375    	 0         	 1.00858   	 4.49889   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 125, fromLeft: 1)                              	 0.00976983	 800       	 0         	 0         	 20.4712   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 1)  	 0.00516806	 100       	 0.24187   	 0         	 1.93527   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 2, r2: 1)                              	 0.00434588	 100       	 0.575258  	 0         	 3.45191   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 125)  	 0.00285385	 100       	 54.7507   	 0         	 7.8841    	 6.94444   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 125, r2: 125)                            	 0.00178073	 100       	 87.7452   	 0         	 12.6353   	 6.94444   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.001094  	 100       	 0.457038  	 0         	 1.82815   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000966514	 100       	 25.8662   	 0         	 6.20788   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 125)                            	 0.000874998	 100       	 0         	 0         	 11.4286   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 125, leftOrthog: 1)                         	 0.000692306	 100       	 90.278    	 0         	 27.4445   	 3.28947   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                          	 0.000532467	 101       	 0         	 0         	 11.381    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 125)                                                                                                         	 0.000528201	 100       	 0         	 0         	 18.9322   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 1)                                                                                                          	 0.000436755	 101       	 0         	 0         	 13.8751   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000332719	 100       	 0.751385  	 0         	 12.0222   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 50, fromLeft: 1)                               	 0.000256563	 100       	 0         	 0         	 38.9768   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.0624   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.0624   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 15.113    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.1262   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.1246   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.0151   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.4241   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.27615   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.911281  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.818568  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.605314  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.362813  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.104738  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.032498  	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0100264 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00234027	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00217859	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.001094  	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000874998	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000332719	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23078901073792 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23078671214592 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23078469888128 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23078268561664 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23078067235200 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23077865908736 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23077664582272 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23077463255808 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23077261929344 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23077060602880 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23076859276416 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23076657949952 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23076456623488 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23076255297024 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23076053970560 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23075852644096 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23075651317632 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23075449991168 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23075248664704 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23075047338240 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23074846011776 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23074644685312 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23074443358848 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23074242032384 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23074040705920 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23073839379456 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23073638052992 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23073436726528 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23073235400064 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23073034073600 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23072832747136 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23072631420672 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23072430090112 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23072228763648 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23072027437184 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23071826110720 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23071624784256 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23071423457792 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23071222131328 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23071020804864 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23070819478400 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23070618151936 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23070416825472 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23070215499008 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23070014172544 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23069812846080 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23069611519616 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23069410193152 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23069208866688 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23069007540224 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23068806213760 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23068604887296 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23068403560832 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23068202234368 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23068000907904 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23067799581440 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23067598254976 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23067396928512 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23067195602048 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23066994275584 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23066792949120 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23066591622656 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23066390296192 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23078795413248 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23078788822784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6300, m: 126)                                                                              	 8.98928   	 600       	 46.7311   	 0         	 0.856274  	 54.5749   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 6300)                                                                               	 7.74926   	 700       	 17.9492   	 0         	 1.15884   	 15.4889   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 126)	 0.790711  	 700       	 92.3148   	 0         	 8.66494   	 10.6538   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 126)                        	 0.780656  	 600       	 153.746   	 0         	 9.85925   	 15.5941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 126)                                                                              	 0.760567  	 100       	 36.5293   	 0         	 0.679495  	 53.7595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 126)                          	 0.587794  	 700       	 238.223   	 0         	 15.2765   	 15.5941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 2500)                                                                               	 0.485925  	 100       	 16.0614   	 0         	 1.06354   	 15.1018   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6300, m: 50)                                                                               	 0.40274   	 100       	 27.375    	 0         	 1.25649   	 21.7868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 126, r2: 126, leftOrthog: 1)                      	 0.226197  	 600       	 530.611   	 0         	 51.2082   	 10.3618   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 76)                                                                                                         	 0.108019  	 808       	 0         	 0         	 34.5642   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 50, n: 50, r2: 126)                         	 0.100862  	 100       	 78.7019   	 0         	 8.8446    	 8.89831   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 126)                                                                                	 0.0634074 	 100       	 3.47751   	 0         	 0.191145  	 18.1931   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 50) 	 0.0613603 	 100       	 67.4378   	 0         	 9.58405   	 7.03646   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 50)                         	 0.0525726 	 100       	 150.991   	 0         	 9.82832   	 15.3629   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 50)                           	 0.039388  	 100       	 201.533   	 0         	 22.6485   	 8.89831   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 126, r2: 126, leftOrthog: 1)                      	 0.0294483 	 100       	 269.557   	 0         	 26.5347   	 10.1587   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0201739 	 100       	 156.142   	 0         	 37.6725   	 4.14474   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 50)                                                                                 	 0.011965  	 100       	 4.56887   	 0         	 1.01295   	 4.51045   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 126, fromLeft: 1)                              	 0.00984403	 800       	 0         	 0         	 20.6433   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 1)  	 0.00541296	 100       	 0.232775  	 0         	 1.86249   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 2, r2: 1)                              	 0.00457743	 100       	 0.550528  	 0         	 3.30352   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 126)  	 0.0029    	 100       	 54.7448   	 0         	 7.85545   	 6.96903   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 126, r2: 126)                            	 0.00184609	 100       	 85.9977   	 0         	 12.34     	 6.96903   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000992798	 100       	 25.1814   	 0         	 6.04353   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000936225	 100       	 0.53406   	 0         	 2.13624   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 126)                            	 0.000876341	 100       	 0         	 0         	 11.5024   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 126, leftOrthog: 1)                         	 0.000678961	 100       	 92.7888   	 0         	 28.1607   	 3.29498   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                          	 0.000526031	 101       	 0         	 0         	 11.6738   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 126)                                                                                                         	 0.000518325	 100       	 0         	 0         	 19.4473   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 1)                                                                                                          	 0.000452901	 101       	 0         	 0         	 13.5588   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00034906	 100       	 0.716209  	 0         	 11.4593   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 50, fromLeft: 1)                               	 0.000253588	 100       	 0         	 0         	 39.7495   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 27.473    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 27.473    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.8565   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.7478   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.7464   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.6696   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.216    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.24715   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.935083  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.860384  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.633606  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.276498  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.109517  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.033196  	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0100976 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230207	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00206994	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000936225	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000876341	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00034906	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22928448726912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22928213141504 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22928011815040 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22927810488576 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22927609162112 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22927407835648 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22927206509184 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22927005182720 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22926803856256 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22926602529792 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22926401203328 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22926199876864 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22925998550400 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22925797223936 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22925595897472 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22925394571008 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22925193244544 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22924991918080 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22924790591616 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22924589265152 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22924387938688 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22924186612224 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22923985285760 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22923783959296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22923582632832 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22923381306368 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22923179979904 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22922978653440 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22922777326976 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22922576000512 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22922374674048 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22922173347584 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22921972017024 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22921770690560 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22921569364096 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22921368037632 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22921166711168 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22920965384704 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22920764058240 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22920562731776 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22920361405312 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22920160078848 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22919958752384 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22919757425920 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22919556099456 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22919354772992 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22919153446528 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22918952120064 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22918750793600 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22918549467136 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22918348140672 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22918146814208 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22917945487744 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22917744161280 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22917542834816 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22917341508352 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22917140181888 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22916938855424 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22916737528960 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22916536202496 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22916334876032 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22916133549568 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22915932223104 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22928343066368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22928336475904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6350, m: 127)                                                                              	 9.32421   	 600       	 46.1337   	 0         	 0.838672  	 55.0081   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 6350)                                                                               	 8.14197   	 700       	 17.4934   	 0         	 1.12052   	 15.6118   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 127)	 0.791787  	 700       	 94.6389   	 0         	 8.79854   	 10.7562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 127)                        	 0.790211  	 600       	 155.532   	 0         	 9.89525   	 15.7178   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 127)                                                                              	 0.776529  	 100       	 36.3486   	 0         	 0.67094   	 54.1756   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 127)                          	 0.595145  	 700       	 240.928   	 0         	 15.3283   	 15.7178   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 2500)                                                                               	 0.505642  	 100       	 15.679    	 0         	 1.03038   	 15.2166   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6350, m: 50)                                                                               	 0.395048  	 100       	 28.1295   	 0         	 1.29108   	 21.7875   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 127, r2: 127, leftOrthog: 1)                      	 0.335531  	 600       	 366.294   	 0         	 35.072    	 10.4441   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 77)                                                                                                         	 0.107775  	 808       	 0         	 0         	 35.5601   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 50, n: 50, r2: 127)                         	 0.079083  	 100       	 101.975   	 0         	 11.4341   	 8.91854   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 127)                                                                                	 0.0636615 	 100       	 3.49112   	 0         	 0.191639  	 18.2172   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 50) 	 0.0590715 	 100       	 71.3458   	 0         	 10.0935   	 7.06846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 50)                         	 0.0524106 	 100       	 153.872   	 0         	 9.9389    	 15.4818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 50)                           	 0.0327299 	 100       	 246.395   	 0         	 27.6273   	 8.91854   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0164589 	 100       	 192.905   	 0         	 46.5402   	 4.14491   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 127, r2: 127, leftOrthog: 1)                      	 0.0160611 	 100       	 502.113   	 0         	 49.0505   	 10.2367   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 50)                                                                                 	 0.0121986 	 100       	 4.52238   	 0         	 1.00012   	 4.52185   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 127, fromLeft: 1)                              	 0.0103199 	 800       	 0         	 0         	 20.0052   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 1)  	 0.00490551	 100       	 0.258893  	 0         	 2.07147   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 2, r2: 1)                              	 0.00408289	 100       	 0.622109  	 0         	 3.73304   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 127)  	 0.00281337	 100       	 57.3298   	 0         	 8.1977    	 6.99339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 127, r2: 127)                            	 0.00176237	 100       	 91.5191   	 0         	 13.0865   	 6.99339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00117836	 100       	 21.216    	 0         	 5.09183   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000958124	 100       	 0.521853  	 0         	 2.08741   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 127)                            	 0.000860385	 100       	 0         	 0         	 11.8087   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                          	 0.000564995	 101       	 0         	 0         	 11.0118   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 127)                                                                                                         	 0.000522375	 100       	 0         	 0         	 19.4496   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 127, leftOrthog: 1)                         	 0.000489149	 100       	 129.817   	 0         	 39.3336   	 3.30042   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 1)                                                                                                          	 0.000462793	 101       	 0         	 0         	 13.4436   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000334834	 100       	 0.746639  	 0         	 11.9462   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 50, fromLeft: 1)                               	 0.000277829	 100       	 0         	 0         	 36.5693   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.6457   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.6456   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 15.5683   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.199    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.1976   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.1195   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.5594   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.65981   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.922883  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.858577  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.63372   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.36854   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.109326  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0343784 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0105977 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00246237	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00235249	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000958124	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000860385	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334834	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23169967720320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23169737943040 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23169536616576 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23169335290112 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23169133963648 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23168932637184 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23168731310720 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23168529984256 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23168328657792 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23168127331328 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23167926004864 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23167724678400 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23167523351936 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23167322025472 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23167120699008 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23166919372544 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23166718046080 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23166516719616 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23166315393152 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23166114066688 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23165912740224 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23165711413760 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23165510087296 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23165308760832 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23165107434368 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23164906107904 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23164704781440 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23164503454976 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23164302128512 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23164100802048 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23163899475584 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23163698149120 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23163496818560 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23163295492096 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23163094165632 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23162892839168 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23162691512704 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23162490186240 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23162288859776 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23162087533312 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23161886206848 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23161684880384 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23161483553920 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23161282227456 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23161080900992 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23160879574528 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23160678248064 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23160476921600 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23160275595136 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23160074268672 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23159872942208 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23159671615744 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23159470289280 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23159268962816 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23159067636352 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23158866309888 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23158664983424 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23158463656960 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23158262330496 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23158061004032 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23157859677568 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23157658351104 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23157457024640 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23169862059776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23169855469312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6400, m: 128)                                                                              	 9.67625   	 600       	 45.5137   	 0         	 0.820936  	 55.4413   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 6400)                                                                               	 8.35222   	 700       	 17.4591   	 0         	 1.10959   	 15.7348   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 128)	 0.805202  	 700       	 95.5197   	 0         	 8.7963    	 10.8591   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 128)                        	 0.804568  	 600       	 156.393   	 0         	 9.87234   	 15.8416   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 128)                                                                              	 0.788123  	 100       	 36.3801   	 0         	 0.666406  	 54.5915   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 128)                          	 0.596622  	 700       	 246.053   	 0         	 15.5321   	 15.8416   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 2500)                                                                               	 0.509899  	 100       	 15.7917   	 0         	 1.03003   	 15.3314   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6400, m: 50)                                                                               	 0.412082  	 100       	 27.1791   	 0         	 1.24742   	 21.7882   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 128, r2: 128, leftOrthog: 1)                      	 0.314791  	 600       	 399.722   	 0         	 37.9736   	 10.5263   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 78)                                                                                                         	 0.113573  	 808       	 0         	 0         	 34.627    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 50, n: 50, r2: 128)                         	 0.0980088 	 100       	 83.5844   	 0         	 9.351     	 8.93855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 50) 	 0.0700616 	 100       	 61.2604   	 0         	 8.62783   	 7.10032   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 128)                                                                                	 0.0675389 	 100       	 3.31661   	 0         	 0.181821  	 18.241    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 50)                         	 0.0530797 	 100       	 154.334   	 0         	 9.89281   	 15.6006   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 128, fromLeft: 1)                              	 0.0479853 	 800       	 0         	 0         	 4.3704    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 50)                           	 0.0463011 	 100       	 176.929   	 0         	 19.7939   	 8.93855   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0198633 	 100       	 161.101   	 0         	 38.8656   	 4.14508   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 128, r2: 128, leftOrthog: 1)                      	 0.0189582 	 100       	 432.109   	 0         	 41.893    	 10.3146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 50)                                                                                 	 0.0128536 	 100       	 4.33081   	 0         	 0.955373  	 4.53311   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 1)  	 0.00510975	 100       	 0.250501  	 0         	 2.00433   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 2, r2: 1)                              	 0.0042902 	 100       	 0.596709  	 0         	 3.58063   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 128)  	 0.00282441	 100       	 58.0086   	 0         	 8.26622   	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 128, r2: 128)                            	 0.0017424 	 100       	 94.0311   	 0         	 13.3994   	 7.01754   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 128, leftOrthog: 1)                         	 0.00109224	 100       	 58.5952   	 0         	 17.7251   	 3.30579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00102243	 100       	 24.4515   	 0         	 5.86836   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000930884	 100       	 0.537124  	 0         	 2.1485    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 128)                            	 0.000874714	 100       	 0         	 0         	 11.7067   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 50, fromLeft: 1)                               	 0.000855306	 100       	 0         	 0         	 11.9723   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                          	 0.000563714	 101       	 0         	 0         	 11.1801   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 128)                                                                                                         	 0.000542321	 100       	 0         	 0         	 18.8818   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 1)                                                                                                          	 0.000458441	 101       	 0         	 0         	 13.7475   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336802	 100       	 0.742276  	 0         	 11.8764   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 30.29     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 30.29     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.7392   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.6591   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.6577   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.5243   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.944    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.87498   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.956679  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.883197  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.648956  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.354705  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.115138  	 1110      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0488406 	 900       
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0346763 	 20        
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00244208	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00212598	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000930884	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000874714	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336802	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22744591161216 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22744401963008 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22744200636544 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22743999310080 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22743797983616 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22743596657152 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22743395330688 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22743194004224 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22742992677760 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22742791351296 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22742590024832 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22742388698368 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22742187371904 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22741986045440 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22741784718976 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22741583392512 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22741382066048 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22741180739584 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22740979413120 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22740778086656 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22740576760192 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22740375433728 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22740174107264 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22739972780800 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22739771454336 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22739570127872 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22739368801408 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22739167474944 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22738966148480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22738764822016 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22738563495552 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22738362169088 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22738160838528 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22737959512064 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22737758185600 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22737556859136 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22737355532672 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22737154206208 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22736952879744 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22736751553280 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22736550226816 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22736348900352 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22736147573888 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22735946247424 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22735744920960 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22735543594496 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22735342268032 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22735140941568 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22734939615104 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22734738288640 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22734536962176 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22734335635712 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22734134309248 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22733932982784 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22733731656320 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22733530329856 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22733329003392 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22733127676928 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22732926350464 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22732725024000 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22732523697536 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22732322371072 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22732121044608 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22744485500672 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22744478910208 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 6450)                                                                               	 8.56047   	 700       	 17.4367   	 0         	 1.09957   	 15.8577   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6450, m: 129)                                                                              	 7.00021   	 600       	 64.3987   	 0         	 1.15256   	 55.8744   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 129)                        	 1.02717   	 600       	 125.394   	 0         	 7.85416   	 15.9653   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 129)	 0.86915   	 700       	 90.8143   	 0         	 8.28413   	 10.9624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 129)                                                                              	 0.664312  	 100       	 43.8375   	 0         	 0.796939  	 55.0073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 129)                          	 0.647198  	 700       	 232.183   	 0         	 14.5429   	 15.9653   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 2500)                                                                               	 0.51706   	 100       	 15.8152   	 0         	 1.0239    	 15.4461   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6450, m: 50)                                                                               	 0.401601  	 100       	 28.1062   	 0         	 1.28994   	 21.7889   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 129, r2: 129, leftOrthog: 1)                      	 0.384767  	 600       	 334.752   	 0         	 31.5549   	 10.6086   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 79)                                                                                                         	 0.121093  	 808       	 0         	 0         	 33.3147   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 50, n: 50, r2: 129)                         	 0.0885555 	 100       	 93.958    	 0         	 10.4883   	 8.95833   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 50) 	 0.0684405 	 100       	 63.8584   	 0         	 8.95377   	 7.13202   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 129)                                                                                	 0.0676747 	 100       	 3.33581   	 0         	 0.182638  	 18.2646   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 50)                         	 0.0556039 	 100       	 149.639   	 0         	 9.51934   	 15.7194   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 50)                           	 0.0373987 	 100       	 222.481   	 0         	 24.8351   	 8.95833   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 129, r2: 129, leftOrthog: 1)                      	 0.02498   	 100       	 333.087   	 0         	 32.0507   	 10.3925   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 50)                                                                                 	 0.0192846 	 100       	 2.91251   	 0         	 0.640926  	 4.54422   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0162925 	 100       	 197.944   	 0         	 47.7522   	 4.14524   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 129, fromLeft: 1)                              	 0.0105128 	 800       	 0         	 0         	 20.2614   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 1)  	 0.00553954	 100       	 0.232871  	 0         	 1.86326   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 2, r2: 1)                              	 0.0047543 	 100       	 0.542667  	 0         	 3.25634   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 129)  	 0.00395626	 100       	 42.0625   	 0         	 5.97352   	 7.04148   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 129)                            	 0.00199923	 100       	 0         	 0         	 5.162     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 129, r2: 129)                            	 0.00177721	 100       	 93.6355   	 0         	 13.2977   	 7.04148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000997714	 100       	 25.0573   	 0         	 6.01375   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00093287	 100       	 0.53598   	 0         	 2.14392   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 129, leftOrthog: 1)                         	 0.000525183	 100       	 122.814   	 0         	 37.0918   	 3.31109   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                          	 0.000514641	 101       	 0         	 0         	 12.4032   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 129)                                                                                                         	 0.000510978	 100       	 0         	 0         	 20.1966   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 1)                                                                                                          	 0.000445096	 101       	 0         	 0         	 14.3412   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000332641	 100       	 0.751561  	 0         	 12.025    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 50, fromLeft: 1)                               	 0.000270938	 100       	 0         	 0         	 38.0899   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.8866   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.8866   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 15.9568   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.93644   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.93506   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.09681   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.65993   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.1338    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.17233   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.947086  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.691128  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.426564  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.122564  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0354565 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0107838 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00294137	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00291648	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00199923	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00093287	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000332641	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22486154508160 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22485965727744 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22485764401280 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22485563074816 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22485361748352 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22485160421888 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22484959095424 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22484757768960 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22484556442496 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22484355116032 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22484153789568 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22483952463104 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22483751136640 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22483549810176 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22483348483712 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22483147157248 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22482945830784 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22482744504320 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22482543177856 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22482341851392 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22482140524928 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22481939198464 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22481737872000 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22481536545536 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22481335219072 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22481133892608 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22480932566144 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22480731239680 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22480529913216 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22480328586752 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22480127260288 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22479925933824 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22479724603264 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22479523276800 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22479321950336 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22479120623872 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22478919297408 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22478717970944 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22478516644480 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22478315318016 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22478113991552 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22477912665088 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22477711338624 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22477510012160 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22477308685696 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22477107359232 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22476906032768 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22476704706304 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22476503379840 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22476302053376 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22476100726912 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22475899400448 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22475698073984 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22475496747520 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22475295421056 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22475094094592 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22474892768128 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22474691441664 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22474490115200 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22474288788736 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22474087462272 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22473886135808 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22473684809344 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22486048847616 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22486042257152 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 6500)                                                                               	 8.50522   	 700       	 17.9613   	 0         	 1.12394   	 15.9806   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6500, m: 130)                                                                              	 7.52605   	 600       	 61.3031   	 0         	 1.08872   	 56.3076   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 130)                        	 0.972254  	 600       	 135.582   	 0         	 8.42694   	 16.0891   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 130)	 0.851941  	 700       	 95.0652   	 0         	 8.59054   	 11.0663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 130)                                                                              	 0.669513  	 100       	 44.1739   	 0         	 0.797033  	 55.4229   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 130)                          	 0.638973  	 700       	 240.683   	 0         	 14.9594   	 16.0891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 2500)                                                                               	 0.5133    	 100       	 16.1768   	 0         	 1.0396    	 15.5606   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6500, m: 50)                                                                               	 0.416633  	 100       	 27.3022   	 0         	 1.253     	 21.7895   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 130, r2: 130, leftOrthog: 1)                      	 0.295898  	 600       	 445.491   	 0         	 41.6705   	 10.6908   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 80)                                                                                                         	 0.112814  	 808       	 0         	 0         	 36.6705   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 50, n: 50, r2: 130)                         	 0.0785897 	 100       	 107.52    	 0         	 11.9761   	 8.9779    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 50) 	 0.0717054 	 100       	 62.0595   	 0         	 8.66322   	 7.16355   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 130)                                                                                	 0.0679835 	 100       	 3.3464    	 0         	 0.182986  	 18.2878   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 50)                         	 0.0604847 	 100       	 139.705   	 0         	 8.82074   	 15.8382   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 50)                           	 0.0400142 	 100       	 211.175   	 0         	 23.5217   	 8.9779    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 130, r2: 130, leftOrthog: 1)                      	 0.0212181 	 100       	 398.245   	 0         	 38.0354   	 10.4704   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 50)                                                                                 	 0.0195157 	 100       	 2.90364   	 0         	 0.637436  	 4.55519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0171524 	 100       	 189.478   	 0         	 45.7078   	 4.14541   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 130, fromLeft: 1)                              	 0.0105995 	 800       	 0         	 0         	 20.4084   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 1)  	 0.00556078	 100       	 0.23378   	 0         	 1.87053   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 2, r2: 1)                              	 0.00464478	 100       	 0.559768  	 0         	 3.35895   	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 130)  	 0.0029703 	 100       	 56.8966   	 0         	 8.05306   	 7.06522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 130, r2: 130)                            	 0.0018764 	 100       	 90.066    	 0         	 12.7478   	 7.06522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00108877	 100       	 22.9617   	 0         	 5.51081   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 130, leftOrthog: 1)                         	 0.00104133	 100       	 62.4201   	 0         	 18.822    	 3.31633   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000929541	 100       	 0.5379    	 0         	 2.1516    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 130)                            	 0.000894353	 100       	 0         	 0         	 11.6285   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 130)                                                                                                         	 0.000564329	 100       	 0         	 0         	 18.429    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                          	 0.000555436	 101       	 0         	 0         	 11.6377   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 1)                                                                                                          	 0.000444247	 101       	 0         	 0         	 14.5505   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333756	 100       	 0.74905   	 0         	 11.9848   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 50, fromLeft: 1)                               	 0.000272734	 100       	 0         	 0         	 38.1324   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 27.5547   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 27.5546   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.1446   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.4558   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.4544   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.20283   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.03804   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.68018   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.11242   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.932178  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.685509  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.33531   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.114378  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0363021 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0108723 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00272386	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00258929	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000929541	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000894353	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333756	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22922881996672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22922643105792 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22922441779328 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22922240452864 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22922039126400 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22921837799936 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22921636473472 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22921435147008 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22921233820544 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22921032494080 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22920831167616 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22920629841152 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22920428514688 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22920227188224 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22920025861760 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22919824535296 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22919623208832 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22919421882368 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22919220555904 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22919019229440 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22918817902976 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22918616576512 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22918415250048 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22918213923584 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22918012597120 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22917811270656 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22917609944192 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22917408617728 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22917207291264 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22917005964800 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22916804638336 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22916603311872 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22916401981312 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22916200654848 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22915999328384 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22915798001920 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22915596675456 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22915395348992 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22915194022528 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22914992696064 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22914791369600 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22914590043136 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22914388716672 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22914187390208 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22913986063744 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22913784737280 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22913583410816 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22913382084352 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22913180757888 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22912979431424 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22912778104960 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22912576778496 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22912375452032 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22912174125568 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22911972799104 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22911771472640 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22911570146176 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22911368819712 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22911167493248 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22910966166784 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22910764840320 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22910563513856 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22910362187392 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22922776336128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22922769745664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 6550)                                                                               	 8.69887   	 700       	 17.9698   	 0         	 1.11589   	 16.1036   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6550, m: 131)                                                                              	 8.01022   	 600       	 58.9371   	 0         	 1.03871   	 56.7408   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 131)                        	 0.98168   	 600       	 137.403   	 0         	 8.47491   	 16.2129   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 131)	 0.845539  	 700       	 98.2679   	 0         	 8.79706   	 11.1705   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 131)                                                                              	 0.678736  	 100       	 44.2466   	 0         	 0.792405  	 55.8384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 131)                          	 0.626343  	 700       	 251.246   	 0         	 15.4967   	 16.2129   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 2500)                                                                               	 0.524076  	 100       	 16.0866   	 0         	 1.02625   	 15.6752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6550, m: 50)                                                                               	 0.426405  	 100       	 26.8817   	 0         	 1.23366   	 21.7902   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 131, r2: 131, leftOrthog: 1)                      	 0.370393  	 600       	 364.169   	 0         	 33.8038   	 10.773    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 81)                                                                                                         	 0.0847595 	 808       	 0         	 0         	 50.0361   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 50, n: 50, r2: 131)                         	 0.0822621 	 100       	 104.307   	 0         	 11.5932   	 8.99725   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 131)                                                                                	 0.0678642 	 100       	 3.37807   	 0         	 0.184486  	 18.3107   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 50) 	 0.0645411 	 100       	 70.1956   	 0         	 9.75626   	 7.19492   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 50)                         	 0.0606108 	 100       	 141.567   	 0         	 8.87184   	 15.9569   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 50)                           	 0.0356078 	 100       	 240.972   	 0         	 26.7829   	 8.99725   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 131, r2: 131, leftOrthog: 1)                      	 0.023303  	 100       	 368.214   	 0         	 34.9078   	 10.5482   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 50)                                                                                 	 0.0196119 	 100       	 2.91489   	 0         	 0.638387  	 4.56602   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 50, r2: 50, leftOrthog: 1)                        	 0.0159206 	 100       	 205.708   	 0         	 49.6211   	 4.14557   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 131)  	 0.011505  	 100       	 14.9162   	 0         	 2.1042    	 7.08874   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 131, fromLeft: 1)                              	 0.0108939 	 800       	 0         	 0         	 20.1636   	 0         
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 131)                            	 0.00919245	 100       	 0         	 0         	 1.14007   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 1)  	 0.00679694	 100       	 0.192734  	 0         	 1.54211   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 2, r2: 1)                              	 0.00451343	 100       	 0.58049   	 0         	 3.4833    	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 131, r2: 131)                            	 0.00210424	 100       	 81.5544   	 0         	 11.5048   	 7.08874   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00108675	 100       	 23.0044   	 0         	 5.52105   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000934966	 100       	 0.534779  	 0         	 2.13912   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 131, leftOrthog: 1)                         	 0.000742456	 100       	 88.2207   	 0         	 26.5605   	 3.3215    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 131)                                                                                                         	 0.000556798	 100       	 0         	 0         	 18.8219   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                          	 0.000544636	 101       	 0         	 0         	 12.0168   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 1)                                                                                                          	 0.000434392	 101       	 0         	 0         	 15.0666   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000346752	 100       	 0.720976  	 0         	 11.5356   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 50, fromLeft: 1)                               	 0.000278111	 100       	 0         	 0         	 37.6828   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.7493   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.7493   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.6463   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.1574   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.156    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.84352   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.24256   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.18323   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.12564   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.928382  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.668569  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.410359  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0862953 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0370999 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0111721 	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00919245	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00253614	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00240281	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000934966	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346752	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23118547908480 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23118332553216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23118131226752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23117929900288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23117728573824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23117527247360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23117325920896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23117124594432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23116923267968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23116721941504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23116520615040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23116319288576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23116117962112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23115916635648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23115715309184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23115513982720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23115312656256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23115111329792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23114910003328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23114708676864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23114507350400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23114306023936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23114104697472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23113903371008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23113702044544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23113500718080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23113299391616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23113098065152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23112896738688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23112695412224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23112494085760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23112292759296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23112091428736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23111890102272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23111688775808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23111487449344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23111286122880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23111084796416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23110883469952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23110682143488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23110480817024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23110279490560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23110078164096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23109876837632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23109675511168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23109474184704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23109272858240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23109071531776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23108870205312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23108668878848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23108467552384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23108266225920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23108064899456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23107863572992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23107662246528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23107460920064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23107259593600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23107058267136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23106856940672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23106655614208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23106454287744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23106252961280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23106051634816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23118442247936 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23118435657472 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 6600)                                                                               	 8.65721   	 700       	 18.473    	 0         	 1.13844   	 16.2265   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6600, m: 132)                                                                              	 7.89959   	 600       	 61.1416   	 0         	 1.0694    	 57.1739   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 132)                        	 0.975335  	 600       	 141.488   	 0         	 8.66077   	 16.3366   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 132)	 0.866718  	 700       	 98.3362   	 0         	 8.72142   	 11.2752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 132)                                                                              	 0.677403  	 100       	 45.0131   	 0         	 0.80018   	 56.2537   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 132)                          	 0.627998  	 700       	 256.367   	 0         	 15.6927   	 16.3366   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 2500)                                                                               	 0.514949  	 100       	 16.6204   	 0         	 1.05262   	 15.7896   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6600, m: 50)                                                                               	 0.427588  	 100       	 27.012    	 0         	 1.23961   	 21.7908   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 132, r2: 132, leftOrthog: 1)                      	 0.318989  	 600       	 432.611   	 0         	 39.8526   	 10.8553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 50, n: 50, r2: 132)                         	 0.0926124 	 100       	 94.0695   	 0         	 10.4332   	 9.01639   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 82)                                                                                                         	 0.0855641 	 808       	 0         	 0         	 50.797    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 132)                                                                                	 0.067422  	 100       	 3.42618   	 0         	 0.186883  	 18.3333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 50) 	 0.0660176 	 100       	 69.8602   	 0         	 9.66773   	 7.22612   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 50)                         	 0.059006  	 100       	 147.646   	 0         	 9.18447   	 16.0756   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 50)                           	 0.0362976 	 100       	 240.016   	 0         	 26.62     	 9.01639   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 132, r2: 132, leftOrthog: 1)                      	 0.0206772 	 100       	 421.334   	 0         	 39.6513   	 10.626    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 50)                                                                                 	 0.0203062 	 100       	 2.83985   	 0         	 0.620501  	 4.57671   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 50, r2: 50, leftOrthog: 1)                        	 0.0128823 	 100       	 256.165   	 0         	 61.7902   	 4.14573   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 132, fromLeft: 1)                              	 0.010953  	 800       	 0         	 0         	 20.3621   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 1)  	 0.00544602	 100       	 0.242379  	 0         	 1.93932   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 2, r2: 1)                              	 0.00460134	 100       	 0.573745  	 0         	 3.44282   	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 132)  	 0.0032149 	 100       	 54.1977   	 0         	 7.62052   	 7.11207   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 132, r2: 132)                            	 0.0021184 	 100       	 82.2507   	 0         	 11.5649   	 7.11207   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.0011004 	 100       	 22.7191   	 0         	 5.45257   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000965537	 100       	 0.517847  	 0         	 2.07139   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 132)                            	 0.000869118	 100       	 0         	 0         	 12.1502   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 132, leftOrthog: 1)                         	 0.000705025	 100       	 93.6137   	 0         	 28.1408   	 3.32661   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                          	 0.000553378	 101       	 0         	 0         	 11.973    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 132)                                                                                                         	 0.000553011	 100       	 0         	 0         	 19.0955   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 1)                                                                                                          	 0.000472026	 101       	 0         	 0         	 14.0365   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000346401	 100       	 0.721707  	 0         	 11.5473   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 50, fromLeft: 1)                               	 0.000288198	 100       	 0         	 0         	 36.6415   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.452    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.4519   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.5382   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.9587   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.9573   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.65644   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.19247   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.072     	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.12805   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.941397  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.671016  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.353254  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0871425 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0370986 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0112412 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00557263	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00253285	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000965537	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000869118	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346401	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22803293120384 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22803055110144 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22802853783680 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22802652457216 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22802451130752 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22802249804288 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22802048477824 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22801847151360 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22801645824896 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22801444498432 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22801243171968 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22801041845504 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22800840519040 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22800639192576 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22800437866112 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22800236539648 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22800035213184 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22799833886720 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22799632560256 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22799431233792 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22799229907328 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22799028580864 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22798827254400 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22798625927936 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22798424601472 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22798223275008 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22798021948544 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22797820622080 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22797619295616 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22797417969152 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22797216642688 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22797015316224 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22796813985664 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22796612659200 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22796411332736 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22796210006272 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22796008679808 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22795807353344 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22795606026880 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22795404700416 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22795203373952 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22795002047488 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22794800721024 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22794599394560 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22794398068096 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22794196741632 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22793995415168 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22793794088704 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22793592762240 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22793391435776 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22793190109312 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22792988782848 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22792787456384 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22792586129920 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22792384803456 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22792183476992 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22791982150528 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22791780824064 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22791579497600 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22791378171136 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22791176844672 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22790975518208 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22790774191744 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22803187459840 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22803180869376 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 6650)                                                                               	 9.4305    	 700       	 17.3466   	 0         	 1.06099   	 16.3494   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6650, m: 133)                                                                              	 7.06358   	 600       	 69.9438   	 0         	 1.21415   	 57.6071   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 133)                        	 1.0723    	 600       	 131.641   	 0         	 7.99744   	 16.4604   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 133)	 0.897697  	 700       	 97.3732   	 0         	 8.55623   	 11.3804   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 133)                          	 0.69208   	 700       	 237.956   	 0         	 14.4563   	 16.4604   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 133)                                                                              	 0.677896  	 100       	 45.6644   	 0         	 0.805813  	 56.6688   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 133, r2: 133, leftOrthog: 1)                      	 0.58206   	 600       	 242.515   	 0         	 22.1728   	 10.9375   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 2500)                                                                               	 0.530941  	 100       	 16.3628   	 0         	 1.02885   	 15.904    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6650, m: 50)                                                                               	 0.410454  	 100       	 28.3528   	 0         	 1.3011    	 21.7914   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 83)                                                                                                         	 0.0921377 	 808       	 0         	 0         	 48.3304   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 50, n: 50, r2: 133)                         	 0.0777284 	 100       	 113.787   	 0         	 12.5936   	 9.03533   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 133)                                                                                	 0.0670994 	 100       	 3.46873   	 0         	 0.188973  	 18.3557   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 50)                         	 0.0611434 	 100       	 144.652   	 0         	 8.93229   	 16.1942   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 50) 	 0.0609402 	 100       	 77.0345   	 0         	 10.615    	 7.25714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 50)                           	 0.0331948 	 100       	 266.442   	 0         	 29.489    	 9.03533   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 50)                                                                                 	 0.0199147 	 100       	 2.92079   	 0         	 0.636717  	 4.58727   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 133, r2: 133, leftOrthog: 1)                      	 0.018162  	 100       	 486.978   	 0         	 45.4962   	 10.7037   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 50, r2: 50, leftOrthog: 1)                        	 0.0149935 	 100       	 221.762   	 0         	 53.4898   	 4.14589   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 133, fromLeft: 1)                              	 0.0112102 	 800       	 0         	 0         	 20.1976   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 1)  	 0.00526232	 100       	 0.25274   	 0         	 2.02223   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 2, r2: 1)                              	 0.00441371	 100       	 0.602667  	 0         	 3.61637   	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 133)  	 0.00305543	 100       	 57.8937   	 0         	 8.11382   	 7.13519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 133, r2: 133)                            	 0.0019196 	 100       	 92.1492   	 0         	 12.9147   	 7.13519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000976342	 100       	 25.6058   	 0         	 6.14539   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 133)                            	 0.000934545	 100       	 0         	 0         	 11.3852   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000879383	 100       	 0.56858   	 0         	 2.27432   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 133)                                                                                                         	 0.000732324	 100       	 0         	 0         	 14.5291   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 133, leftOrthog: 1)                         	 0.000587407	 100       	 113.209   	 0         	 33.9798   	 3.33166   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                          	 0.000551321	 101       	 0         	 0         	 12.1642   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 1)                                                                                                          	 0.000454155	 101       	 0         	 0         	 14.7668   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033853	 100       	 0.738487  	 0         	 11.8158   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 50, fromLeft: 1)                               	 0.000270849	 100       	 0         	 0         	 39.2839   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.4609   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.4609   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.2544   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.2113   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.21     	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.98135   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.87171   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.21903   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.21214   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.966955  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.731608  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.615803  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0938755 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0382238 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0114811 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00438745	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00373981	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000934545	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000879383	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033853	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23225824319360 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23225639626752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23225438300288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23225236973824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23225035647360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23224834320896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23224632994432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23224431667968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23224230341504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23224029015040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23223827688576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23223626362112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23223425035648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23223223709184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23223022382720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23222821056256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23222619729792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23222418403328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23222217076864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23222015750400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23221814423936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23221613097472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23221411771008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23221210444544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23221009118080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23220807791616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23220606465152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23220405138688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23220203812224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23220002485760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23219801159296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23219599832832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23219398502272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23219197175808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23218995849344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23218794522880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23218593196416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23218391869952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23218190543488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23217989217024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23217787890560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23217586564096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23217385237632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23217183911168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23216982584704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23216781258240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23216579931776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23216378605312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23216177278848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23215975952384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23215774625920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23215573299456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23215371972992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23215170646528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23214969320064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23214767993600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23214566667136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23214365340672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23214164014208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23213962687744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23213761361280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23213560034816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23213358708352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23225718658816 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23225712068352 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 6700)                                                                               	 9.05212   	 700       	 18.4823   	 0         	 1.12202   	 16.4724   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6700, m: 134)                                                                              	 7.81748   	 600       	 64.6348   	 0         	 1.11362   	 58.0403   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 134)                        	 1.0456    	 600       	 138.07    	 0         	 8.32539   	 16.5842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 134)	 0.916497  	 700       	 97.802    	 0         	 8.51493   	 11.4859   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 134)                                                                              	 0.693347  	 100       	 45.3207   	 0         	 0.793934  	 57.0837   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 134)                          	 0.670108  	 700       	 251.343   	 0         	 15.1556   	 16.5842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 2500)                                                                               	 0.535509  	 100       	 16.4658   	 0         	 1.02794   	 16.0182   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6700, m: 50)                                                                               	 0.433347  	 100       	 27.0568   	 0         	 1.24159   	 21.7921   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 134, r2: 134, leftOrthog: 1)                      	 0.342355  	 600       	 421.686   	 0         	 38.2664   	 11.0197   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 84)                                                                                                         	 0.0922347 	 808       	 0         	 0         	 49.4499   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 50, n: 50, r2: 134)                         	 0.082146  	 100       	 109.293   	 0         	 12.0712   	 9.05405   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 50) 	 0.0701429 	 100       	 68.1181   	 0         	 9.34663   	 7.28798   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 134)                                                                                	 0.0681347 	 100       	 3.44171   	 0         	 0.187276  	 18.3777   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 50)                         	 0.0601363 	 100       	 149.294   	 0         	 9.15195   	 16.3128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 50)                           	 0.0365325 	 100       	 245.754   	 0         	 27.143    	 9.05405   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 134, r2: 134, leftOrthog: 1)                      	 0.0208571 	 100       	 430.453   	 0         	 39.9255   	 10.7814   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 50)                                                                                 	 0.0207547 	 100       	 2.82666   	 0         	 0.614799  	 4.5977    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 50, r2: 50, leftOrthog: 1)                        	 0.0166075 	 100       	 201.717   	 0         	 48.6528   	 4.14604   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 134, fromLeft: 1)                              	 0.0113782 	 800       	 0         	 0         	 20.1997   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 1)  	 0.00500936	 100       	 0.267499  	 0         	 2.14031   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 134)  	 0.00486719	 100       	 36.8919   	 0         	 5.15386   	 7.15812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 2, r2: 1)                              	 0.00415739	 100       	 0.644635  	 0         	 3.86819   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 134)                            	 0.00277203	 100       	 0         	 0         	 3.8672    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 134, r2: 134)                            	 0.00191984	 100       	 93.5289   	 0         	 13.0661   	 7.15812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00105935	 100       	 23.5994   	 0         	 5.66386   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000910694	 100       	 0.549032  	 0         	 2.19613   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                          	 0.000547332	 101       	 0         	 0         	 12.4005   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 134)                                                                                                         	 0.000543633	 100       	 0         	 0         	 19.7192   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 134, leftOrthog: 1)                         	 0.00046392	 100       	 144.421   	 0         	 43.2833   	 3.33665   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 1)                                                                                                          	 0.00046086	 101       	 0         	 0         	 14.7272   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000330092	 100       	 0.757365  	 0         	 12.1178   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 50, fromLeft: 1)                               	 0.000271829	 100       	 0         	 0         	 39.4366   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 29.0013   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 29.0012   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.1277   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.8472   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.8459   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.60839   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.54593   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.01231   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.18895   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.996517  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.712718  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.380283  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0937865 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0380034 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0116501 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00375861	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00277203	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0025898 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000910694	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330092	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22921061365632 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22920831166464 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22920629840000 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22920428513536 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22920227187072 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22920025860608 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22919824534144 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22919623207680 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22919421881216 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22919220554752 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22919019228288 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22918817901824 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22918616575360 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22918415248896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22918213922432 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22918012595968 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22917811269504 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22917609943040 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22917408616576 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22917207290112 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22917005963648 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22916804637184 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22916603310720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22916401984256 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22916200657792 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22915999331328 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22915798004864 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22915596678400 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22915395351936 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22915194025472 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22914992699008 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22914791372544 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22914590041984 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22914388715520 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22914187389056 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22913986062592 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22913784736128 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22913583409664 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22913382083200 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22913180756736 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22912979430272 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22912778103808 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22912576777344 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22912375450880 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22912174124416 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22911972797952 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22911771471488 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22911570145024 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22911368818560 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22911167492096 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22910966165632 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22910764839168 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22910563512704 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22910362186240 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22910160859776 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22909959533312 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22909758206848 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22909556880384 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22909355553920 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22909154227456 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22908952900992 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22908751574528 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22908550248064 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22920955705088 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22920949114624 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 6750)                                                                               	 9.31007   	 700       	 18.3756   	 0         	 1.10728   	 16.5953   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6750, m: 135)                                                                              	 8.45134   	 600       	 61.1357   	 0         	 1.04553   	 58.4734   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 135)                        	 1.02173   	 600       	 144.483   	 0         	 8.6476    	 16.7079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 135)	 0.895061  	 700       	 102.676   	 0         	 8.85757   	 11.5919   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 135)                                                                              	 0.701935  	 100       	 45.4369   	 0         	 0.790227  	 57.4985   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 135)                          	 0.662129  	 700       	 260.11    	 0         	 15.568    	 16.7079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 2500)                                                                               	 0.541228  	 100       	 16.5336   	 0         	 1.02487   	 16.1324   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6750, m: 50)                                                                               	 0.428678  	 100       	 27.5557   	 0         	 1.26445   	 21.7927   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 135, r2: 135, leftOrthog: 1)                      	 0.332317  	 600       	 444.222   	 0         	 40.0129   	 11.102    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 85)                                                                                                         	 0.094739  	 808       	 0         	 0         	 49.2958   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 50, n: 50, r2: 135)                         	 0.085387  	 100       	 106.72    	 0         	 11.7629   	 9.07258   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 135)                                                                                	 0.0681447 	 100       	 3.46689   	 0         	 0.188423  	 18.3995   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 50) 	 0.0662145 	 100       	 73.4356   	 0         	 10.0341   	 7.31863   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 50)                         	 0.0611059 	 100       	 149.126   	 0         	 9.07572   	 16.4314   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 50)                           	 0.0350299 	 100       	 260.135   	 0         	 28.6726   	 9.07258   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 135, r2: 135, leftOrthog: 1)                      	 0.0223346 	 100       	 407.999   	 0         	 37.5722   	 10.8591   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 50)                                                                                 	 0.0209056 	 100       	 2.83017   	 0         	 0.614188  	 4.60799   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0171144 	 100       	 197.202   	 0         	 47.5622   	 4.14619   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 135, fromLeft: 1)                              	 0.0115617 	 800       	 0         	 0         	 20.1769   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 1)  	 0.00576164	 100       	 0.234308  	 0         	 1.87475   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 135)  	 0.00572932	 100       	 31.8101   	 0         	 4.42985   	 7.18085   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 2, r2: 1)                              	 0.00487701	 100       	 0.553618  	 0         	 3.32204   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 135)                            	 0.00344774	 100       	 0         	 0         	 3.13249   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 135, r2: 135)                            	 0.00206953	 100       	 88.0633   	 0         	 12.2636   	 7.18085   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00104279	 100       	 23.9742   	 0         	 5.7538    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000954893	 100       	 0.523619  	 0         	 2.09448   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                          	 0.000560322	 101       	 0         	 0         	 12.2572   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 135, leftOrthog: 1)                         	 0.000535979	 100       	 125.938   	 0         	 37.688    	 3.34158   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 135)                                                                                                         	 0.000534913	 100       	 0         	 0         	 20.1902   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 1)                                                                                                          	 0.000491351	 101       	 0         	 0         	 13.9778   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000344293	 100       	 0.726126  	 0         	 11.618    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 50, fromLeft: 1)                               	 0.000289221	 100       	 0         	 0         	 37.3417   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 30.4344   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 30.4343   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.8218   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.6234   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.6219   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.282    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.8722    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.6501    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.16926   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.972766  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.704106  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.372302  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0963256 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0391739 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0118509 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00569049	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00344774	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00242194	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000954893	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344293	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22540478195584 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22540256798720 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22540055472256 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22539854145792 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22539652819328 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22539451492864 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22539250166400 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22539048839936 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22538847513472 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22538646187008 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22538444860544 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22538243534080 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22538042207616 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22537840881152 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22537639554688 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22537438228224 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22537236901760 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22537035575296 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22536834248832 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22536632922368 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22536431595904 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22536230269440 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22536028942976 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22535827616512 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22535626290048 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22535424963584 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22535223637120 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22535022310656 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22534820984192 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22534619657728 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22534418331264 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22534217004800 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22534015674240 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22533814347776 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22533613021312 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22533411694848 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22533210368384 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22533009041920 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22532807715456 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22532606388992 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22532405062528 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22532203736064 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22532002409600 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22531801083136 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22531599756672 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22531398430208 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22531197103744 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22530995777280 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22530794450816 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22530593124352 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22530391797888 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22530190471424 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22529989144960 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22529787818496 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22529586492032 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22529385165568 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22529183839104 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22528982512640 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22528781186176 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22528579859712 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22528378533248 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22528177206784 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22527975880320 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22540372535040 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22540365944576 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 6800)                                                                               	 9.12609   	 700       	 19.1657   	 0         	 1.14639   	 16.7183   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6800, m: 136)                                                                              	 8.21824   	 600       	 64.2772   	 0         	 1.09117   	 58.9066   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 136)                        	 1.13137   	 600       	 133.403   	 0         	 7.92569   	 16.8317   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 136)	 0.941278  	 700       	 100.087   	 0         	 8.55575   	 11.6982   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 136)                          	 0.698283  	 700       	 252.164   	 0         	 14.9815   	 16.8317   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 136)                                                                              	 0.688505  	 100       	 47.012    	 0         	 0.811767  	 57.9132   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 2500)                                                                               	 0.540266  	 100       	 16.8071   	 0         	 1.0345    	 16.2466   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6800, m: 50)                                                                               	 0.418283  	 100       	 28.4496   	 0         	 1.30543   	 21.7933   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 136, r2: 136, leftOrthog: 1)                      	 0.314672  	 600       	 479.634   	 0         	 42.8849   	 11.1842   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 86)                                                                                                         	 0.0865807 	 808       	 0         	 0         	 55.2176   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 50, n: 50, r2: 136)                         	 0.0797108 	 100       	 116.019   	 0         	 12.7621   	 9.09091   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 136)                                                                                	 0.0676391 	 100       	 3.51867   	 0         	 0.191014  	 18.4211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 50)                         	 0.0633419 	 100       	 146.001   	 0         	 8.82191   	 16.5498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 50) 	 0.0581861 	 100       	 85.0375   	 0         	 11.5711   	 7.3491    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 50)                           	 0.0325119 	 100       	 284.449   	 0         	 31.2894   	 9.09091   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 50)                                                                                 	 0.0212305 	 100       	 2.81041   	 0         	 0.608557  	 4.61816   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 136, r2: 136, leftOrthog: 1)                      	 0.0129811 	 100       	 712.423   	 0         	 65.1406   	 10.9367   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 136, fromLeft: 1)                              	 0.0117331 	 800       	 0         	 0         	 20.1779   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 50, r2: 50, leftOrthog: 1)                        	 0.0105396 	 100       	 322.592   	 0         	 77.8015   	 4.14634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 1)  	 0.00529142	 100       	 0.25702   	 0         	 2.05646   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 2, r2: 1)                              	 0.00447567	 100       	 0.60773   	 0         	 3.64674   	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 136)  	 0.00317223	 100       	 58.3059   	 0         	 8.09423   	 7.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 136, r2: 136)                            	 0.00204252	 100       	 90.5547   	 0         	 12.5711   	 7.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00111841	 100       	 22.3531   	 0         	 5.36475   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000899351	 100       	 0.555956  	 0         	 2.22383   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 136)                            	 0.000893607	 100       	 0         	 0         	 12.1754   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 136, leftOrthog: 1)                         	 0.000567766	 100       	 119.768   	 0         	 35.7894   	 3.34646   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                          	 0.000559404	 101       	 0         	 0         	 12.4218   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 136)                                                                                                         	 0.000533255	 100       	 0         	 0         	 20.403    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 1)                                                                                                          	 0.000450765	 101       	 0         	 0         	 15.4156   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000344338	 100       	 0.726031  	 0         	 11.6165   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 50, fromLeft: 1)                               	 0.000275308	 100       	 0         	 0         	 39.5194   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 29.6802   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 29.6802   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.2739   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.3814   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.38     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.98889   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.68759   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.39267   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.27554   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.00793   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.737313  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.33876   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0881241 	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0400447 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0120084 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00239761	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00187651	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000899351	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000893607	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344338	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23093566785408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23093368055808 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23093166729344 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23092965402880 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23092764076416 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23092562749952 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23092361423488 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23092160097024 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23091958770560 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23091757444096 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23091556117632 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23091354791168 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23091153464704 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23090952138240 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23090750811776 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23090549485312 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23090348158848 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23090146832384 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23089945505920 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23089744179456 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23089542852992 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23089341526528 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23089140200064 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23088938873600 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23088737547136 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23088536220672 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23088334894208 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23088133567744 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23087932241280 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23087730914816 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23087529588352 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23087328261888 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23087126931328 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23086925604864 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23086724278400 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23086522951936 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23086321625472 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23086120299008 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23085918972544 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23085717646080 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23085516319616 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23085314993152 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23085113666688 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23084912340224 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23084711013760 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23084509687296 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23084308360832 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23084107034368 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23083905707904 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23083704381440 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23083503054976 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23083301728512 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23083100402048 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23082899075584 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23082697749120 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23082496422656 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23082295096192 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23082093769728 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23081892443264 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23081691116800 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23081489790336 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23081288463872 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23081087137408 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23093461124864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23093454534400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 6850)                                                                               	 9.54151   	 700       	 18.7386   	 0         	 1.11267   	 16.8412   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6850, m: 137)                                                                              	 8.52204   	 600       	 63.3633   	 0         	 1.0678    	 59.3398   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 137)                        	 1.08451   	 600       	 142.259   	 0         	 8.39015   	 16.9554   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 137)	 0.949401  	 700       	 101.708   	 0         	 8.6157    	 11.805    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 137)                                                                              	 0.737797  	 100       	 44.5187   	 0         	 0.763252  	 58.3277   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 137)                          	 0.70148   	 700       	 256.593   	 0         	 15.1334   	 16.9554   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 2500)                                                                               	 0.554375  	 100       	 16.6188   	 0         	 1.01578   	 16.3606   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6850, m: 50)                                                                               	 0.449897  	 100       	 26.645    	 0         	 1.22259   	 21.7939   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 137, r2: 137, leftOrthog: 1)                      	 0.424317  	 600       	 363.599   	 0         	 32.2727   	 11.2664   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 87)                                                                                                         	 0.104618  	 808       	 0         	 0         	 46.7664   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 50) 	 0.0874654 	 100       	 57.5599   	 0         	 7.80011   	 7.37937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 50, n: 50, r2: 137)                         	 0.0697017 	 100       	 134.638   	 0         	 14.7807   	 9.10904   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 137)                                                                                	 0.0683049 	 100       	 3.51      	 0         	 0.190323  	 18.4423   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 50)                         	 0.0604815 	 100       	 155.163   	 0         	 9.30888   	 16.6683   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 137, r2: 137, leftOrthog: 1)                      	 0.0350843 	 100       	 267.484   	 0         	 24.2852   	 11.0143   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 50)                           	 0.0346079 	 100       	 271.166   	 0         	 29.7689   	 9.10904   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 50)                                                                                 	 0.0214916 	 100       	 2.79953   	 0         	 0.604886  	 4.6282    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0150827 	 100       	 227.081   	 0         	 54.7646   	 4.14649   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 137, fromLeft: 1)                              	 0.0118738 	 800       	 0         	 0         	 20.2331   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 1)  	 0.00526128	 100       	 0.260393  	 0         	 2.08345   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 2, r2: 1)                              	 0.00434978	 100       	 0.629917  	 0         	 3.77987   	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 137)  	 0.00310528	 100       	 60.4422   	 0         	 8.36484   	 7.22574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 137, r2: 137)                            	 0.0020079 	 100       	 93.4757   	 0         	 12.9365   	 7.22574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00103263	 100       	 24.2101   	 0         	 5.81043   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000970019	 100       	 0.515454  	 0         	 2.06182   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 137)                            	 0.000876697	 100       	 0         	 0         	 12.5015   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 137)                                                                                                         	 0.000560253	 100       	 0         	 0         	 19.5626   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                          	 0.000556777	 101       	 0         	 0         	 12.6255   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 137, leftOrthog: 1)                         	 0.0004855 	 100       	 141.092   	 0         	 42.1009   	 3.35127   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 1)                                                                                                          	 0.000430159	 101       	 0         	 0         	 16.3419   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336972	 100       	 0.741901  	 0         	 11.8704   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 50, fromLeft: 1)                               	 0.000292725	 100       	 0         	 0         	 37.4413   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 31.2294   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 31.2294   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 18.2684   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.8958   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.8943   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.502    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.1174   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.77803   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.21573   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.04523   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.742446  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.47497   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.106165  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0401617 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0121665 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00234955	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00226977	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000970019	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000876697	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336972	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22615272712064 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22615083182080 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22614881855616 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22614680529152 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22614479202688 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22614277876224 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22614076549760 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22613875223296 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22613673896832 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22613472570368 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22613271243904 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22613069917440 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22612868590976 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22612667264512 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22612465938048 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22612264611584 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22612063285120 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22611861958656 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22611660632192 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22611459305728 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22611257979264 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22611056652800 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22610855326336 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22610653999872 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22610452673408 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22610251346944 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22610050020480 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22609848694016 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22609647367552 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22609446041088 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22609244714624 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22609043388160 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22608842057600 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22608640731136 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22608439404672 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22608238078208 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22608036751744 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22607835425280 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22607634098816 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22607432772352 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22607231445888 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22607030119424 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22606828792960 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22606627466496 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22606426140032 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22606224813568 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22606023487104 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22605822160640 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22605620834176 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22605419507712 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22605218181248 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22605016854784 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22604815528320 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22604614201856 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22604412875392 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22604211548928 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22604010222464 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22603808896000 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22603607569536 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22603406243072 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22603204916608 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22603003590144 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22602802263680 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22615167051520 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22615160461056 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 6900)                                                                               	 9.51072   	 700       	 19.214    	 0         	 1.13262   	 16.9641   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6900, m: 138)                                                                              	 8.43318   	 600       	 65.4433   	 0         	 1.09486   	 59.7729   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 138)                        	 1.1294    	 600       	 139.618   	 0         	 8.17472   	 17.0792   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 138)	 0.916489  	 700       	 107.974   	 0         	 9.06425   	 11.9121   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 138)                                                                              	 0.7206    	 100       	 46.249    	 0         	 0.787324  	 58.742    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 138)                          	 0.698536  	 700       	 263.358   	 0         	 15.4198   	 17.0792   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 2500)                                                                               	 0.54621   	 100       	 17.1121   	 0         	 1.03869   	 16.4746   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 138, r2: 138, leftOrthog: 1)                      	 0.534144  	 600       	 295.209   	 0         	 26.0127   	 11.3487   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6900, m: 50)                                                                               	 0.452629  	 100       	 26.6775   	 0         	 1.22405   	 21.7945   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 88)                                                                                                         	 0.104995  	 808       	 0         	 0         	 47.6757   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 50, n: 50, r2: 138)                         	 0.0949593 	 100       	 100.274   	 0         	 10.9866   	 9.12698   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 50) 	 0.0675478 	 100       	 75.8278   	 0         	 10.2339   	 7.40944   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 138)                                                                                	 0.0674286 	 100       	 3.58157   	 0         	 0.193983  	 18.4633   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 50)                         	 0.0605378 	 100       	 157.29    	 0         	 9.36994   	 16.7867   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 50)                           	 0.039101  	 100       	 243.523   	 0         	 26.6817   	 9.12698   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 50)                                                                                 	 0.0215219 	 100       	 2.81883   	 0         	 0.607753  	 4.63812   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 138, r2: 138, leftOrthog: 1)                      	 0.0180947 	 100       	 526.233   	 0         	 47.4433   	 11.0918   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0134664 	 100       	 256.192   	 0         	 61.7832   	 4.14663   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 138, fromLeft: 1)                              	 0.0120957 	 800       	 0         	 0         	 20.1528   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 1)  	 0.00885336	 100       	 0.155873  	 0         	 1.24716   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 2, r2: 1)                              	 0.00612408	 100       	 0.45068   	 0         	 2.70434   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 138)  	 0.00302275	 100       	 63.0022   	 0         	 8.69248   	 7.2479    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 138, r2: 138)                            	 0.00195235	 100       	 97.5438   	 0         	 13.4582   	 7.2479    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00100222	 100       	 24.9446   	 0         	 5.98672   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000901816	 100       	 0.554437  	 0         	 2.21775   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 138)                            	 0.000889971	 100       	 0         	 0         	 12.4049   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 138, leftOrthog: 1)                         	 0.000684295	 100       	 100.834   	 0         	 30.0455   	 3.35603   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                          	 0.000555605	 101       	 0         	 0         	 12.7976   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 138)                                                                                                         	 0.000537757	 100       	 0         	 0         	 20.5297   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 1)                                                                                                          	 0.000451271	 101       	 0         	 0         	 15.7564   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033846	 100       	 0.73864   	 0         	 11.8182   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 50, fromLeft: 1)                               	 0.00029539	 100       	 0         	 0         	 37.3743   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 30.8264   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 30.8263   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.9461   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.8439   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.8425   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.4149   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.0785   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.67384   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.2859    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.995913  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.745713  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.566389  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.10654   	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0406335 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0123911 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00305766	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00289092	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000901816	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000889971	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033846	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22587715303296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22587501438976 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22587300112512 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22587098786048 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22586897459584 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22586696133120 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22586494806656 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22586293480192 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22586092153728 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22585890827264 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22585689500800 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22585488174336 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22585286847872 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22585085521408 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22584884194944 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22584682868480 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22584481542016 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22584280215552 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22584078889088 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22583877562624 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22583676236160 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22583474909696 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22583273583232 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22583072256768 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22582870930304 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22582669603840 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22582468277376 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22582266950912 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22582065624448 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22581864297984 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22581662971520 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22581461645056 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22581260314496 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22581058988032 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22580857661568 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22580656335104 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22580455008640 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22580253682176 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22580052355712 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22579851029248 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22579649702784 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22579448376320 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22579247049856 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22579045723392 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22578844396928 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22578643070464 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22578441744000 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22578240417536 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22578039091072 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22577837764608 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22577636438144 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22577435111680 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22577233785216 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22577032458752 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22576831132288 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22576629805824 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22576428479360 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22576227152896 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22576025826432 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22575824499968 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22575623173504 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22575421847040 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22575220520576 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22587609642752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22587603052288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 6950)                                                                               	 9.96494   	 700       	 18.7397   	 0         	 1.09672   	 17.0871   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6950, m: 139)                                                                              	 8.38581   	 600       	 67.2541   	 0         	 1.11706   	 60.2061   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 139)                        	 1.1586    	 600       	 139.08    	 0         	 8.08463   	 17.203    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 139)	 0.970009  	 700       	 104.531   	 0         	 8.69679   	 12.0195   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 139)                                                                              	 0.742986  	 100       	 45.5079   	 0         	 0.769285  	 59.1561   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 139)                          	 0.731222  	 700       	 257.095   	 0         	 14.9448   	 17.203    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 2500)                                                                               	 0.562603  	 100       	 16.8528   	 0         	 1.01593   	 16.5885   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 139, r2: 139, leftOrthog: 1)                      	 0.488091  	 600       	 330.137   	 0         	 28.8811   	 11.4309   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6950, m: 50)                                                                               	 0.439383  	 100       	 27.6809   	 0         	 1.27005   	 21.795    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 89)                                                                                                         	 0.10398   	 808       	 0         	 0         	 49.2414   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 50, n: 50, r2: 139)                         	 0.0729844 	 100       	 132.364   	 0         	 14.4743   	 9.14474   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 139)                                                                                	 0.069351  	 100       	 3.50752   	 0         	 0.189759  	 18.484    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 50) 	 0.062201  	 100       	 83.7687   	 0         	 11.2603   	 7.43932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 50)                         	 0.0620678 	 100       	 155.644   	 0         	 9.20697   	 16.905    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 50)                           	 0.0332626 	 100       	 290.431   	 0         	 31.7594   	 9.14474   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 50)                                                                                 	 0.0217219 	 100       	 2.81589   	 0         	 0.60584   	 4.64792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 139, r2: 139, leftOrthog: 1)                      	 0.0182936 	 100       	 528.082   	 0         	 47.2797   	 11.1693   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 139, fromLeft: 1)                              	 0.0121152 	 800       	 0         	 0         	 20.4132   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0116203 	 100       	 299.045   	 0         	 72.115    	 4.14678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 1)  	 0.00589744	 100       	 0.235695  	 0         	 1.88584   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 2, r2: 1)                              	 0.00504756	 100       	 0.550762  	 0         	 3.30489   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 139)  	 0.00306767	 100       	 62.9826   	 0         	 8.6635    	 7.26987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 139, r2: 139)                            	 0.00194451	 100       	 99.362    	 0         	 13.6676   	 7.26987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000972507	 100       	 25.7068   	 0         	 6.16962   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 139)                            	 0.000936782	 100       	 0         	 0         	 11.8704   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000894738	 100       	 0.558823  	 0         	 2.23529   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 139, leftOrthog: 1)                         	 0.000892038	 100       	 77.9115   	 0         	 23.1829   	 3.36074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                          	 0.00054393	 101       	 0         	 0         	 13.2208   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 139)                                                                                                         	 0.000537151	 100       	 0         	 0         	 20.7018   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 1)                                                                                                          	 0.000446834	 101       	 0         	 0         	 16.0937   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000335851	 100       	 0.744378  	 0         	 11.91     	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 50, fromLeft: 1)                               	 0.000278318	 100       	 0         	 0         	 39.9543   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 31.4397   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 31.4396   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 18.6061   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.7389   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.7376   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.5493   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.3005   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.63753   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.29462   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.04117   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.771476  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.518897  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.105508  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0418688 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0123935 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00335949	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00326959	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000936782	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000894738	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335851	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22620349761408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22620116346880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22619915020416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22619713693952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22619512367488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22619311041024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22619109714560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22618908388096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22618707061632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22618505735168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22618304408704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22618103082240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22617901755776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22617700429312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22617499102848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22617297776384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22617096449920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22616895123456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22616693796992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22616492470528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22616291144064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22616089817600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22615888491136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22615687164672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22615485838208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22615284511744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22615083185280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22614881858816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22614680532352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22614479205888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22614277879424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22614076552960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22613875222400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22613673895936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22613472569472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22613271243008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22613069916544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22612868590080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22612667263616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22612465937152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22612264610688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22612063284224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22611861957760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22611660631296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22611459304832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22611257978368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22611056651904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22610855325440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22610653998976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22610452672512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22610251346048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22610050019584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22609848693120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22609647366656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22609446040192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22609244713728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22609043387264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22608842060800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22608640734336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22608439407872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22608238081408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22608036754944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22607835428480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22620244100864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22620237510400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 7000)                                                                               	 9.92369   	 700       	 19.2267   	 0         	 1.11718   	 17.21     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7000, m: 140)                                                                              	 7.85234   	 600       	 73.3845   	 0         	 1.21018   	 60.6393   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 140)                        	 1.1138    	 600       	 147.818   	 0         	 8.53122   	 17.3267   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 140)	 0.973884  	 700       	 106.666   	 0         	 8.79546   	 12.1274   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 140)                          	 0.748139  	 700       	 256.744   	 0         	 14.8178   	 17.3267   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 140)                                                                              	 0.739883  	 100       	 46.3587   	 0         	 0.77822   	 59.5701   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 2500)                                                                               	 0.557567  	 100       	 17.2483   	 0         	 1.03269   	 16.7023   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7000, m: 50)                                                                               	 0.442769  	 100       	 27.6668   	 0         	 1.26937   	 21.7956   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 140, r2: 140, leftOrthog: 1)                      	 0.344486  	 600       	 477.929   	 0         	 41.5115   	 11.5132   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 90)                                                                                                         	 0.108292  	 808       	 0         	 0         	 48.3492   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 50) 	 0.0765384 	 100       	 69.2462   	 0         	 9.27116   	 7.469     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 50, n: 50, r2: 140)                         	 0.0726036 	 100       	 134.98    	 0         	 14.732    	 9.1623    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 140)                                                                                	 0.070437  	 100       	 3.47829   	 0         	 0.18797   	 18.5045   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 50)                         	 0.0600544 	 100       	 163.185   	 0         	 9.58598   	 17.0233   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 50)                           	 0.036764  	 100       	 266.565   	 0         	 29.0937   	 9.1623    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 50)                                                                                 	 0.0225536 	 100       	 2.73423   	 0         	 0.587046  	 4.6576    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 140, r2: 140, leftOrthog: 1)                      	 0.0204139 	 100       	 480.064   	 0         	 42.6846   	 11.2468   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 50, r2: 50, leftOrthog: 1)                        	 0.018281  	 100       	 191.456   	 0         	 46.1682   	 4.14692   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 140, fromLeft: 1)                              	 0.0126018 	 800       	 0         	 0         	 19.9083   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 1)  	 0.00625746	 100       	 0.223733  	 0         	 1.79012   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 2, r2: 1)                              	 0.00434945	 100       	 0.64376   	 0         	 3.86293   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00348656	 100       	 7.17038   	 0         	 1.72089   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 140)  	 0.00317657	 100       	 61.7018   	 0         	 8.46195   	 7.29167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 140, r2: 140)                            	 0.00205134	 100       	 95.5472   	 0         	 13.1036   	 7.29167   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000926742	 100       	 0.539524  	 0         	 2.1581    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 140)                            	 0.000897331	 100       	 0         	 0         	 12.4815   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 140, leftOrthog: 1)                         	 0.000888622	 100       	 78.7737   	 0         	 23.407    	 3.36538   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                          	 0.000545345	 101       	 0         	 0         	 13.3347   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 140)                                                                                                         	 0.000532624	 100       	 0         	 0         	 21.028    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 1)                                                                                                          	 0.00046903	 101       	 0         	 0         	 15.5043   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033778	 100       	 0.740127  	 0         	 11.842    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 50, fromLeft: 1)                               	 0.000279376	 100       	 0         	 0         	 40.0893   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 30.1861   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 30.186    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 18.2665   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.8353   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.8339   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.5038   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.53786   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.10543   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.24994   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.05986   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.791303  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.38407   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.109839  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0432498 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0128811 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00297763	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00254271	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000926742	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000897331	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033778	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22422732867456 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22422547851264 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22422346524800 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22422145198336 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22421943871872 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22421742545408 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22421541218944 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22421339892480 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22421138566016 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22420937239552 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22420735913088 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22420534586624 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22420333260160 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22420131933696 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22419930607232 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22419729280768 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22419527954304 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22419326627840 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22419125301376 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22418923974912 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22418722648448 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22418521321984 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22418319995520 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22418118669056 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22417917342592 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22417716016128 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22417514689664 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22417313363200 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22417112036736 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22416910710272 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22416709383808 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22416508057344 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22416306726784 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22416105400320 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22415904073856 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22415702747392 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22415501420928 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22415300094464 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22415098768000 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22414897441536 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22414696115072 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22414494788608 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22414293462144 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22414092135680 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22413890809216 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22413689482752 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22413488156288 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22413286829824 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22413085503360 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22412884176896 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22412682850432 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22412481523968 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22412280197504 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22412078871040 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22411877544576 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22411676218112 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22411474891648 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22411273565184 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22411072238720 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22410870912256 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22410669585792 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22410468259328 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22410266932864 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22422627206912 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22422620616448 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 7050)                                                                               	 10.3953   	 700       	 18.7505   	 0         	 1.08179   	 17.3329   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7050, m: 141)                                                                              	 8.38784   	 600       	 70.1821   	 0         	 1.14916   	 61.0724   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 141)                        	 1.14101   	 600       	 147.407   	 0         	 8.44716   	 17.4505   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 141)	 1.01109   	 700       	 105.241   	 0         	 8.6013    	 12.2355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 141)                          	 0.774807  	 700       	 253.257   	 0         	 14.5129   	 17.4505   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 141)                                                                              	 0.752565  	 100       	 46.2309   	 0         	 0.770721  	 59.984    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 141, r2: 141, leftOrthog: 1)                      	 0.715722  	 600       	 234.998   	 0         	 20.2665   	 11.5954   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 2500)                                                                               	 0.581397  	 100       	 16.7762   	 0         	 0.997627  	 16.8161   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7050, m: 50)                                                                               	 0.461377  	 100       	 26.7406   	 0         	 1.22685   	 21.7962   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 91)                                                                                                         	 0.122332  	 808       	 0         	 0         	 43.7568   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 50, n: 50, r2: 141)                         	 0.0750477 	 100       	 132.456   	 0         	 14.4292   	 9.17969   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 141)                                                                                	 0.0669662 	 100       	 3.6847    	 0         	 0.198906  	 18.5248   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 50)                         	 0.0647732 	 100       	 153.466   	 0         	 8.95285   	 17.1416   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 50) 	 0.0560053 	 100       	 96.2498   	 0         	 12.8359   	 7.49847   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 50)                           	 0.0383247 	 100       	 259.376   	 0         	 28.2554   	 9.17969   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 141, r2: 141, leftOrthog: 1)                      	 0.0330182 	 100       	 301.061   	 0         	 26.5856   	 11.3242   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0232421 	 100       	 151.665   	 0         	 36.5716   	 4.14706   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 50)                                                                                 	 0.0228975 	 100       	 2.715     	 0         	 0.581723  	 4.66716   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 141, fromLeft: 1)                              	 0.0125529 	 800       	 0         	 0         	 20.2723   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 1)  	 0.00545747	 100       	 0.258361  	 0         	 2.06718   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 2, r2: 1)                              	 0.00467475	 100       	 0.603241  	 0         	 3.61979   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 141)  	 0.00321906	 100       	 61.7603   	 0         	 8.44496   	 7.31328   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 141, r2: 141)                            	 0.00210901	 100       	 94.2671   	 0         	 12.8899   	 7.31328   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00102395	 100       	 24.4153   	 0         	 5.85966   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00095065	 100       	 0.525956  	 0         	 2.10382   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 141)                            	 0.000888799	 100       	 0         	 0         	 12.6913   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                          	 0.000555979	 101       	 0         	 0         	 13.225    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 141)                                                                                                         	 0.000544513	 100       	 0         	 0         	 20.7158   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 141, leftOrthog: 1)                         	 0.000536032	 100       	 131.522   	 0         	 39.0275   	 3.36998   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 1)                                                                                                          	 0.000456876	 101       	 0         	 0         	 16.0936   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333609	 100       	 0.74938   	 0         	 11.9901   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 50, fromLeft: 1)                               	 0.000266207	 100       	 0         	 0         	 42.373    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 32.1157   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 32.1156   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 19.0575   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.9292   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.9278   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.9996   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.5188   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.66875   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.28186   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.07577   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.819916  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.772518  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.123889  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0441316 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0128191 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0042878 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00403543	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00095065	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000888799	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333609	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22648552408960 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22648369178624 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22648167852160 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22647966525696 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22647765199232 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22647563872768 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22647362546304 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22647161219840 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22646959893376 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22646758566912 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22646557240448 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22646355913984 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22646154587520 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22645953261056 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22645751934592 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22645550608128 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22645349281664 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22645147955200 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22644946628736 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22644745302272 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22644543975808 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22644342649344 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22644141322880 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22643939996416 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22643738669952 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22643537343488 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22643336017024 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22643134690560 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22642933364096 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22642732037632 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22642530711168 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22642329384704 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22642128054144 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22641926727680 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22641725401216 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22641524074752 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22641322748288 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22641121421824 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22640920095360 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22640718768896 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22640517442432 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22640316115968 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22640114789504 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22639913463040 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22639712136576 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22639510810112 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22639309483648 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22639108157184 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22638906830720 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22638705504256 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22638504177792 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22638302851328 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22638101524864 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22637900198400 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22637698871936 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22637497545472 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22637296219008 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22637094892544 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22636893566080 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22636692239616 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22636490913152 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22636289586688 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22636088260224 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22648446748416 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22648440157952 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 7100)                                                                               	 10.4003   	 700       	 19.1431   	 0         	 1.09665   	 17.4559   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7100, m: 142)                                                                              	 7.91402   	 600       	 75.9779   	 0         	 1.2353    	 61.5056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 142)                        	 1.24949   	 600       	 137.493   	 0         	 7.82357   	 17.5743   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 142)	 0.972497  	 700       	 112.064   	 0         	 9.07844   	 12.344    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 142)                          	 0.77183   	 700       	 259.682   	 0         	 14.7763   	 17.5743   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 142)                                                                              	 0.733832  	 100       	 48.0859   	 0         	 0.796156  	 60.3976   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 142, r2: 142, leftOrthog: 1)                      	 0.589474  	 600       	 291.442   	 0         	 24.9573   	 11.6776   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 2500)                                                                               	 0.569953  	 100       	 17.3543   	 0         	 1.02508   	 16.9297   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7100, m: 50)                                                                               	 0.45955   	 100       	 27.0373   	 0         	 1.24043   	 21.7967   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 92)                                                                                                         	 0.123344  	 808       	 0         	 0         	 44.3567   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 50, n: 50, r2: 142)                         	 0.0890588 	 100       	 113.206   	 0         	 12.3092   	 9.19689   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 50) 	 0.0736325 	 100       	 74.4508   	 0         	 9.8902    	 7.52774   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 142)                                                                                	 0.0693187 	 100       	 3.58489   	 0         	 0.19331   	 18.5448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 50)                         	 0.0669149 	 100       	 150.669   	 0         	 8.72947   	 17.2598   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 50)                           	 0.0376512 	 100       	 267.774   	 0         	 29.1157   	 9.19689   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 50)                                                                                 	 0.0224992 	 100       	 2.78529   	 0         	 0.595578  	 4.67661   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0177381 	 100       	 200.135   	 0         	 48.2578   	 4.1472    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 142, r2: 142, leftOrthog: 1)                      	 0.0162182 	 100       	 621.646   	 0         	 54.5227   	 11.4016   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 142, fromLeft: 1)                              	 0.0128663 	 800       	 0         	 0         	 20.0602   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 1)  	 0.00575557	 100       	 0.246718  	 0         	 1.97402   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 2, r2: 1)                              	 0.00492655	 100       	 0.576468  	 0         	 3.45913   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 142)  	 0.00332732	 100       	 60.6013   	 0         	 8.26226   	 7.33471   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 142, r2: 142)                            	 0.00219378	 100       	 91.9144   	 0         	 12.5314   	 7.33471   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00200321	 100       	 12.48     	 0         	 2.9952    	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 142)                            	 0.000898582	 100       	 0         	 0         	 12.6421   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000885653	 100       	 0.564555  	 0         	 2.25822   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 142, leftOrthog: 1)                         	 0.000883732	 100       	 80.3411   	 0         	 23.8081   	 3.37452   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                          	 0.000579717	 101       	 0         	 0         	 12.8228   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 142)                                                                                                         	 0.000546692	 100       	 0         	 0         	 20.7795   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 1)                                                                                                          	 0.000469766	 101       	 0         	 0         	 15.824    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000343403	 100       	 0.728008  	 0         	 11.6481   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 50, fromLeft: 1)                               	 0.000270179	 100       	 0         	 0         	 42.0462   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 31.5069   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 31.5069   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 19.0577   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.3505   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.3491   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.9928   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.83062   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.17672   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.40747   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.05521   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.816602  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.624314  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.12494   	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0434262 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0131364 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00491982	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00435878	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000898582	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000885653	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343403	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23193786378112 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23193561589760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23193360263296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23193158936832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23192957610368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23192756283904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23192554957440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23192353630976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23192152304512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23191950978048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23191749651584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23191548325120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23191346998656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23191145672192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23190944345728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23190743019264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23190541692800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23190340366336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23190139039872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23189937713408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23189736386944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23189535060480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23189333734016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23189132407552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23188931081088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23188729754624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23188528428160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23188327101696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23188125775232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23187924448768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23187723122304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23187521795840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23187320465280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23187119138816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23186917812352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23186716485888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23186515159424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23186313832960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23186112506496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23185911180032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23185709853568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23185508527104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23185307200640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23185105874176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23184904547712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23184703221248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23184501894784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23184300568320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23184099241856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23183897915392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23183696588928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23183495262464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23183293936000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23183092609536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23182891283072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23182689956608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23182488630144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23182287303680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23182085977216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23181884650752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23181683324288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23181481997824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23181280671360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23193680717568 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23193674127104 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 7150)                                                                               	 10.7052   	 700       	 18.9936   	 0         	 1.08048   	 17.5788   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7150, m: 143)                                                                              	 8.81612   	 600       	 69.6546   	 0         	 1.12457   	 61.9388   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 143)                        	 1.22414   	 600       	 143.328   	 0         	 8.09851   	 17.698    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 143)	 1.01928   	 700       	 109.491   	 0         	 8.79245   	 12.4528   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 143)                          	 0.776819  	 700       	 263.503   	 0         	 14.8889   	 17.698    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 143)                                                                              	 0.767112  	 100       	 46.6499   	 0         	 0.767128  	 60.8111   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 2500)                                                                               	 0.591677  	 100       	 16.9511   	 0         	 0.994585  	 17.0433   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 143, r2: 143, leftOrthog: 1)                      	 0.470588  	 600       	 372.836   	 0         	 31.7041   	 11.7599   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7150, m: 50)                                                                               	 0.468413  	 100       	 26.7125   	 0         	 1.2255    	 21.7973   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 93)                                                                                                         	 0.117542  	 808       	 0         	 0         	 47.5633   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 50, n: 50, r2: 143)                         	 0.081749  	 100       	 125.072   	 0         	 13.5742   	 9.21392   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 143)                                                                                	 0.0694264 	 100       	 3.60453   	 0         	 0.194162  	 18.5645   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 50)                         	 0.0653557 	 100       	 156.444   	 0         	 9.00242   	 17.378    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 50) 	 0.0611799 	 100       	 91.1165   	 0         	 12.0575   	 7.5568    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 50)                           	 0.0343721 	 100       	 297.465   	 0         	 32.2843   	 9.21392   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 50)                                                                                 	 0.0228552 	 100       	 2.76377   	 0         	 0.589799  	 4.68595   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 143, r2: 143, leftOrthog: 1)                      	 0.0191155 	 100       	 534.88    	 0         	 46.5967   	 11.4789   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 143, fromLeft: 1)                              	 0.0128605 	 800       	 0         	 0         	 20.3528   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0123266 	 100       	 290.022   	 0         	 69.9299   	 4.14733   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 1)  	 0.00529475	 100       	 0.270079  	 0         	 2.16093   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 2, r2: 1)                              	 0.00438869	 100       	 0.651675  	 0         	 3.91041   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 143)  	 0.00299409	 100       	 68.298    	 0         	 9.2847    	 7.35597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 143, r2: 143)                            	 0.00192704	 100       	 106.116   	 0         	 14.4258   	 7.35597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.0010132 	 100       	 24.6743   	 0         	 5.92184   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000931333	 100       	 0.536865  	 0         	 2.14746   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 143)                            	 0.000875199	 100       	 0         	 0         	 13.0713   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                          	 0.000568165	 101       	 0         	 0         	 13.2257   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 143)                                                                                                         	 0.000558955	 100       	 0         	 0         	 20.4668   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 143, leftOrthog: 1)                         	 0.000557133	 100       	 128.336   	 0         	 37.9802   	 3.37902   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 1)                                                                                                          	 0.000472036	 101       	 0         	 0         	 15.9191   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000344632	 100       	 0.725411  	 0         	 11.6066   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 50, fromLeft: 1)                               	 0.000276809	 100       	 0         	 0         	 41.3281   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 33.3131   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 33.3131   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 19.925    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.2589   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.2575   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.3197   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.7566   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.1211   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.37225   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.08875   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.817507  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.502588  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.119142  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0447244 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0131373 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00369903	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00315378	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000931333	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000875199	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344632	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22476265834368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22476033615872 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22475832289408 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22475630962944 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22475429636480 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22475228310016 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22475026983552 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22474825657088 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22474624330624 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22474423004160 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22474221677696 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22474020351232 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22473819024768 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22473617698304 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22473416371840 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22473215045376 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22473013718912 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22472812392448 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22472611065984 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22472409739520 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22472208413056 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22472007086592 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22471805760128 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22471604433664 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22471403107200 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22471201780736 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22471000454272 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22470799127808 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22470597801344 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22470396474880 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22470195148416 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22469993821952 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22469792491392 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22469591164928 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22469389838464 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22469188512000 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22468987185536 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22468785859072 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22468584532608 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22468383206144 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22468181879680 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22467980553216 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22467779226752 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22467577900288 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22467376573824 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22467175247360 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22466973920896 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22466772594432 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22466571267968 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22466369941504 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22466168615040 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22465967288576 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22465765962112 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22465564635648 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22465363309184 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22465161982720 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22464960656256 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22464759329792 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22464558003328 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22464356676864 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22464155350400 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22463954023936 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22463752697472 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22476160173824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22476153583360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 7200)                                                                               	 10.4973   	 700       	 19.779    	 0         	 1.11735   	 17.7018   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7200, m: 144)                                                                              	 9.60654   	 600       	 65.2739   	 0         	 1.04653   	 62.3719   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 144)                        	 1.20351   	 600       	 148.863   	 0         	 8.35289   	 17.8218   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 144)	 0.98107   	 700       	 116.472   	 0         	 9.27179   	 12.5619   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 144)                                                                              	 0.769067  	 100       	 47.1845   	 0         	 0.77068   	 61.2245   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 144)                          	 0.707416  	 700       	 295.468   	 0         	 16.579    	 17.8218   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 2500)                                                                               	 0.587116  	 100       	 17.3201   	 0         	 1.00952   	 17.1569   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7200, m: 50)                                                                               	 0.462763  	 100       	 27.2278   	 0         	 1.24911   	 21.7978   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 144, r2: 144, leftOrthog: 1)                      	 0.435071  	 600       	 411.793   	 0         	 34.7736   	 11.8421   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 94)                                                                                                         	 0.120542  	 808       	 0         	 0         	 47.3825   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 50, n: 50, r2: 144)                         	 0.0889356 	 100       	 116.579   	 0         	 12.6294   	 9.23077   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 50) 	 0.0798027 	 100       	 71.0252   	 0         	 9.36309   	 7.58565   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 144)                                                                                	 0.0696007 	 100       	 3.62065   	 0         	 0.194826  	 18.5841   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 50)                         	 0.0673171 	 100       	 154.017   	 0         	 8.80295   	 17.4961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 50)                           	 0.0415707 	 100       	 249.407   	 0         	 27.0191   	 9.23077   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 50)                                                                                 	 0.0235353 	 100       	 2.70515   	 0         	 0.576155  	 4.69518   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 144, r2: 144, leftOrthog: 1)                      	 0.0218671 	 100       	 474.137   	 0         	 41.0286   	 11.5562   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 144, fromLeft: 1)                              	 0.0155673 	 800       	 0         	 0         	 17.0499   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0144419 	 100       	 249.275   	 0         	 60.1029   	 4.14747   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00709516	 100       	 3.52353   	 0         	 0.845647  	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 1)  	 0.00554465	 100       	 0.25971   	 0         	 2.07797   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 2, r2: 1)                              	 0.00452341	 100       	 0.636688  	 0         	 3.82048   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 144)  	 0.00340699	 100       	 60.863    	 0         	 8.25032   	 7.37705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 144, r2: 144)                            	 0.00233731	 100       	 88.7176   	 0         	 12.0262   	 7.37705   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000943204	 100       	 0.530108  	 0         	 2.12043   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 144)                            	 0.000895236	 100       	 0         	 0         	 12.8681   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 144, leftOrthog: 1)                         	 0.000869641	 100       	 82.7928   	 0         	 24.4699   	 3.38346   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 144)                                                                                                         	 0.000556939	 100       	 0         	 0         	 20.6845   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                          	 0.000556631	 101       	 0         	 0         	 13.6449   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 1)                                                                                                          	 0.00046063	 101       	 0         	 0         	 16.4887   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000338405	 100       	 0.73876   	 0         	 11.8202   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 50, fromLeft: 1)                               	 0.000293627	 100       	 0         	 0         	 39.2334   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 33.9876   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 33.9876   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 19.6717   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 13.2221   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 13.2207   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.6438   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.1079   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.908    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.36686   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.06982   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.755847  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.47225   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.122116  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0461856 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.015861  	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00609102	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0024688 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000943204	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000895236	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338405	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22373422393216 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22373222836224 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22373021509760 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22372820183296 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22372618856832 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22372417530368 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22372216203904 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22372014877440 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22371813550976 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22371612224512 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22371410898048 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22371209571584 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22371008245120 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22370806918656 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22370605592192 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22370404265728 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22370202939264 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22370001612800 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22369800286336 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22369598959872 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22369397633408 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22369196306944 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22368994980480 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22368793654016 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22368592327552 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22368391001088 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22368189674624 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22367988348160 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22367787021696 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22367585695232 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22367384368768 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22367183042304 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22366981711744 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22366780385280 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22366579058816 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22366377732352 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22366176405888 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22365975079424 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22365773752960 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22365572426496 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22365371100032 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22365169773568 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22364968447104 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22364767120640 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22364565794176 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22364364467712 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22364163141248 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22363961814784 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22363760488320 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22363559161856 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22363357835392 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22363156508928 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22362955182464 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22362753856000 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22362552529536 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22362351203072 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22362149876608 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22361948550144 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22361747223680 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22361545897216 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22361344570752 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22361143244288 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22360941917824 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22373316732672 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22373310142208 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 7250)                                                                               	 11.0637   	 700       	 19.16     	 0         	 1.07491   	 17.8247   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7250, m: 145)                                                                              	 8.63277   	 600       	 74.1606   	 0         	 1.1808    	 62.8051   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 145)                        	 1.26032   	 600       	 145.136   	 0         	 8.08759   	 17.9455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 145)	 0.984731  	 700       	 118.793   	 0         	 9.37488   	 12.6714   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 145)                                                                              	 0.762294  	 100       	 48.2672   	 0         	 0.783079  	 61.6377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 145)                          	 0.71292   	 700       	 299.338   	 0         	 16.6803   	 17.9455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 145, r2: 145, leftOrthog: 1)                      	 0.637385  	 600       	 286.981   	 0         	 24.0668   	 11.9243   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 2500)                                                                               	 0.605288  	 100       	 17.032    	 0         	 0.986202  	 17.2703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7250, m: 50)                                                                               	 0.465537  	 100       	 27.2535   	 0         	 1.25026   	 21.7983   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 95)                                                                                                         	 0.125922  	 808       	 0         	 0         	 46.3283   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 50, n: 50, r2: 145)                         	 0.0818068 	 100       	 128.504   	 0         	 13.8962   	 9.24745   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 50)                         	 0.0797121 	 100       	 131.881   	 0         	 7.48719   	 17.6142   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 145)                                                                                	 0.0789383 	 100       	 3.21454   	 0         	 0.172793  	 18.6034   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 50) 	 0.0748446 	 100       	 76.9928   	 0         	 10.1116   	 7.6143    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 50)                                                                                 	 0.0369075 	 100       	 1.73858   	 0         	 0.369572  	 4.7043    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 50)                           	 0.0343812 	 100       	 305.763   	 0         	 33.0645   	 9.24745   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 145, r2: 145, leftOrthog: 1)                      	 0.0291386 	 100       	 360.775   	 0         	 31.0118   	 11.6335   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0181346 	 100       	 199.894   	 0         	 48.1952   	 4.1476    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 145, fromLeft: 1)                              	 0.013101  	 800       	 0         	 0         	 20.5419   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 145)  	 0.00881349	 100       	 23.8555   	 0         	 3.2246    	 7.39796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 1)  	 0.00648543	 100       	 0.223578  	 0         	 1.78887   	 0.124983  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 145)                            	 0.00643812	 100       	 0         	 0         	 1.80177   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 2, r2: 1)                              	 0.00560772	 100       	 0.517145  	 0         	 3.10315   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 145, r2: 145)                            	 0.00218459	 100       	 96.2422   	 0         	 13.0093   	 7.39796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00100223	 100       	 24.9442   	 0         	 5.98662   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000884498	 100       	 0.565292  	 0         	 2.26117   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 145, leftOrthog: 1)                         	 0.000835945	 100       	 86.7282   	 0         	 25.5998   	 3.38785   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 145)                                                                                                         	 0.000567606	 100       	 0         	 0         	 20.4367   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                          	 0.000565662	 101       	 0         	 0         	 13.5699   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 1)                                                                                                          	 0.00046804	 101       	 0         	 0         	 16.4003   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000335899	 100       	 0.744271  	 0         	 11.9083   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 50, fromLeft: 1)                               	 0.000273594	 100       	 0         	 0         	 42.3986   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 34.0352   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 34.0351   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 20.6627   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.2595   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.2581   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.7059   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.6845   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.93954   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.42284   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.07487   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.755093  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.685494  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.127524  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0464487 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0133746 	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00643812	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00472201	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00421978	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000884498	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335899	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23132510848896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23132291196928 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23132089870464 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23131888544000 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23131687217536 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23131485891072 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23131284564608 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23131083238144 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23130881911680 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23130680585216 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23130479258752 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23130277932288 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23130076605824 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23129875279360 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23129673952896 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23129472626432 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23129271299968 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23129069973504 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23128868647040 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23128667320576 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23128465994112 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23128264667648 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23128063341184 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23127862014720 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23127660688256 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23127459361792 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23127258035328 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23127056708864 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23126855382400 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23126654055936 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23126452729472 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23126251403008 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23126050072448 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23125848745984 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23125647419520 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23125446093056 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23125244766592 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23125043440128 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23124842113664 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23124640787200 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23124439460736 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23124238134272 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23124036807808 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23123835481344 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23123634154880 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23123432828416 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23123231501952 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23123030175488 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23122828849024 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23122627522560 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23122426196096 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23122224869632 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23122023543168 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23121822216704 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23121620890240 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23121419563776 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23121218237312 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23121016910848 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23120815584384 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23120614257920 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23120412931456 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23120211604992 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23120010278528 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23132405188352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23132398597888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 7300)                                                                               	 10.6918   	 700       	 20.2395   	 0         	 1.1277    	 17.9476   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7300, m: 146)                                                                              	 9.43843   	 600       	 69.2434   	 0         	 1.09496   	 63.2383   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 146)                        	 1.24005   	 600       	 150.581   	 0         	 8.33353   	 18.0693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 146)	 0.959278  	 700       	 124.82    	 0         	 9.76602   	 12.7811   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 146)                                                                              	 0.78677   	 100       	 47.4128   	 0         	 0.764098  	 62.0507   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 146)                          	 0.705722  	 700       	 308.69    	 0         	 17.0837   	 18.0693   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 2500)                                                                               	 0.605882  	 100       	 17.2485   	 0         	 0.992223  	 17.3837   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7300, m: 50)                                                                               	 0.471004  	 100       	 27.1229   	 0         	 1.24424   	 21.7989   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 146, r2: 146, leftOrthog: 1)                      	 0.405954  	 600       	 459.974   	 0         	 38.3101   	 12.0066   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 96)                                                                                                         	 0.133219  	 808       	 0         	 0         	 44.7175   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 50, n: 50, r2: 146)                         	 0.0922988 	 100       	 115.473   	 0         	 12.4647   	 9.26396   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 146)                                                                                	 0.0790716 	 100       	 3.23125   	 0         	 0.173514  	 18.6224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 50) 	 0.0714334 	 100       	 82.0065   	 0         	 10.73     	 7.64273   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 50)                         	 0.0645978 	 100       	 164.99    	 0         	 9.30453   	 17.7322   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 50)                           	 0.0420967 	 100       	 253.179   	 0         	 27.3294   	 9.26396   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 146, r2: 146, leftOrthog: 1)                      	 0.0275004 	 100       	 387.558   	 0         	 33.0942   	 11.7107   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 50)                                                                                 	 0.0239201 	 100       	 2.70344   	 0         	 0.573577  	 4.71331   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0190261 	 100       	 191.841   	 0         	 46.2522   	 4.14773   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 146, fromLeft: 1)                              	 0.0153201 	 800       	 0         	 0         	 17.8096   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 1)  	 0.0058638 	 100       	 0.248985  	 0         	 1.99216   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 146)  	 0.00564361	 100       	 37.7702   	 0         	 5.09121   	 7.4187    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 2, r2: 1)                              	 0.00471032	 100       	 0.619916  	 0         	 3.71984   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.0038236 	 100       	 6.53834   	 0         	 1.5692    	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 146)                            	 0.00318582	 100       	 0         	 0         	 3.66624   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 146, r2: 146)                            	 0.00226457	 100       	 94.1282   	 0         	 12.688    	 7.4187    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 146, leftOrthog: 1)                         	 0.00102391	 100       	 71.2955   	 0         	 21.0175   	 3.39219   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000985799	 100       	 0.507203  	 0         	 2.02881   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                          	 0.000606199	 101       	 0         	 0         	 12.7958   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 146)                                                                                                         	 0.000553515	 100       	 0         	 0         	 21.1015   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 1)                                                                                                          	 0.00046895	 101       	 0         	 0         	 16.5408   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336003	 100       	 0.744041  	 0         	 11.9047   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 50, fromLeft: 1)                               	 0.000300147	 100       	 0         	 0         	 38.9143   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 34.5498   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 34.5498   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 20.5114   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.9688   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.9673   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.421    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.3216   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.7753   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.40077   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.04222   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.754794  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.453504  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.134848  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0475673 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0156202 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00325364	 4650      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00318582	 100       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00273149	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000985799	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336003	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22870530905984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22870298191872 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22870096865408 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22869895538944 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22869694212480 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22869492886016 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22869291559552 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22869090233088 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22868888906624 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22868687580160 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22868486253696 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22868284927232 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22868083600768 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22867882274304 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22867680947840 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22867479621376 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22867278294912 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22867076968448 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22866875641984 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22866674315520 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22866472989056 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22866271662592 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22866070336128 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22865869009664 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22865667683200 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22865466356736 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22865265030272 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22865063703808 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22864862377344 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22864661050880 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22864459724416 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22864258397952 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22864057067392 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22863855740928 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22863654414464 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22863453088000 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22863251761536 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22863050435072 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22862849108608 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22862647782144 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22862446455680 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22862245129216 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22862043802752 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22861842476288 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22861641149824 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22861439823360 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22861238496896 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22861037170432 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22860835843968 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22860634517504 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22860433191040 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22860231864576 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22860030538112 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22859829211648 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22859627885184 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22859426558720 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22859225232256 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22859023905792 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22858822579328 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22858621252864 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22858419926400 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22858218599936 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22858017273472 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22870425245440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22870418654976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 7350)                                                                               	 11.3023   	 700       	 19.5425   	 0         	 1.08145   	 18.0706   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7350, m: 147)                                                                              	 8.87487   	 600       	 75.1639   	 0         	 1.1805    	 63.6715   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 147)                        	 1.36626   	 600       	 139.499   	 0         	 7.66768   	 18.1931   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 147)	 0.969985  	 700       	 126.336   	 0         	 9.8002    	 12.8911   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 147)                                                                              	 0.78691   	 100       	 48.056    	 0         	 0.769345  	 62.4636   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 147)                          	 0.736649  	 700       	 301.849   	 0         	 16.5914   	 18.1931   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 2500)                                                                               	 0.651691  	 100       	 16.2542   	 0         	 0.928975  	 17.4969   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 147, r2: 147, leftOrthog: 1)                      	 0.632871  	 600       	 301.154   	 0         	 24.9118   	 12.0888   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7350, m: 50)                                                                               	 0.449341  	 100       	 28.6253   	 0         	 1.31312   	 21.7994   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 97)                                                                                                         	 0.125984  	 808       	 0         	 0         	 48.2757   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 50, n: 50, r2: 147)                         	 0.082052  	 100       	 131.679   	 0         	 14.189    	 9.2803    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 147)                                                                                	 0.0790382 	 100       	 3.25476   	 0         	 0.174599  	 18.6413   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 50)                         	 0.0722857 	 100       	 149.469   	 0         	 8.37354   	 17.8502   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 50) 	 0.0718903 	 100       	 82.8276   	 0         	 10.7976   	 7.67095   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 50)                           	 0.0382888 	 100       	 282.184   	 0         	 30.4068   	 9.2803    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 147, r2: 147, leftOrthog: 1)                      	 0.024165  	 100       	 447.114   	 0         	 37.9299   	 11.7879   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 50)                                                                                 	 0.0235972 	 100       	 2.76162   	 0         	 0.584814  	 4.72222   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 50, r2: 50, leftOrthog: 1)                        	 0.019041  	 100       	 193.004   	 0         	 46.5311   	 4.14786   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 147, fromLeft: 1)                              	 0.0140488 	 800       	 0         	 0         	 19.6882   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 147)  	 0.00688308	 100       	 31.3944   	 0         	 4.22009   	 7.43927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 1)  	 0.00552421	 100       	 0.266102  	 0         	 2.1291    	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 2, r2: 1)                              	 0.00451679	 100       	 0.650905  	 0         	 3.90579   	 0.166652  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 147)                            	 0.00443586	 100       	 0         	 0         	 2.65112   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 147, r2: 147)                            	 0.00225919	 100       	 95.6492   	 0         	 12.8573   	 7.43927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00096921	 100       	 25.7942   	 0         	 6.19061   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 147, leftOrthog: 1)                         	 0.000897216	 100       	 81.9201   	 0         	 24.1191   	 3.39649   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000893256	 100       	 0.55975   	 0         	 2.239     	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 147)                                                                                                         	 0.000594368	 100       	 0         	 0         	 19.7857   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                          	 0.000580158	 101       	 0         	 0         	 13.5094   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 1)                                                                                                          	 0.000448461	 101       	 0         	 0         	 17.4767   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033444	 100       	 0.747518  	 0         	 11.9603   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 50, fromLeft: 1)                               	 0.000283398	 100       	 0         	 0         	 41.4964   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 34.7537   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 34.7536   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 21.0878   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.5803   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.5789   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.9775   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.9176   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.1902   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.52157   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.05428   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.781714  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.676974  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.127607  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0494504 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0143322 	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00443586	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00434128	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00415044	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000893256	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033444	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23185278777216 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23185105872896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23184904546432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23184703219968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23184501893504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23184300567040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23184099240576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23183897914112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23183696587648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23183495261184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23183293934720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23183092608256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23182891281792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23182689955328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23182488628864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23182287302400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23182085975936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23181884649472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23181683323008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23181481996544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23181280670080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23181079343616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23180878017152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23180676690688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23180475364224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23180274037760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23180072711296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23179871384832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23179670058368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23179468731904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23179267405440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23179066078976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23178864748416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23178663421952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23178462095488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23178260769024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23178059442560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23177858116096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23177656789632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23177455463168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23177254136704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23177052810240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23176851483776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23176650157312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23176448830848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23176247504384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23176046177920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23175844851456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23175643524992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23175442198528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23175240872064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23175039545600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23174838219136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23174636892672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23174435566208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23174234239744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23174032913280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23173831586816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23173630260352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23173428933888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23173227607424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23173026280960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23172824954496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23185001010944 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23184994551552 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 7400)                                                                               	 10.9713   	 700       	 20.5456   	 0         	 1.12928   	 18.1935   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7400, m: 148)                                                                              	 9.44815   	 600       	 72.054    	 0         	 1.12401   	 64.1046   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 148)                        	 1.25117   	 600       	 155.46    	 0         	 8.48727   	 18.3168   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 148)	 0.971435  	 700       	 129.085   	 0         	 9.92851   	 13.0014   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 148)                                                                              	 0.813094  	 100       	 47.1434   	 0         	 0.74978   	 62.8763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 148)                          	 0.721376  	 700       	 314.573   	 0         	 17.174    	 18.3168   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 2500)                                                                               	 0.597356  	 100       	 17.9723   	 0         	 1.02057   	 17.6102   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 148, r2: 148, leftOrthog: 1)                      	 0.49957   	 600       	 389.35    	 0         	 31.9899   	 12.1711   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7400, m: 50)                                                                               	 0.468218  	 100       	 27.658    	 0         	 1.26872   	 21.7999   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 98)                                                                                                         	 0.121948  	 808       	 0         	 0         	 50.9071   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 50, n: 50, r2: 148)                         	 0.0861807 	 100       	 127.082   	 0         	 13.6699   	 9.29648   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 50) 	 0.083491  	 100       	 72.4868   	 0         	 9.41514   	 7.69896   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 148)                                                                                	 0.0808431 	 100       	 3.20373   	 0         	 0.171691  	 18.6599   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 50)                         	 0.0667934 	 100       	 163.968   	 0         	 9.1255    	 17.9681   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 50)                           	 0.0456204 	 100       	 240.068   	 0         	 25.8236   	 9.29648   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 148, r2: 148, leftOrthog: 1)                      	 0.0326657 	 100       	 335.275   	 0         	 28.2574   	 11.8651   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 50)                                                                                 	 0.0243239 	 100       	 2.69967   	 0         	 0.570631  	 4.73102   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 50, r2: 50, leftOrthog: 1)                        	 0.018572  	 100       	 199.224   	 0         	 48.0292   	 4.14798   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 148, fromLeft: 1)                              	 0.0140237 	 800       	 0         	 0         	 19.9927   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 1)  	 0.00569387	 100       	 0.259929  	 0         	 2.07971   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 2, r2: 1)                              	 0.00485891	 100       	 0.609191  	 0         	 3.65547   	 0.166652  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 148)  	 0.00331439	 100       	 66.0876   	 0         	 8.85931   	 7.45968   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 148, r2: 148)                            	 0.00224327	 100       	 97.643    	 0         	 13.0894   	 7.45968   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00102206	 100       	 24.4603   	 0         	 5.87048   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 148, leftOrthog: 1)                         	 0.000971676	 100       	 76.1571   	 0         	 22.3943   	 3.40074   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000916091	 100       	 0.545797  	 0         	 2.18319   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 148)                            	 0.00088854	 100       	 0         	 0         	 13.3252   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 148)                                                                                                         	 0.000745489	 100       	 0         	 0         	 15.8822   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                          	 0.000564156	 101       	 0         	 0         	 14.0358   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 1)                                                                                                          	 0.000479841	 101       	 0         	 0         	 16.5021   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000338481	 100       	 0.738594  	 0         	 11.8175   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 50, fromLeft: 1)                               	 0.000282021	 100       	 0         	 0         	 41.9827   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 34.8292   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 34.8292   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 20.6759   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 13.0576   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 13.0562   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.593    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.5038   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.8103   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.40517   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.06393   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.774099  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.551779  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.123738  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0485561 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0143057 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00301057	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00300292	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000916091	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00088854	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338481	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22860555900800 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22860366080000 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22860164753536 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22859963427072 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22859762100608 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22859560774144 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22859359447680 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22859158121216 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22858956794752 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22858755468288 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22858554141824 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22858352815360 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22858151488896 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22857950162432 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22857748835968 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22857547509504 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22857346183040 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22857144856576 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22856943530112 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22856742203648 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22856540877184 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22856339550720 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22856138224256 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22855936897792 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22855735571328 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22855534244864 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22855332918400 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22855131591936 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22854930265472 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22854728939008 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22854527612544 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22854326286080 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22854124955520 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22853923629056 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22853722302592 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22853520976128 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22853319649664 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22853118323200 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22852916996736 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22852715670272 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22852514343808 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22852313017344 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22852111690880 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22851910364416 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22851709037952 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22851507711488 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22851306385024 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22851105058560 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22850903732096 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22850702405632 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22850501079168 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22850299752704 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22850098426240 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22849897099776 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22849695773312 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22849494446848 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22849293120384 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22849091793920 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22848890467456 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22848689140992 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22848487814528 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22848286488064 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22848085161600 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22860450240256 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22860443649792 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 7450)                                                                               	 11.4096   	 700       	 20.1595   	 0         	 1.10063   	 18.3164   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7450, m: 149)                                                                              	 10.4043   	 600       	 66.7672   	 0         	 1.03454   	 64.5378   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 149)                        	 1.28189   	 600       	 154.832   	 0         	 8.39625   	 18.4406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 149)	 0.954959  	 700       	 134.351   	 0         	 10.2464   	 13.112    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 149)                                                                              	 0.813535  	 100       	 47.7567   	 0         	 0.754583  	 63.2888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 149)                          	 0.700519  	 700       	 330.55    	 0         	 17.9251   	 18.4406   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 149, r2: 149, leftOrthog: 1)                      	 0.675254  	 600       	 293.929   	 0         	 23.9878   	 12.2533   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 2500)                                                                               	 0.612514  	 100       	 17.7628   	 0         	 1.00223   	 17.7233   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7450, m: 50)                                                                               	 0.498766  	 100       	 26.1395   	 0         	 1.19904   	 21.8004   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 99)                                                                                                         	 0.129457  	 808       	 0         	 0         	 48.9378   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 50, n: 50, r2: 149)                         	 0.0997508 	 100       	 111.282   	 0         	 11.9498   	 9.3125    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 149)                                                                                	 0.0835489 	 100       	 3.12093   	 0         	 0.167088  	 18.6784   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 50) 	 0.0751686 	 100       	 81.8227   	 0         	 10.5895   	 7.72676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 50)                         	 0.0603769 	 100       	 183.853   	 0         	 10.1655   	 18.086    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 50)                           	 0.0498672 	 100       	 222.601   	 0         	 23.9035   	 9.3125    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 149, r2: 149, leftOrthog: 1)                      	 0.0282785 	 100       	 392.542   	 0         	 32.8702   	 11.9422   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 50)                                                                                 	 0.0252496 	 100       	 2.62051   	 0         	 0.552881  	 4.73973   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0231022 	 100       	 161.24    	 0         	 38.8707   	 4.14811   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 149, fromLeft: 1)                              	 0.0140844 	 800       	 0         	 0         	 20.1764   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 1)  	 0.00625435	 100       	 0.238234  	 0         	 1.90613   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 2, r2: 1)                              	 0.00539836	 100       	 0.552019  	 0         	 3.31241   	 0.166652  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 149)  	 0.00331486	 100       	 66.9741   	 0         	 8.95386   	 7.47992   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 149, r2: 149)                            	 0.00225092	 100       	 98.6309   	 0         	 13.1861   	 7.47992   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00104854	 100       	 23.8427   	 0         	 5.72225   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000922917	 100       	 0.541761  	 0         	 2.16704   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 149)                            	 0.00088068	 100       	 0         	 0         	 13.535    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                          	 0.000582446	 101       	 0         	 0         	 13.7338   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 149)                                                                                                         	 0.000562304	 100       	 0         	 0         	 21.1985   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 149, leftOrthog: 1)                         	 0.00051331	 100       	 145.136   	 0         	 42.6253   	 3.40494   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 1)                                                                                                          	 0.000484733	 101       	 0         	 0         	 16.5023   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000326309	 100       	 0.766145  	 0         	 12.2583   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 50, fromLeft: 1)                               	 0.000276406	 100       	 0         	 0         	 43.125    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 37.0055   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 37.0054   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 21.5433   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 14.3632   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 14.3618   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 12.7448   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 12.0474   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 11.8002   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.44306   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.0397    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.758035  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.727148  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.131087  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0494031 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0143608 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00333467	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00325129	 4650      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000922917	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00088068	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326309	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23266365785984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23266173380608 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23265972054144 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23265770727680 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23265569401216 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23265368074752 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23265166748288 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23264965421824 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23264764095360 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23264562768896 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23264361442432 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23264160115968 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23263958789504 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23263757463040 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23263556136576 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23263354810112 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23263153483648 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23262952157184 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23262750830720 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23262549504256 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23262348177792 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23262146851328 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23261945524864 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23261744198400 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23261542871936 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23261341545472 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23261140219008 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23260938892544 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23260737566080 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23260536239616 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23260334913152 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23260133586688 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23259932256128 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23259730929664 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23259529603200 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23259328276736 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23259126950272 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23258925623808 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23258724297344 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23258522970880 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23258321644416 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23258120317952 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23257918991488 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23257717665024 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23257516338560 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23257315012096 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23257113685632 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23256912359168 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23256711032704 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23256509706240 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23256308379776 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23256107053312 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23255905726848 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23255704400384 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23255503073920 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23255301747456 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23255100420992 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23254899094528 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23254697768064 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23254496441600 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23254295115136 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23254093788672 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23253892462208 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23266260125440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23266253534976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 7500)                                                                               	 11.3285   	 700       	 20.7155   	 0         	 1.12344   	 18.4394   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7500, m: 150)                                                                              	 9.96377   	 600       	 71.1327   	 0         	 1.09484   	 64.971    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 150)                        	 1.31261   	 600       	 154.273   	 0         	 8.31016   	 18.5644   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 150)	 1.04026   	 700       	 126.171   	 0         	 9.54189   	 13.2228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 150)                                                                              	 0.804289  	 100       	 48.9563   	 0         	 0.76853   	 63.7012   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 150)                          	 0.768593  	 700       	 307.38    	 0         	 16.5575   	 18.5644   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 2500)                                                                               	 0.59924   	 100       	 18.3983   	 0         	 1.03151   	 17.8363   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7500, m: 50)                                                                               	 0.502288  	 100       	 26.1304   	 0         	 1.19859   	 21.8009   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 150, r2: 150, leftOrthog: 1)                      	 0.485579  	 600       	 417.028   	 0         	 33.8071   	 12.3355   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 100)                                                                                                       	 0.129348  	 808       	 0         	 0         	 49.9735   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 50, n: 50, r2: 150)                         	 0.102677  	 100       	 109.566   	 0         	 11.7455   	 9.32836   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 150)                                                                                	 0.081452  	 100       	 3.22276   	 0         	 0.172371  	 18.6966   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 50) 	 0.0799117 	 100       	 78.2113   	 0         	 10.0861   	 7.75434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 50)                         	 0.064201  	 100       	 175.231   	 0         	 9.62602   	 18.2039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 50)                           	 0.051732  	 100       	 217.467   	 0         	 23.3125   	 9.32836   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 50)                                                                                 	 0.024886  	 100       	 2.67888   	 0         	 0.564172  	 4.74833   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 150, r2: 150, leftOrthog: 1)                      	 0.0223586 	 100       	 503.162   	 0         	 41.863    	 12.0192   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0154044 	 100       	 243.437   	 0         	 58.6845   	 4.14823   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 150, fromLeft: 1)                              	 0.0144531 	 800       	 0         	 0         	 19.9265   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 1)  	 0.00535479	 100       	 0.280123  	 0         	 2.24128   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 2, r2: 1)                              	 0.00445647	 100       	 0.673179  	 0         	 4.03943   	 0.166652  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 150)  	 0.00347792	 100       	 64.6939   	 0         	 8.62585   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 150, r2: 150)                            	 0.00237447	 100       	 94.7579   	 0         	 12.6344   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.001006  	 100       	 24.8508   	 0         	 5.96419   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 150)                            	 0.000898091	 100       	 0         	 0         	 13.3617   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000890896	 100       	 0.561233  	 0         	 2.24493   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 150, leftOrthog: 1)                         	 0.000599806	 100       	 125.04    	 0         	 36.6785   	 3.40909   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.000591795	 101       	 0         	 0         	 13.6534   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 150)                                                                                                         	 0.000546443	 100       	 0         	 0         	 21.9602   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                                                         	 0.000480947	 101       	 0         	 0         	 16.8002   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000337938	 100       	 0.739781  	 0         	 11.8365   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 50, fromLeft: 1)                               	 0.000282427	 100       	 0         	 0         	 42.4889   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 36.3147   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 36.3147   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 21.4594   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 13.6961   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 13.6948   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 12.0389   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.9526   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 11.3518   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 1.48049   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 1.129     	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.827156  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.523941  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.130968  	 1110      
<PITTS::Tensor3<double>> :: void PITTS::randomize(Tensor3<T>&) [with T = double]                                                                                                               	 0.0499965 	 20        
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0147355 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0067405 	 4650      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00322801	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000898091	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000890896	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337938	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
